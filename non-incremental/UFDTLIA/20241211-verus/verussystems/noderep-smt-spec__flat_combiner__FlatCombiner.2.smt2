(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.init. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids. FuelId)
(declare-const fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.is_Idle. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.is_Waiting. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.is_Empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.is_InProgress. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.get_InProgress_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%4.get_ReqId. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.is_Collecting. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.is_Responding. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.get_Responding_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.get_Responding_1. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%7.req_len. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%7.req_is_none. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.choose. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.init. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids. fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress. fuel%lib!spec.flat_combiner.impl&%0.is_Idle. fuel%lib!spec.flat_combiner.impl&%0.is_Waiting. fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0. fuel%lib!spec.flat_combiner.impl&%2.is_Empty. fuel%lib!spec.flat_combiner.impl&%2.is_InProgress. fuel%lib!spec.flat_combiner.impl&%2.get_InProgress_0. fuel%lib!spec.flat_combiner.impl&%4.get_ReqId. fuel%lib!spec.flat_combiner.impl&%5.is_Collecting. fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0. fuel%lib!spec.flat_combiner.impl&%5.is_Responding. fuel%lib!spec.flat_combiner.impl&%5.get_Responding_0. fuel%lib!spec.flat_combiner.impl&%5.get_Responding_1. fuel%lib!spec.flat_combiner.impl&%7.req_len. fuel%lib!spec.flat_combiner.impl&%7.req_is_none.))
(declare-sort vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<nat.>.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!state_machine_internal.NoCopy. 0)
(declare-sort vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!spec.flat_combiner.FlatCombiner.State. 0) (lib!spec.flat_combiner.FlatCombiner.Step. 0) (lib!spec.flat_combiner.FlatCombiner.Config. 0) (lib!spec.flat_combiner.FlatCombiner.Instance. 0) (lib!spec.flat_combiner.FlatCombiner.clients. 0) (lib!spec.flat_combiner.FlatCombiner.clients_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.slots. 0) (lib!spec.flat_combiner.FlatCombiner.slots_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.combiner. 0) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data. 0) (lib!spec.flat_combiner.ClientState. 0) (lib!spec.flat_combiner.SlotState. 0) (lib!spec.flat_combiner.CombinerState. 0) (tuple%0. 0) (tuple%2. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!spec.flat_combiner.FlatCombiner.State./State (lib!spec.flat_combiner.FlatCombiner.State./State/?num_threads Int) (lib!spec.flat_combiner.FlatCombiner.State./State/?clients vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.) (lib!spec.flat_combiner.FlatCombiner.State./State/?slots vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.) (lib!spec.flat_combiner.FlatCombiner.State./State/?combiner lib!spec.flat_combiner.CombinerState.))) ((lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty ) (lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request ) (lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start ) (lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty ) (lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result ) (lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done ) (lib!spec.flat_combiner.FlatCombiner.Step./send_request (lib!spec.flat_combiner.FlatCombiner.Step./send_request/?0 Int) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/?1 Int)) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/?0 Int) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/?1 Int)) (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/?0 lib!spec.flat_combiner.FlatCombiner.State.))) ((lib!spec.flat_combiner.FlatCombiner.Config./initialize (lib!spec.flat_combiner.FlatCombiner.Config./initialize/?0 Int)) (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/?0 lib!spec.flat_combiner.FlatCombiner.State.))) ((lib!spec.flat_combiner.FlatCombiner.Instance./Instance (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/?send_sync vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/?state lib!spec.flat_combiner.FlatCombiner.State.) (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/?location Int))) ((lib!spec.flat_combiner.FlatCombiner.clients./clients (lib!spec.flat_combiner.FlatCombiner.clients./clients/?dummy_instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.clients./clients/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key Int) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value lib!spec.flat_combiner.ClientState.))) ((lib!spec.flat_combiner.FlatCombiner.slots./slots (lib!spec.flat_combiner.FlatCombiner.slots./slots/?dummy_instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.slots./slots/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?key Int) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?value lib!spec.flat_combiner.SlotState.))) ((lib!spec.flat_combiner.FlatCombiner.combiner./combiner (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/?dummy_instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?value lib!spec.flat_combiner.CombinerState.))) ((lib!spec.flat_combiner.ClientState./Idle ) (lib!spec.flat_combiner.ClientState./Waiting (lib!spec.flat_combiner.ClientState./Waiting/?0 Int))) ((lib!spec.flat_combiner.SlotState./Empty ) (lib!spec.flat_combiner.SlotState./Request (lib!spec.flat_combiner.SlotState./Request/?0 Int)) (lib!spec.flat_combiner.SlotState./InProgress (lib!spec.flat_combiner.SlotState./InProgress/?0 Int)) (lib!spec.flat_combiner.SlotState./Response (lib!spec.flat_combiner.SlotState./Response/?0 Int))) ((lib!spec.flat_combiner.CombinerState./Collecting (lib!spec.flat_combiner.CombinerState./Collecting/?0 vstd!seq.Seq<core!option.Option<nat.>.>.)) (lib!spec.flat_combiner.CombinerState./Responding (lib!spec.flat_combiner.CombinerState./Responding/?0 vstd!seq.Seq<core!option.Option<nat.>.>.) (lib!spec.flat_combiner.CombinerState./Responding/?1 Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (lib!spec.flat_combiner.FlatCombiner.State.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.State./State/clients (lib!spec.flat_combiner.FlatCombiner.State.) vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.State./State/slots (lib!spec.flat_combiner.FlatCombiner.State.) vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.State./State/combiner (lib!spec.flat_combiner.FlatCombiner.State.) lib!spec.flat_combiner.CombinerState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (lib!spec.flat_combiner.FlatCombiner.Step.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (lib!spec.flat_combiner.FlatCombiner.Step.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (lib!spec.flat_combiner.FlatCombiner.Step.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (lib!spec.flat_combiner.FlatCombiner.Step.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 (lib!spec.flat_combiner.FlatCombiner.Step.) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 (lib!spec.flat_combiner.FlatCombiner.Config.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 (lib!spec.flat_combiner.FlatCombiner.Config.) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Instance./Instance/send_sync (lib!spec.flat_combiner.FlatCombiner.Instance.) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Instance./Instance/state (lib!spec.flat_combiner.FlatCombiner.Instance.) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.Instance./Instance/location (lib!spec.flat_combiner.FlatCombiner.Instance.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients./clients/dummy_instance (lib!spec.flat_combiner.FlatCombiner.clients.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients./clients/no_copy (lib!spec.flat_combiner.FlatCombiner.clients.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.ClientState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots./slots/dummy_instance (lib!spec.flat_combiner.FlatCombiner.slots.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots./slots/no_copy (lib!spec.flat_combiner.FlatCombiner.slots.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) lib!spec.flat_combiner.SlotState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.combiner./combiner/dummy_instance (lib!spec.flat_combiner.FlatCombiner.combiner.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.combiner./combiner/no_copy (lib!spec.flat_combiner.FlatCombiner.combiner.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance (lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) lib!spec.flat_combiner.CombinerState.)
(declare-fun lib!spec.flat_combiner.ClientState./Waiting/0 (lib!spec.flat_combiner.ClientState.) Int)
(declare-fun lib!spec.flat_combiner.SlotState./Request/0 (lib!spec.flat_combiner.SlotState.) Int)
(declare-fun lib!spec.flat_combiner.SlotState./InProgress/0 (lib!spec.flat_combiner.SlotState.) Int)
(declare-fun lib!spec.flat_combiner.SlotState./Response/0 (lib!spec.flat_combiner.SlotState.) Int)
(declare-fun lib!spec.flat_combiner.CombinerState./Collecting/0 (lib!spec.flat_combiner.CombinerState.) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun lib!spec.flat_combiner.CombinerState./Responding/0 (lib!spec.flat_combiner.CombinerState.) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun lib!spec.flat_combiner.CombinerState./Responding/1 (lib!spec.flat_combiner.CombinerState.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. (Dcr Type) Type)
(declare-const TYPE%vstd!state_machine_internal.NoCopy. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.State. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.Step. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.Config. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.slots. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.combiner. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.ClientState. Type)
(declare-const TYPE%lib!spec.flat_combiner.SlotState. Type)
(declare-const TYPE%lib!spec.flat_combiner.CombinerState. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (Poly) vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. (vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. (Poly) vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. (vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. (Poly) vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (Poly) vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq<core!option.Option<nat.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!state_machine_internal.NoCopy. (vstd!state_machine_internal.NoCopy.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.NoCopy. (Poly) vstd!state_machine_internal.NoCopy.)
(declare-fun Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (Poly) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.State.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.State. (Poly) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.Step. (Poly) lib!spec.flat_combiner.FlatCombiner.Step.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.Config. (lib!spec.flat_combiner.FlatCombiner.Config.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.Config. (Poly) lib!spec.flat_combiner.FlatCombiner.Config.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.Instance.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!spec.flat_combiner.FlatCombiner.clients.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!spec.flat_combiner.FlatCombiner.slots.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.slots_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!spec.flat_combiner.FlatCombiner.combiner.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.ClientState. (Poly) lib!spec.flat_combiner.ClientState.)
(declare-fun Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.SlotState. (Poly) lib!spec.flat_combiner.SlotState.)
(declare-fun Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.CombinerState. (Poly) lib!spec.flat_combiner.CombinerState.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.ClientState.)) (= x (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.ClientState.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.ClientState.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) (= x (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) (= x (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.SlotState.)) (= x (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.SlotState.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.SlotState.))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<nat.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT))) (= x (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT)))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<nat.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT)))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (= x (%Poly%vstd!state_machine_internal.NoCopy. (Poly%vstd!state_machine_internal.NoCopy. x))) :pattern ((Poly%vstd!state_machine_internal.NoCopy. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!state_machine_internal.NoCopy.) (= x (Poly%vstd!state_machine_internal.NoCopy. (%Poly%vstd!state_machine_internal.NoCopy. x)))) :pattern ((has_type x TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.) :pattern ((has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)) (! (= x (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x))) :pattern ((Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.)) (= x (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x)))) :pattern ((has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.))) )))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)) (! (has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.)) :pattern ((has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.State.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.State. (Poly%lib!spec.flat_combiner.FlatCombiner.State. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.State.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.State. (%Poly%lib!spec.flat_combiner.FlatCombiner.State. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) )))
(assert (forall ((_num_threads! Int) (_clients! vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.) (_slots! vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.) (_combiner! lib!spec.flat_combiner.CombinerState.)) (! (=> (and (<= 0 _num_threads!) (has_type (Poly%lib!spec.flat_combiner.CombinerState. _combiner!) TYPE%lib!spec.flat_combiner.CombinerState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.State./State _num_threads! _clients! _slots! _combiner!)) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.State./State _num_threads! _clients! _slots! _combiner!)) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads x) (lib!spec.flat_combiner.FlatCombiner.State./State/?num_threads x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.State./State/num_threads x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.State.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients x) (lib!spec.flat_combiner.FlatCombiner.State./State/?clients x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.State./State/clients x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots x) (lib!spec.flat_combiner.FlatCombiner.State./State/?slots x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.State./State/slots x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner x) (lib!spec.flat_combiner.FlatCombiner.State./State/?combiner x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.State./State/combiner x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.State.) (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. x))) TYPE%lib!spec.flat_combiner.CombinerState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Step.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. (Poly%lib!spec.flat_combiner.FlatCombiner.Step. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.))
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.))
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.))
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.))
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.))
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.))
(assert (forall ((_0! Int) (_1! Int)) (! (=> (and (<= 0 _0!) (<= 0 _1!)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step./send_request _0! _1!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step./send_request _0! _1!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Step.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 x) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/?0 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Step.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 x) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/?1 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((_0! Int) (_1! Int)) (! (=> (and (<= 0 _0!) (<= 0 _1!)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step./recv_response _0! _1!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step./recv_response _0! _1!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Step.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 x) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/?0 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Step.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 x) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/?1 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((_0! lib!spec.flat_combiner.FlatCombiner.State.)) (! (=> (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. _0!) TYPE%lib!spec.flat_combiner.FlatCombiner.State.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params _0!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Step. (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params _0!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Step.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 x) (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Step.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Config.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. (Poly%lib!spec.flat_combiner.FlatCombiner.Config. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.Config. (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Config. (lib!spec.flat_combiner.FlatCombiner.Config./initialize _0!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Config. (lib!spec.flat_combiner.FlatCombiner.Config./initialize _0!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Config.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 x) (lib!spec.flat_combiner.FlatCombiner.Config./initialize/?0 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) )))
(assert (forall ((_0! lib!spec.flat_combiner.FlatCombiner.State.)) (! (=> (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. _0!) TYPE%lib!spec.flat_combiner.FlatCombiner.State.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Config. (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params _0!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Config. (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params _0!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Config.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 x) (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Config.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) )))
(assert (forall ((_send_sync! vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) (_state! lib!spec.flat_combiner.FlatCombiner.State.) (_location! Int)) (! (=> (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. _state!) TYPE%lib!spec.flat_combiner.FlatCombiner.State.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.Instance./Instance _send_sync! _state! _location!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.Instance./Instance _send_sync! _state! _location!)) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/send_sync x) (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/?send_sync x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Instance./Instance/send_sync x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/state x) (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/?state x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Instance./Instance/state x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/state (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Instance./Instance/state (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/location x) (lib!spec.flat_combiner.FlatCombiner.Instance./Instance/?location x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.Instance./Instance/location x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) )))
(assert (forall ((_dummy_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. _dummy_instance!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!spec.flat_combiner.FlatCombiner.clients./clients _dummy_instance! _no_copy!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!spec.flat_combiner.FlatCombiner.clients./clients _dummy_instance! _no_copy!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients./clients/dummy_instance x) (lib!spec.flat_combiner.FlatCombiner.clients./clients/?dummy_instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients./clients/dummy_instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.clients./clients/dummy_instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients./clients/dummy_instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients./clients/no_copy x) (lib!spec.flat_combiner.FlatCombiner.clients./clients/?no_copy x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients./clients/no_copy x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_key! Int) (_value! lib!spec.flat_combiner.ClientState.)) (! (=> (and (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. _instance!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (<= 0 _key!) (has_type (Poly%lib!spec.flat_combiner.ClientState. _value!) TYPE%lib!spec.flat_combiner.ClientState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) )))
(assert (forall ((_dummy_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. _dummy_instance!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!spec.flat_combiner.FlatCombiner.slots./slots _dummy_instance! _no_copy!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!spec.flat_combiner.FlatCombiner.slots./slots _dummy_instance! _no_copy!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots./slots/dummy_instance x) (lib!spec.flat_combiner.FlatCombiner.slots./slots/?dummy_instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots./slots/dummy_instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.slots./slots/dummy_instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots./slots/dummy_instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots./slots/no_copy x) (lib!spec.flat_combiner.FlatCombiner.slots./slots/?no_copy x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots./slots/no_copy x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_key! Int) (_value! lib!spec.flat_combiner.SlotState.)) (! (=> (and (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. _instance!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (<= 0 _key!) (has_type (Poly%lib!spec.flat_combiner.SlotState. _value!) TYPE%lib!spec.flat_combiner.SlotState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key x) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?key x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x))) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) )))
(assert (forall ((_dummy_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. _dummy_instance!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!spec.flat_combiner.FlatCombiner.combiner./combiner _dummy_instance! _no_copy!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!spec.flat_combiner.FlatCombiner.combiner./combiner _dummy_instance! _no_copy!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/dummy_instance x) (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/?dummy_instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner./combiner/dummy_instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/dummy_instance (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner./combiner/dummy_instance (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/no_copy x) (lib!spec.flat_combiner.FlatCombiner.combiner./combiner/?no_copy x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner./combiner/no_copy x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_value! lib!spec.flat_combiner.CombinerState.)) (! (=> (and (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. _instance!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (has_type (Poly%lib!spec.flat_combiner.CombinerState. _value!) TYPE%lib!spec.flat_combiner.CombinerState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data _instance! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data _instance! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x))) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x))) TYPE%lib!spec.flat_combiner.CombinerState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= x (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. x))) :pattern ((Poly%lib!spec.flat_combiner.ClientState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (= x (Poly%lib!spec.flat_combiner.ClientState. (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.ClientState.)) )))
(assert (has_type (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle) TYPE%lib!spec.flat_combiner.ClientState.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)) )))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= (lib!spec.flat_combiner.ClientState./Waiting/0 x) (lib!spec.flat_combiner.ClientState./Waiting/?0 x)) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (<= 0 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)) (has_type x TYPE%lib!spec.flat_combiner.ClientState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= x (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. x))) :pattern ((Poly%lib!spec.flat_combiner.SlotState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (= x (Poly%lib!spec.flat_combiner.SlotState. (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (has_type (Poly%lib!spec.flat_combiner.SlotState. lib!spec.flat_combiner.SlotState./Empty) TYPE%lib!spec.flat_combiner.SlotState.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Request _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Request _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= (lib!spec.flat_combiner.SlotState./Request/0 x) (lib!spec.flat_combiner.SlotState./Request/?0 x)) :pattern ((lib!spec.flat_combiner.SlotState./Request/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. x)) (has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= (lib!spec.flat_combiner.SlotState./InProgress/0 x) (lib!spec.flat_combiner.SlotState./InProgress/?0 x)) :pattern ((lib!spec.flat_combiner.SlotState./InProgress/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. x)) (has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= (lib!spec.flat_combiner.SlotState./Response/0 x) (lib!spec.flat_combiner.SlotState./Response/?0 x)) :pattern ((lib!spec.flat_combiner.SlotState./Response/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.SlotState./Response/0 (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((lib!spec.flat_combiner.SlotState./Response/0 (%Poly%lib!spec.flat_combiner.SlotState. x)) (has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= x (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. x))) :pattern ((Poly%lib!spec.flat_combiner.CombinerState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.CombinerState.) (= x (Poly%lib!spec.flat_combiner.CombinerState. (%Poly%lib!spec.flat_combiner.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((_0! vstd!seq.Seq<core!option.Option<nat.>.>.)) (! (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Collecting _0!)) TYPE%lib!spec.flat_combiner.CombinerState.) :pattern ((has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Collecting _0!)) TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= (lib!spec.flat_combiner.CombinerState./Collecting/0 x) (lib!spec.flat_combiner.CombinerState./Collecting/?0 x)) :pattern ((lib!spec.flat_combiner.CombinerState./Collecting/0 x)) )))
(assert (forall ((_0! vstd!seq.Seq<core!option.Option<nat.>.>.) (_1! Int)) (! (=> (<= 0 _1!) (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Responding _0! _1!)) TYPE%lib!spec.flat_combiner.CombinerState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Responding _0! _1!)) TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= (lib!spec.flat_combiner.CombinerState./Responding/0 x) (lib!spec.flat_combiner.CombinerState./Responding/?0 x)) :pattern ((lib!spec.flat_combiner.CombinerState./Responding/0 x)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= (lib!spec.flat_combiner.CombinerState./Responding/1 x) (lib!spec.flat_combiner.CombinerState./Responding/?1 x)) :pattern ((lib!spec.flat_combiner.CombinerState./Responding/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.CombinerState.) (<= 0 (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. x)))) :pattern ((lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. x)) (has_type x TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) )))
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!spec.flat_combiner.FlatCombiner.State.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.slots_token_data.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.next.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.init.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress.? (Poly Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%0.is_Idle.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%0.is_Waiting.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%0.get_Waiting_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.impl&%2.is_Empty.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%2.is_InProgress.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%2.get_InProgress_0.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.impl&%4.get_ReqId.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.impl&%5.is_Collecting.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%5.get_Collecting_0.? (Poly) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun lib!spec.flat_combiner.impl&%5.is_Responding.? (Poly) Bool)
(declare-fun lib!spec.flat_combiner.impl&%5.get_Responding_0.? (Poly) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun lib!spec.flat_combiner.impl&%5.get_Responding_1.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.impl&%7.req_len.? (Poly) Int)
(declare-fun lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%27 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%28 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%29 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%31 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%35 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%37 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%41 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%43 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.is_Collecting.))
(define-fun is-lib!spec.flat_combiner.CombinerState./Collecting_ ((c lib!spec.flat_combiner.CombinerState.)) Bool ((_ is lib!spec.flat_combiner.CombinerState./Collecting) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.is_Collecting.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.is_Collecting.? self!) (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.is_Collecting.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.get_Collecting_0.? self!) (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.get_Collecting_0.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty.))
(define-fun is-lib!spec.flat_combiner.SlotState./Empty_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./Empty) c))
(define-fun is-lib!spec.flat_combiner.SlotState./Response_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./Response) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (or (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$) (is-lib!spec.flat_combiner.SlotState./Response_ tmp%%$)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (Poly%core!option.Option. core!option.Option./None)))))) (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$)))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request.))
(define-fun is-lib!spec.flat_combiner.SlotState./Request_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./Request) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (and (=> tmp_assert$ (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (and (is-lib!spec.flat_combiner.SlotState./Request_ tmp%%$) (let ((rid$ (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp%%$))))) true))))) (let ((rid$ (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (ite (is-lib!spec.flat_combiner.SlotState./Request_ tmp%%$) (let ((rid$2 (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp%%$))))) rid$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) (I tid$)))))) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress (%I (I rid$)))))))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (Poly%core!option.Option. (core!option.Option./Some (I rid$)))))))) (and (=> tmp_assert$1 (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$)) (=> tmp_assert$1 (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2)))))))))) (let ((tmp_assert$2 (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (let ((tmp_assert$3 (let ((rid$ (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (ite (is-lib!spec.flat_combiner.SlotState./Request_ tmp%%$) (let ((rid$4 (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp%%$))))) rid$4) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_slots$3 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$3)) (I tid$)))))) (let ((update_tmp_slots$4 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$3) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress (%I (I rid$)))))))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (Poly%core!option.Option. (core!option.Option./Some (I rid$)))))))) tmp_assert$4))))))) tmp_assert$3)))) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$)) (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I 0))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.is_Responding.))
(define-fun is-lib!spec.flat_combiner.CombinerState./Responding_ ((c lib!spec.flat_combiner.CombinerState.)) Bool ((_ is lib!spec.flat_combiner.CombinerState./Responding) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.is_Responding.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.is_Responding.? self!) (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.is_Responding.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.get_Responding_1.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.get_Responding_1.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.get_Responding_1.? self!) (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.get_Responding_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.CombinerState.) (<= 0 (lib!spec.flat_combiner.impl&%5.get_Responding_1.? self!))) :pattern ((lib!spec.flat_combiner.impl&%5.get_Responding_1.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%7.req_len.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%7.req_len.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%7.req_len.? self!) (ite (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. self!)) (let ((reqs$ (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!)))) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. reqs$))) (let ((reqs$ (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!)))) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. reqs$))))) :pattern ((lib!spec.flat_combiner.impl&%7.req_len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.CombinerState.) (<= 0 (lib!spec.flat_combiner.impl&%7.req_len.? self!))) :pattern ((lib!spec.flat_combiner.impl&%7.req_len.? self!)) )))
(declare-fun req%lib!spec.flat_combiner.impl&%7.req_is_none. (Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((self! Poly) (tid! Poly)) (! (= (req%lib!spec.flat_combiner.impl&%7.req_is_none. self! tid!) (=> %%global_location_label%%44 (and (<= 0 (%I tid!)) (< (%I tid!) (lib!spec.flat_combiner.impl&%7.req_len.? self!))))) :pattern ((req%lib!spec.flat_combiner.impl&%7.req_is_none. self! tid!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%7.req_is_none.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%7.req_is_none.) (forall ((self! Poly) (tid! Poly)) (! (= (lib!spec.flat_combiner.impl&%7.req_is_none.? self! tid!) (%B (ite (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. self!)) (let ((reqs$ (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!)))) (B (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. reqs$) tid!))))) (let ((reqs$ (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!)))) (B (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. reqs$) tid!)))))))) :pattern ((lib!spec.flat_combiner.impl&%7.req_is_none.? self! tid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.get_Responding_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.get_Responding_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.get_Responding_0.? self!) (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.get_Responding_0.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (and (< tid$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (and (lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (I tid$)) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I (nClip (Add tid$ 1))))))) (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result.))
(define-fun is-lib!spec.flat_combiner.SlotState./InProgress_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./InProgress) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (and (=> tmp_assert$ (< tid$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (=> tmp_assert$ (not (lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (I tid$)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I (nClip (Add tid$ 1))))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$))) (and (let ((r$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((tmp_for_match_0$ r$)) (let ((tmp_assert$1 (and tmp_assert$ (and (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$ (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) true))))) (let ((rid$ (ite (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$2 (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) rid$2) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (let ((tmp_assert$2 (and tmp_assert$1 (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (I tid$))))) rid$)))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) (I tid$)))))) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I (I rid$)))))))) (=> tmp_assert$3 (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2)))))))))) (let ((tmp_assert$4 (let ((r$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((update_tmp_slots$3 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((tmp_assert$5 (let ((tmp_for_match_0$ r$)) (let ((tmp_assert$6 (and tmp_assert$ (and (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$ (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) true))))) (let ((tmp_assert$7 (let ((rid$ (ite (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$5 (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) rid$5) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (let ((tmp_assert$8 (and tmp_assert$6 (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (I tid$))))) rid$)))) (let ((tmp_assert$9 (and tmp_assert$8 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$3)) (I tid$)))))) (let ((update_tmp_slots$4 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$3) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I (I rid$)))))))) tmp_assert$9)))))) tmp_assert$7))))) tmp_assert$5))))) (=> tmp_assert$4 (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$))))))))) (let ((tmp_assert$10 (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I (nClip (Add tid$ 1))))))) (let ((tmp_assert$11 (let ((r$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((update_tmp_slots$5 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((tmp_assert$12 (let ((tmp_for_match_0$ r$)) (let ((tmp_assert$13 (and tmp_assert$ (and (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$ (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) true))))) (let ((tmp_assert$14 (let ((rid$ (ite (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$8 (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) rid$8) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (let ((tmp_assert$15 (and tmp_assert$13 (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (I tid$))))) rid$)))) (let ((tmp_assert$16 (and tmp_assert$15 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$5)) (I tid$)))))) (let ((update_tmp_slots$6 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$5) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I (I rid$)))))))) tmp_assert$16)))))) tmp_assert$14))))) tmp_assert$12))))) tmp_assert$11))))) (and (=> tmp_assert$10 (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$)) (=> tmp_assert$10 (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (= (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.empty.? $ (TYPE%core!option.Option. $ NAT)))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request.))
(define-fun is-lib!spec.flat_combiner.ClientState./Idle_ ((c lib!spec.flat_combiner.ClientState.)) Bool ((_ is lib!spec.flat_combiner.ClientState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request.) (forall ((pre! Poly) (post! Poly) (tid! Poly) (rid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request.? pre! post! tid! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$)) tid!) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (is-lib!spec.flat_combiner.ClientState./Idle_ tmp%%$))) (let ((update_tmp_clients$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1)) tid!))))) (let ((update_tmp_clients$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1) tid! (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting (%I rid!))))))) (and (=> tmp_assert$1 (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) tid!) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$)))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) tid!))))) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) tid! (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Request (%I rid!))))))) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2)) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$2)) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$)) (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request.? pre! post! tid! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response.) (forall ((pre! Poly) (post! Poly) (tid! Poly) (rid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response.? pre! post! tid! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid! (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting (%I rid!)))) (let ((update_tmp_clients$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1)) tid!))))) (let ((update_tmp_clients$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1) tid! (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle))))) (and (=> tmp_assert$1 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid! (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I rid!))))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) tid!))))) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) tid! (Poly%lib!spec.flat_combiner.SlotState. lib!spec.flat_combiner.SlotState./Empty))))) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2)) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$2)) (and (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$)) (=> tmp_assert$2 (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response.? pre! post! tid! rid!)) ))))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./send_request_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./send_request) c))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./recv_response_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./recv_response) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by.? pre! post! step!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./send_request_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (let ((tid$ (lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (let ((rid$ (lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request.? pre! post! (I tid$) (I rid$)))) (and (is-lib!spec.flat_combiner.FlatCombiner.Step./recv_response_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (let ((tid$ (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (let ((rid$ (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response.? pre! post! (I tid$) (I rid$))))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by.? pre! post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.next.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by.? pre! post! step$)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.next_by.? pre! post! step$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.next.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.))
(declare-fun %%lambda%%0 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0) i$) (B (< (%I i$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0) i$)))))
(declare-fun %%lambda%%1 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0) i$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0) i$)))))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.) (forall ((post! Poly) (num_threads! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.? post! num_threads!) (let ((update_tmp_num_threads$ (%I num_threads!))) (let ((update_tmp_clients$ (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.flat_combiner.ClientState.) (Poly%fun%1. (mk_fun (%%lambda%%0 (%I num_threads!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle)))))))) (let ((update_tmp_slots$ (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.flat_combiner.SlotState.) (Poly%fun%1. (mk_fun (%%lambda%%0 (%I num_threads!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.flat_combiner.SlotState. lib!spec.flat_combiner.SlotState./Empty)))))))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.empty.? $ (TYPE%core!option.Option. $ NAT)))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.? post! num_threads!)) ))))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Config./initialize_ ((c lib!spec.flat_combiner.FlatCombiner.Config.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by.? post! step!) (and (is-lib!spec.flat_combiner.FlatCombiner.Config./initialize_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. step!)) (let ((num_threads$ (lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. step!)))) (lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.? post! (I num_threads$))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by.? post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.init.) (forall ((post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by.? post! step$)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.init_by.? post! step$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.init.? post!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%4.arbitrary. (Int lib!spec.flat_combiner.FlatCombiner.clients.) Bool)
(assert (forall ((no%param Int) (%return! lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%4.arbitrary. no%param %return!) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. %return!) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%4.arbitrary. no%param %return!)) )))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? self!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%5.arbitrary. (Int lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(assert (forall ((no%param Int) (%return! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%5.arbitrary. no%param %return!) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. %return!) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%5.arbitrary. no%param %return!)) )))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? self!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%6.arbitrary. (Int lib!spec.flat_combiner.FlatCombiner.combiner.) Bool)
(assert (forall ((no%param Int) (%return! lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%6.arbitrary. no%param %return!) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. %return!) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%6.arbitrary. no%param %return!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.clone. (lib!spec.flat_combiner.FlatCombiner.Instance. lib!spec.flat_combiner.FlatCombiner.Instance.) Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (s! lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.clone. self! s!) (and (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. s!) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (= self! s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.clone. self! s!)) )))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.? self!) (and (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$) (< (%I i$) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$) (< (%I i$) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$)) )))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_complete. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_complete. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_complete. s!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_complete. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_complete. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_complete. s!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.is_Idle.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.is_Idle.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.is_Idle.? self!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.is_Idle.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.is_Empty.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.is_Empty.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.is_Empty.? self!) (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.is_Empty.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$) (= (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))) (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_slot_empty. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_slot_empty. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_slot_empty. s!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_slot_empty. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_slot_empty. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_slot_empty. s!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.is_Waiting.))
(define-fun is-lib!spec.flat_combiner.ClientState./Waiting_ ((c lib!spec.flat_combiner.ClientState.)) Bool ((_ is lib!spec.flat_combiner.ClientState./Waiting) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.is_Waiting.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.is_Waiting.? self!) (is-lib!spec.flat_combiner.ClientState./Waiting_ (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.is_Waiting.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!) (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.ClientState.) (<= 0 (lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!))) :pattern ((lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%4.get_ReqId.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%4.get_ReqId.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%4.get_ReqId.? self!) (ite (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. self!)) (%I (vstd!pervasive.arbitrary.? $ NAT)) (ite (is-lib!spec.flat_combiner.SlotState./Request_ (%Poly%lib!spec.flat_combiner.SlotState. self!)) (let ((reqid$ (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. self!)))) reqid$) (ite (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. self!)) (let ((reqid$ (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. self!)))) reqid$) (let ((reqid$ (lib!spec.flat_combiner.SlotState./Response/0 (%Poly%lib!spec.flat_combiner.SlotState. self!)))) reqid$))))) :pattern ((lib!spec.flat_combiner.impl&%4.get_ReqId.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.impl&%4.get_ReqId.? self!))) :pattern ((lib!spec.flat_combiner.impl&%4.get_ReqId.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$) (is-lib!spec.flat_combiner.ClientState./Waiting_ (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)))) (= (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))) (lib!spec.flat_combiner.impl&%4.get_ReqId.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) i$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_reqids. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_reqids. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_reqids. s!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_reqids. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_reqids. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_client_reqids. s!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.? self!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) (ite (is-lib!spec.flat_combiner.CombinerState./Collecting_ tmp%%$) (let ((elems$ (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (<= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) (let ((elems$ (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (and (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) (<= idx$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_elements. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_elements. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_elements. s!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_elements. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_elements. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_elements. s!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.is_InProgress.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.is_InProgress.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.is_InProgress.? self!) (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.is_InProgress.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.? self!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) (ite (is-lib!spec.flat_combiner.CombinerState./Collecting_ tmp%%$) (let ((elems$ (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (and (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$) i$)))))) (not (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)) (%I i$)) (< (%I i$) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) (not (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)) )))) (let ((elems$ (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (and (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$) i$)))))) (not (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) idx$)) (not (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)) )))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_slots_not_in_progress. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_slots_not_in_progress. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_slots_not_in_progress. s!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_slots_not_in_progress. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_slots_not_in_progress. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_slots_not_in_progress. s!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.get_InProgress_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.get_InProgress_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.get_InProgress_0.? self!) (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.get_InProgress_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.impl&%2.get_InProgress_0.? self!))) :pattern ((lib!spec.flat_combiner.impl&%2.get_InProgress_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.? self!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!)))) (ite (is-lib!spec.flat_combiner.CombinerState./Collecting_ tmp%%$) (let ((elems$ (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$) i$)))))) (and (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))) (= (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$) i$)))))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)) ))) (let ((elems$ (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (let ((idx$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. tmp%%$))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (and (<= idx$ (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$)))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$) i$)))))) (and (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))) (= (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. elems$) i$)))))))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. self!))) i$)) ))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_request_ids. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_request_ids. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_request_ids. s!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_request_ids. (lib!spec.flat_combiner.FlatCombiner.State.) Bool)
(assert (forall ((s! lib!spec.flat_combiner.FlatCombiner.State.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_request_ids. s!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. s!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.lemma_msg_inv_combiner_request_ids. s!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_send_request_1.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_recv_response_1.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_empty.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_collect_request.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_start.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_empty.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_result.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_combiner_responding_done.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./send_request_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_send_request.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_send_request_1.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./recv_response_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_recv_response.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_recv_response_1.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params_ ((c lib!spec.flat_combiner.FlatCombiner.Step.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.is_dummy_to_use_type_params.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%1.get_dummy_to_use_type_params_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_initialize_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Config./initialize_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%3.is_initialize.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Config./initialize/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%3.get_initialize_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params_ ((c lib!spec.flat_combiner.FlatCombiner.Config.)) Bool ((_ is lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%3.is_dummy_to_use_type_params.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!spec.flat_combiner.FlatCombiner.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Config. self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.Config.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. (lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.State.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%3.get_dummy_to_use_type_params_0.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map!) key$) (and (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map! key$))))) (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. instance!)) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map! key$))))) (%I key$))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map! key$))))) (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map! key$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree.? token_map! m! instance!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients. token_map!) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. m!)) (lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree.? token_map! m! instance!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict.? token_map! m! instance!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map!) key$) (and (and (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map! key$))))) (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. instance!)) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map! key$))))) (%I key$))) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map! key$))))) (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map! key$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree.? token_map! m! instance!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots. token_map!) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. m!)) (lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree.? token_map! m! instance!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict.? token_map! m! instance!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled.) (forall ((num_threads! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled.? num_threads!) true) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_enabled.? num_threads!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (or (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$) (is-lib!spec.flat_combiner.SlotState./Response_ tmp%%$)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (Poly%core!option.Option. core!option.Option./None)))))) (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$)))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled.) (forall ((pre! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled.? pre!) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (or (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$) (is-lib!spec.flat_combiner.SlotState./Response_ tmp%%$)))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_enabled.? pre!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (and (is-lib!spec.flat_combiner.SlotState./Request_ tmp%%$) (let ((rid$ (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp%%$))))) true)))) (let ((rid$ (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (ite (is-lib!spec.flat_combiner.SlotState./Request_ tmp%%$) (let ((rid$2 (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp%%$))))) rid$2) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) (I tid$))) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress (%I (I rid$)))))))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (Poly%core!option.Option. (core!option.Option./Some (I rid$)))))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2))))))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$)))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled.) (forall ((pre! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled.? pre!) (let ((tmp_assert$ true)) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (let ((tid$ (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))))) (=> tmp_assert$ (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (and (is-lib!spec.flat_combiner.SlotState./Request_ tmp%%$) (let ((rid$ (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp%%$))))) true)))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_enabled.? pre!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I 0))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled.) (forall ((pre! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled.? pre!) (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_enabled.? pre!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (and (< tid$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (and (lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (I tid$)) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I (nClip (Add tid$ 1))))))) (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled.) (forall ((pre! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled.? pre!) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (and (< tid$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (I tid$)))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_enabled.? pre!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (and (< tid$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (and (not (lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (I tid$))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Responding (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (%I (I (nClip (Add tid$ 1))))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)) (and (let ((r$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) (I tid$))))) (let ((tmp_for_match_0$ r$)) (and (and (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$ (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) true)) (let ((rid$ (ite (is-lib!spec.flat_combiner.SlotState./InProgress_ tmp_for_match_0$) (let ((rid$2 (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. tmp_for_match_0$))))) rid$2) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (and (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Responding/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))))) (I tid$))))) rid$) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) (I tid$))) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) (I tid$) (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I (I rid$)))))))) (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2))))))))) (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$))))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$)))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled.) (forall ((pre! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled.? pre!) (let ((tmp_assert$ true)) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (let ((tid$ (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))))) (and (=> tmp_assert$ (< tid$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (=> tmp_assert$ (not (lib!spec.flat_combiner.impl&%7.req_is_none.? (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (I tid$)))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) (I tid$)))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_enabled.? pre!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong.? pre! post!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (and (= (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.empty.? $ (TYPE%core!option.Option. $ NAT)))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled.) (forall ((pre! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled.? pre!) (and (is-lib!spec.flat_combiner.CombinerState./Responding_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (= (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_enabled.? pre!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong.) (forall ((pre! Poly) (post! Poly) (tid! Poly) (rid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong.? pre! post! tid! rid!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$)) tid!) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (is-lib!spec.flat_combiner.ClientState./Idle_ tmp%%$))) (let ((update_tmp_clients$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1)) tid!)) (let ((update_tmp_clients$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1) tid! (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting (%I rid!))))))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) tid!) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) tid!)) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) tid! (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Request (%I rid!))))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$2) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong.? pre! post! tid! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled.) (forall ((pre! Poly) (tid! Poly) (rid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled.? pre! tid! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$)) tid!) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (is-lib!spec.flat_combiner.ClientState./Idle_ tmp%%$))) (let ((update_tmp_clients$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1)) tid!))))) (=> tmp_assert$1 (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$)) tid!) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_enabled.? pre! tid! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong.) (forall ((pre! Poly) (post! Poly) (tid! Poly) (rid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong.? pre! post! tid! rid!) (let ((update_tmp_num_threads$ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_combiner$ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid! (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting (%I rid!)))) (let ((update_tmp_clients$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1)) tid!)) (let ((update_tmp_clients$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1) tid! (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle))))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid! (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I rid!)))) (let ((update_tmp_slots$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid!)))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1)) tid!)) (let ((update_tmp_slots$2 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$1) tid! (Poly%lib!spec.flat_combiner.SlotState. lib!spec.flat_combiner.SlotState./Empty))))) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_slots$2) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_clients$2) (and (= (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_combiner$) (= (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. post!)) update_tmp_num_threads$))))))))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong.? pre! post! tid! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled.) (forall ((pre! Poly) (tid! Poly) (rid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled.? pre! tid! rid!) (let ((tmp_assert$ true)) (let ((update_tmp_clients$ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (let ((update_tmp_slots$ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid! (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting (%I rid!)))) (let ((update_tmp_clients$1 (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$) tid!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients$1)) tid!))))) (=> tmp_assert$1 (vstd!map_lib.impl&%0.contains_pair.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots$) tid! (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response (%I rid!)))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_enabled.? pre! tid! rid!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by.? pre! post! step!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_empty_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_empty_strong.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_collect_request_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_collect_request_strong.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_start_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_start_strong.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_empty_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_empty_strong.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_result_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_result_strong.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./combiner_responding_done_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.combiner_responding_done_strong.? pre! post!) (ite (is-lib!spec.flat_combiner.FlatCombiner.Step./send_request_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (let ((tid$ (lib!spec.flat_combiner.FlatCombiner.Step./send_request/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (let ((rid$ (lib!spec.flat_combiner.FlatCombiner.Step./send_request/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (lib!spec.flat_combiner.FlatCombiner.impl&%8.send_request_strong.? pre! post! (I tid$) (I rid$)))) (and (is-lib!spec.flat_combiner.FlatCombiner.Step./recv_response_ (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)) (let ((tid$ (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/0 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (let ((rid$ (lib!spec.flat_combiner.FlatCombiner.Step./recv_response/1 (%Poly%lib!spec.flat_combiner.FlatCombiner.Step. step!)))) (lib!spec.flat_combiner.FlatCombiner.impl&%8.recv_response_strong.? pre! post! (I tid$) (I rid$))))))))))))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by.? pre! post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec.flat_combiner.FlatCombiner.Step.) (lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by.? pre! post! step$)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong_by.? pre! post! step$)) ))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.next_strong.? pre! post!)) ))))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.? self!) (and (and (and (and (and (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_complete.? self!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_slot_empty.? self!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_client_reqids.? self!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_elements.? self!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_slots_not_in_progress.? self!)) (lib!spec.flat_combiner.FlatCombiner.impl&%8.inv_combiner_request_ids.? self!))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.? self!)) ))))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress. (Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((slots! Poly) (tid! Poly)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress. slots! tid!) (=> %%global_location_label%%45 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. slots!) tid!))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress. slots! tid!)) )))
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress.) (forall ((slots! Poly) (tid! Poly)) (! (= (lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress.? slots! tid!) (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. slots! tid!)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%8.slot_in_progress.? slots! tid!)) ))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_inductive. (lib!spec.flat_combiner.FlatCombiner.State. Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((post! lib!spec.flat_combiner.FlatCombiner.State.) (num_threads! Int)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_inductive. post! num_threads!) (=> %%global_location_label%%46 (lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. post!) (I num_threads!)))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_inductive. post! num_threads!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_inductive. (lib!spec.flat_combiner.FlatCombiner.State. Int) Bool)
(assert (forall ((post! lib!spec.flat_combiner.FlatCombiner.State.) (num_threads! Int)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_inductive. post! num_threads!) (lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. post!))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%8.initialize_inductive. post! num_threads!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.initialize. (Int tuple%4.) Bool)
(assert (forall ((num_threads! Int) (tmp_tuple! tuple%4.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.initialize. num_threads! tmp_tuple!) (and (has_type (Poly%tuple%4. tmp_tuple!) (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (TRACKED $) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) (let ((instance$ (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp_tuple!)))))) (let ((param_token_clients$ (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp_tuple!)))))) (let ((param_token_slots$ (%Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp_tuple!)))))) (let ((param_token_combiner$ (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp_tuple!)))))) (let ((instance$1 instance$)) (let ((param_token_clients$1 param_token_clients$)) (let ((param_token_slots$1 param_token_slots$)) (let ((param_token_combiner$1 param_token_combiner$)) (and (and (and (and (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. param_token_combiner$1))))) instance$1) (= (lib!spec.flat_combiner.FlatCombiner.impl&%7.num_threads.? (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. instance$1)) num_threads!)) (lib!spec.flat_combiner.FlatCombiner.impl&%4.map_agree_strict.? (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.clients.>. param_token_clients$1) (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.flat_combiner.ClientState.) (Poly%fun%1. (mk_fun (%%lambda%%0 num_threads!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle))))) (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. instance$1))) (lib!spec.flat_combiner.FlatCombiner.impl&%5.map_agree_strict.? (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.FlatCombiner.slots.>. param_token_slots$1) (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.flat_combiner.SlotState.) (Poly%fun%1. (mk_fun (%%lambda%%0 num_threads!))) (Poly%fun%1. (mk_fun (%%lambda%%1 (Poly%lib!spec.flat_combiner.SlotState. lib!spec.flat_combiner.SlotState./Empty))))) (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. instance$1))) (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. param_token_combiner$1))))) (lib!spec.flat_combiner.CombinerState./Collecting (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq.empty.? $ (TYPE%core!option.Option. $ NAT)))))))))))))))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.initialize. num_threads! tmp_tuple!)) )))
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)) )))
(declare-const pre! lib!spec.flat_combiner.FlatCombiner.State.)
(declare-const tid! Int)
(declare-const tmp%1 Bool)
(declare-const slot_state@ lib!spec.flat_combiner.SlotState.)
(declare-const update_tmp_num_threads@ Int)
(declare-const update_tmp_clients@ vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>.)
(declare-const update_tmp_slots@ vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>.)
(declare-const update_tmp_combiner@ lib!spec.flat_combiner.CombinerState.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!) TYPE%lib!spec.flat_combiner.FlatCombiner.State.))
(assert (<= 0 tid!))
(declare-const %%location_label%%0 Bool)
(assert (not (=> (lib!spec.flat_combiner.FlatCombiner.impl&%8.invariant.? (Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)) (=> (= update_tmp_num_threads@ (lib!spec.flat_combiner.FlatCombiner.State./State/num_threads (%Poly%lib!spec.flat_combiner.FlatCombiner.State. (Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (=> (= update_tmp_clients@ (lib!spec.flat_combiner.FlatCombiner.State./State/clients (%Poly%lib!spec.flat_combiner.FlatCombiner.State. (Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (=> (= update_tmp_slots@ (lib!spec.flat_combiner.FlatCombiner.State./State/slots (%Poly%lib!spec.flat_combiner.FlatCombiner.State. (Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (=> (= update_tmp_combiner@ (lib!spec.flat_combiner.FlatCombiner.State./State/combiner (%Poly%lib!spec.flat_combiner.FlatCombiner.State. (Poly%lib!spec.flat_combiner.FlatCombiner.State. pre!)))) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients@)) (I tid!)) (let ((tmp%%$ (%Poly%lib!spec.flat_combiner.ClientState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.ClientState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.ClientState.>. update_tmp_clients@) (I tid!))))) (is-lib!spec.flat_combiner.ClientState./Idle_ tmp%%$))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots@)) (I tid!)) (=> (= slot_state@ (%Poly%lib!spec.flat_combiner.SlotState. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.flat_combiner.SlotState. (Poly%vstd!map.Map<nat./lib!spec.flat_combiner.SlotState.>. update_tmp_slots@) (I tid!)))) (=> (= tmp%1 (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. slot_state@)))) (=> %%location_label%%0 (req%vstd!state_machine_internal.assert_safety. tmp%1)))))))))))))
(check-sat)
(exit)
