(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module single_delivery_model_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.map_values. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map_values. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!seq_lib.check_argument_is_seq. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!set_lib.axiom_is_empty. FuelId)
(declare-const fuel%vstd!set_lib.check_argument_is_set. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!verus_extra.set_lib_ext_v.flatten_sets. FuelId)
(declare-const fuel%lib!cmessage_v.optional_value_view. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%1.abstractable. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%1.view. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%1.message_marshallable. FuelId)
(declare-const fuel%lib!cmessage_v.abstractify_cmessage_seq. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%2.abstractable. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%2.view. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%3.view. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%3.abstractable. FuelId)
(declare-const fuel%lib!cmessage_v.cpacket_seq_is_abstractable. FuelId)
(declare-const fuel%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%5.arrow_Message_seqno. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%5.arrow_Message_dst. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%6.view_equal. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%6.is_marshalable. FuelId)
(declare-const fuel%lib!cmessage_v.impl&%6.ghost_serialize. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.lt. FuelId)
(declare-const fuel%lib!host_impl_v.impl&%1.view. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%0.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%0.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%0.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%1.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%1.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%1.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%2.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%2.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%2.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%3.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%3.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%3.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%4.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%4.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%4.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%5.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%5.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%5.ghost_serialize. FuelId)
(declare-const fuel%lib!net_sht_v.outbound_packet_is_valid. FuelId)
(declare-const fuel%lib!net_sht_v.outbound_packet_seq_is_valid. FuelId)
(declare-const fuel%lib!net_sht_v.outbound_packet_seq_has_correct_srcs. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack. FuelId)
(declare-const fuel%lib!single_delivery_model_v.valid_ack. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%1.ok. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%1.get_ack. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%1.valid_ack. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%2.packets_are_valid_messages. FuelId)
(declare-const fuel%lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.view. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.abstractable. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.no_acks_in_unacked. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.un_acked_valid. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.valid_list. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%0.valid. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%1.abstractable. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%1.view. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%2.abstractable. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%2.valid. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%2.view. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%3.abstractable. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%3.view. FuelId)
(declare-const fuel%lib!single_delivery_state_v.impl&%3.valid. FuelId)
(declare-const fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. FuelId)
(declare-const fuel%lib!abstract_end_point_t.impl&%0.abstractable. FuelId)
(declare-const fuel%lib!abstract_parameters_t.impl&%0.static_params. FuelId)
(declare-const fuel%lib!app_interface_t.max_val_len. FuelId)
(declare-const fuel%lib!app_interface_t.valid_key. FuelId)
(declare-const fuel%lib!app_interface_t.valid_value. FuelId)
(declare-const fuel%lib!endpoint_hashmap_t.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!endpoint_hashmap_t.impl&%0.get_spec. FuelId)
(declare-const fuel%lib!endpoint_hashmap_t.impl&%0.put_spec. FuelId)
(declare-const fuel%lib!endpoint_hashmap_t.impl&%0.swap_spec. FuelId)
(declare-const fuel%lib!hashmap_t.ckeykvlt. FuelId)
(declare-const fuel%lib!hashmap_t.spec_sorted_keys. FuelId)
(declare-const fuel%lib!host_protocol_t.max_hashtable_size. FuelId)
(declare-const fuel%lib!host_protocol_t.valid_hashtable. FuelId)
(declare-const fuel%lib!host_protocol_t.valid_optional_value. FuelId)
(declare-const fuel%lib!io_t.impl&%4.view. FuelId)
(declare-const fuel%lib!io_t.impl&%4.abstractable. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.lt_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.geq_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!keys_t.impl&%13.cmp_spec. FuelId)
(declare-const fuel%lib!single_delivery_t.tombstone_table_lookup. FuelId)
(declare-const fuel%lib!single_delivery_t.truncate_un_ack_list. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%0.new. FuelId)
(declare-const fuel%lib!single_delivery_t.ack_state_lookup. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.new_single_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive_ack. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive_real_packet. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.should_ack_single_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.send_ack. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.receive. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%1.send_single_message. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. FuelId)
(declare-const fuel%lib!single_delivery_t.impl&%2.un_acked_messages. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Message_seqno. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Message_dst. FuelId)
(declare-const fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.map_values. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.map_values. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.drop_last. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.fold_left. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!seq_lib.check_argument_is_seq. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!set_lib.impl&%0.map. fuel%vstd!set_lib.axiom_is_empty. fuel%vstd!set_lib.check_argument_is_set. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!verus_extra.set_lib_ext_v.flatten_sets. fuel%lib!cmessage_v.optional_value_view. fuel%lib!cmessage_v.impl&%1.abstractable. fuel%lib!cmessage_v.impl&%1.view. fuel%lib!cmessage_v.impl&%1.message_marshallable. fuel%lib!cmessage_v.abstractify_cmessage_seq. fuel%lib!cmessage_v.impl&%2.abstractable. fuel%lib!cmessage_v.impl&%2.view. fuel%lib!cmessage_v.impl&%3.view. fuel%lib!cmessage_v.impl&%3.abstractable. fuel%lib!cmessage_v.cpacket_seq_is_abstractable. fuel%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets. fuel%lib!cmessage_v.impl&%5.arrow_Message_seqno. fuel%lib!cmessage_v.impl&%5.arrow_Message_dst. fuel%lib!cmessage_v.impl&%6.view_equal. fuel%lib!cmessage_v.impl&%6.is_marshalable. fuel%lib!cmessage_v.impl&%6.ghost_serialize. fuel%lib!delegation_map_v.impl&%0.lt. fuel%lib!host_impl_v.impl&%1.view. fuel%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size. fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else. fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else. fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else. fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize. fuel%lib!marshal_v.impl&%0.view_equal. fuel%lib!marshal_v.impl&%0.is_marshalable. fuel%lib!marshal_v.impl&%0.ghost_serialize. fuel%lib!marshal_v.impl&%1.view_equal. fuel%lib!marshal_v.impl&%1.is_marshalable. fuel%lib!marshal_v.impl&%1.ghost_serialize. fuel%lib!marshal_v.impl&%2.view_equal. fuel%lib!marshal_v.impl&%2.is_marshalable. fuel%lib!marshal_v.impl&%2.ghost_serialize. fuel%lib!marshal_v.impl&%3.view_equal. fuel%lib!marshal_v.impl&%3.is_marshalable. fuel%lib!marshal_v.impl&%3.ghost_serialize. fuel%lib!marshal_v.impl&%4.view_equal. fuel%lib!marshal_v.impl&%4.is_marshalable. fuel%lib!marshal_v.impl&%4.ghost_serialize. fuel%lib!marshal_v.impl&%5.view_equal. fuel%lib!marshal_v.impl&%5.is_marshalable. fuel%lib!marshal_v.impl&%5.ghost_serialize. fuel%lib!net_sht_v.outbound_packet_is_valid. fuel%lib!net_sht_v.outbound_packet_seq_is_valid. fuel%lib!net_sht_v.outbound_packet_seq_has_correct_srcs. fuel%lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack. fuel%lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack. fuel%lib!single_delivery_model_v.valid_ack. fuel%lib!single_delivery_model_v.impl&%1.ok. fuel%lib!single_delivery_model_v.impl&%1.get_ack. fuel%lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set. fuel%lib!single_delivery_model_v.impl&%1.valid_ack. fuel%lib!single_delivery_model_v.impl&%2.packets_are_valid_messages. fuel%lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet. fuel%lib!single_delivery_state_v.impl&%0.view. fuel%lib!single_delivery_state_v.impl&%0.abstractable. fuel%lib!single_delivery_state_v.impl&%0.no_acks_in_unacked. fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential. fuel%lib!single_delivery_state_v.impl&%0.un_acked_valid. fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid. fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst. fuel%lib!single_delivery_state_v.impl&%0.valid_list. fuel%lib!single_delivery_state_v.impl&%0.valid. fuel%lib!single_delivery_state_v.impl&%1.abstractable. fuel%lib!single_delivery_state_v.impl&%1.view. fuel%lib!single_delivery_state_v.impl&%2.abstractable. fuel%lib!single_delivery_state_v.impl&%2.valid. fuel%lib!single_delivery_state_v.impl&%2.view. fuel%lib!single_delivery_state_v.impl&%3.abstractable. fuel%lib!single_delivery_state_v.impl&%3.view. fuel%lib!single_delivery_state_v.impl&%3.valid. fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. fuel%lib!abstract_end_point_t.impl&%0.abstractable. fuel%lib!abstract_parameters_t.impl&%0.static_params. fuel%lib!app_interface_t.max_val_len. fuel%lib!app_interface_t.valid_key. fuel%lib!app_interface_t.valid_value. fuel%lib!endpoint_hashmap_t.impl&%0.spec_index. fuel%lib!endpoint_hashmap_t.impl&%0.get_spec. fuel%lib!endpoint_hashmap_t.impl&%0.put_spec. fuel%lib!endpoint_hashmap_t.impl&%0.swap_spec. fuel%lib!hashmap_t.ckeykvlt. fuel%lib!hashmap_t.spec_sorted_keys. fuel%lib!host_protocol_t.max_hashtable_size. fuel%lib!host_protocol_t.valid_hashtable. fuel%lib!host_protocol_t.valid_optional_value. fuel%lib!io_t.impl&%4.view. fuel%lib!io_t.impl&%4.abstractable. fuel%lib!keys_t.impl&%3.lt_spec. fuel%lib!keys_t.impl&%3.geq_spec. fuel%lib!keys_t.impl&%4.is_empty. fuel%lib!keys_t.impl&%13.cmp_spec. fuel%lib!single_delivery_t.tombstone_table_lookup. fuel%lib!single_delivery_t.truncate_un_ack_list. fuel%lib!single_delivery_t.impl&%0.new. fuel%lib!single_delivery_t.ack_state_lookup. fuel%lib!single_delivery_t.impl&%1.new_single_message. fuel%lib!single_delivery_t.impl&%1.receive_ack. fuel%lib!single_delivery_t.impl&%1.receive_real_packet. fuel%lib!single_delivery_t.impl&%1.should_ack_single_message. fuel%lib!single_delivery_t.impl&%1.send_ack. fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet. fuel%lib!single_delivery_t.impl&%1.receive. fuel%lib!single_delivery_t.impl&%1.send_single_message. fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. fuel%lib!single_delivery_t.impl&%2.un_acked_messages. fuel%lib!single_message_t.impl&%0.arrow_Message_seqno. fuel%lib!single_message_t.impl&%0.arrow_Message_dst. fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!set_lib.axiom_is_empty.)))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. 0)
(declare-sort lib!endpoint_hashmap_t.HashMap<u64.>. 0)
(declare-sort lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. 0)
(declare-sort lib!hashmap_t.CKeyHashMap. 0)
(declare-sort vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. 0)
(declare-sort vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. 0)
(declare-sort vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. 0)
(declare-sort vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. 0)
(declare-sort vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!seq.Seq<lib!cmessage_v.CPacket.>. 0)
(declare-sort vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. 0)
(declare-sort vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. 0)
(declare-sort vstd!seq.Seq<lib!io_t.EndPoint.>. 0)
(declare-sort vstd!seq.Seq<lib!network_t.Packet.>. 0)
(declare-sort vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. 0)
(declare-sort vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!set.Set<lib!keys_t.SHTKey.>. 0)
(declare-sort vstd!set.Set<lib!network_t.Packet.>. 0)
(declare-sort vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!cmessage_v.CMessage. 0) (lib!cmessage_v.CPacket. 0) (lib!cmessage_v.CSingleMessage. 0) (lib!host_impl_v.Parameters. 0) (lib!single_delivery_model_v.ReceiveImplResult. 0) (lib!single_delivery_state_v.CAckState. 0) (lib!single_delivery_state_v.CTombstoneTable. 0) (lib!single_delivery_state_v.CSendState. 0) (lib!single_delivery_state_v.CSingleDelivery. 0) (lib!abstract_end_point_t.AbstractEndPoint. 0) (lib!abstract_parameters_t.AbstractParameters. 0) (lib!hashmap_t.CKeyKV. 0) (lib!io_t.EndPoint. 0) (lib!keys_t.Ordering. 0) (lib!keys_t.KeyIterator. 0) (lib!keys_t.KeyRange. 0) (lib!keys_t.SHTKey. 0) (lib!message_t.Message. 0) (lib!network_t.Packet. 0) (lib!single_delivery_t.AckState. 0) (lib!single_delivery_t.SingleDelivery. 0) (lib!single_message_t.SingleMessage. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!cmessage_v.CMessage./GetRequest (lib!cmessage_v.CMessage./GetRequest/?k lib!keys_t.SHTKey.)) (lib!cmessage_v.CMessage./SetRequest (lib!cmessage_v.CMessage./SetRequest/?k lib!keys_t.SHTKey.) (lib!cmessage_v.CMessage./SetRequest/?v core!option.Option.)) (lib!cmessage_v.CMessage./Reply (lib!cmessage_v.CMessage./Reply/?k lib!keys_t.SHTKey.) (lib!cmessage_v.CMessage./Reply/?v core!option.Option.)) (lib!cmessage_v.CMessage./Redirect (lib!cmessage_v.CMessage./Redirect/?k lib!keys_t.SHTKey.) (lib!cmessage_v.CMessage./Redirect/?id lib!io_t.EndPoint.)) (lib!cmessage_v.CMessage./Shard (lib!cmessage_v.CMessage./Shard/?kr lib!keys_t.KeyRange.) (lib!cmessage_v.CMessage./Shard/?recipient lib!io_t.EndPoint.)) (lib!cmessage_v.CMessage./Delegate (lib!cmessage_v.CMessage./Delegate/?range lib!keys_t.KeyRange.) (lib!cmessage_v.CMessage./Delegate/?h lib!hashmap_t.CKeyHashMap.))) ((lib!cmessage_v.CPacket./CPacket (lib!cmessage_v.CPacket./CPacket/?dst lib!io_t.EndPoint.) (lib!cmessage_v.CPacket./CPacket/?src lib!io_t.EndPoint.) (lib!cmessage_v.CPacket./CPacket/?msg lib!cmessage_v.CSingleMessage.))) ((lib!cmessage_v.CSingleMessage./Message (lib!cmessage_v.CSingleMessage./Message/?seqno Int) (lib!cmessage_v.CSingleMessage./Message/?dst lib!io_t.EndPoint.) (lib!cmessage_v.CSingleMessage./Message/?m lib!cmessage_v.CMessage.)) (lib!cmessage_v.CSingleMessage./Ack (lib!cmessage_v.CSingleMessage./Ack/?ack_seqno Int)) (lib!cmessage_v.CSingleMessage./InvalidMessage )) ((lib!host_impl_v.Parameters./Parameters (lib!host_impl_v.Parameters./Parameters/?max_seqno Int) (lib!host_impl_v.Parameters./Parameters/?max_delegations Int))) ((lib!single_delivery_model_v.ReceiveImplResult./FreshPacket (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/?ack lib!cmessage_v.CPacket.)) (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/?ack lib!cmessage_v.CPacket.)) (lib!single_delivery_model_v.ReceiveImplResult./AckOrInvalid )) ((lib!single_delivery_state_v.CAckState./CAckState (lib!single_delivery_state_v.CAckState./CAckState/?num_packets_acked Int) (lib!single_delivery_state_v.CAckState./CAckState/?un_acked alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.))) ((lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable (lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable/?epmap lib!endpoint_hashmap_t.HashMap<u64.>.))) ((lib!single_delivery_state_v.CSendState./CSendState (lib!single_delivery_state_v.CSendState./CSendState/?epmap lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.))) ((lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/?receive_state lib!single_delivery_state_v.CTombstoneTable.) (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/?send_state lib!single_delivery_state_v.CSendState.))) ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id vstd!seq.Seq<u8.>.))) ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_seqno Int) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_delegations Int))) ((lib!hashmap_t.CKeyKV./CKeyKV (lib!hashmap_t.CKeyKV./CKeyKV/?k lib!keys_t.SHTKey.) (lib!hashmap_t.CKeyKV./CKeyKV/?v alloc!vec.Vec<u8./allocator_global%.>.))) ((lib!io_t.EndPoint./EndPoint (lib!io_t.EndPoint./EndPoint/?id alloc!vec.Vec<u8./allocator_global%.>.))) ((lib!keys_t.Ordering./Less ) (lib!keys_t.Ordering./Equal ) (lib!keys_t.Ordering./Greater )) ((lib!keys_t.KeyIterator./KeyIterator (lib!keys_t.KeyIterator./KeyIterator/?k core!option.Option.))) ((lib!keys_t.KeyRange./KeyRange (lib!keys_t.KeyRange./KeyRange/?lo lib!keys_t.KeyIterator.) (lib!keys_t.KeyRange./KeyRange/?hi lib!keys_t.KeyIterator.))) ((lib!keys_t.SHTKey./SHTKey (lib!keys_t.SHTKey./SHTKey/?ukey Int))) ((lib!message_t.Message./GetRequest (lib!message_t.Message./GetRequest/?key lib!keys_t.SHTKey.)) (lib!message_t.Message./SetRequest (lib!message_t.Message./SetRequest/?key lib!keys_t.SHTKey.) (lib!message_t.Message./SetRequest/?value core!option.Option.)) (lib!message_t.Message./Reply (lib!message_t.Message./Reply/?key lib!keys_t.SHTKey.) (lib!message_t.Message./Reply/?value core!option.Option.)) (lib!message_t.Message./Redirect (lib!message_t.Message./Redirect/?key lib!keys_t.SHTKey.) (lib!message_t.Message./Redirect/?id lib!abstract_end_point_t.AbstractEndPoint.)) (lib!message_t.Message./Shard (lib!message_t.Message./Shard/?range lib!keys_t.KeyRange.) (lib!message_t.Message./Shard/?recipient lib!abstract_end_point_t.AbstractEndPoint.)) (lib!message_t.Message./Delegate (lib!message_t.Message./Delegate/?range lib!keys_t.KeyRange.) (lib!message_t.Message./Delegate/?h vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.))) ((lib!network_t.Packet./Packet (lib!network_t.Packet./Packet/?dst lib!abstract_end_point_t.AbstractEndPoint.) (lib!network_t.Packet./Packet/?src lib!abstract_end_point_t.AbstractEndPoint.) (lib!network_t.Packet./Packet/?msg lib!single_message_t.SingleMessage.))) ((lib!single_delivery_t.AckState./AckState (lib!single_delivery_t.AckState./AckState/?num_packets_acked Int) (lib!single_delivery_t.AckState./AckState/?un_acked Poly))) ((lib!single_delivery_t.SingleDelivery./SingleDelivery (lib!single_delivery_t.SingleDelivery./SingleDelivery/?receive_state vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/?send_state Poly))) ((lib!single_message_t.SingleMessage./Message (lib!single_message_t.SingleMessage./Message/?seqno Int) (lib!single_message_t.SingleMessage./Message/?dst lib!abstract_end_point_t.AbstractEndPoint.) (lib!single_message_t.SingleMessage./Message/?m Poly)) (lib!single_message_t.SingleMessage./Ack (lib!single_message_t.SingleMessage./Ack/?ack_seqno Int)) (lib!single_message_t.SingleMessage./InvalidMessage )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!cmessage_v.CMessage./GetRequest/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./SetRequest/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./SetRequest/v (lib!cmessage_v.CMessage.) core!option.Option.)
(declare-fun lib!cmessage_v.CMessage./Reply/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./Reply/v (lib!cmessage_v.CMessage.) core!option.Option.)
(declare-fun lib!cmessage_v.CMessage./Redirect/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./Redirect/id (lib!cmessage_v.CMessage.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CMessage./Shard/kr (lib!cmessage_v.CMessage.) lib!keys_t.KeyRange.)
(declare-fun lib!cmessage_v.CMessage./Shard/recipient (lib!cmessage_v.CMessage.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CMessage./Delegate/range (lib!cmessage_v.CMessage.) lib!keys_t.KeyRange.)
(declare-fun lib!cmessage_v.CMessage./Delegate/h (lib!cmessage_v.CMessage.) lib!hashmap_t.CKeyHashMap.)
(declare-fun lib!cmessage_v.CPacket./CPacket/dst (lib!cmessage_v.CPacket.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CPacket./CPacket/src (lib!cmessage_v.CPacket.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CPacket./CPacket/msg (lib!cmessage_v.CPacket.) lib!cmessage_v.CSingleMessage.)
(declare-fun lib!cmessage_v.CSingleMessage./Message/seqno (lib!cmessage_v.CSingleMessage.) Int)
(declare-fun lib!cmessage_v.CSingleMessage./Message/dst (lib!cmessage_v.CSingleMessage.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CSingleMessage./Message/m (lib!cmessage_v.CSingleMessage.) lib!cmessage_v.CMessage.)
(declare-fun lib!cmessage_v.CSingleMessage./Ack/ack_seqno (lib!cmessage_v.CSingleMessage.) Int)
(declare-fun lib!host_impl_v.Parameters./Parameters/max_seqno (lib!host_impl_v.Parameters.) Int)
(declare-fun lib!host_impl_v.Parameters./Parameters/max_delegations (lib!host_impl_v.Parameters.) Int)
(declare-fun lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack (lib!single_delivery_model_v.ReceiveImplResult.) lib!cmessage_v.CPacket.)
(declare-fun lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack (lib!single_delivery_model_v.ReceiveImplResult.) lib!cmessage_v.CPacket.)
(declare-fun lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (lib!single_delivery_state_v.CAckState.) Int)
(declare-fun lib!single_delivery_state_v.CAckState./CAckState/un_acked (lib!single_delivery_state_v.CAckState.) alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.)
(declare-fun lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable/epmap (lib!single_delivery_state_v.CTombstoneTable.) lib!endpoint_hashmap_t.HashMap<u64.>.)
(declare-fun lib!single_delivery_state_v.CSendState./CSendState/epmap (lib!single_delivery_state_v.CSendState.) lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.)
(declare-fun lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/receive_state (lib!single_delivery_state_v.CSingleDelivery.) lib!single_delivery_state_v.CTombstoneTable.)
(declare-fun lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (lib!single_delivery_state_v.CSingleDelivery.) lib!single_delivery_state_v.CSendState.)
(declare-fun lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (lib!abstract_end_point_t.AbstractEndPoint.) vstd!seq.Seq<u8.>.)
(declare-fun lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (lib!abstract_parameters_t.AbstractParameters.) Int)
(declare-fun lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (lib!abstract_parameters_t.AbstractParameters.) Int)
(declare-fun lib!hashmap_t.CKeyKV./CKeyKV/k (lib!hashmap_t.CKeyKV.) lib!keys_t.SHTKey.)
(declare-fun lib!hashmap_t.CKeyKV./CKeyKV/v (lib!hashmap_t.CKeyKV.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!io_t.EndPoint./EndPoint/id (lib!io_t.EndPoint.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!keys_t.KeyIterator./KeyIterator/k (lib!keys_t.KeyIterator.) core!option.Option.)
(declare-fun lib!keys_t.KeyRange./KeyRange/lo (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.KeyRange./KeyRange/hi (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.SHTKey./SHTKey/ukey (lib!keys_t.SHTKey.) Int)
(declare-fun lib!message_t.Message./GetRequest/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./SetRequest/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./SetRequest/value (lib!message_t.Message.) core!option.Option.)
(declare-fun lib!message_t.Message./Reply/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./Reply/value (lib!message_t.Message.) core!option.Option.)
(declare-fun lib!message_t.Message./Redirect/key (lib!message_t.Message.) lib!keys_t.SHTKey.)
(declare-fun lib!message_t.Message./Redirect/id (lib!message_t.Message.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!message_t.Message./Shard/range (lib!message_t.Message.) lib!keys_t.KeyRange.)
(declare-fun lib!message_t.Message./Shard/recipient (lib!message_t.Message.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!message_t.Message./Delegate/range (lib!message_t.Message.) lib!keys_t.KeyRange.)
(declare-fun lib!message_t.Message./Delegate/h (lib!message_t.Message.) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun lib!network_t.Packet./Packet/dst (lib!network_t.Packet.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!network_t.Packet./Packet/src (lib!network_t.Packet.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!network_t.Packet./Packet/msg (lib!network_t.Packet.) lib!single_message_t.SingleMessage.)
(declare-fun lib!single_delivery_t.AckState./AckState/num_packets_acked (lib!single_delivery_t.AckState.) Int)
(declare-fun lib!single_delivery_t.AckState./AckState/un_acked (lib!single_delivery_t.AckState.) Poly)
(declare-fun lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (lib!single_delivery_t.SingleDelivery.) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)
(declare-fun lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (lib!single_delivery_t.SingleDelivery.) Poly)
(declare-fun lib!single_message_t.SingleMessage./Message/seqno (lib!single_message_t.SingleMessage.) Int)
(declare-fun lib!single_message_t.SingleMessage./Message/dst (lib!single_message_t.SingleMessage.) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!single_message_t.SingleMessage./Message/m (lib!single_message_t.SingleMessage.) Poly)
(declare-fun lib!single_message_t.SingleMessage./Ack/ack_seqno (lib!single_message_t.SingleMessage.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!cmessage_v.CMessage. Type)
(declare-const TYPE%lib!cmessage_v.CPacket. Type)
(declare-const TYPE%lib!cmessage_v.CSingleMessage. Type)
(declare-const TYPE%lib!host_impl_v.Parameters. Type)
(declare-const TYPE%lib!single_delivery_model_v.ReceiveImplResult. Type)
(declare-const TYPE%lib!single_delivery_state_v.CAckState. Type)
(declare-const TYPE%lib!single_delivery_state_v.CTombstoneTable. Type)
(declare-const TYPE%lib!single_delivery_state_v.CSendState. Type)
(declare-const TYPE%lib!single_delivery_state_v.CSingleDelivery. Type)
(declare-const TYPE%lib!abstract_end_point_t.AbstractEndPoint. Type)
(declare-const TYPE%lib!abstract_parameters_t.AbstractParameters. Type)
(declare-fun TYPE%lib!endpoint_hashmap_t.HashMap. (Dcr Type) Type)
(declare-const TYPE%lib!hashmap_t.CKeyHashMap. Type)
(declare-const TYPE%lib!hashmap_t.CKeyKV. Type)
(declare-const TYPE%lib!io_t.EndPoint. Type)
(declare-const TYPE%lib!keys_t.Ordering. Type)
(declare-fun TYPE%lib!keys_t.KeyIterator. (Dcr Type) Type)
(declare-fun TYPE%lib!keys_t.KeyRange. (Dcr Type) Type)
(declare-const TYPE%lib!keys_t.SHTKey. Type)
(declare-const TYPE%lib!message_t.Message. Type)
(declare-const TYPE%lib!network_t.Packet. Type)
(declare-fun TYPE%lib!single_delivery_t.AckState. (Dcr Type) Type)
(declare-fun TYPE%lib!single_delivery_t.SingleDelivery. (Dcr Type) Type)
(declare-fun TYPE%lib!single_message_t.SingleMessage. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. (alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. (Poly) alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (Poly) alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (Poly) alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (Poly) alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)
(declare-fun Poly%lib!endpoint_hashmap_t.HashMap<u64.>. (lib!endpoint_hashmap_t.HashMap<u64.>.) Poly)
(declare-fun %Poly%lib!endpoint_hashmap_t.HashMap<u64.>. (Poly) lib!endpoint_hashmap_t.HashMap<u64.>.)
(declare-fun Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.) Poly)
(declare-fun %Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (Poly) lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.)
(declare-fun Poly%lib!hashmap_t.CKeyHashMap. (lib!hashmap_t.CKeyHashMap.) Poly)
(declare-fun %Poly%lib!hashmap_t.CKeyHashMap. (Poly) lib!hashmap_t.CKeyHashMap.)
(declare-fun Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. (vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>.)
(declare-fun Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. (vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>.)
(declare-fun Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)
(declare-fun Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. (vstd!seq.Seq<lib!cmessage_v.CPacket.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. (Poly) vstd!seq.Seq<lib!cmessage_v.CPacket.>.)
(declare-fun Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. (vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. (Poly) vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>.)
(declare-fun Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (Poly) vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.)
(declare-fun Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq<lib!io_t.EndPoint.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (Poly) vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-fun Poly%vstd!seq.Seq<lib!network_t.Packet.>. (vstd!seq.Seq<lib!network_t.Packet.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!network_t.Packet.>. (Poly) vstd!seq.Seq<lib!network_t.Packet.>.)
(declare-fun Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (Poly) vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)
(declare-fun Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (vstd!set.Set<lib!keys_t.SHTKey.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly) vstd!set.Set<lib!keys_t.SHTKey.>.)
(declare-fun Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!set.Set<lib!network_t.Packet.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!network_t.Packet.>. (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(declare-fun Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (Poly) vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage.) Poly)
(declare-fun %Poly%lib!cmessage_v.CMessage. (Poly) lib!cmessage_v.CMessage.)
(declare-fun Poly%lib!cmessage_v.CPacket. (lib!cmessage_v.CPacket.) Poly)
(declare-fun %Poly%lib!cmessage_v.CPacket. (Poly) lib!cmessage_v.CPacket.)
(declare-fun Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CSingleMessage.) Poly)
(declare-fun %Poly%lib!cmessage_v.CSingleMessage. (Poly) lib!cmessage_v.CSingleMessage.)
(declare-fun Poly%lib!host_impl_v.Parameters. (lib!host_impl_v.Parameters.) Poly)
(declare-fun %Poly%lib!host_impl_v.Parameters. (Poly) lib!host_impl_v.Parameters.)
(declare-fun Poly%lib!single_delivery_model_v.ReceiveImplResult. (lib!single_delivery_model_v.ReceiveImplResult.) Poly)
(declare-fun %Poly%lib!single_delivery_model_v.ReceiveImplResult. (Poly) lib!single_delivery_model_v.ReceiveImplResult.)
(declare-fun Poly%lib!single_delivery_state_v.CAckState. (lib!single_delivery_state_v.CAckState.) Poly)
(declare-fun %Poly%lib!single_delivery_state_v.CAckState. (Poly) lib!single_delivery_state_v.CAckState.)
(declare-fun Poly%lib!single_delivery_state_v.CTombstoneTable. (lib!single_delivery_state_v.CTombstoneTable.) Poly)
(declare-fun %Poly%lib!single_delivery_state_v.CTombstoneTable. (Poly) lib!single_delivery_state_v.CTombstoneTable.)
(declare-fun Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSendState.) Poly)
(declare-fun %Poly%lib!single_delivery_state_v.CSendState. (Poly) lib!single_delivery_state_v.CSendState.)
(declare-fun Poly%lib!single_delivery_state_v.CSingleDelivery. (lib!single_delivery_state_v.CSingleDelivery.) Poly)
(declare-fun %Poly%lib!single_delivery_state_v.CSingleDelivery. (Poly) lib!single_delivery_state_v.CSingleDelivery.)
(declare-fun Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!abstract_end_point_t.AbstractEndPoint.) Poly)
(declare-fun %Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.AbstractParameters.) Poly)
(declare-fun %Poly%lib!abstract_parameters_t.AbstractParameters. (Poly) lib!abstract_parameters_t.AbstractParameters.)
(declare-fun Poly%lib!hashmap_t.CKeyKV. (lib!hashmap_t.CKeyKV.) Poly)
(declare-fun %Poly%lib!hashmap_t.CKeyKV. (Poly) lib!hashmap_t.CKeyKV.)
(declare-fun Poly%lib!io_t.EndPoint. (lib!io_t.EndPoint.) Poly)
(declare-fun %Poly%lib!io_t.EndPoint. (Poly) lib!io_t.EndPoint.)
(declare-fun Poly%lib!keys_t.Ordering. (lib!keys_t.Ordering.) Poly)
(declare-fun %Poly%lib!keys_t.Ordering. (Poly) lib!keys_t.Ordering.)
(declare-fun Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator.) Poly)
(declare-fun %Poly%lib!keys_t.KeyIterator. (Poly) lib!keys_t.KeyIterator.)
(declare-fun Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange.) Poly)
(declare-fun %Poly%lib!keys_t.KeyRange. (Poly) lib!keys_t.KeyRange.)
(declare-fun Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey.) Poly)
(declare-fun %Poly%lib!keys_t.SHTKey. (Poly) lib!keys_t.SHTKey.)
(declare-fun Poly%lib!message_t.Message. (lib!message_t.Message.) Poly)
(declare-fun %Poly%lib!message_t.Message. (Poly) lib!message_t.Message.)
(declare-fun Poly%lib!network_t.Packet. (lib!network_t.Packet.) Poly)
(declare-fun %Poly%lib!network_t.Packet. (Poly) lib!network_t.Packet.)
(declare-fun Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState.) Poly)
(declare-fun %Poly%lib!single_delivery_t.AckState. (Poly) lib!single_delivery_t.AckState.)
(declare-fun Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery.) Poly)
(declare-fun %Poly%lib!single_delivery_t.SingleDelivery. (Poly) lib!single_delivery_t.SingleDelivery.)
(declare-fun Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage.) Poly)
(declare-fun %Poly%lib!single_message_t.SingleMessage. (Poly) lib!single_message_t.SingleMessage.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x lib!endpoint_hashmap_t.HashMap<u64.>.)) (! (= x (%Poly%lib!endpoint_hashmap_t.HashMap<u64.>. (Poly%lib!endpoint_hashmap_t.HashMap<u64.>. x))) :pattern ((Poly%lib!endpoint_hashmap_t.HashMap<u64.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!endpoint_hashmap_t.HashMap. $ (UINT 64))) (= x (Poly%lib!endpoint_hashmap_t.HashMap<u64.>. (%Poly%lib!endpoint_hashmap_t.HashMap<u64.>. x)))) :pattern ((has_type x (TYPE%lib!endpoint_hashmap_t.HashMap. $ (UINT 64)))) )))
(assert (forall ((x lib!endpoint_hashmap_t.HashMap<u64.>.)) (! (has_type (Poly%lib!endpoint_hashmap_t.HashMap<u64.>. x) (TYPE%lib!endpoint_hashmap_t.HashMap. $ (UINT 64))) :pattern ((has_type (Poly%lib!endpoint_hashmap_t.HashMap<u64.>. x) (TYPE%lib!endpoint_hashmap_t.HashMap. $ (UINT 64)))) )))
(assert (forall ((x lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.)) (! (= x (%Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. x))) :pattern ((Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!endpoint_hashmap_t.HashMap. $ TYPE%lib!single_delivery_state_v.CAckState.)) (= x (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (%Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. x)))) :pattern ((has_type x (TYPE%lib!endpoint_hashmap_t.HashMap. $ TYPE%lib!single_delivery_state_v.CAckState.))) )))
(assert (forall ((x lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.)) (! (has_type (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. x) (TYPE%lib!endpoint_hashmap_t.HashMap. $ TYPE%lib!single_delivery_state_v.CAckState.)) :pattern ((has_type (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. x) (TYPE%lib!endpoint_hashmap_t.HashMap. $ TYPE%lib!single_delivery_state_v.CAckState.))) )))
(assert (forall ((x lib!hashmap_t.CKeyHashMap.)) (! (= x (%Poly%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x))) :pattern ((Poly%lib!hashmap_t.CKeyHashMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!hashmap_t.CKeyHashMap.) (= x (Poly%lib!hashmap_t.CKeyHashMap. (%Poly%lib!hashmap_t.CKeyHashMap. x)))) :pattern ((has_type x TYPE%lib!hashmap_t.CKeyHashMap.)) )))
(assert (forall ((x lib!hashmap_t.CKeyHashMap.)) (! (has_type (Poly%lib!hashmap_t.CKeyHashMap. x) TYPE%lib!hashmap_t.CKeyHashMap.) :pattern ((has_type (Poly%lib!hashmap_t.CKeyHashMap. x) TYPE%lib!hashmap_t.CKeyHashMap.)) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT)) (= x (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>.)) (! (= x (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. x))) :pattern ((Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (UINT 64))) (= x (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (UINT 64)))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>.)) (! (has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (UINT 64))) :pattern ((has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./u64.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (UINT 64)))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>.)) (! (= x (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. x))) :pattern ((Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState.)) (= x (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState.))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>.)) (! (has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_state_v.CAckState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState.))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)) (! (= x (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x))) :pattern ((Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.))) (= x (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)) (! (has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.))) :pattern ((has_type (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!cmessage_v.CPacket.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. (Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CPacket.)) (= x (Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. (%Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CPacket.))) )))
(assert (forall ((x vstd!seq.Seq<lib!cmessage_v.CPacket.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CPacket.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CPacket.))) )))
(assert (forall ((x vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. (Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CSingleMessage.)) (= x (Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. (%Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CSingleMessage.))) )))
(assert (forall ((x vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CSingleMessage.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!cmessage_v.CSingleMessage.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!cmessage_v.CSingleMessage.))) )))
(assert (forall ((x vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.)) (= x (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (%Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.))) )))
(assert (forall ((x vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.))) )))
(assert (forall ((x vstd!seq.Seq<lib!io_t.EndPoint.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.)) (= x (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!io_t.EndPoint.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!network_t.Packet.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!network_t.Packet.>. (Poly%vstd!seq.Seq<lib!network_t.Packet.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!network_t.Packet.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.)) (= x (Poly%vstd!seq.Seq<lib!network_t.Packet.>. (%Poly%vstd!seq.Seq<lib!network_t.Packet.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!seq.Seq<lib!network_t.Packet.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!network_t.Packet.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!network_t.Packet.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) (= x (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (%Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) :pattern ((has_type (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) )))
(assert (forall ((x vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (= x (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x))) :pattern ((Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) (= x (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x vstd!set.Set<lib!network_t.Packet.>.)) (! (= x (%Poly%vstd!set.Set<lib!network_t.Packet.>. (Poly%vstd!set.Set<lib!network_t.Packet.>. x))) :pattern ((Poly%vstd!set.Set<lib!network_t.Packet.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) (= x (Poly%vstd!set.Set<lib!network_t.Packet.>. (%Poly%vstd!set.Set<lib!network_t.Packet.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!set.Set<lib!network_t.Packet.>.)) (! (has_type (Poly%vstd!set.Set<lib!network_t.Packet.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) :pattern ((has_type (Poly%vstd!set.Set<lib!network_t.Packet.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) )))
(assert (forall ((x vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.)) (! (= x (%Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x))) :pattern ((Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) (= x (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. (%Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)))) )))
(assert (forall ((x vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>.)) (! (has_type (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.))) :pattern ((has_type (Poly%vstd!set.Set<vstd!set.Set<lib!network_t.Packet.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= x (%Poly%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. x))) :pattern ((Poly%lib!cmessage_v.CMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (= x (Poly%lib!cmessage_v.CMessage. (%Poly%lib!cmessage_v.CMessage. x)))) :pattern ((has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./GetRequest _k!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./GetRequest _k!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./GetRequest/k x) (lib!cmessage_v.CMessage./GetRequest/?k x)) :pattern ((lib!cmessage_v.CMessage./GetRequest/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_v! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _v!) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./SetRequest _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./SetRequest _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./SetRequest/k x) (lib!cmessage_v.CMessage./SetRequest/?k x)) :pattern ((lib!cmessage_v.CMessage./SetRequest/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./SetRequest/v x) (lib!cmessage_v.CMessage./SetRequest/?v x)) :pattern ((lib!cmessage_v.CMessage./SetRequest/v x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%core!option.Option. (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) :pattern ((lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_v! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _v!) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Reply _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Reply _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Reply/k x) (lib!cmessage_v.CMessage./Reply/?k x)) :pattern ((lib!cmessage_v.CMessage./Reply/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Reply/v x) (lib!cmessage_v.CMessage./Reply/?v x)) :pattern ((lib!cmessage_v.CMessage./Reply/v x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%core!option.Option. (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) :pattern ((lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_id! lib!io_t.EndPoint.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Redirect _k! _id!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Redirect _k! _id!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Redirect/k x) (lib!cmessage_v.CMessage./Redirect/?k x)) :pattern ((lib!cmessage_v.CMessage./Redirect/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Redirect/id x) (lib!cmessage_v.CMessage./Redirect/?id x)) :pattern ((lib!cmessage_v.CMessage./Redirect/id x)) )))
(assert (forall ((_kr! lib!keys_t.KeyRange.) (_recipient! lib!io_t.EndPoint.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _kr!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Shard _kr! _recipient!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Shard _kr! _recipient!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Shard/kr x) (lib!cmessage_v.CMessage./Shard/?kr x)) :pattern ((lib!cmessage_v.CMessage./Shard/kr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.KeyRange. (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Shard/recipient x) (lib!cmessage_v.CMessage./Shard/?recipient x)) :pattern ((lib!cmessage_v.CMessage./Shard/recipient x)) )))
(assert (forall ((_range! lib!keys_t.KeyRange.) (_h! lib!hashmap_t.CKeyHashMap.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _range!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Delegate _range! _h!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Delegate _range! _h!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Delegate/range x) (lib!cmessage_v.CMessage./Delegate/?range x)) :pattern ((lib!cmessage_v.CMessage./Delegate/range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.KeyRange. (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Delegate/h x) (lib!cmessage_v.CMessage./Delegate/?h x)) :pattern ((lib!cmessage_v.CMessage./Delegate/h x)) )))
(assert (forall ((x lib!cmessage_v.CPacket.)) (! (= x (%Poly%lib!cmessage_v.CPacket. (Poly%lib!cmessage_v.CPacket. x))) :pattern ((Poly%lib!cmessage_v.CPacket. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CPacket.) (= x (Poly%lib!cmessage_v.CPacket. (%Poly%lib!cmessage_v.CPacket. x)))) :pattern ((has_type x TYPE%lib!cmessage_v.CPacket.)) )))
(assert (forall ((_dst! lib!io_t.EndPoint.) (_src! lib!io_t.EndPoint.) (_msg! lib!cmessage_v.CSingleMessage.)) (! (=> (has_type (Poly%lib!cmessage_v.CSingleMessage. _msg!) TYPE%lib!cmessage_v.CSingleMessage.) (has_type (Poly%lib!cmessage_v.CPacket. (lib!cmessage_v.CPacket./CPacket _dst! _src! _msg!)) TYPE%lib!cmessage_v.CPacket.)) :pattern ((has_type (Poly%lib!cmessage_v.CPacket. (lib!cmessage_v.CPacket./CPacket _dst! _src! _msg!)) TYPE%lib!cmessage_v.CPacket.)) )))
(assert (forall ((x lib!cmessage_v.CPacket.)) (! (= (lib!cmessage_v.CPacket./CPacket/dst x) (lib!cmessage_v.CPacket./CPacket/?dst x)) :pattern ((lib!cmessage_v.CPacket./CPacket/dst x)) )))
(assert (forall ((x lib!cmessage_v.CPacket.)) (! (= (lib!cmessage_v.CPacket./CPacket/src x) (lib!cmessage_v.CPacket./CPacket/?src x)) :pattern ((lib!cmessage_v.CPacket./CPacket/src x)) )))
(assert (forall ((x lib!cmessage_v.CPacket.)) (! (= (lib!cmessage_v.CPacket./CPacket/msg x) (lib!cmessage_v.CPacket./CPacket/?msg x)) :pattern ((lib!cmessage_v.CPacket./CPacket/msg x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CPacket.) (has_type (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. x))) TYPE%lib!cmessage_v.CSingleMessage.)) :pattern ((lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. x)) (has_type x TYPE%lib!cmessage_v.CPacket.)) )))
(assert (forall ((x lib!cmessage_v.CSingleMessage.)) (! (= x (%Poly%lib!cmessage_v.CSingleMessage. (Poly%lib!cmessage_v.CSingleMessage. x))) :pattern ((Poly%lib!cmessage_v.CSingleMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CSingleMessage.) (= x (Poly%lib!cmessage_v.CSingleMessage. (%Poly%lib!cmessage_v.CSingleMessage. x)))) :pattern ((has_type x TYPE%lib!cmessage_v.CSingleMessage.)) )))
(assert (forall ((_seqno! Int) (_dst! lib!io_t.EndPoint.) (_m! lib!cmessage_v.CMessage.)) (! (=> (and (uInv 64 _seqno!) (has_type (Poly%lib!cmessage_v.CMessage. _m!) TYPE%lib!cmessage_v.CMessage.)) (has_type (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CSingleMessage./Message _seqno! _dst! _m!)) TYPE%lib!cmessage_v.CSingleMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CSingleMessage./Message _seqno! _dst! _m!)) TYPE%lib!cmessage_v.CSingleMessage.)) )))
(assert (forall ((x lib!cmessage_v.CSingleMessage.)) (! (= (lib!cmessage_v.CSingleMessage./Message/seqno x) (lib!cmessage_v.CSingleMessage./Message/?seqno x)) :pattern ((lib!cmessage_v.CSingleMessage./Message/seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CSingleMessage.) (uInv 64 (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. x)))) :pattern ((lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. x)) (has_type x TYPE%lib!cmessage_v.CSingleMessage.)) )))
(assert (forall ((x lib!cmessage_v.CSingleMessage.)) (! (= (lib!cmessage_v.CSingleMessage./Message/dst x) (lib!cmessage_v.CSingleMessage./Message/?dst x)) :pattern ((lib!cmessage_v.CSingleMessage./Message/dst x)) )))
(assert (forall ((x lib!cmessage_v.CSingleMessage.)) (! (= (lib!cmessage_v.CSingleMessage./Message/m x) (lib!cmessage_v.CSingleMessage./Message/?m x)) :pattern ((lib!cmessage_v.CSingleMessage./Message/m x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CSingleMessage.) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. x))) TYPE%lib!cmessage_v.CMessage.)) :pattern ((lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. x)) (has_type x TYPE%lib!cmessage_v.CSingleMessage.)) )))
(assert (forall ((_ack_seqno! Int)) (! (=> (uInv 64 _ack_seqno!) (has_type (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CSingleMessage./Ack _ack_seqno!)) TYPE%lib!cmessage_v.CSingleMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CSingleMessage./Ack _ack_seqno!)) TYPE%lib!cmessage_v.CSingleMessage.)) )))
(assert (forall ((x lib!cmessage_v.CSingleMessage.)) (! (= (lib!cmessage_v.CSingleMessage./Ack/ack_seqno x) (lib!cmessage_v.CSingleMessage./Ack/?ack_seqno x)) :pattern ((lib!cmessage_v.CSingleMessage./Ack/ack_seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CSingleMessage.) (uInv 64 (lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. x)))) :pattern ((lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. x)) (has_type x TYPE%lib!cmessage_v.CSingleMessage.)) )))
(assert (has_type (Poly%lib!cmessage_v.CSingleMessage. lib!cmessage_v.CSingleMessage./InvalidMessage) TYPE%lib!cmessage_v.CSingleMessage.))
(assert (forall ((x lib!host_impl_v.Parameters.)) (! (= x (%Poly%lib!host_impl_v.Parameters. (Poly%lib!host_impl_v.Parameters. x))) :pattern ((Poly%lib!host_impl_v.Parameters. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_impl_v.Parameters.) (= x (Poly%lib!host_impl_v.Parameters. (%Poly%lib!host_impl_v.Parameters. x)))) :pattern ((has_type x TYPE%lib!host_impl_v.Parameters.)) )))
(assert (forall ((_max_seqno! Int) (_max_delegations! Int)) (! (=> (and (uInv 64 _max_seqno!) (uInv 64 _max_delegations!)) (has_type (Poly%lib!host_impl_v.Parameters. (lib!host_impl_v.Parameters./Parameters _max_seqno! _max_delegations!)) TYPE%lib!host_impl_v.Parameters.)) :pattern ((has_type (Poly%lib!host_impl_v.Parameters. (lib!host_impl_v.Parameters./Parameters _max_seqno! _max_delegations!)) TYPE%lib!host_impl_v.Parameters.)) )))
(assert (forall ((x lib!host_impl_v.Parameters.)) (! (= (lib!host_impl_v.Parameters./Parameters/max_seqno x) (lib!host_impl_v.Parameters./Parameters/?max_seqno x)) :pattern ((lib!host_impl_v.Parameters./Parameters/max_seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_impl_v.Parameters.) (uInv 64 (lib!host_impl_v.Parameters./Parameters/max_seqno (%Poly%lib!host_impl_v.Parameters. x)))) :pattern ((lib!host_impl_v.Parameters./Parameters/max_seqno (%Poly%lib!host_impl_v.Parameters. x)) (has_type x TYPE%lib!host_impl_v.Parameters.)) )))
(assert (forall ((x lib!host_impl_v.Parameters.)) (! (= (lib!host_impl_v.Parameters./Parameters/max_delegations x) (lib!host_impl_v.Parameters./Parameters/?max_delegations x)) :pattern ((lib!host_impl_v.Parameters./Parameters/max_delegations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!host_impl_v.Parameters.) (uInv 64 (lib!host_impl_v.Parameters./Parameters/max_delegations (%Poly%lib!host_impl_v.Parameters. x)))) :pattern ((lib!host_impl_v.Parameters./Parameters/max_delegations (%Poly%lib!host_impl_v.Parameters. x)) (has_type x TYPE%lib!host_impl_v.Parameters.)) )))
(assert (forall ((x lib!single_delivery_model_v.ReceiveImplResult.)) (! (= x (%Poly%lib!single_delivery_model_v.ReceiveImplResult. (Poly%lib!single_delivery_model_v.ReceiveImplResult. x))) :pattern ((Poly%lib!single_delivery_model_v.ReceiveImplResult. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (= x (Poly%lib!single_delivery_model_v.ReceiveImplResult. (%Poly%lib!single_delivery_model_v.ReceiveImplResult. x)))) :pattern ((has_type x TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) )))
(assert (forall ((_ack! lib!cmessage_v.CPacket.)) (! (=> (has_type (Poly%lib!cmessage_v.CPacket. _ack!) TYPE%lib!cmessage_v.CPacket.) (has_type (Poly%lib!single_delivery_model_v.ReceiveImplResult. (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket _ack!)) TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) :pattern ((has_type (Poly%lib!single_delivery_model_v.ReceiveImplResult. (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket _ack!)) TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) )))
(assert (forall ((x lib!single_delivery_model_v.ReceiveImplResult.)) (! (= (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack x) (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/?ack x)) :pattern ((lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (has_type (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. x))) TYPE%lib!cmessage_v.CPacket.)) :pattern ((lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. x)) (has_type x TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) )))
(assert (forall ((_ack! lib!cmessage_v.CPacket.)) (! (=> (has_type (Poly%lib!cmessage_v.CPacket. _ack!) TYPE%lib!cmessage_v.CPacket.) (has_type (Poly%lib!single_delivery_model_v.ReceiveImplResult. (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket _ack!)) TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) :pattern ((has_type (Poly%lib!single_delivery_model_v.ReceiveImplResult. (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket _ack!)) TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) )))
(assert (forall ((x lib!single_delivery_model_v.ReceiveImplResult.)) (! (= (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack x) (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/?ack x)) :pattern ((lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (has_type (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. x))) TYPE%lib!cmessage_v.CPacket.)) :pattern ((lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. x)) (has_type x TYPE%lib!single_delivery_model_v.ReceiveImplResult.)) )))
(assert (has_type (Poly%lib!single_delivery_model_v.ReceiveImplResult. lib!single_delivery_model_v.ReceiveImplResult./AckOrInvalid) TYPE%lib!single_delivery_model_v.ReceiveImplResult.))
(assert (forall ((x lib!single_delivery_state_v.CAckState.)) (! (= x (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. x))) :pattern ((Poly%lib!single_delivery_state_v.CAckState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_state_v.CAckState.) (= x (Poly%lib!single_delivery_state_v.CAckState. (%Poly%lib!single_delivery_state_v.CAckState. x)))) :pattern ((has_type x TYPE%lib!single_delivery_state_v.CAckState.)) )))
(assert (forall ((_num_packets_acked! Int) (_un_acked! alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>.)) (! (=> (uInv 64 _num_packets_acked!) (has_type (Poly%lib!single_delivery_state_v.CAckState. (lib!single_delivery_state_v.CAckState./CAckState _num_packets_acked! _un_acked!)) TYPE%lib!single_delivery_state_v.CAckState.)) :pattern ((has_type (Poly%lib!single_delivery_state_v.CAckState. (lib!single_delivery_state_v.CAckState./CAckState _num_packets_acked! _un_acked!)) TYPE%lib!single_delivery_state_v.CAckState.)) )))
(assert (forall ((x lib!single_delivery_state_v.CAckState.)) (! (= (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked x) (lib!single_delivery_state_v.CAckState./CAckState/?num_packets_acked x)) :pattern ((lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_state_v.CAckState.) (uInv 64 (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. x)))) :pattern ((lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. x)) (has_type x TYPE%lib!single_delivery_state_v.CAckState.)) )))
(assert (forall ((x lib!single_delivery_state_v.CAckState.)) (! (= (lib!single_delivery_state_v.CAckState./CAckState/un_acked x) (lib!single_delivery_state_v.CAckState./CAckState/?un_acked x)) :pattern ((lib!single_delivery_state_v.CAckState./CAckState/un_acked x)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!single_delivery_state_v.CAckState.) (has_type y TYPE%lib!single_delivery_state_v.CAckState.) (= (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. x)) (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. y))) (= (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. x)) (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. y)))) (ext_eq deep TYPE%lib!single_delivery_state_v.CAckState. x y)) :pattern ((ext_eq deep TYPE%lib!single_delivery_state_v.CAckState. x y)) )))
(assert (forall ((x lib!single_delivery_state_v.CTombstoneTable.)) (! (= x (%Poly%lib!single_delivery_state_v.CTombstoneTable. (Poly%lib!single_delivery_state_v.CTombstoneTable. x))) :pattern ((Poly%lib!single_delivery_state_v.CTombstoneTable. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_state_v.CTombstoneTable.) (= x (Poly%lib!single_delivery_state_v.CTombstoneTable. (%Poly%lib!single_delivery_state_v.CTombstoneTable. x)))) :pattern ((has_type x TYPE%lib!single_delivery_state_v.CTombstoneTable.)) )))
(assert (forall ((x lib!single_delivery_state_v.CTombstoneTable.)) (! (= (lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable/epmap x) (lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable/?epmap x)) :pattern ((lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable/epmap x)) )))
(assert (forall ((x lib!single_delivery_state_v.CTombstoneTable.)) (! (has_type (Poly%lib!single_delivery_state_v.CTombstoneTable. x) TYPE%lib!single_delivery_state_v.CTombstoneTable.) :pattern ((has_type (Poly%lib!single_delivery_state_v.CTombstoneTable. x) TYPE%lib!single_delivery_state_v.CTombstoneTable.)) )))
(assert (forall ((x lib!single_delivery_state_v.CSendState.)) (! (= x (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. x))) :pattern ((Poly%lib!single_delivery_state_v.CSendState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_state_v.CSendState.) (= x (Poly%lib!single_delivery_state_v.CSendState. (%Poly%lib!single_delivery_state_v.CSendState. x)))) :pattern ((has_type x TYPE%lib!single_delivery_state_v.CSendState.)) )))
(assert (forall ((x lib!single_delivery_state_v.CSendState.)) (! (= (lib!single_delivery_state_v.CSendState./CSendState/epmap x) (lib!single_delivery_state_v.CSendState./CSendState/?epmap x)) :pattern ((lib!single_delivery_state_v.CSendState./CSendState/epmap x)) )))
(assert (forall ((x lib!single_delivery_state_v.CSendState.)) (! (has_type (Poly%lib!single_delivery_state_v.CSendState. x) TYPE%lib!single_delivery_state_v.CSendState.) :pattern ((has_type (Poly%lib!single_delivery_state_v.CSendState. x) TYPE%lib!single_delivery_state_v.CSendState.)) )))
(assert (forall ((x lib!single_delivery_state_v.CSingleDelivery.)) (! (= x (%Poly%lib!single_delivery_state_v.CSingleDelivery. (Poly%lib!single_delivery_state_v.CSingleDelivery. x))) :pattern ((Poly%lib!single_delivery_state_v.CSingleDelivery. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!single_delivery_state_v.CSingleDelivery.) (= x (Poly%lib!single_delivery_state_v.CSingleDelivery. (%Poly%lib!single_delivery_state_v.CSingleDelivery. x)))) :pattern ((has_type x TYPE%lib!single_delivery_state_v.CSingleDelivery.)) )))
(assert (forall ((x lib!single_delivery_state_v.CSingleDelivery.)) (! (= (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/receive_state x) (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/?receive_state x)) :pattern ((lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/receive_state x)) )))
(assert (forall ((x lib!single_delivery_state_v.CSingleDelivery.)) (! (= (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state x) (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/?send_state x)) :pattern ((lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state x)) )))
(assert (forall ((x lib!single_delivery_state_v.CSingleDelivery.)) (! (has_type (Poly%lib!single_delivery_state_v.CSingleDelivery. x) TYPE%lib!single_delivery_state_v.CSingleDelivery.) :pattern ((has_type (Poly%lib!single_delivery_state_v.CSingleDelivery. x) TYPE%lib!single_delivery_state_v.CSingleDelivery.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= x (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. x))) :pattern ((Poly%lib!abstract_end_point_t.AbstractEndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (= x (Poly%lib!abstract_end_point_t.AbstractEndPoint. (%Poly%lib!abstract_end_point_t.AbstractEndPoint. x)))) :pattern ((has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id x)) :pattern ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.) :pattern ((has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_parameters_t.AbstractParameters.)) (! (= x (%Poly%lib!abstract_parameters_t.AbstractParameters. (Poly%lib!abstract_parameters_t.AbstractParameters. x))) :pattern ((Poly%lib!abstract_parameters_t.AbstractParameters. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.) (= x (Poly%lib!abstract_parameters_t.AbstractParameters. (%Poly%lib!abstract_parameters_t.AbstractParameters. x)))) :pattern ((has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((_max_seqno! Int) (_max_delegations! Int)) (! (=> (and (<= 0 _max_seqno!) (<= 0 _max_delegations!)) (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.AbstractParameters./AbstractParameters _max_seqno! _max_delegations!)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) :pattern ((has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.AbstractParameters./AbstractParameters _max_seqno! _max_delegations!)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((x lib!abstract_parameters_t.AbstractParameters.)) (! (= (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno x) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_seqno x)) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.) (<= 0 (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. x)))) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. x)) (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((x lib!abstract_parameters_t.AbstractParameters.)) (! (= (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations x) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/?max_delegations x)) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.) (<= 0 (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (%Poly%lib!abstract_parameters_t.AbstractParameters. x)))) :pattern ((lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_delegations (%Poly%lib!abstract_parameters_t.AbstractParameters. x)) (has_type x TYPE%lib!abstract_parameters_t.AbstractParameters.)) )))
(assert (forall ((x lib!hashmap_t.CKeyKV.)) (! (= x (%Poly%lib!hashmap_t.CKeyKV. (Poly%lib!hashmap_t.CKeyKV. x))) :pattern ((Poly%lib!hashmap_t.CKeyKV. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!hashmap_t.CKeyKV.) (= x (Poly%lib!hashmap_t.CKeyKV. (%Poly%lib!hashmap_t.CKeyKV. x)))) :pattern ((has_type x TYPE%lib!hashmap_t.CKeyKV.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_v! alloc!vec.Vec<u8./allocator_global%.>.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!hashmap_t.CKeyKV. (lib!hashmap_t.CKeyKV./CKeyKV _k! _v!)) TYPE%lib!hashmap_t.CKeyKV.)) :pattern ((has_type (Poly%lib!hashmap_t.CKeyKV. (lib!hashmap_t.CKeyKV./CKeyKV _k! _v!)) TYPE%lib!hashmap_t.CKeyKV.)) )))
(assert (forall ((x lib!hashmap_t.CKeyKV.)) (! (= (lib!hashmap_t.CKeyKV./CKeyKV/k x) (lib!hashmap_t.CKeyKV./CKeyKV/?k x)) :pattern ((lib!hashmap_t.CKeyKV./CKeyKV/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!hashmap_t.CKeyKV.) (has_type (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. x)) (has_type x TYPE%lib!hashmap_t.CKeyKV.)) )))
(assert (forall ((x lib!hashmap_t.CKeyKV.)) (! (= (lib!hashmap_t.CKeyKV./CKeyKV/v x) (lib!hashmap_t.CKeyKV./CKeyKV/?v x)) :pattern ((lib!hashmap_t.CKeyKV./CKeyKV/v x)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= x (%Poly%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x))) :pattern ((Poly%lib!io_t.EndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.EndPoint.) (= x (Poly%lib!io_t.EndPoint. (%Poly%lib!io_t.EndPoint. x)))) :pattern ((has_type x TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= (lib!io_t.EndPoint./EndPoint/id x) (lib!io_t.EndPoint./EndPoint/?id x)) :pattern ((lib!io_t.EndPoint./EndPoint/id x)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.) :pattern ((has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (= x (%Poly%lib!keys_t.Ordering. (Poly%lib!keys_t.Ordering. x))) :pattern ((Poly%lib!keys_t.Ordering. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.Ordering.) (= x (Poly%lib!keys_t.Ordering. (%Poly%lib!keys_t.Ordering. x)))) :pattern ((has_type x TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.) :pattern ((has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= x (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. x))) :pattern ((Poly%lib!keys_t.KeyIterator. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (= x (Poly%lib!keys_t.KeyIterator. (%Poly%lib!keys_t.KeyIterator. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_k! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _k!) (TYPE%core!option.Option. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= (lib!keys_t.KeyIterator./KeyIterator/k x) (lib!keys_t.KeyIterator./KeyIterator/?k x)) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x))) (TYPE%core!option.Option. K&. K&))) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x)) (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(define-fun is-lib!keys_t.KeyIterator./KeyIterator_ ((c lib!keys_t.KeyIterator.)) Bool ((_ is lib!keys_t.KeyIterator./KeyIterator) c))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (=> (is-lib!keys_t.KeyIterator./KeyIterator_ x) (height_lt (height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x))) (height (Poly%lib!keys_t.KeyIterator. x)))) :pattern ((height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= x (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. x))) :pattern ((Poly%lib!keys_t.KeyRange. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (= x (Poly%lib!keys_t.KeyRange. (%Poly%lib!keys_t.KeyRange. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_lo! lib!keys_t.KeyIterator.) (_hi! lib!keys_t.KeyIterator.)) (! (=> (and (has_type (Poly%lib!keys_t.KeyIterator. _lo!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. _hi!) (TYPE%lib!keys_t.KeyIterator. K&. K&))) (has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/lo x) (lib!keys_t.KeyRange./KeyRange/?lo x)) :pattern ((lib!keys_t.KeyRange./KeyRange/lo x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/hi x) (lib!keys_t.KeyRange./KeyRange/?hi x)) :pattern ((lib!keys_t.KeyRange./KeyRange/hi x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(define-fun is-lib!keys_t.KeyRange./KeyRange_ ((c lib!keys_t.KeyRange.)) Bool ((_ is lib!keys_t.KeyRange./KeyRange) c))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x)))) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= x (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x))) :pattern ((Poly%lib!keys_t.SHTKey. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (= x (Poly%lib!keys_t.SHTKey. (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((_ukey! Int)) (! (=> (uInv 64 _ukey!) (has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= (lib!keys_t.SHTKey./SHTKey/ukey x) (lib!keys_t.SHTKey./SHTKey/?ukey x)) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)) (has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= x (%Poly%lib!message_t.Message. (Poly%lib!message_t.Message. x))) :pattern ((Poly%lib!message_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (= x (Poly%lib!message_t.Message. (%Poly%lib!message_t.Message. x)))) :pattern ((has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./GetRequest _key!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./GetRequest _key!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./GetRequest/key x) (lib!message_t.Message./GetRequest/?key x)) :pattern ((lib!message_t.Message./GetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./GetRequest/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.) (_value! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./SetRequest _key! _value!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./SetRequest _key! _value!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./SetRequest/key x) (lib!message_t.Message./SetRequest/?key x)) :pattern ((lib!message_t.Message./SetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./SetRequest/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./SetRequest/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./SetRequest/value x) (lib!message_t.Message./SetRequest/?value x)) :pattern ((lib!message_t.Message./SetRequest/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%core!option.Option. (lib!message_t.Message./SetRequest/value (%Poly%lib!message_t.Message. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!message_t.Message./SetRequest/value (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.) (_value! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Reply _key! _value!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Reply _key! _value!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Reply/key x) (lib!message_t.Message./Reply/?key x)) :pattern ((lib!message_t.Message./Reply/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./Reply/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./Reply/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Reply/value x) (lib!message_t.Message./Reply/?value x)) :pattern ((lib!message_t.Message./Reply/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%core!option.Option. (lib!message_t.Message./Reply/value (%Poly%lib!message_t.Message. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!message_t.Message./Reply/value (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((_key! lib!keys_t.SHTKey.) (_id! lib!abstract_end_point_t.AbstractEndPoint.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _key!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Redirect _key! _id!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Redirect _key! _id!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Redirect/key x) (lib!message_t.Message./Redirect/?key x)) :pattern ((lib!message_t.Message./Redirect/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.SHTKey. (lib!message_t.Message./Redirect/key (%Poly%lib!message_t.Message. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!message_t.Message./Redirect/key (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Redirect/id x) (lib!message_t.Message./Redirect/?id x)) :pattern ((lib!message_t.Message./Redirect/id x)) )))
(assert (forall ((_range! lib!keys_t.KeyRange.) (_recipient! lib!abstract_end_point_t.AbstractEndPoint.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _range!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Shard _range! _recipient!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Shard _range! _recipient!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Shard/range x) (lib!message_t.Message./Shard/?range x)) :pattern ((lib!message_t.Message./Shard/range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.KeyRange. (lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!message_t.Message./Shard/range (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Shard/recipient x) (lib!message_t.Message./Shard/?recipient x)) :pattern ((lib!message_t.Message./Shard/recipient x)) )))
(assert (forall ((_range! lib!keys_t.KeyRange.) (_h! vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _range!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Delegate _range! _h!)) TYPE%lib!message_t.Message.)) :pattern ((has_type (Poly%lib!message_t.Message. (lib!message_t.Message./Delegate _range! _h!)) TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Delegate/range x) (lib!message_t.Message./Delegate/?range x)) :pattern ((lib!message_t.Message./Delegate/range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!message_t.Message.) (has_type (Poly%lib!keys_t.KeyRange. (lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!message_t.Message./Delegate/range (%Poly%lib!message_t.Message. x)) (has_type x TYPE%lib!message_t.Message.)) )))
(assert (forall ((x lib!message_t.Message.)) (! (= (lib!message_t.Message./Delegate/h x) (lib!message_t.Message./Delegate/?h x)) :pattern ((lib!message_t.Message./Delegate/h x)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= x (%Poly%lib!network_t.Packet. (Poly%lib!network_t.Packet. x))) :pattern ((Poly%lib!network_t.Packet. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!network_t.Packet.) (= x (Poly%lib!network_t.Packet. (%Poly%lib!network_t.Packet. x)))) :pattern ((has_type x TYPE%lib!network_t.Packet.)) )))
(assert (forall ((_dst! lib!abstract_end_point_t.AbstractEndPoint.) (_src! lib!abstract_end_point_t.AbstractEndPoint.) (_msg! lib!single_message_t.SingleMessage.)) (! (=> (has_type (Poly%lib!single_message_t.SingleMessage. _msg!) (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)) (has_type (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet _dst! _src! _msg!)) TYPE%lib!network_t.Packet.)) :pattern ((has_type (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet _dst! _src! _msg!)) TYPE%lib!network_t.Packet.)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= (lib!network_t.Packet./Packet/dst x) (lib!network_t.Packet./Packet/?dst x)) :pattern ((lib!network_t.Packet./Packet/dst x)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= (lib!network_t.Packet./Packet/src x) (lib!network_t.Packet./Packet/?src x)) :pattern ((lib!network_t.Packet./Packet/src x)) )))
(assert (forall ((x lib!network_t.Packet.)) (! (= (lib!network_t.Packet./Packet/msg x) (lib!network_t.Packet./Packet/?msg x)) :pattern ((lib!network_t.Packet./Packet/msg x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!network_t.Packet.) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. x))) (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) :pattern ((lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. x)) (has_type x TYPE%lib!network_t.Packet.)) )))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (= x (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. x))) :pattern ((Poly%lib!single_delivery_t.AckState. x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (= x (Poly%lib!single_delivery_t.AckState. (%Poly%lib!single_delivery_t.AckState. x)))) :pattern ((has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_num_packets_acked! Int) (_un_acked! Poly)) (! (=> (and (<= 0 _num_packets_acked!) (has_type _un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)))) (has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState./AckState _num_packets_acked! _un_acked!)) (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) :pattern ((has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState./AckState _num_packets_acked! _un_acked!)) (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (= (lib!single_delivery_t.AckState./AckState/num_packets_acked x) (lib!single_delivery_t.AckState./AckState/?num_packets_acked x)) :pattern ((lib!single_delivery_t.AckState./AckState/num_packets_acked x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (<= 0 (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. x)))) :pattern ((lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. x)) (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (= (lib!single_delivery_t.AckState./AckState/un_acked x) (lib!single_delivery_t.AckState./AckState/?un_acked x)) :pattern ((lib!single_delivery_t.AckState./AckState/un_acked x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (has_type (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)))) :pattern ((lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. x)) (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) )))
(define-fun is-lib!single_delivery_t.AckState./AckState_ ((c lib!single_delivery_t.AckState.)) Bool ((_ is lib!single_delivery_t.AckState./AckState) c))
(assert (forall ((x lib!single_delivery_t.AckState.)) (! (=> (is-lib!single_delivery_t.AckState./AckState_ x) (height_lt (height (lib!single_delivery_t.AckState./AckState/un_acked x)) (height (Poly%lib!single_delivery_t.AckState. x)))) :pattern ((height (lib!single_delivery_t.AckState./AckState/un_acked x))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (has_type y (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (= (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. x)) (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. x)) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. y)))) (ext_eq deep (TYPE%lib!single_delivery_t.AckState. MT&. MT&) x y)) :pattern ((ext_eq deep (TYPE%lib!single_delivery_t.AckState. MT&. MT&) x y)) )))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (= x (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. x))) :pattern ((Poly%lib!single_delivery_t.SingleDelivery. x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (= x (Poly%lib!single_delivery_t.SingleDelivery. (%Poly%lib!single_delivery_t.SingleDelivery. x)))) :pattern ((has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_receive_state! vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.) (_send_state! Poly)) (! (=> (has_type _send_state! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) (has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery./SingleDelivery _receive_state! _send_state!)) (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) :pattern ((has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery./SingleDelivery _receive_state! _send_state!)) (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) )))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (= (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state x) (lib!single_delivery_t.SingleDelivery./SingleDelivery/?receive_state x)) :pattern ((lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state x)) )))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (= (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x) (lib!single_delivery_t.SingleDelivery./SingleDelivery/?send_state x)) :pattern ((lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (has_type (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. x)) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)))) :pattern ((lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. x)) (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&))) )))
(define-fun is-lib!single_delivery_t.SingleDelivery./SingleDelivery_ ((c lib!single_delivery_t.SingleDelivery.)) Bool ((_ is lib!single_delivery_t.SingleDelivery./SingleDelivery) c))
(assert (forall ((x lib!single_delivery_t.SingleDelivery.)) (! (=> (is-lib!single_delivery_t.SingleDelivery./SingleDelivery_ x) (height_lt (height (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x)) (height (Poly%lib!single_delivery_t.SingleDelivery. x)))) :pattern ((height (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state x))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (has_type y (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&)) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. x))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. y)))) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. x)) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. y)))) (ext_eq deep (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&) x y)) :pattern ((ext_eq deep (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&) x y)) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= x (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. x))) :pattern ((Poly%lib!single_message_t.SingleMessage. x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (= x (Poly%lib!single_message_t.SingleMessage. (%Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_seqno! Int) (_dst! lib!abstract_end_point_t.AbstractEndPoint.) (_m! Poly)) (! (=> (and (<= 0 _seqno!) (has_type _m! MT&)) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Message _seqno! _dst! _m!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) :pattern ((has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Message _seqno! _dst! _m!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Message/seqno x) (lib!single_message_t.SingleMessage./Message/?seqno x)) :pattern ((lib!single_message_t.SingleMessage./Message/seqno x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. x)) (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Message/dst x) (lib!single_message_t.SingleMessage./Message/?dst x)) :pattern ((lib!single_message_t.SingleMessage./Message/dst x)) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Message/m x) (lib!single_message_t.SingleMessage./Message/?m x)) :pattern ((lib!single_message_t.SingleMessage./Message/m x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (has_type (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. x)) MT&)) :pattern ((lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. x)) (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type) (_ack_seqno! Int)) (! (=> (<= 0 _ack_seqno!) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Ack _ack_seqno!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) :pattern ((has_type (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Ack _ack_seqno!)) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (= (lib!single_message_t.SingleMessage./Ack/ack_seqno x) (lib!single_message_t.SingleMessage./Ack/?ack_seqno x)) :pattern ((lib!single_message_t.SingleMessage./Ack/ack_seqno x)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. x)) (has_type x (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(assert (forall ((MT&. Dcr) (MT& Type)) (! (has_type (Poly%lib!single_message_t.SingleMessage. lib!single_message_t.SingleMessage./InvalidMessage) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) :pattern ((has_type (Poly%lib!single_message_t.SingleMessage. lib!single_message_t.SingleMessage./InvalidMessage) (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) )))
(define-fun is-lib!single_message_t.SingleMessage./Message_ ((c lib!single_message_t.SingleMessage.)) Bool ((_ is lib!single_message_t.SingleMessage./Message) c))
(assert (forall ((x lib!single_message_t.SingleMessage.)) (! (=> (is-lib!single_message_t.SingleMessage./Message_ x) (height_lt (height (lib!single_message_t.SingleMessage./Message/m x)) (height (Poly%lib!single_message_t.SingleMessage. x)))) :pattern ((height (lib!single_message_t.SingleMessage./Message/m x))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshal_v.Marshalable. (Dcr Type) Bool)
(declare-fun tr_bound%lib!verus_extra.clone_v.VerusClone. (Dcr Type) Bool)
(declare-fun tr_bound%lib!keys_t.KeyTrait. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!marshal_v.Marshalable. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!keys_t.KeyTrait. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u64_to_le_bytes")
(declare-fun vstd!bytes.spec_u64_to_le_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u64_from_le_bytes")
(declare-fun vstd!bytes.spec_u64_from_le_bytes.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::drop_last")
(declare-fun vstd!seq_lib.impl&%0.drop_last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::fold_left")
(declare-fun vstd!seq_lib.impl&%0.fold_left.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshal_v::Marshalable::is_marshalable")
(declare-fun lib!marshal_v.Marshalable.is_marshalable.? (Dcr Type Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.is_marshalable%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshal_v::Marshalable::ghost_serialize")
(declare-fun lib!marshal_v.Marshalable.ghost_serialize.? (Dcr Type Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.ghost_serialize%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshal_v::Marshalable::view_equal")
(declare-fun lib!marshal_v.Marshalable.view_equal.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.view_equal%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::endpoint_hashmap_t::HashMap::view")
(declare-fun lib!endpoint_hashmap_t.impl&%0.view.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::view")
(declare-fun lib!io_t.impl&%4.view.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::endpoint_hashmap_t::HashMap::get_spec")
(declare-fun lib!endpoint_hashmap_t.impl&%0.get_spec.? (Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::endpoint_hashmap_t::HashMap::put_spec")
(declare-fun lib!endpoint_hashmap_t.impl&%0.put_spec.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::endpoint_hashmap_t::HashMap::swap_spec")
(declare-fun lib!endpoint_hashmap_t.impl&%0.swap_spec.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map_values")
(declare-fun vstd!seq_lib.impl&%0.map_values.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::hashmap_t::CKeyHashMap::view")
(declare-fun lib!hashmap_t.impl&%0.view.? (Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::lt")
(declare-fun lib!delegation_map_v.impl&%0.lt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyTrait::cmp_spec")
(declare-fun lib!keys_t.KeyTrait.cmp_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!keys_t.KeyTrait.cmp_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::lt_spec")
(declare-fun lib!keys_t.impl&%3.lt_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::hashmap_t::CKeyHashMap::spec_to_vec")
(declare-fun lib!hashmap_t.impl&%0.spec_to_vec.? (Poly) alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)
(set-info :comment ";; Function-Decl lib::hashmap_t::ckeykvlt")
(declare-fun lib!hashmap_t.ckeykvlt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::hashmap_t::spec_sorted_keys")
(declare-fun lib!hashmap_t.spec_sorted_keys.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::max_hashtable_size")
(declare-fun lib!host_protocol_t.max_hashtable_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::app_interface_t::valid_key")
(declare-fun lib!app_interface_t.valid_key.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::app_interface_t::max_val_len")
(declare-fun lib!app_interface_t.max_val_len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::app_interface_t::valid_value")
(declare-fun lib!app_interface_t.valid_value.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::host_protocol_t::valid_hashtable")
(declare-fun lib!host_protocol_t.valid_hashtable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(declare-fun lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::abstractable")
(declare-fun lib!io_t.impl&%4.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::map_values")
(declare-fun vstd!map_lib.impl&%0.map_values.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::check_argument_is_seq")
(declare-fun vstd!seq_lib.check_argument_is_seq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::map")
(declare-fun vstd!set_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::check_argument_is_set")
(declare-fun vstd!set_lib.check_argument_is_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::verus_extra::set_lib_ext_v::flatten_sets")
(declare-fun lib!verus_extra.set_lib_ext_v.flatten_sets.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::cmessage_v::optional_value_view")
(declare-fun lib!cmessage_v.optional_value_view.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::abstract_end_point_t::AbstractEndPoint::abstractable")
(declare-fun lib!abstract_end_point_t.impl&%0.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::cmessage_v::CMessage::abstractable")
(declare-fun lib!cmessage_v.impl&%1.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::cmessage_v::CMessage::view")
(declare-fun lib!cmessage_v.impl&%1.view.? (Poly) lib!message_t.Message.)
(set-info :comment ";; Function-Decl lib::host_protocol_t::valid_optional_value")
(declare-fun lib!host_protocol_t.valid_optional_value.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::geq_spec")
(declare-fun lib!keys_t.impl&%3.geq_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::is_empty")
(declare-fun lib!keys_t.impl&%4.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::cmessage_v::CMessage::message_marshallable")
(declare-fun lib!cmessage_v.impl&%1.message_marshallable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::cmessage_v::CSingleMessage::view")
(declare-fun lib!cmessage_v.impl&%2.view.? (Poly) lib!single_message_t.SingleMessage.)
(set-info :comment ";; Function-Decl lib::cmessage_v::abstractify_cmessage_seq")
(declare-fun lib!cmessage_v.abstractify_cmessage_seq.? (Poly) vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>.)
(set-info :comment ";; Function-Decl lib::cmessage_v::CSingleMessage::abstractable")
(declare-fun lib!cmessage_v.impl&%2.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_parameters_t::AbstractParameters::static_params")
(declare-fun lib!abstract_parameters_t.impl&%0.static_params.? (Poly) lib!abstract_parameters_t.AbstractParameters.)
(set-info :comment ";; Function-Decl lib::cmessage_v::CPacket::view")
(declare-fun lib!cmessage_v.impl&%3.view.? (Poly) lib!network_t.Packet.)
(set-info :comment ";; Function-Decl lib::cmessage_v::CPacket::abstractable")
(declare-fun lib!cmessage_v.impl&%3.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::cmessage_v::cpacket_seq_is_abstractable")
(declare-fun lib!cmessage_v.cpacket_seq_is_abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::cmessage_v::abstractify_seq_of_cpackets_to_set_of_sht_packets")
(declare-fun lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets.? (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::cmessage_v::CSingleMessage::arrow_Message_seqno")
(declare-fun lib!cmessage_v.impl&%5.arrow_Message_seqno.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::cmessage_v::CSingleMessage::arrow_Message_dst")
(declare-fun lib!cmessage_v.impl&%5.arrow_Message_dst.? (Poly) lib!io_t.EndPoint.)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::forward_bijection_for_view_equality_do_not_use_for_anything_else")
(declare-fun lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(set-info :comment ";; Function-Decl lib::keys_t::SHTKey::forward_bijection_for_view_equality_do_not_use_for_anything_else")
(declare-fun lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::forward_bijection_for_view_equality_do_not_use_for_anything_else")
(declare-fun lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? (Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::marshal_ironsht_specific_v::ckeyhashmap_max_serialized_size")
(declare-fun lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::host_impl_v::Parameters::view")
(declare-fun lib!host_impl_v.impl&%1.view.? (Poly) lib!abstract_parameters_t.AbstractParameters.)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CTombstoneTable::view")
(declare-fun lib!single_delivery_state_v.impl&%1.view.? (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::view")
(declare-fun lib!single_delivery_state_v.impl&%0.view.? (Poly) lib!single_delivery_t.AckState.)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSendState::view")
(declare-fun lib!single_delivery_state_v.impl&%2.view.? (Poly) vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSingleDelivery::view")
(declare-fun lib!single_delivery_state_v.impl&%3.view.? (Poly) lib!single_delivery_t.SingleDelivery.)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CTombstoneTable::abstractable")
(declare-fun lib!single_delivery_state_v.impl&%1.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::abstractable")
(declare-fun lib!single_delivery_state_v.impl&%0.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::endpoint_hashmap_t::HashMap::spec_index")
(declare-fun lib!endpoint_hashmap_t.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSendState::abstractable")
(declare-fun lib!single_delivery_state_v.impl&%2.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSingleDelivery::abstractable")
(declare-fun lib!single_delivery_state_v.impl&%3.abstractable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::un_acked_valid")
(declare-fun lib!single_delivery_state_v.impl&%0.un_acked_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::no_acks_in_unacked")
(declare-fun lib!single_delivery_state_v.impl&%0.no_acks_in_unacked.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::un_acked_list_sequential")
(declare-fun lib!single_delivery_state_v.impl&%0.un_acked_list_sequential.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::un_acked_list_valid")
(declare-fun lib!single_delivery_state_v.impl&%0.un_acked_list_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::un_acked_list_valid_for_dst")
(declare-fun lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::valid_list")
(declare-fun lib!single_delivery_state_v.impl&%0.valid_list.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CAckState::valid")
(declare-fun lib!single_delivery_state_v.impl&%0.valid.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSendState::valid")
(declare-fun lib!single_delivery_state_v.impl&%2.valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSingleDelivery::valid")
(declare-fun lib!single_delivery_state_v.impl&%3.valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Message_dst")
(declare-fun lib!single_message_t.impl&%0.arrow_Message_dst.? (Dcr Type Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::ack_state_lookup")
(declare-fun lib!single_delivery_t.ack_state_lookup.? (Dcr Type Poly Poly) lib!single_delivery_t.AckState.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::send_single_message")
(declare-fun lib!single_delivery_t.impl&%1.send_single_message.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Message_seqno")
(declare-fun lib!single_message_t.impl&%0.arrow_Message_seqno.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::net_sht_v::outbound_packet_is_valid")
(declare-fun lib!net_sht_v.outbound_packet_is_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::net_sht_v::outbound_packet_seq_is_valid")
(declare-fun lib!net_sht_v.outbound_packet_seq_is_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::net_sht_v::outbound_packet_seq_has_correct_srcs")
(declare-fun lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::ReceiveImplResult::arrow_FreshPacket_ack")
(declare-fun lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.? (Poly) lib!cmessage_v.CPacket.)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::ReceiveImplResult::arrow_DuplicatePacket_ack")
(declare-fun lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.? (Poly) lib!cmessage_v.CPacket.)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::valid_ack")
(declare-fun lib!single_delivery_model_v.valid_ack.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::ReceiveImplResult::ok")
(declare-fun lib!single_delivery_model_v.impl&%1.ok.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::ReceiveImplResult::get_ack")
(declare-fun lib!single_delivery_model_v.impl&%1.get_ack.? (Poly) lib!cmessage_v.CPacket.)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::ReceiveImplResult::get_abstracted_ack_set")
(declare-fun lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set.? (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_model_v::ReceiveImplResult::valid_ack")
(declare-fun lib!single_delivery_model_v.impl&%1.valid_ack.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSingleDelivery::packets_are_valid_messages")
(declare-fun lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_state_v::CSingleDelivery::option_cpacket_to_set_packet")
(declare-fun lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet.? (Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_message_t::SingleMessage::arrow_Ack_ack_seqno")
(declare-fun lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::single_delivery_t::truncate_un_ack_list")
(declare-fun lib!single_delivery_t.truncate_un_ack_list.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!single_delivery_t.rec%truncate_un_ack_list.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive_ack")
(declare-fun lib!single_delivery_t.impl&%1.receive_ack.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::tombstone_table_lookup")
(declare-fun lib!single_delivery_t.tombstone_table_lookup.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::new_single_message")
(declare-fun lib!single_delivery_t.impl&%1.new_single_message.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive_real_packet")
(declare-fun lib!single_delivery_t.impl&%1.receive_real_packet.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::should_ack_single_message")
(declare-fun lib!single_delivery_t.impl&%1.should_ack_single_message.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::send_ack")
(declare-fun lib!single_delivery_t.impl&%1.send_ack.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::maybe_ack_packet")
(declare-fun lib!single_delivery_t.impl&%1.maybe_ack_packet.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::receive")
(declare-fun lib!single_delivery_t.impl&%1.receive.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest_up_to")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? (Poly Poly Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.? (Poly Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dests")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? (Poly Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::SingleDelivery::un_acked_messages")
(declare-fun lib!single_delivery_t.impl&%2.un_acked_messages.? (Poly Poly) vstd!set.Set<lib!network_t.Packet.>.)
(set-info :comment ";; Function-Decl lib::single_delivery_t::AckState::new")
(declare-fun lib!single_delivery_t.impl&%0.new.? (Poly) lib!single_delivery_t.AckState.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%3 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)) )))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!)) ))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!)) ))))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_vec_index_decreases")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_vec_index_decreases.) (forall ((A&. Dcr) (A& Type) (v! Poly) (i! Poly)) (! (=> (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)) (height v!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!))) ))))
(set-info :comment ";; Function-Specs vstd::bytes::spec_u64_from_le_bytes")
(declare-fun req%vstd!bytes.spec_u64_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u64_from_le_bytes. s!) (=> %%global_location_label%%5 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 8))) :pattern ((req%vstd!bytes.spec_u64_from_le_bytes. s!)) )))
(set-info :comment ";; Function-Axioms vstd::bytes::spec_u64_from_le_bytes")
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (vstd!bytes.spec_u64_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u64_from_le_bytes.? s!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::lemma_auto_spec_u64_to_from_le_bytes")
(declare-fun ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param) (and (forall ((x$ Poly)) (! (=> (has_type x$ (UINT 64)) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) 8) (= (vstd!bytes.spec_u64_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) (%I x$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? x$)) )) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) 8) (= (vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$))) (%Poly%vstd!seq.Seq<u8.>. s$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$)))) )))) :pattern ((ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::pervasive::unreached")
(declare-fun req%vstd!pervasive.unreached. (Dcr Type) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (req%vstd!pervasive.unreached. A&. A&) (=> %%global_location_label%%8 false)) :pattern ((req%vstd!pervasive.unreached. A&. A&)) )))
(declare-fun ens%vstd!pervasive.unreached. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (%return! Poly)) (! (= (ens%vstd!pervasive.unreached. A&. A& %return!) (has_type %return! A&)) :pattern ((ens%vstd!pervasive.unreached. A&. A& %return!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%9 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::drop_last")
(declare-fun req%vstd!seq_lib.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!) (=> %%global_location_label%%10 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::drop_last")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%11 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::fold_left")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (%%apply%%1 (%Poly%fun%2. f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) b! f! fuel%) (vstd!seq.Seq.last.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(set-info :comment ";; Broadcast vstd::set_lib::axiom_is_empty")
(assert (=> (fuel_bool fuel%vstd!set_lib.axiom_is_empty.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::Marshalable::is_marshalable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!) BOOL)) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Specs lib::marshal_v::Marshalable::ghost_serialize")
(declare-fun req%lib!marshal_v.Marshalable.ghost_serialize. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!marshal_v.Marshalable.ghost_serialize. Self%&. Self%& self!) (=> %%global_location_label%%12 (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)))) :pattern ((req%lib!marshal_v.Marshalable.ghost_serialize. Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::marshal_v::Marshalable::ghost_serialize")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::marshal_v::Marshalable::view_equal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!) BOOL)) :pattern ((lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!)) )))
(set-info :comment ";; Function-Specs lib::marshal_v::Marshalable::lemma_same_views_serialize_the_same")
(declare-fun req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!) (=> %%global_location_label%%13 (%B (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!)))) :pattern ((req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!) (and (= (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!) (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& other!)) (= (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& other!)))) :pattern ((ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!)) )))
(set-info :comment ";; Function-Axioms lib::endpoint_hashmap_t::HashMap::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!endpoint_hashmap_t.HashMap. V&. V&)) (has_type (lib!endpoint_hashmap_t.impl&%0.view.? V&. V& self!) (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V&))) :pattern ((lib!endpoint_hashmap_t.impl&%0.view.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::view")
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.view.? self!) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))))) :pattern ((lib!io_t.impl&%4.view.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::endpoint_hashmap_t::HashMap::get_spec")
(assert (fuel_bool_default fuel%lib!endpoint_hashmap_t.impl&%0.get_spec.))
(assert (=> (fuel_bool fuel%lib!endpoint_hashmap_t.impl&%0.get_spec.) (forall ((V&. Dcr) (V& Type) (map_v! Poly) (key! Poly)) (! (= (lib!endpoint_hashmap_t.impl&%0.get_spec.? V&. V& map_v! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V& map_v!) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V& map_v! key!)) core!option.Option./None)) :pattern ((lib!endpoint_hashmap_t.impl&%0.get_spec.? V&. V& map_v! key!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (map_v! Poly) (key! Poly)) (! (=> (and (has_type map_v! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V&)) (has_type key! TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (has_type (Poly%core!option.Option. (lib!endpoint_hashmap_t.impl&%0.get_spec.? V&. V& map_v! key!)) (TYPE%core!option.Option. V&. V&))) :pattern ((lib!endpoint_hashmap_t.impl&%0.get_spec.? V&. V& map_v! key!)) )))
(set-info :comment ";; Function-Specs lib::endpoint_hashmap_t::HashMap::get")
(declare-fun ens%lib!endpoint_hashmap_t.impl&%0.get. (Dcr Type Poly lib!io_t.EndPoint. core!option.Option.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (key! lib!io_t.EndPoint.) (value! core!option.Option.)) (! (= (ens%lib!endpoint_hashmap_t.impl&%0.get. V&. V& self! key! value!) (and (has_type (Poly%core!option.Option. value!) (TYPE%core!option.Option. (REF V&.) V&)) (= value! (let ((tmp%%$ (lib!endpoint_hashmap_t.impl&%0.get_spec.? V&. V& (lib!endpoint_hashmap_t.impl&%0.view.? V&. V& self!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. key!)))))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((v$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))) (core!option.Option./Some v$)) core!option.Option./None))))) :pattern ((ens%lib!endpoint_hashmap_t.impl&%0.get. V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms lib::endpoint_hashmap_t::HashMap::put_spec")
(assert (fuel_bool_default fuel%lib!endpoint_hashmap_t.impl&%0.put_spec.))
(assert (=> (fuel_bool fuel%lib!endpoint_hashmap_t.impl&%0.put_spec.) (forall ((V&. Dcr) (V& Type) (old_map_v! Poly) (new_map_v! Poly) (key! Poly) (value! Poly)) (! (= (lib!endpoint_hashmap_t.impl&%0.put_spec.? V&. V& old_map_v! new_map_v! key! value!) (= new_map_v! (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V& old_map_v! key! value!))) :pattern ((lib!endpoint_hashmap_t.impl&%0.put_spec.? V&. V& old_map_v! new_map_v! key! value!)) ))))
(set-info :comment ";; Function-Axioms lib::endpoint_hashmap_t::HashMap::swap_spec")
(assert (fuel_bool_default fuel%lib!endpoint_hashmap_t.impl&%0.swap_spec.))
(assert (=> (fuel_bool fuel%lib!endpoint_hashmap_t.impl&%0.swap_spec.) (forall ((V&. Dcr) (V& Type) (old_map_v! Poly) (new_map_v! Poly) (key! Poly) (input_value! Poly) (output_value! Poly) (default_value! Poly)) (! (= (lib!endpoint_hashmap_t.impl&%0.swap_spec.? V&. V& old_map_v! new_map_v! key! input_value! output_value! default_value!) (and (let ((tmp%%$ (lib!endpoint_hashmap_t.impl&%0.get_spec.? V&. V& old_map_v! key!))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((v$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))) (= output_value! v$)) (= output_value! default_value!))) (lib!endpoint_hashmap_t.impl&%0.put_spec.? V&. V& old_map_v! new_map_v! key! input_value!))) :pattern ((lib!endpoint_hashmap_t.impl&%0.swap_spec.? V&. V& old_map_v! new_map_v! key! input_value! output_value! default_value!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map_values")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map_values.))
(declare-fun %%lambda%%1 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%0 %%hole%%3 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map_values.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Specs lib::endpoint_hashmap_t::HashMap::keys")
(declare-fun ens%lib!endpoint_hashmap_t.impl&%0.keys. (Dcr Type Poly alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.) Bool)
(declare-fun %%lambda%%2 () %%Function%%)
(assert (forall ((e$ Poly)) (! (= (%%apply%%0 %%lambda%%2 e$) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? e$))) :pattern ((%%apply%%0 %%lambda%%2 e$)))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (out! alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (= (ens%lib!endpoint_hashmap_t.impl&%0.keys. V&. V& self! out!) (= (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. out!)) (Poly%fun%1. (mk_fun %%lambda%%2)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V& (lib!endpoint_hashmap_t.impl&%0.view.? V&. V& self!)))) :pattern ((ens%lib!endpoint_hashmap_t.impl&%0.keys. V&. V& self! out!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::lt")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.lt.))
(define-fun is-lib!keys_t.Ordering./Less_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Less) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.lt.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.lt.? self!) (is-lib!keys_t.Ordering./Less_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.lt.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyTrait::cmp_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!) TYPE%lib!keys_t.Ordering.)) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::cmp_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%13.cmp_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%13.cmp_spec.) (forall ((self! Poly) (other! Poly)) (! (= (lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!) (Poly%lib!keys_t.Ordering. (ite (< (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Less (ite (= (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Equal lib!keys_t.Ordering./Greater)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!keys_t.KeyTrait. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!verus_extra.clone_v.VerusClone. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::lt_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.lt_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.lt_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!) (or (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))) (and (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!))))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))))))))) :pattern ((lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::ckeykvlt")
(assert (fuel_bool_default fuel%lib!hashmap_t.ckeykvlt.))
(assert (=> (fuel_bool fuel%lib!hashmap_t.ckeykvlt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!hashmap_t.ckeykvlt.? a! b!) (< (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. a!))))) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. b!))))))) :pattern ((lib!hashmap_t.ckeykvlt.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::spec_sorted_keys")
(assert (fuel_bool_default fuel%lib!hashmap_t.spec_sorted_keys.))
(assert (=> (fuel_bool fuel%lib!hashmap_t.spec_sorted_keys.) (forall ((v! Poly)) (! (= (lib!hashmap_t.spec_sorted_keys.? v!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (Add (%I i$) 1) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL v!))) (= (%I j$) (Add (%I i$) 1))) (lib!hashmap_t.ckeykvlt.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) i$) (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) j$)))) :pattern ((lib!hashmap_t.ckeykvlt.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) i$) (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) j$))) ))) :pattern ((lib!hashmap_t.spec_sorted_keys.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::max_hashtable_size")
(assert (fuel_bool_default fuel%lib!host_protocol_t.max_hashtable_size.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.max_hashtable_size.) (forall ((no%param Poly)) (! (= (lib!host_protocol_t.max_hashtable_size.? no%param) 62) :pattern ((lib!host_protocol_t.max_hashtable_size.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::valid_key")
(assert (fuel_bool_default fuel%lib!app_interface_t.valid_key.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.valid_key.) (forall ((key! Poly)) (! (= (lib!app_interface_t.valid_key.? key!) true) :pattern ((lib!app_interface_t.valid_key.? key!)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::max_val_len")
(assert (fuel_bool_default fuel%lib!app_interface_t.max_val_len.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.max_val_len.) (forall ((no%param Poly)) (! (= (lib!app_interface_t.max_val_len.? no%param) 1024) :pattern ((lib!app_interface_t.max_val_len.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::app_interface_t::valid_value")
(assert (fuel_bool_default fuel%lib!app_interface_t.valid_value.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.valid_value.) (forall ((value! Poly)) (! (= (lib!app_interface_t.valid_value.? value!) (< (vstd!seq.Seq.len.? $ (UINT 8) value!) (lib!app_interface_t.max_val_len.? (I 0)))) :pattern ((lib!app_interface_t.valid_value.? value!)) ))))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::valid_hashtable")
(assert (fuel_bool_default fuel%lib!host_protocol_t.valid_hashtable.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.valid_hashtable.) (forall ((h! Poly)) (! (= (lib!host_protocol_t.valid_hashtable.? h!) (and (< (vstd!set.impl&%0.len.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!)) (lib!host_protocol_t.max_hashtable_size.? (I 0))) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!keys_t.SHTKey.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) k$) (and (lib!app_interface_t.valid_key.? k$) (lib!app_interface_t.valid_value.? (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k$))))) :pattern ((lib!app_interface_t.valid_value.? (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k$))) )))) :pattern ((lib!host_protocol_t.valid_hashtable.? h!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(assert (fuel_bool_default fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.))
(assert (=> (fuel_bool fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.) (forall ((self! Poly)) (! (= (lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!) (< (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (%Poly%lib!abstract_end_point_t.AbstractEndPoint. self!)))) 1048576)) :pattern ((lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::abstractable")
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.abstractable.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.abstractable.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.abstractable.? self!) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? self!)))) :pattern ((lib!io_t.impl&%4.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::map_values")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.map_values.))
(declare-fun %%lambda%%3 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 %%Function%%) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (%%apply%%0 %%hole%%5 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.map_values.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (W&. Dcr) (W& Type) (self! Poly) (f! Poly)) (! (= (vstd!map_lib.impl&%0.map_values.? K&. K& V&. V& W&. W& self! f!) (vstd!map.impl&%0.new.? K&. K& W&. W& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& W&. W&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& V&. V& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!map_lib.impl&%0.map_values.? K&. K& V&. V& W&. W& self! f!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (W&. Dcr) (W& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type f! (TYPE%fun%1. V&. V& W&. W&))) (has_type (vstd!map_lib.impl&%0.map_values.? K&. K& V&. V& W&. W& self! f!) (TYPE%vstd!map.Map. K&. K& W&. W&))) :pattern ((vstd!map_lib.impl&%0.map_values.? K&. K& V&. V& W&. W& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::check_argument_is_seq")
(assert (fuel_bool_default fuel%vstd!seq_lib.check_argument_is_seq.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.check_argument_is_seq.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) s!) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.map.))
(declare-fun %%lambda%%5 (Dcr Type Poly Type Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 %%Function%%) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) a$) (B (exists ((x$ Poly)) (! (and (has_type x$ %%hole%%3) (and (vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 x$) (= a$ (%%apply%%0 %%hole%%7 x$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 x$)) )))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) a$)))))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!set.impl&%0.new.? B&. B& $ (TYPE%fun%1. B&. B& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 A&. A& self! A& A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!set.Set. B&. B&))) :pattern ((vstd!set_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::check_argument_is_set")
(assert (fuel_bool_default fuel%vstd!set_lib.check_argument_is_set.))
(assert (=> (fuel_bool fuel%vstd!set_lib.check_argument_is_set.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!set_lib.check_argument_is_set.? A&. A& s!) s!) :pattern ((vstd!set_lib.check_argument_is_set.? A&. A& s!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set_lib.check_argument_is_set.? A&. A& s!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set_lib.check_argument_is_set.? A&. A& s!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::verus_extra::set_lib_ext_v::flatten_sets")
(assert (fuel_bool_default fuel%lib!verus_extra.set_lib_ext_v.flatten_sets.))
(declare-fun %%lambda%%6 (Dcr Type Poly Dcr Type Type Dcr Type Poly Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Dcr) (%%hole%%10 Type) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) a$) (B (exists ((s$ Poly)) (! (and (has_type s$ %%hole%%5) (and (vstd!set.impl&%0.contains.? %%hole%%6 %%hole%%7 %%hole%%8 s$) (vstd!set.impl&%0.contains.? %%hole%%9 %%hole%%10 s$ a$))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 s$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 s$ a$)) )))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) a$)))))
(assert (=> (fuel_bool fuel%lib!verus_extra.set_lib_ext_v.flatten_sets.) (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (= (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%6 $ (TYPE%vstd!set.Set. A&. A&) sets! A&. A& (TYPE%vstd!set.Set. A&. A&) $ (TYPE%vstd!set.Set. A&. A&) sets! A&. A&))))) :pattern ((lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (=> (has_type sets! (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. A&. A&))) (has_type (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets!)) )))
(set-info :comment ";; Function-Axioms lib::cmessage_v::optional_value_view")
(assert (fuel_bool_default fuel%lib!cmessage_v.optional_value_view.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.optional_value_view.) (forall ((ov! Poly)) (! (= (lib!cmessage_v.optional_value_view.? ov!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. ov!)) (let ((v$ (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (core!option.Option./Some/0 (%Poly%core!option.Option. ov!))))) (core!option.Option./Some (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. v$)))) core!option.Option./None)) :pattern ((lib!cmessage_v.optional_value_view.? ov!)) ))))
(assert (forall ((ov! Poly)) (! (=> (has_type ov! (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) (has_type (Poly%core!option.Option. (lib!cmessage_v.optional_value_view.? ov!)) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!cmessage_v.optional_value_view.? ov!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_end_point_t::AbstractEndPoint::abstractable")
(assert (fuel_bool_default fuel%lib!abstract_end_point_t.impl&%0.abstractable.))
(assert (=> (fuel_bool fuel%lib!abstract_end_point_t.impl&%0.abstractable.) (forall ((self! Poly)) (! (= (lib!abstract_end_point_t.impl&%0.abstractable.? self!) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!)) :pattern ((lib!abstract_end_point_t.impl&%0.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CMessage::abstractable")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%1.abstractable.))
(define-fun is-lib!cmessage_v.CMessage./Redirect_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Redirect) c))
(define-fun is-lib!cmessage_v.CMessage./Shard_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Shard) c))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%1.abstractable.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%1.abstractable.? self!) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!abstract_end_point_t.impl&%0.abstractable.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. id$)))))) (=> (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!abstract_end_point_t.impl&%0.abstractable.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. recipient$))))))))) :pattern ((lib!cmessage_v.impl&%1.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CMessage::view")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%1.view.))
(define-fun is-lib!cmessage_v.CMessage./GetRequest_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./GetRequest) c))
(define-fun is-lib!cmessage_v.CMessage./SetRequest_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./SetRequest) c))
(define-fun is-lib!cmessage_v.CMessage./Reply_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Reply) c))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%1.view.? self!) (ite (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!message_t.Message./GetRequest (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)))) (ite (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!message_t.Message./SetRequest (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!cmessage_v.optional_value_view.? (Poly%core!option.Option. v$))))))) (ite (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!message_t.Message./Reply (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!cmessage_v.optional_value_view.? (Poly%core!option.Option. v$))))))) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!message_t.Message./Redirect (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. id$))))))) (ite (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!message_t.Message./Shard (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. kr$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. recipient$))))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!message_t.Message./Delegate (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. range$)) (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. h$))))))))))))) :pattern ((lib!cmessage_v.impl&%1.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!message_t.Message. (lib!cmessage_v.impl&%1.view.? self!)) TYPE%lib!message_t.Message.)) :pattern ((lib!cmessage_v.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::host_protocol_t::valid_optional_value")
(assert (fuel_bool_default fuel%lib!host_protocol_t.valid_optional_value.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.valid_optional_value.) (forall ((ov! Poly)) (! (= (lib!host_protocol_t.valid_optional_value.? ov!) (=> (not (is-core!option.Option./None_ (%Poly%core!option.Option. ov!))) (let ((value$ (%Poly%vstd!seq.Seq<u8.>. (core!option.Option./Some/0 (%Poly%core!option.Option. ov!))))) (lib!app_interface_t.valid_value.? (Poly%vstd!seq.Seq<u8.>. value$))))) :pattern ((lib!host_protocol_t.valid_optional_value.? ov!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::geq_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.geq_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.geq_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!) (not (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!))) :pattern ((lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::is_empty")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%4.is_empty.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!keys_t.impl&%4.is_empty.? K&. K& self!) (lib!keys_t.impl&%3.geq_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))) :pattern ((lib!keys_t.impl&%4.is_empty.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CMessage::message_marshallable")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%1.message_marshallable.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%1.message_marshallable.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%1.message_marshallable.? self!) (ite (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (lib!app_interface_t.valid_key.? (Poly%lib!keys_t.SHTKey. k$))) (ite (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. self!)))) (and (lib!app_interface_t.valid_key.? (Poly%lib!keys_t.SHTKey. k$)) (lib!host_protocol_t.valid_optional_value.? (Poly%core!option.Option. (lib!cmessage_v.optional_value_view.? (Poly%core!option.Option. v$))))))) (ite (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. self!)))) (and (lib!app_interface_t.valid_key.? (Poly%lib!keys_t.SHTKey. k$)) (lib!host_protocol_t.valid_optional_value.? (Poly%core!option.Option. (lib!cmessage_v.optional_value_view.? (Poly%core!option.Option. v$))))))) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (and (lib!app_interface_t.valid_key.? (Poly%lib!keys_t.SHTKey. k$)) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. id$))))))) (ite (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (and (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. recipient$)))) (not (lib!keys_t.impl&%4.is_empty.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.KeyRange. kr$)))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. self!)))) (and (not (lib!keys_t.impl&%4.is_empty.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.KeyRange. range$))) (lib!host_protocol_t.valid_hashtable.? (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. h$))))))))))))) :pattern ((lib!cmessage_v.impl&%1.message_marshallable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::view")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%2.view.))
(define-fun is-lib!cmessage_v.CSingleMessage./Message_ ((c lib!cmessage_v.CSingleMessage.)) Bool ((_ is lib!cmessage_v.CSingleMessage./Message) c))
(define-fun is-lib!cmessage_v.CSingleMessage./Ack_ ((c lib!cmessage_v.CSingleMessage.)) Bool ((_ is lib!cmessage_v.CSingleMessage./Ack) c))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%2.view.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%2.view.? self!) (ite (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((seqno$ (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((dst$ (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((m$ (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (lib!single_message_t.SingleMessage./Message (%I (I seqno$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst$)))) (Poly%lib!message_t.Message. (lib!cmessage_v.impl&%1.view.? (Poly%lib!cmessage_v.CMessage. m$))))))) (ite (is-lib!cmessage_v.CSingleMessage./Ack_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((ack_seqno$ (lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (lib!single_message_t.SingleMessage./Ack (%I (I ack_seqno$)))) lib!single_message_t.SingleMessage./InvalidMessage))) :pattern ((lib!cmessage_v.impl&%2.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!cmessage_v.CSingleMessage.) (has_type (Poly%lib!single_message_t.SingleMessage. (lib!cmessage_v.impl&%2.view.? self!)) (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.))) :pattern ((lib!cmessage_v.impl&%2.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::cmessage_v::abstractify_cmessage_seq")
(assert (fuel_bool_default fuel%lib!cmessage_v.abstractify_cmessage_seq.))
(declare-fun %%lambda%%7 () %%Function%%)
(assert (forall ((msg$ Poly)) (! (= (%%apply%%0 %%lambda%%7 msg$) (Poly%lib!single_message_t.SingleMessage. (lib!cmessage_v.impl&%2.view.? msg$))) :pattern ((%%apply%%0 %%lambda%%7 msg$)))))
(assert (=> (fuel_bool fuel%lib!cmessage_v.abstractify_cmessage_seq.) (forall ((messages! Poly)) (! (= (lib!cmessage_v.abstractify_cmessage_seq.? messages!) (%Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CSingleMessage. $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) messages! (Poly%fun%1. (mk_fun %%lambda%%7))))) :pattern ((lib!cmessage_v.abstractify_cmessage_seq.? messages!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::abstractable")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%2.abstractable.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%2.abstractable.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%2.abstractable.? self!) (=> (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((dst$ (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((m$ (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (and (lib!abstract_end_point_t.impl&%0.abstractable.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst$)))) (lib!cmessage_v.impl&%1.abstractable.? (Poly%lib!cmessage_v.CMessage. m$))))))) :pattern ((lib!cmessage_v.impl&%2.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_parameters_t::AbstractParameters::static_params")
(assert (fuel_bool_default fuel%lib!abstract_parameters_t.impl&%0.static_params.))
(assert (=> (fuel_bool fuel%lib!abstract_parameters_t.impl&%0.static_params.) (forall ((no%param Poly)) (! (= (lib!abstract_parameters_t.impl&%0.static_params.? no%param) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters (%I (I 18446744073709551615)) (%I (I 9223372036854775807)))) :pattern ((lib!abstract_parameters_t.impl&%0.static_params.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.impl&%0.static_params.? no%param)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) :pattern ((lib!abstract_parameters_t.impl&%0.static_params.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CPacket::view")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%3.view.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%3.view.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%3.view.? self!) (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/dst (%Poly%lib!cmessage_v.CPacket. self!)))))) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/src (%Poly%lib!cmessage_v.CPacket. self!)))))) (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!cmessage_v.impl&%2.view.? (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. self!)))))))) :pattern ((lib!cmessage_v.impl&%3.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!cmessage_v.CPacket.) (has_type (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? self!)) TYPE%lib!network_t.Packet.)) :pattern ((lib!cmessage_v.impl&%3.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CPacket::abstractable")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%3.abstractable.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%3.abstractable.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%3.abstractable.? self!) (and (and (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/dst (%Poly%lib!cmessage_v.CPacket. self!)))))) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/src (%Poly%lib!cmessage_v.CPacket. self!))))))) (lib!cmessage_v.impl&%2.abstractable.? (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. self!)))))) :pattern ((lib!cmessage_v.impl&%3.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::cpacket_seq_is_abstractable")
(assert (fuel_bool_default fuel%lib!cmessage_v.cpacket_seq_is_abstractable.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.cpacket_seq_is_abstractable.) (forall ((packets! Poly)) (! (= (lib!cmessage_v.cpacket_seq_is_abstractable.? packets!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CPacket. packets!))) (lib!cmessage_v.impl&%3.abstractable.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. packets! i$)))) :pattern ((lib!cmessage_v.impl&%3.abstractable.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. packets! i$))) ))) :pattern ((lib!cmessage_v.cpacket_seq_is_abstractable.? packets!)) ))))
(set-info :comment ";; Function-Specs lib::cmessage_v::abstractify_seq_of_cpackets_to_set_of_sht_packets")
(declare-fun req%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets. (Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((cps! Poly)) (! (= (req%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets. cps!) (=> %%global_location_label%%14 (lib!cmessage_v.cpacket_seq_is_abstractable.? cps!))) :pattern ((req%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets. cps!)) )))
(set-info :comment ";; Function-Axioms lib::cmessage_v::abstractify_seq_of_cpackets_to_set_of_sht_packets")
(assert (fuel_bool_default fuel%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets.))
(declare-fun %%lambda%%8 () %%Function%%)
(assert (forall ((cp$ Poly)) (! (= (%%apply%%0 %%lambda%%8 cp$) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? cp$))) :pattern ((%%apply%%0 %%lambda%%8 cp$)))))
(assert (=> (fuel_bool fuel%lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets.) (forall ((cps! Poly)) (! (= (lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets.? cps!) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CPacket. $ TYPE%lib!network_t.Packet. cps! (Poly%fun%1. (mk_fun %%lambda%%8)))))) :pattern ((lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets.? cps!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::arrow_Message_seqno")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%5.arrow_Message_seqno.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%5.arrow_Message_seqno.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%5.arrow_Message_seqno.? self!) (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. self!))) :pattern ((lib!cmessage_v.impl&%5.arrow_Message_seqno.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!cmessage_v.CSingleMessage.) (uInv 64 (lib!cmessage_v.impl&%5.arrow_Message_seqno.? self!))) :pattern ((lib!cmessage_v.impl&%5.arrow_Message_seqno.? self!)) )))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::arrow_Message_dst")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%5.arrow_Message_dst.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%5.arrow_Message_dst.) (forall ((self! Poly)) (! (= (lib!cmessage_v.impl&%5.arrow_Message_dst.? self!) (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. self!))) :pattern ((lib!cmessage_v.impl&%5.arrow_Message_dst.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%0::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%0.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%0.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) self! other!) (B (= self! other!))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) self! other!)) ))))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%2.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%2.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self! other!) (B (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::forward_bijection_for_view_equality_do_not_use_for_anything_else")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.) (forall ((self! Poly)) (! (= (lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!) (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))) :pattern ((lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. self! other!) (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::forward_bijection_for_view_equality_do_not_use_for_anything_else")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.) (forall ((self! Poly)) (! (= (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!))) :pattern ((lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!))) :pattern ((lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. self! other!) (lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) (I (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (I (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%0::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%0.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%0.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) self!) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? self!))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%1::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%1.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%1.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I (uClip 64 (%I self!))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%2.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%2.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!) (B (and (<= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)) (- (uHi SZ) 1)) (<= (Add (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)))))) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!))) (- (uHi SZ) 1))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%1::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%1.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%1.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT SZ) self!) (B (<= (%I self!) 18446744073709551615))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%0::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%0.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%0.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) self!) (B true)) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%2.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%2.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.add.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!))))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))
(set-info :comment ";; Function-Axioms core::option::Option::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%3.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%3.view_equal.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. T&. T&) self! other!) (B (let ((tmp%%$ (tuple%2./tuple%2 self! other!))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (%B (let ((s$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!marshal_v.Marshalable.view_equal.? T&. T& s$ o$)))))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. T&. T&) self! other!)) ))))
(set-info :comment ";; Function-Axioms core::option::Option::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%3.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%3.is_marshalable.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (not (is-core!option.Option./None_ (%Poly%core!option.Option. self!))) (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. self!)))) (and (%B (lib!marshal_v.Marshalable.is_marshalable.? T&. T& x$)) (<= (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& x$)))) (- (uHi SZ) 1)))))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms core::option::Option::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%3.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%3.ghost_serialize.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. T&. T&) self!) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. self!)) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 0)) (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 1)) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& x$)))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. T&. T&) self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%lib!marshal_v.Marshalable. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ (UINT 64)))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%5::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%5.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%5.view_equal.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (self! Poly) (other! Poly)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%tuple%2. T&. T& U&. U&) self! other!) (B (and (%B (lib!marshal_v.Marshalable.view_equal.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)) (tuple%2./tuple%2/0 (%Poly%tuple%2. other!)))) (%B (lib!marshal_v.Marshalable.view_equal.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)) (tuple%2./tuple%2/1 (%Poly%tuple%2. other!)))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%tuple%2. T&. T& U&. U&) self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::forward_bijection_for_view_equality_do_not_use_for_anything_else")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.) (forall ((self! Poly)) (! (= (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!) (tuple%2./tuple%2 (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))) (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))))) :pattern ((lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%tuple%2. (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))))) :pattern ((lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self! other!) (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))) (Poly%tuple%2. (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (Poly%tuple%2. (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::CKeyHashMap::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. self! other!) (B (= (lib!hashmap_t.impl&%0.view.? self!) (lib!hashmap_t.impl&%0.view.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CMessage::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal.))
(define-fun is-lib!cmessage_v.CMessage./Delegate_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Delegate) c))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CMessage. self! other!) (B (let ((tmp%%$ (tuple%2./tuple%2 self! other!))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$) (Poly%core!option.Option. o1$)))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$) (Poly%core!option.Option. o1$)))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$) (Poly%lib!io_t.EndPoint. o1$)))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$) (Poly%lib!keys_t.KeyRange. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$) (Poly%lib!io_t.EndPoint. o1$)))))))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$) (Poly%lib!keys_t.KeyRange. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$) (Poly%lib!hashmap_t.CKeyHashMap. o1$))))))))))))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CMessage. self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::view_equal")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%6.view_equal.))
(define-fun is-lib!cmessage_v.CSingleMessage./InvalidMessage_ ((c lib!cmessage_v.CSingleMessage.)) Bool ((_ is lib!cmessage_v.CSingleMessage./InvalidMessage) c))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%6.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CSingleMessage. self! other!) (B (let ((tmp%%$ (tuple%2./tuple%2 self! other!))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((seqno$ (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((dst$ (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((m$ (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o2$ (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (and (%B (lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) (I seqno$) (I o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. dst$) (Poly%lib!io_t.EndPoint. o1$)))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. m$) (Poly%lib!cmessage_v.CMessage. o2$)))))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CSingleMessage./Ack_ (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CSingleMessage./Ack_ (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((ack_seqno$ (lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) (I ack_seqno$) (I o0$))))) (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CSingleMessage./InvalidMessage_ (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CSingleMessage./InvalidMessage_ (%Poly%lib!cmessage_v.CSingleMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CSingleMessage. self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. self!) (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. self!) (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. self!)) ))))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%5::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%5.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%5.is_marshalable.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (self! Poly)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%tuple%2. T&. T& U&. U&) self!) (B (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (lib!marshal_v.Marshalable.is_marshalable.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))) (<= (nClip (Add (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) (- (uHi SZ) 1)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%tuple%2. T&. T& U&. U&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!) (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))) (Poly%tuple%2. (tuple%2./tuple%2 (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))) (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%5::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%5.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%5.ghost_serialize.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (self! Poly)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%tuple%2. T&. T& U&. U&) self!) (vstd!seq.Seq.add.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (lib!marshal_v.Marshalable.ghost_serialize.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%tuple%2. T&. T& U&. U&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))) (Poly%tuple%2. (tuple%2./tuple%2 (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))) (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::CKeyKV::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyKV. self! other!) (B (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))) (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. other!))))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!))) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. other!)))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyKV. self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::CKeyKV::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyKV. self!) (B (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!)))))) (<= (nClip (Add (nClip (Add 0 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!))))))) (- (uHi SZ) 1))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyKV. self!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::CKeyKV::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyKV. self!) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))))) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!)))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyKV. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!hashmap_t.CKeyKV.))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%4.is_marshalable.))
(declare-fun %%lambda%%9 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (acc$ Poly) (x$ Poly)) (! (= (%%apply%%1 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$) (I (Add (%I acc$) (vstd!seq.Seq.len.? %%hole%%2 %%hole%%3 (lib!marshal_v.Marshalable.ghost_serialize.? %%hole%%0 %%hole%%1 x$))))) :pattern ((%%apply%%1 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$)))))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%4.is_marshalable.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (B (and (and (<= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)) (- (uHi SZ) 1)) (forall ((x$ Poly)) (! (=> (has_type x$ T&) (=> (vstd!seq_lib.impl&%0.contains.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) x$) (%B (lib!marshal_v.Marshalable.is_marshalable.? T&. T& x$)))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? T&. T& x$)) ))) (<= (Add (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)))))) (%I (vstd!seq_lib.impl&%0.fold_left.? T&. T& $ INT (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (I 0) (Poly%fun%2. (mk_fun (%%lambda%%9 T&. T& $ (UINT 8))))))) (- (uHi SZ) 1)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)) ))))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%4.ghost_serialize.))
(declare-fun %%lambda%%10 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (acc$ Poly) (x$ Poly)) (! (= (%%apply%%1 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$) (vstd!seq.Seq.add.? %%hole%%2 %%hole%%3 acc$ (lib!marshal_v.Marshalable.ghost_serialize.? %%hole%%0 %%hole%%1 x$))) :pattern ((%%apply%%1 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$)))))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%4.ghost_serialize.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.add.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!))))) (vstd!seq_lib.impl&%0.fold_left.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.empty.? $ (UINT 8)) (Poly%fun%2. (mk_fun (%%lambda%%10 T&. T& $ (UINT 8)))))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_ironsht_specific_v::ckeyhashmap_max_serialized_size")
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.) (forall ((no%param Poly)) (! (= (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param) 1048576) :pattern ((lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv SZ (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param))) :pattern ((lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::hashmap_t::CKeyHashMap::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!) (B (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (lib!hashmap_t.spec_sorted_keys.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (<= (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? (I 0)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!)) ))))
(set-info :comment ";; Function-Axioms lib::hashmap_t::CKeyHashMap::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CMessage::is_marshalable")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CMessage. self!) (B (ite (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (<= (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (- (uHi SZ) 1)))) (ite (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (- (uHi SZ) 1))))) (ite (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (- (uHi SZ) 1))))) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$))))) (- (uHi SZ) 1))))) (ite (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$))))) (- (uHi SZ) 1))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$))))) (- (uHi SZ) 1)))))))))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CMessage. self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CMessage::ghost_serialize")
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (ite (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 0)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)))) (ite (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 1)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (ite (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 2)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 3)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$))))) (ite (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 4)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 5)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$))))))))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::is_marshalable")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%6.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%6.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. self!) (B (ite (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((seqno$ (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((dst$ (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((m$ (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (and (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) (I seqno$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. dst$)))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. m$)))) (<= (nClip (Add (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I seqno$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. dst$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. m$))))) (- (uHi SZ) 1)))))) (ite (is-lib!cmessage_v.CSingleMessage./Ack_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((ack_seqno$ (lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) (I ack_seqno$))) (<= (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I ack_seqno$))))) (- (uHi SZ) 1)))) (<= 1 (- (uHi SZ) 1)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. self!)) ))))
(set-info :comment ";; Function-Axioms lib::cmessage_v::CSingleMessage::ghost_serialize")
(assert (fuel_bool_default fuel%lib!cmessage_v.impl&%6.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!cmessage_v.impl&%6.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CSingleMessage. self!) (ite (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((seqno$ (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((dst$ (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (let ((m$ (lib!cmessage_v.CSingleMessage./Message/m (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 0)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I seqno$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. dst$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. m$)))))) (ite (is-lib!cmessage_v.CSingleMessage./Ack_ (%Poly%lib!cmessage_v.CSingleMessage. self!)) (let ((ack_seqno$ (lib!cmessage_v.CSingleMessage./Ack/ack_seqno (%Poly%lib!cmessage_v.CSingleMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 1)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I ack_seqno$)))) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 2))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CSingleMessage. self!)) ))))
(set-info :comment ";; Function-Axioms lib::host_impl_v::Parameters::view")
(assert (fuel_bool_default fuel%lib!host_impl_v.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!host_impl_v.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!host_impl_v.impl&%1.view.? self!) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters (%I (I (lib!host_impl_v.Parameters./Parameters/max_seqno (%Poly%lib!host_impl_v.Parameters. self!)))) (%I (I (lib!host_impl_v.Parameters./Parameters/max_delegations (%Poly%lib!host_impl_v.Parameters. self!)))))) :pattern ((lib!host_impl_v.impl&%1.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!host_impl_v.Parameters.) (has_type (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!host_impl_v.impl&%1.view.? self!)) TYPE%lib!abstract_parameters_t.AbstractParameters.)) :pattern ((lib!host_impl_v.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CTombstoneTable::view")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%1.view.))
(declare-fun %%lambda%%11 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%11 v$) v$) :pattern ((%%apply%%0 %%lambda%%11 v$)))))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%1.view.? self!) (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (vstd!map_lib.impl&%0.map_values.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (UINT 64) $ NAT (lib!endpoint_hashmap_t.impl&%0.view.? $ (UINT 64) (Poly%lib!endpoint_hashmap_t.HashMap<u64.>. (lib!single_delivery_state_v.CTombstoneTable./CTombstoneTable/epmap (%Poly%lib!single_delivery_state_v.CTombstoneTable. self!)))) (Poly%fun%1. (mk_fun %%lambda%%11))))) :pattern ((lib!single_delivery_state_v.impl&%1.view.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::view")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.view.? self!) (lib!single_delivery_t.AckState./AckState (%I (I (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. self!)))) (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (lib!cmessage_v.abstractify_cmessage_seq.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. self!)))))))) :pattern ((lib!single_delivery_state_v.impl&%0.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!single_delivery_state_v.CAckState.) (has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_state_v.impl&%0.view.? self!)) (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.))) :pattern ((lib!single_delivery_state_v.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSendState::view")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%2.view.))
(declare-fun %%lambda%%12 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%12 v$) (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_state_v.impl&%0.view.? v$))) :pattern ((%%apply%%0 %%lambda%%12 v$)))))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%2.view.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%2.view.? self!) (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (vstd!map_lib.impl&%0.map_values.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. self!)))) (Poly%fun%1. (mk_fun %%lambda%%12))))) :pattern ((lib!single_delivery_state_v.impl&%2.view.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSingleDelivery::view")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%3.view.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%3.view.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%3.view.? self!) (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_state_v.impl&%1.view.? (Poly%lib!single_delivery_state_v.CTombstoneTable. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/receive_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. self!))))))) :pattern ((lib!single_delivery_state_v.impl&%3.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!single_delivery_state_v.CSingleDelivery.) (has_type (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? self!)) (TYPE%lib!single_delivery_t.SingleDelivery. $ TYPE%lib!message_t.Message.))) :pattern ((lib!single_delivery_state_v.impl&%3.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CTombstoneTable::abstractable")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%1.abstractable.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%1.abstractable.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%1.abstractable.? self!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_state_v.impl&%1.view.? self!))) k$) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? k$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_state_v.impl&%1.view.? self!))) k$)) ))) :pattern ((lib!single_delivery_state_v.impl&%1.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::abstractable")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.abstractable.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.abstractable.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.abstractable.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. self!)))))) (lib!cmessage_v.impl&%2.abstractable.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. self!)))) i$)))) :pattern ((lib!cmessage_v.impl&%2.abstractable.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. self!)))) i$))) ))) :pattern ((lib!single_delivery_state_v.impl&%0.abstractable.? self!)) ))))
(set-info :comment ";; Function-Specs lib::endpoint_hashmap_t::HashMap::spec_index")
(declare-fun req%lib!endpoint_hashmap_t.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%lib!endpoint_hashmap_t.impl&%0.spec_index. V&. V& self! key!) (=> %%global_location_label%%15 (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V& (lib!endpoint_hashmap_t.impl&%0.view.? V&. V& self!)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? key!))))) :pattern ((req%lib!endpoint_hashmap_t.impl&%0.spec_index. V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::endpoint_hashmap_t::HashMap::spec_index")
(assert (fuel_bool_default fuel%lib!endpoint_hashmap_t.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!endpoint_hashmap_t.impl&%0.spec_index.) (forall ((V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (lib!endpoint_hashmap_t.impl&%0.spec_index.? V&. V& self! key!) (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. V&. V& (lib!endpoint_hashmap_t.impl&%0.view.? V&. V& self!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? key!)))) :pattern ((lib!endpoint_hashmap_t.impl&%0.spec_index.? V&. V& self! key!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!endpoint_hashmap_t.HashMap. V&. V&)) (has_type key! TYPE%lib!io_t.EndPoint.)) (has_type (lib!endpoint_hashmap_t.impl&%0.spec_index.? V&. V& self! key!) V&)) :pattern ((lib!endpoint_hashmap_t.impl&%0.spec_index.? V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSendState::abstractable")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%2.abstractable.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%2.abstractable.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%2.abstractable.? self!) (forall ((ep$ Poly)) (! (=> (has_type ep$ TYPE%lib!io_t.EndPoint.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? ep$))) (and (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? ep$))) (lib!single_delivery_state_v.impl&%0.abstractable.? (lib!endpoint_hashmap_t.impl&%0.spec_index.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. self!))) ep$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? ep$)))) ))) :pattern ((lib!single_delivery_state_v.impl&%2.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSingleDelivery::abstractable")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%3.abstractable.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%3.abstractable.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%3.abstractable.? self!) (and (lib!single_delivery_state_v.impl&%1.abstractable.? (Poly%lib!single_delivery_state_v.CTombstoneTable. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/receive_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))) (lib!single_delivery_state_v.impl&%2.abstractable.? (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))))) :pattern ((lib!single_delivery_state_v.impl&%3.abstractable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::un_acked_valid")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.un_acked_valid.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.un_acked_valid.) (forall ((msg! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.un_acked_valid.? msg!) (and (and (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. msg!)) (lib!cmessage_v.impl&%2.abstractable.? msg!)) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. msg!)))) :pattern ((lib!single_delivery_state_v.impl&%0.un_acked_valid.? msg!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::no_acks_in_unacked")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.no_acks_in_unacked.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.no_acks_in_unacked.) (forall ((list! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.no_acks_in_unacked.? list!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. list!))) (is-lib!cmessage_v.CSingleMessage./Message_ (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$)) ))) :pattern ((lib!single_delivery_state_v.impl&%0.no_acks_in_unacked.? list!)) ))))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CAckState::un_acked_list_sequential")
(declare-fun req%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential. (Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((list! Poly)) (! (= (req%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential. list!) (=> %%global_location_label%%16 (lib!single_delivery_state_v.impl&%0.no_acks_in_unacked.? list!))) :pattern ((req%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential. list!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::un_acked_list_sequential")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_sequential.) (forall ((list! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.un_acked_list_sequential.? list!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (= (%I j$) (Add (%I i$) 1))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. list!))) (= (Add (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$))) 1) (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! j$)))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$) (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! j$)) ))) :pattern ((lib!single_delivery_state_v.impl&%0.un_acked_list_sequential.? list!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::un_acked_list_valid")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid.) (forall ((list! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.un_acked_list_valid.? list!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. list!))) (lib!single_delivery_state_v.impl&%0.un_acked_valid.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$)))) :pattern ((lib!single_delivery_state_v.impl&%0.un_acked_valid.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$))) )) (lib!single_delivery_state_v.impl&%0.un_acked_list_sequential.? list!))) :pattern ((lib!single_delivery_state_v.impl&%0.un_acked_list_valid.? list!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::un_acked_list_valid_for_dst")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst.) (forall ((list! Poly) (dst! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst.? list! dst!) (and (lib!single_delivery_state_v.impl&%0.un_acked_list_valid.? list!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. list!))) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$))))) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!)))) :pattern ((lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. list! i$)))) )))) :pattern ((lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst.? list! dst!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::valid_list")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.valid_list.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.valid_list.) (forall ((msgs! Poly) (num_packets_acked! Poly) (dst! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.valid_list.? msgs! num_packets_acked! dst!) (and (and (lib!single_delivery_state_v.impl&%0.un_acked_list_valid_for_dst.? msgs! dst!) (<= (Add (%I num_packets_acked!) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. msgs!)) (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.impl&%0.static_params.? (I 0))))))) (=> (> (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. msgs!) 0) (= (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. msgs! (I 0)))) (Add (%I num_packets_acked!) 1))))) :pattern ((lib!single_delivery_state_v.impl&%0.valid_list.? msgs! num_packets_acked! dst!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CAckState::valid")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%0.valid.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%0.valid.) (forall ((self! Poly) (dst! Poly)) (! (= (lib!single_delivery_state_v.impl&%0.valid.? self! dst!) (and (lib!single_delivery_state_v.impl&%0.abstractable.? self!) (lib!single_delivery_state_v.impl&%0.valid_list.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. self!)))) (I (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. self!))) dst!))) :pattern ((lib!single_delivery_state_v.impl&%0.valid.? self! dst!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSendState::valid")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%2.valid.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%2.valid.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%2.valid.? self!) (and (lib!single_delivery_state_v.impl&%2.abstractable.? self!) (forall ((ep$ Poly)) (! (=> (has_type ep$ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? self!))) ep$) (lib!single_delivery_state_v.impl&%0.valid.? (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState. (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. self!)))) ep$) ep$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? self!))) ep$)) )))) :pattern ((lib!single_delivery_state_v.impl&%2.valid.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSingleDelivery::valid")
(assert (fuel_bool_default fuel%lib!single_delivery_state_v.impl&%3.valid.))
(assert (=> (fuel_bool fuel%lib!single_delivery_state_v.impl&%3.valid.) (forall ((self! Poly)) (! (= (lib!single_delivery_state_v.impl&%3.valid.? self!) (and (lib!single_delivery_state_v.impl&%3.abstractable.? self!) (lib!single_delivery_state_v.impl&%2.valid.? (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))))) :pattern ((lib!single_delivery_state_v.impl&%3.valid.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Message_dst")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Message_dst.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Message_dst.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Message_dst.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Message/dst (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_dst.? MT&. MT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::ack_state_lookup")
(assert (fuel_bool_default fuel%lib!single_delivery_t.ack_state_lookup.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.ack_state_lookup.) (forall ((MT&. Dcr) (MT& Type) (src! Poly) (send_state! Poly)) (! (= (lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) send_state!) src!) (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) send_state! src!)) (lib!single_delivery_t.AckState./AckState (%I (I 0)) (vstd!seq.Seq.empty.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))))) :pattern ((lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (src! Poly) (send_state! Poly)) (! (=> (and (has_type src! TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (has_type send_state! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&)))) (has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!)) (TYPE%lib!single_delivery_t.AckState. MT&. MT&))) :pattern ((lib!single_delivery_t.ack_state_lookup.? MT&. MT& src! send_state!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::send_single_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.send_single_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.send_single_message.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (m! Poly) (dst! Poly) (sm! Poly) (params! Poly)) (! (= (lib!single_delivery_t.impl&%1.send_single_message.? MT&. MT& pre! post! m! dst! sm! params!) (let ((old_ack_state$ (lib!single_delivery_t.ack_state_lookup.? MT&. MT& dst! (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!))))) (let ((new_seqno$ (nClip (Add (nClip (Add (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))) (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$)))))) 1)))) (ite (> new_seqno$ (lib!abstract_parameters_t.AbstractParameters./AbstractParameters/max_seqno (%Poly%lib!abstract_parameters_t.AbstractParameters. params!))) (and (= post! pre!) (is-core!option.Option./None_ (%Poly%core!option.Option. sm!))) (and (= (%Poly%core!option.Option. sm!) (core!option.Option./Some (Poly%lib!single_message_t.SingleMessage. (lib!single_message_t.SingleMessage./Message (%I (I new_seqno$)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!) m!)))) (= (%Poly%lib!single_delivery_t.SingleDelivery. post!) (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)))) (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)) dst! (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.AckState./AckState (%I (I (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))))) (vstd!seq.Seq.push.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))) (core!option.Option./Some/0 (%Poly%core!option.Option. sm!))))))))))))) :pattern ((lib!single_delivery_t.impl&%1.send_single_message.? MT&. MT& pre! post! m! dst! sm! params!)) ))))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Message_seqno")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Message_seqno.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Message_seqno.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Message_seqno.? MT&. MT& self!)) )))
(set-info :comment ";; Function-Axioms lib::net_sht_v::outbound_packet_is_valid")
(assert (fuel_bool_default fuel%lib!net_sht_v.outbound_packet_is_valid.))
(assert (=> (fuel_bool fuel%lib!net_sht_v.outbound_packet_is_valid.) (forall ((cpacket! Poly)) (! (= (lib!net_sht_v.outbound_packet_is_valid.? cpacket!) (and (and (lib!cmessage_v.impl&%3.abstractable.? cpacket!) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. (Poly%lib!cmessage_v.CSingleMessage. (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. cpacket!)))))) (not (is-lib!cmessage_v.CSingleMessage./InvalidMessage_ (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. cpacket!)))))) :pattern ((lib!net_sht_v.outbound_packet_is_valid.? cpacket!)) ))))
(set-info :comment ";; Function-Axioms lib::net_sht_v::outbound_packet_seq_is_valid")
(assert (fuel_bool_default fuel%lib!net_sht_v.outbound_packet_seq_is_valid.))
(assert (=> (fuel_bool fuel%lib!net_sht_v.outbound_packet_seq_is_valid.) (forall ((cpackets! Poly)) (! (= (lib!net_sht_v.outbound_packet_seq_is_valid.? cpackets!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CPacket. cpackets!))) (lib!net_sht_v.outbound_packet_is_valid.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. cpackets! i$)))) :pattern ((lib!net_sht_v.outbound_packet_is_valid.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. cpackets! i$))) ))) :pattern ((lib!net_sht_v.outbound_packet_seq_is_valid.? cpackets!)) ))))
(set-info :comment ";; Function-Axioms lib::net_sht_v::outbound_packet_seq_has_correct_srcs")
(assert (fuel_bool_default fuel%lib!net_sht_v.outbound_packet_seq_has_correct_srcs.))
(assert (=> (fuel_bool fuel%lib!net_sht_v.outbound_packet_seq_has_correct_srcs.) (forall ((cpackets! Poly) (end_point! Poly)) (! (= (lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? cpackets! end_point!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CPacket. cpackets!))) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/src (%Poly%lib!cmessage_v.CPacket. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. cpackets! i$))))) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. end_point!)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. cpackets! i$)) ))) :pattern ((lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? cpackets! end_point!)) ))))
(set-info :comment ";; Function-Axioms lib::marshal_v::impl&%1::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%1.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%1.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (UINT SZ) self! other!) (B (= self! other!))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (UINT SZ) self! other!)) ))))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::view_equal")
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%4.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%4.view_equal.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self! other!) (B (let ((s$ (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!))) (let ((o$ (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) other!))) (and (= (vstd!seq.Seq.len.? T&. T& s$) (vstd!seq.Seq.len.? T&. T& o$)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& s$))) (%B (lib!marshal_v.Marshalable.view_equal.? T&. T& (vstd!seq.Seq.index.? T&. T& s$ i$) (vstd!seq.Seq.index.? T&. T& o$ i$))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? T&. T& (vstd!seq.Seq.index.? T&. T& s$ i$) (vstd!seq.Seq.index.? T&. T& o$ i$))) )))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::ReceiveImplResult::arrow_FreshPacket_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.) (forall ((self! Poly)) (! (= (lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.? self!) (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!))) :pattern ((lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (has_type (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.? self!)) TYPE%lib!cmessage_v.CPacket.)) :pattern ((lib!single_delivery_model_v.impl&%0.arrow_FreshPacket_ack.? self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::ReceiveImplResult::arrow_DuplicatePacket_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.) (forall ((self! Poly)) (! (= (lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.? self!) (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!))) :pattern ((lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (has_type (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.? self!)) TYPE%lib!cmessage_v.CPacket.)) :pattern ((lib!single_delivery_model_v.impl&%0.arrow_DuplicatePacket_ack.? self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::valid_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.valid_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.valid_ack.) (forall ((ack! Poly) (original! Poly)) (! (= (lib!single_delivery_model_v.valid_ack.? ack! original!) (and (and (and (lib!cmessage_v.impl&%3.abstractable.? ack!) (lib!net_sht_v.outbound_packet_is_valid.? ack!)) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/src (%Poly%lib!cmessage_v.CPacket. ack!)))) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/dst (%Poly%lib!cmessage_v.CPacket. original!)))))) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/dst (%Poly%lib!cmessage_v.CPacket. ack!)))) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CPacket./CPacket/src (%Poly%lib!cmessage_v.CPacket. original!))))))) :pattern ((lib!single_delivery_model_v.valid_ack.? ack! original!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::ReceiveImplResult::ok")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%1.ok.))
(define-fun is-lib!single_delivery_model_v.ReceiveImplResult./FreshPacket_ ((c lib!single_delivery_model_v.ReceiveImplResult.)) Bool ((_ is lib!single_delivery_model_v.ReceiveImplResult./FreshPacket) c))
(define-fun is-lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket_ ((c lib!single_delivery_model_v.ReceiveImplResult.)) Bool ((_ is lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket) c))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%1.ok.) (forall ((self! Poly)) (! (= (lib!single_delivery_model_v.impl&%1.ok.? self!) (or (is-lib!single_delivery_model_v.ReceiveImplResult./FreshPacket_ (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)) (is-lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket_ (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)))) :pattern ((lib!single_delivery_model_v.impl&%1.ok.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::ReceiveImplResult::get_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%1.get_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%1.get_ack.) (forall ((self! Poly)) (! (= (lib!single_delivery_model_v.impl&%1.get_ack.? self!) (ite (is-lib!single_delivery_model_v.ReceiveImplResult./FreshPacket_ (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)) (let ((ack$ (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)))) ack$) (ite (is-lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket_ (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)) (let ((ack$ (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)))) ack$) (%Poly%lib!cmessage_v.CPacket. (vstd!pervasive.arbitrary.? $ TYPE%lib!cmessage_v.CPacket.))))) :pattern ((lib!single_delivery_model_v.impl&%1.get_ack.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (has_type (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.impl&%1.get_ack.? self!)) TYPE%lib!cmessage_v.CPacket.)) :pattern ((lib!single_delivery_model_v.impl&%1.get_ack.? self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::ReceiveImplResult::get_abstracted_ack_set")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set.) (forall ((self! Poly)) (! (= (lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set.? self!) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (ite (is-lib!single_delivery_model_v.ReceiveImplResult./FreshPacket_ (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)) (let ((ack$ (lib!single_delivery_model_v.ReceiveImplResult./FreshPacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)))) (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. ack$))))) (ite (is-lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket_ (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)) (let ((ack$ (lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket/ack (%Poly%lib!single_delivery_model_v.ReceiveImplResult. self!)))) (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. ack$))))) (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.))))) :pattern ((lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_model_v::ReceiveImplResult::valid_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%1.valid_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%1.valid_ack.) (forall ((self! Poly) (pkt! Poly)) (! (= (lib!single_delivery_model_v.impl&%1.valid_ack.? self! pkt!) (=> (lib!single_delivery_model_v.impl&%1.ok.? self!) (lib!single_delivery_model_v.valid_ack.? (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.impl&%1.get_ack.? self!)) pkt!))) :pattern ((lib!single_delivery_model_v.impl&%1.valid_ack.? self! pkt!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSingleDelivery::packets_are_valid_messages")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.) (forall ((packets! Poly)) (! (= (lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? packets!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CPacket. packets!))) (is-lib!cmessage_v.CSingleMessage./Message_ (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. packets! i$)))))) :pattern ((lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CPacket. packets! i$)))) ))) :pattern ((lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? packets!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_state_v::CSingleDelivery::option_cpacket_to_set_packet")
(assert (fuel_bool_default fuel%lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet.))
(assert (=> (fuel_bool fuel%lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet.) (forall ((opt_pkt! Poly)) (! (= (lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet.? opt_pkt!) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. opt_pkt!)) (let ((pkt$ (%Poly%lib!cmessage_v.CPacket. (core!option.Option./Some/0 (%Poly%core!option.Option. opt_pkt!))))) (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt$))))) (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.)))) :pattern ((lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet.? opt_pkt!)) ))))
(set-info :comment ";; Function-Axioms lib::single_message_t::SingleMessage::arrow_Ack_ack_seqno")
(assert (fuel_bool_default fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.))
(assert (=> (fuel_bool fuel%lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.) (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (= (lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!) (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)) (<= 0 (lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!))) :pattern ((lib!single_message_t.impl&%0.arrow_Ack_ack_seqno.? MT&. MT& self!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::truncate_un_ack_list")
(assert (fuel_bool_default fuel%lib!single_delivery_t.truncate_un_ack_list.))
(declare-const fuel_nat%lib!single_delivery_t.truncate_un_ack_list. Fuel)
(assert (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly) (fuel% Fuel)) (! (= (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! fuel%) (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! zero)) :pattern ((lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! fuel%)) )))
(assert (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly) (fuel% Fuel)) (! (=> (and (has_type un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) (has_type seqno_acked! NAT)) (= (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! (succ fuel%)) (ite (and (and (> (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked!) 0) (is-lib!single_message_t.SingleMessage./Message_ (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked! (I 0))))) (<= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked! (I 0)))) (%I seqno_acked!))) (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& (vstd!seq.Seq.subrange.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked! (I 1) (I (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&) un_acked!))) seqno_acked! fuel%) un_acked!))) :pattern ((lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.truncate_un_ack_list.) (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly)) (! (=> (and (has_type un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) (has_type seqno_acked! NAT)) (= (lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!) (lib!single_delivery_t.rec%truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked! (succ fuel_nat%lib!single_delivery_t.truncate_un_ack_list.)))) :pattern ((lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!)) ))))
(assert (forall ((MT&. Dcr) (MT& Type) (un_acked! Poly) (seqno_acked! Poly)) (! (=> (and (has_type un_acked! (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&))) (has_type seqno_acked! NAT)) (has_type (lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!) (TYPE%vstd!seq.Seq. $ (TYPE%lib!single_message_t.SingleMessage. MT&. MT&)))) :pattern ((lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& un_acked! seqno_acked!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::receive_ack")
(declare-fun req%lib!single_delivery_t.impl&%1.receive_ack. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(define-fun is-lib!single_message_t.SingleMessage./Ack_ ((c lib!single_message_t.SingleMessage.)) Bool ((_ is lib!single_message_t.SingleMessage./Ack) c))
(assert (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (pkt! Poly) (acks! Poly)) (! (= (req%lib!single_delivery_t.impl&%1.receive_ack. MT&. MT& pre! post! pkt! acks!) (=> %%global_location_label%%17 (is-lib!single_message_t.SingleMessage./Ack_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) :pattern ((req%lib!single_delivery_t.impl&%1.receive_ack. MT&. MT& pre! post! pkt! acks!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive_ack.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (pkt! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive_ack.? MT&. MT& pre! post! pkt! acks!) (and (vstd!set_lib.impl&%0.is_empty.? $ TYPE%lib!network_t.Packet. acks!) (let ((old_ack_state$ (lib!single_delivery_t.ack_state_lookup.? MT&. MT& (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!))))) (ite (> (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) (lib!single_delivery_t.AckState./AckState/num_packets_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$)))) (let ((new_ack_state$ (lib!single_delivery_t.AckState./AckState (%I (I (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (lib!single_delivery_t.truncate_un_ack_list.? MT&. MT& (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (Poly%lib!single_delivery_t.AckState. old_ack_state$))) (I (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))))))))) (ext_eq false (TYPE%lib!single_delivery_t.SingleDelivery. MT&. MT&) post! (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. post!)))) (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. MT&. MT&) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. pre!)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%lib!single_delivery_t.AckState. new_ack_state$)))))) (= post! pre!))))) :pattern ((lib!single_delivery_t.impl&%1.receive_ack.? MT&. MT& pre! post! pkt! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::tombstone_table_lookup")
(assert (fuel_bool_default fuel%lib!single_delivery_t.tombstone_table_lookup.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.tombstone_table_lookup.) (forall ((src! Poly) (t! Poly)) (! (= (lib!single_delivery_t.tombstone_table_lookup.? src! t!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT t!) src!) (%I (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT t! src!)) 0)) :pattern ((lib!single_delivery_t.tombstone_table_lookup.? src! t!)) ))))
(assert (forall ((src! Poly) (t! Poly)) (! (=> (and (has_type src! TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (has_type t! (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT))) (<= 0 (lib!single_delivery_t.tombstone_table_lookup.? src! t!))) :pattern ((lib!single_delivery_t.tombstone_table_lookup.? src! t!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::new_single_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.new_single_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.new_single_message.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly)) (! (= (lib!single_delivery_t.impl&%1.new_single_message.? MT&. MT& self! pkt!) (let ((last_seqno$ (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) (and (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))) (= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) (nClip (Add last_seqno$ 1)))))) :pattern ((lib!single_delivery_t.impl&%1.new_single_message.? MT&. MT& self! pkt!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive_real_packet")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive_real_packet.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive_real_packet.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (post! Poly) (pkt! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive_real_packet.? MT&. MT& self! post! pkt!) (ite (lib!single_delivery_t.impl&%1.new_single_message.? MT&. MT& self! pkt!) (let ((last_seqno$ (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) (= (%Poly%lib!single_delivery_t.SingleDelivery. post!) (lib!single_delivery_t.SingleDelivery./SingleDelivery (%Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (I (nClip (Add last_seqno$ 1))))) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))))) (= post! self!))) :pattern ((lib!single_delivery_t.impl&%1.receive_real_packet.? MT&. MT& self! post! pkt!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::should_ack_single_message")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.should_ack_single_message.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.should_ack_single_message.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly)) (! (= (lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& self! pkt!) (and (is-lib!single_message_t.SingleMessage./Message_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))) (let ((last_seqno$ (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_t.SingleDelivery./SingleDelivery/receive_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) (<= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))) last_seqno$)))) :pattern ((lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& self! pkt!)) ))))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::send_ack")
(declare-fun req%lib!single_delivery_t.impl&%1.send_ack. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (req%lib!single_delivery_t.impl&%1.send_ack. MT&. MT& self! pkt! ack! acks!) (=> %%global_location_label%%18 (lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& self! pkt!))) :pattern ((req%lib!single_delivery_t.impl&%1.send_ack. MT&. MT& self! pkt! ack! acks!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::send_ack")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.send_ack.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.send_ack.) (forall ((MT&. Dcr) (MT& Type) (self! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.send_ack.? MT&. MT& self! pkt! ack! acks!) (and (and (and (and (is-lib!single_message_t.SingleMessage./Ack_ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. ack!))) (= (lib!single_message_t.SingleMessage./Ack/ack_seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. ack!))))) (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!))))))) (= (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. ack!)) (lib!network_t.Packet./Packet/dst (%Poly%lib!network_t.Packet. pkt!)))) (= (lib!network_t.Packet./Packet/dst (%Poly%lib!network_t.Packet. ack!)) (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. pkt!)))) (= acks! (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.) ack!)))) :pattern ((lib!single_delivery_t.impl&%1.send_ack.? MT&. MT& self! pkt! ack! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::maybe_ack_packet")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.maybe_ack_packet.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.maybe_ack_packet.? MT&. MT& pre! pkt! ack! acks!) (ite (lib!single_delivery_t.impl&%1.should_ack_single_message.? MT&. MT& pre! pkt!) (lib!single_delivery_t.impl&%1.send_ack.? MT&. MT& pre! pkt! ack! acks!) (vstd!set_lib.impl&%0.is_empty.? $ TYPE%lib!network_t.Packet. acks!))) :pattern ((lib!single_delivery_t.impl&%1.maybe_ack_packet.? MT&. MT& pre! pkt! ack! acks!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::receive")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%1.receive.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%1.receive.) (forall ((MT&. Dcr) (MT& Type) (pre! Poly) (post! Poly) (pkt! Poly) (ack! Poly) (acks! Poly)) (! (= (lib!single_delivery_t.impl&%1.receive.? MT&. MT& pre! post! pkt! ack! acks!) (let ((tmp%%$ (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. pkt!)))) (ite (is-lib!single_message_t.SingleMessage./Ack_ tmp%%$) (lib!single_delivery_t.impl&%1.receive_ack.? MT&. MT& pre! post! pkt! acks!) (ite (is-lib!single_message_t.SingleMessage./Message_ tmp%%$) (let ((seqno$ (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. tmp%%$))))) (let ((m$ (%Poly%lib!message_t.Message. (lib!single_message_t.SingleMessage./Message/m (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. tmp%%$)))))) (and (lib!single_delivery_t.impl&%1.receive_real_packet.? MT&. MT& pre! post! pkt!) (lib!single_delivery_t.impl&%1.maybe_ack_packet.? MT&. MT& post! pkt! ack! acks!)))) (and (= post! pre!) (= acks! (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.))))))) :pattern ((lib!single_delivery_t.impl&%1.receive.? MT&. MT& pre! post! pkt! ack! acks!)) ))))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest_up_to")
(declare-fun req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (src! Poly) (dst! Poly) (count! Poly)) (! (= (req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. self! src! dst! count!) (and (=> %%global_location_label%%19 (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))) dst!)) (=> %%global_location_label%%20 (<= (%I count!) (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)) dst!)))))))) :pattern ((req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to. self! src! dst! count!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest_up_to")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.))
(declare-fun %%lambda%%13 (lib!abstract_end_point_t.AbstractEndPoint. Dcr Type Poly Type Int Int Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 lib!abstract_end_point_t.AbstractEndPoint.) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Type) (%%hole%%5 Int) (%%hole%%6 Int) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (p$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) p$) (B (and (= (lib!network_t.Packet./Packet/src (%Poly%lib!network_t.Packet. p$)) %%hole%%0) (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%4) (and (and (and (and (<= %%hole%%5 (%I i$)) (< (%I i$) %%hole%%6)) (is-lib!single_message_t.SingleMessage./Message_ (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)))) (= (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. p$)) (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? %%hole%%10 %%hole%%11 %%hole%%12 i$)))) (= (lib!network_t.Packet./Packet/dst (%Poly%lib!network_t.Packet. p$)) (lib!single_message_t.SingleMessage./Message/dst (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!network_t.Packet./Packet/msg (%Poly%lib!network_t.Packet. p$)))))))) :pattern ((vstd!seq.Seq.index.? %%hole%%1 %%hole%%2 %%hole%%3 i$)) ))))) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) p$)))))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.) (forall ((self! Poly) (src! Poly) (dst! Poly) (count! Poly)) (! (= (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? self! src! dst! count!) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!set.impl&%0.new.? $ TYPE%lib!network_t.Packet. $ (TYPE%fun%1. $ TYPE%lib!network_t.Packet. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%13 (%Poly%lib!abstract_end_point_t.AbstractEndPoint. src!) $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)) dst!))) INT 0 (%I count!) $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)) dst!))) $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)) dst!))))))))) :pattern ((lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? self! src! dst! count!)) ))))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest")
(declare-fun req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly) (src! Poly) (dst! Poly)) (! (= (req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. self! src! dst!) (=> %%global_location_label%%21 (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))) dst!))) :pattern ((req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest. self! src! dst!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dest")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.) (forall ((self! Poly) (src! Poly) (dst! Poly)) (! (= (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.? self! src! dst!) (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? self! src! dst! (I (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)) dst!))))))) :pattern ((lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.? self! src! dst!)) ))))
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dests")
(declare-fun req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly) (src! Poly) (dsts! Poly)) (! (= (req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. self! src! dsts!) (=> %%global_location_label%%22 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. dsts! (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!)))))) :pattern ((req%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests. self! src! dsts!)) )))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::un_acked_messages_for_dests")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.))
(declare-fun %%lambda%%14 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (dst$ Poly)) (! (= (%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1) dst$) (Poly%vstd!set.Set<lib!network_t.Packet.>. (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.? %%hole%%0 %%hole%%1 dst$))) :pattern ((%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1) dst$)))))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.) (forall ((self! Poly) (src! Poly) (dsts! Poly)) (! (= (lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? self! src! dsts!) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (lib!verus_extra.set_lib_ext_v.flatten_sets.? $ TYPE%lib!network_t.Packet. (vstd!set_lib.impl&%0.map.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.) dsts! (Poly%fun%1. (mk_fun (%%lambda%%14 self! src!))))))) :pattern ((lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? self! src! dsts!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::SingleDelivery::un_acked_messages")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%2.un_acked_messages.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%2.un_acked_messages.) (forall ((self! Poly) (src! Poly)) (! (= (lib!single_delivery_t.impl&%2.un_acked_messages.? self! src!) (lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? self! src! (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. self!))))) :pattern ((lib!single_delivery_t.impl&%2.un_acked_messages.? self! src!)) ))))
(set-info :comment ";; Function-Axioms lib::single_delivery_t::AckState::new")
(assert (fuel_bool_default fuel%lib!single_delivery_t.impl&%0.new.))
(assert (=> (fuel_bool fuel%lib!single_delivery_t.impl&%0.new.) (forall ((no%param Poly)) (! (= (lib!single_delivery_t.impl&%0.new.? no%param) (lib!single_delivery_t.AckState./AckState (%I (I 0)) (vstd!seq.Seq.empty.? $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.)))) :pattern ((lib!single_delivery_t.impl&%0.new.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.impl&%0.new.? no%param)) (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.))) :pattern ((lib!single_delivery_t.impl&%0.new.? no%param)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!hashmap_t.CKeyHashMap.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL))) :pattern ((tr_bound%lib!marshal_v.Marshalable. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%tuple%2. T&. T& U&. U&))) :pattern ((tr_bound%lib!marshal_v.Marshalable. $ (TYPE%tuple%2. T&. T& U&. U&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!cmessage_v.CMessage.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!io_t.EndPoint.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type)) (! (=> (and (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&) (tr_bound%lib!keys_t.KeyTrait. K&. K&)) (tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type)) (! (=> (and (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&) (tr_bound%lib!keys_t.KeyTrait. K&. K&)) (tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!cmessage_v.CSingleMessage.))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_flatten_sets_union_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_flatten_sets_union_auto. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_flatten_sets_union_auto. A&. A&) (forall ((sets1$ Poly) (sets2$ Poly)) (! (=> (and (has_type sets1$ (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. A&. A&))) (has_type sets2$ (TYPE%vstd!set.Set. $ (TYPE%vstd!set.Set. A&. A&)))) (= (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& (vstd!set.impl&%0.union.? $ (TYPE%vstd!set.Set. A&. A&) sets1$ sets2$)) (vstd!set.impl&%0.union.? A&. A& (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets1$) (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& sets2$)))) :pattern ((lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& (vstd!set.impl&%0.union.? $ (TYPE%vstd!set.Set. A&. A&) sets1$ sets2$))) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_flatten_sets_union_auto. A&. A&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::set_map_union_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.set_map_union_auto. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.set_map_union_auto. A&. A& B&. B&) (forall ((s1$ Poly) (s2$ Poly) (f$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!set.Set. A&. A&)) (has_type s2$ (TYPE%vstd!set.Set. A&. A&)) (has_type f$ (TYPE%fun%1. A&. A& B&. B&))) (= (vstd!set_lib.impl&%0.map.? A&. A& B&. B& (vstd!set.impl&%0.union.? A&. A& s1$ s2$) f$) (vstd!set.impl&%0.union.? B&. B& (vstd!set_lib.impl&%0.map.? A&. A& B&. B& s1$ f$) (vstd!set_lib.impl&%0.map.? A&. A& B&. B& s2$ f$)))) :pattern ((vstd!set_lib.impl&%0.map.? A&. A& B&. B& (vstd!set.impl&%0.union.? A&. A& s1$ s2$) f$)) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.set_map_union_auto. A&. A& B&. B&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::seq_map_values_concat_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.seq_map_values_concat_auto. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.seq_map_values_concat_auto. A&. A& B&. B&) (forall ((s1$ Poly) (s2$ Poly) (f$ Poly)) (! (=> (and (has_type s1$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type f$ (TYPE%fun%1. A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& (vstd!seq.Seq.add.? A&. A& s1$ s2$) f$) (vstd!seq.Seq.add.? B&. B& (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& s1$ f$) (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& s2$ f$)))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& (vstd!seq.Seq.add.? A&. A& s1$ s2$) f$)) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.seq_map_values_concat_auto. A&. A& B&. B&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_seq_push_to_set")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_seq_push_to_set. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (x! Poly)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_seq_push_to_set. A&. A& s! x!) (= (vstd!seq_lib.impl&%0.to_set.? A&. A& (vstd!seq.Seq.push.? A&. A& s! x!)) (vstd!set.impl&%0.insert.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& s!) x!))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_seq_push_to_set. A&. A& s! x!)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_to_set_union_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_union_auto. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_union_auto. A&. A&) (forall ((s$ Poly) (t$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type t$ (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq_lib.impl&%0.to_set.? A&. A& (vstd!seq.Seq.add.? A&. A& s$ t$)) (vstd!set.impl&%0.union.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& s$) (vstd!seq_lib.impl&%0.to_set.? A&. A& t$)))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& (vstd!seq.Seq.add.? A&. A& s$ t$))) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_union_auto. A&. A&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::map_set_finite_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.map_set_finite_auto. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.map_set_finite_auto. A&. A& B&. B&) (forall ((s$ Poly) (f$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!set.Set. A&. A&)) (has_type f$ (TYPE%fun%1. A&. A& B&. B&))) (=> (vstd!set.impl&%0.finite.? A&. A& s$) (vstd!set.impl&%0.finite.? B&. B& (vstd!set_lib.impl&%0.map.? A&. A& B&. B& s$ f$)))) :pattern ((vstd!set.impl&%0.finite.? B&. B& (vstd!set_lib.impl&%0.map.? A&. A& B&. B& s$ f$))) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.map_set_finite_auto. A&. A& B&. B&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_to_set_singleton_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_singleton_auto. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_singleton_auto. A&. A&) (forall ((x$ Poly)) (! (=> (has_type x$ A&) (= (vstd!seq_lib.impl&%0.to_set.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.empty.? A&. A&) x$)) (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) x$))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.empty.? A&. A&) x$))) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_singleton_auto. A&. A&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_map_values_singleton_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_map_values_singleton_auto. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_map_values_singleton_auto. A&. A& B&. B&) (forall ((x$ Poly) (f$ Poly)) (! (=> (and (has_type x$ A&) (has_type f$ (TYPE%fun%1. A&. A& B&. B&))) (ext_eq false (TYPE%vstd!seq.Seq. B&. B&) (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.empty.? A&. A&) x$) f$) (vstd!seq.Seq.push.? B&. B& (vstd!seq.Seq.empty.? B&. B&) (%%apply%%0 (%Poly%fun%1. f$) x$)))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.empty.? A&. A&) x$) f$)) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_map_values_singleton_auto. A&. A& B&. B&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_map_set_singleton_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_map_set_singleton_auto. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_map_set_singleton_auto. A&. A& B&. B&) (forall ((x$ Poly) (f$ Poly)) (! (=> (and (has_type x$ A&) (has_type f$ (TYPE%fun%1. A&. A& B&. B&))) (= (vstd!set_lib.impl&%0.map.? A&. A& B&. B& (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) x$) f$) (vstd!set.impl&%0.insert.? B&. B& (vstd!set.impl&%0.empty.? B&. B&) (%%apply%%0 (%Poly%fun%1. f$) x$)))) :pattern ((vstd!set_lib.impl&%0.map.? A&. A& B&. B& (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) x$) f$)) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_map_set_singleton_auto. A&. A& B&. B&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::lemma_map_seq_singleton_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.lemma_map_seq_singleton_auto. (Dcr Type Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.lemma_map_seq_singleton_auto. A&. A& B&. B&) (forall ((x$ Poly) (f$ Poly)) (! (=> (and (has_type x$ A&) (has_type f$ (TYPE%fun%1. A&. A& B&. B&))) (ext_eq false (TYPE%vstd!seq.Seq. B&. B&) (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.empty.? A&. A&) x$) f$) (vstd!seq.Seq.push.? B&. B& (vstd!seq.Seq.empty.? B&. B&) (%%apply%%0 (%Poly%fun%1. f$) x$)))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.empty.? A&. A&) x$) f$)) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.lemma_map_seq_singleton_auto. A&. A& B&. B&)) )))
(set-info :comment ";; Function-Specs lib::verus_extra::set_lib_ext_v::flatten_sets_singleton_auto")
(declare-fun ens%lib!verus_extra.set_lib_ext_v.flatten_sets_singleton_auto. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!verus_extra.set_lib_ext_v.flatten_sets_singleton_auto. A&. A&) (forall ((x$ Poly)) (! (=> (has_type x$ (TYPE%vstd!set.Set. A&. A&)) (ext_eq false (TYPE%vstd!set.Set. A&. A&) (lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& (vstd!set.impl&%0.insert.? $ (TYPE%vstd!set.Set. A&. A&) (vstd!set.impl&%0.empty.? $ (TYPE%vstd!set.Set. A&. A&)) x$)) x$)) :pattern ((lib!verus_extra.set_lib_ext_v.flatten_sets.? A&. A& (vstd!set.impl&%0.insert.? $ (TYPE%vstd!set.Set. A&. A&) (vstd!set.impl&%0.empty.? $ (TYPE%vstd!set.Set. A&. A&)) x$))) ))) :pattern ((ens%lib!verus_extra.set_lib_ext_v.flatten_sets_singleton_auto. A&. A&)) )))
(set-info :comment ";; Function-Specs lib::io_t::EndPoint::clone_up_to_view")
(declare-fun ens%lib!io_t.impl&%4.clone_up_to_view. (lib!io_t.EndPoint. lib!io_t.EndPoint.) Bool)
(assert (forall ((self! lib!io_t.EndPoint.) (res! lib!io_t.EndPoint.)) (! (= (ens%lib!io_t.impl&%4.clone_up_to_view. self! res!) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. res!)) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. self!)))) :pattern ((ens%lib!io_t.impl&%4.clone_up_to_view. self! res!)) )))
(set-info :comment ";; Function-Specs lib::cmessage_v::CMessage::clone_up_to_view")
(declare-fun ens%lib!cmessage_v.impl&%1.clone_up_to_view. (lib!cmessage_v.CMessage. lib!cmessage_v.CMessage.) Bool)
(assert (forall ((self! lib!cmessage_v.CMessage.) (c! lib!cmessage_v.CMessage.)) (! (= (ens%lib!cmessage_v.impl&%1.clone_up_to_view. self! c!) (and (has_type (Poly%lib!cmessage_v.CMessage. c!) TYPE%lib!cmessage_v.CMessage.) (= (lib!cmessage_v.impl&%1.view.? (Poly%lib!cmessage_v.CMessage. c!)) (lib!cmessage_v.impl&%1.view.? (Poly%lib!cmessage_v.CMessage. self!))))) :pattern ((ens%lib!cmessage_v.impl&%1.clone_up_to_view. self! c!)) )))
(set-info :comment ";; Function-Specs lib::cmessage_v::CSingleMessage::view_equal_spec")
(declare-fun ens%lib!cmessage_v.impl&%2.view_equal_spec. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!cmessage_v.impl&%2.view_equal_spec. no%param) (forall ((x$ Poly) (y$ Poly)) (! (=> (and (has_type x$ TYPE%lib!cmessage_v.CSingleMessage.) (has_type y$ TYPE%lib!cmessage_v.CSingleMessage.)) (= (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CSingleMessage. x$ y$)) (= (lib!cmessage_v.impl&%2.view.? x$) (lib!cmessage_v.impl&%2.view.? y$)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CSingleMessage. x$ y$)) ))) :pattern ((ens%lib!cmessage_v.impl&%2.view_equal_spec. no%param)) )))
(set-info :comment ";; Function-Specs lib::cmessage_v::CSingleMessage::clone_up_to_view")
(declare-fun ens%lib!cmessage_v.impl&%2.clone_up_to_view. (lib!cmessage_v.CSingleMessage. lib!cmessage_v.CSingleMessage.) Bool)
(assert (forall ((self! lib!cmessage_v.CSingleMessage.) (c! lib!cmessage_v.CSingleMessage.)) (! (= (ens%lib!cmessage_v.impl&%2.clone_up_to_view. self! c!) (and (has_type (Poly%lib!cmessage_v.CSingleMessage. c!) TYPE%lib!cmessage_v.CSingleMessage.) (= (lib!cmessage_v.impl&%2.view.? (Poly%lib!cmessage_v.CSingleMessage. c!)) (lib!cmessage_v.impl&%2.view.? (Poly%lib!cmessage_v.CSingleMessage. self!))))) :pattern ((ens%lib!cmessage_v.impl&%2.clone_up_to_view. self! c!)) )))
(set-info :comment ";; Function-Specs lib::host_impl_v::Parameters::static_params")
(declare-fun ens%lib!host_impl_v.impl&%1.static_params. (Int lib!host_impl_v.Parameters.) Bool)
(assert (forall ((no%param Int) (out! lib!host_impl_v.Parameters.)) (! (= (ens%lib!host_impl_v.impl&%1.static_params. no%param out!) (and (has_type (Poly%lib!host_impl_v.Parameters. out!) TYPE%lib!host_impl_v.Parameters.) (= (lib!host_impl_v.impl&%1.view.? (Poly%lib!host_impl_v.Parameters. out!)) (lib!abstract_parameters_t.impl&%0.static_params.? (I 0))))) :pattern ((ens%lib!host_impl_v.impl&%1.static_params. no%param out!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSendState::get")
(declare-fun ens%lib!single_delivery_state_v.impl&%2.get. (lib!single_delivery_state_v.CSendState. lib!io_t.EndPoint. core!option.Option.) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSendState.) (src! lib!io_t.EndPoint.) (value! core!option.Option.)) (! (= (ens%lib!single_delivery_state_v.impl&%2.get. self! src! value!) (and (has_type (Poly%core!option.Option. value!) (TYPE%core!option.Option. (REF $) TYPE%lib!single_delivery_state_v.CAckState.)) (= value! (let ((tmp%%$ (lib!endpoint_hashmap_t.impl&%0.get_spec.? $ TYPE%lib!single_delivery_state_v.CAckState. (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. self!))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!)))))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((v$ (%Poly%lib!single_delivery_state_v.CAckState. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (Poly%lib!single_delivery_state_v.CAckState. v$))) core!option.Option./None))) (=> (is-core!option.Option./Some_ value!) (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? (Poly%lib!single_delivery_state_v.CSendState. self!)))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))))) :pattern ((ens%lib!single_delivery_state_v.impl&%2.get. self! src! value!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CAckState::new")
(declare-fun ens%lib!single_delivery_state_v.impl&%0.new. (Int lib!single_delivery_state_v.CAckState.) Bool)
(assert (forall ((no%param Int) (e! lib!single_delivery_state_v.CAckState.)) (! (= (ens%lib!single_delivery_state_v.impl&%0.new. no%param e!) (and (has_type (Poly%lib!single_delivery_state_v.CAckState. e!) TYPE%lib!single_delivery_state_v.CAckState.) (= (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. e!))) 0) (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. e!))))) 0) (ext_eq false (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_state_v.impl&%0.view.? (Poly%lib!single_delivery_state_v.CAckState. e!))) (Poly%lib!single_delivery_t.AckState. (lib!single_delivery_t.impl&%0.new.? (I 0)))))) :pattern ((ens%lib!single_delivery_state_v.impl&%0.new. no%param e!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSendState::cack_state_swap")
(declare-fun req%lib!single_delivery_state_v.impl&%2.cack_state_swap. (lib!single_delivery_state_v.CSendState. lib!io_t.EndPoint. lib!single_delivery_state_v.CAckState. lib!single_delivery_state_v.CAckState.) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSendState.) (src! lib!io_t.EndPoint.) (pre%ack_state! lib!single_delivery_state_v.CAckState.) (default! lib!single_delivery_state_v.CAckState.)) (! (= (req%lib!single_delivery_state_v.impl&%2.cack_state_swap. pre%self! src! pre%ack_state! default!) (and (=> %%global_location_label%%23 (lib!single_delivery_state_v.impl&%2.valid.? (Poly%lib!single_delivery_state_v.CSendState. pre%self!))) (=> %%global_location_label%%24 (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))))) :pattern ((req%lib!single_delivery_state_v.impl&%2.cack_state_swap. pre%self! src! pre%ack_state! default!)) )))
(declare-fun ens%lib!single_delivery_state_v.impl&%2.cack_state_swap. (lib!single_delivery_state_v.CSendState. lib!single_delivery_state_v.CSendState. lib!io_t.EndPoint. lib!single_delivery_state_v.CAckState. lib!single_delivery_state_v.CAckState. lib!single_delivery_state_v.CAckState.) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSendState.) (self! lib!single_delivery_state_v.CSendState.) (src! lib!io_t.EndPoint.) (pre%ack_state! lib!single_delivery_state_v.CAckState.) (ack_state! lib!single_delivery_state_v.CAckState.) (default! lib!single_delivery_state_v.CAckState.)) (! (= (ens%lib!single_delivery_state_v.impl&%2.cack_state_swap. pre%self! self! src! pre%ack_state! ack_state! default!) (and (has_type (Poly%lib!single_delivery_state_v.CAckState. ack_state!) TYPE%lib!single_delivery_state_v.CAckState.) (lib!endpoint_hashmap_t.impl&%0.swap_spec.? $ TYPE%lib!single_delivery_state_v.CAckState. (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. pre%self!))))) (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. self!))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (Poly%lib!single_delivery_state_v.CAckState. pre%ack_state!) (Poly%lib!single_delivery_state_v.CAckState. ack_state!) (Poly%lib!single_delivery_state_v.CAckState. default!)))) :pattern ((ens%lib!single_delivery_state_v.impl&%2.cack_state_swap. pre%self! self! src! pre%ack_state! ack_state! default!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CAckState::truncate")
(declare-fun req%lib!single_delivery_state_v.impl&%0.truncate. (lib!single_delivery_state_v.CAckState. Int lib!abstract_end_point_t.AbstractEndPoint.) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CAckState.) (seqno_acked! Int) (dst! lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (req%lib!single_delivery_state_v.impl&%0.truncate. pre%self! seqno_acked! dst!) (and (=> %%global_location_label%%25 (lib!single_delivery_state_v.impl&%0.valid.? (Poly%lib!single_delivery_state_v.CAckState. pre%self!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!))) (=> %%global_location_label%%26 (<= (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. pre%self!))) seqno_acked!)))) :pattern ((req%lib!single_delivery_state_v.impl&%0.truncate. pre%self! seqno_acked! dst!)) )))
(declare-fun ens%lib!single_delivery_state_v.impl&%0.truncate. (lib!single_delivery_state_v.CAckState. lib!single_delivery_state_v.CAckState. Int lib!abstract_end_point_t.AbstractEndPoint.) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CAckState.) (self! lib!single_delivery_state_v.CAckState.) (seqno_acked! Int) (dst! lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (ens%lib!single_delivery_state_v.impl&%0.truncate. pre%self! self! seqno_acked! dst!) (and (has_type (Poly%lib!single_delivery_state_v.CAckState. self!) TYPE%lib!single_delivery_state_v.CAckState.) (lib!single_delivery_state_v.impl&%0.valid.? (Poly%lib!single_delivery_state_v.CAckState. self!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!)) (= (lib!cmessage_v.abstractify_cmessage_seq.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!)))))) (%Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (lib!single_delivery_t.truncate_un_ack_list.? $ TYPE%lib!message_t.Message. (Poly%vstd!seq.Seq<lib!single_message_t.SingleMessage<lib!message_t.Message.>.>. (lib!cmessage_v.abstractify_cmessage_seq.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. pre%self!))))))) (I seqno_acked!)))) (=> (> (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!)))))) 0) (= (lib!single_message_t.SingleMessage./Message/seqno (%Poly%lib!single_message_t.SingleMessage. (Poly%lib!single_message_t.SingleMessage. (lib!cmessage_v.impl&%2.view.? (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!))))) (I 0)))))) (Add seqno_acked! 1))) (= (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!))) seqno_acked!))) :pattern ((ens%lib!single_delivery_state_v.impl&%0.truncate. pre%self! self! seqno_acked! dst!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSendState::put")
(declare-fun ens%lib!single_delivery_state_v.impl&%2.put. (lib!single_delivery_state_v.CSendState. lib!single_delivery_state_v.CSendState. lib!io_t.EndPoint. lib!single_delivery_state_v.CAckState.) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSendState.) (self! lib!single_delivery_state_v.CSendState.) (src! lib!io_t.EndPoint.) (value! lib!single_delivery_state_v.CAckState.)) (! (= (ens%lib!single_delivery_state_v.impl&%2.put. pre%self! self! src! value!) (lib!endpoint_hashmap_t.impl&%0.put_spec.? $ TYPE%lib!single_delivery_state_v.CAckState. (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. pre%self!))))) (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. self!))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (Poly%lib!single_delivery_state_v.CAckState. value!))) :pattern ((ens%lib!single_delivery_state_v.impl&%2.put. pre%self! self! src! value!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::receive_ack_impl")
(declare-fun req%lib!single_delivery_model_v.impl&%2.receive_ack_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket.) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.)) (! (= (req%lib!single_delivery_model_v.impl&%2.receive_ack_impl. pre%self! pkt!) (and (=> %%global_location_label%%27 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (=> %%global_location_label%%28 (lib!cmessage_v.impl&%3.abstractable.? (Poly%lib!cmessage_v.CPacket. pkt!))) (=> %%global_location_label%%29 (is-lib!cmessage_v.CSingleMessage./Ack_ (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. (Poly%lib!cmessage_v.CPacket. pkt!))))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.receive_ack_impl. pre%self! pkt!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.receive_ack_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket.) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.)) (! (= (ens%lib!single_delivery_model_v.impl&%2.receive_ack_impl. pre%self! self! pkt!) (and (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)) (lib!single_delivery_t.impl&%1.receive_ack.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!))) (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.)))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.receive_ack_impl. pre%self! self! pkt!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::receive_ack_impl")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:199:5: 199:54 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CTombstoneTable::lookup")
(declare-fun ens%lib!single_delivery_state_v.impl&%1.lookup. (lib!single_delivery_state_v.CTombstoneTable. lib!io_t.EndPoint. Int) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CTombstoneTable.) (src! lib!io_t.EndPoint.) (last_seqno! Int)) (! (= (ens%lib!single_delivery_state_v.impl&%1.lookup. self! src! last_seqno!) (and (uInv 64 last_seqno!) (= last_seqno! (lib!single_delivery_t.tombstone_table_lookup.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_state_v.impl&%1.view.? (Poly%lib!single_delivery_state_v.CTombstoneTable. self!))))))) :pattern ((ens%lib!single_delivery_state_v.impl&%1.lookup. self! src! last_seqno!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CTombstoneTable::insert")
(declare-fun req%lib!single_delivery_state_v.impl&%1.insert. (lib!single_delivery_state_v.CTombstoneTable. lib!io_t.EndPoint. Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CTombstoneTable.) (src! lib!io_t.EndPoint.) (last_seqno! Int)) (! (= (req%lib!single_delivery_state_v.impl&%1.insert. pre%self! src! last_seqno!) (and (=> %%global_location_label%%30 (lib!single_delivery_state_v.impl&%1.abstractable.? (Poly%lib!single_delivery_state_v.CTombstoneTable. pre%self!))) (=> %%global_location_label%%31 (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))))) :pattern ((req%lib!single_delivery_state_v.impl&%1.insert. pre%self! src! last_seqno!)) )))
(declare-fun ens%lib!single_delivery_state_v.impl&%1.insert. (lib!single_delivery_state_v.CTombstoneTable. lib!single_delivery_state_v.CTombstoneTable. lib!io_t.EndPoint. Int) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CTombstoneTable.) (self! lib!single_delivery_state_v.CTombstoneTable.) (src! lib!io_t.EndPoint.) (last_seqno! Int)) (! (= (ens%lib!single_delivery_state_v.impl&%1.insert. pre%self! self! src! last_seqno!) (and (ext_eq false (TYPE%vstd!map.Map. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_state_v.impl&%1.view.? (Poly%lib!single_delivery_state_v.CTombstoneTable. self!))) (vstd!map.impl&%0.insert.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ NAT (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./nat.>. (lib!single_delivery_state_v.impl&%1.view.? (Poly%lib!single_delivery_state_v.CTombstoneTable. pre%self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (I last_seqno!))) (lib!single_delivery_state_v.impl&%1.abstractable.? (Poly%lib!single_delivery_state_v.CTombstoneTable. self!)))) :pattern ((ens%lib!single_delivery_state_v.impl&%1.insert. pre%self! self! src! last_seqno!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::receive_real_packet_impl")
(declare-fun req%lib!single_delivery_model_v.impl&%2.receive_real_packet_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket.) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.)) (! (= (req%lib!single_delivery_model_v.impl&%2.receive_real_packet_impl. pre%self! pkt!) (and (=> %%global_location_label%%32 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (=> %%global_location_label%%33 (lib!cmessage_v.impl&%3.abstractable.? (Poly%lib!cmessage_v.CPacket. pkt!))) (=> %%global_location_label%%34 (is-lib!cmessage_v.CSingleMessage./Message_ (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. (Poly%lib!cmessage_v.CPacket. pkt!))))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.receive_real_packet_impl. pre%self! pkt!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.receive_real_packet_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket. Bool) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.) (packet_is_fresh! Bool)) (! (= (ens%lib!single_delivery_model_v.impl&%2.receive_real_packet_impl. pre%self! self! pkt! packet_is_fresh!) (and (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)) (lib!single_delivery_t.impl&%1.receive_real_packet.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!)))) (= packet_is_fresh! (lib!single_delivery_t.impl&%1.new_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!))))))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.receive_real_packet_impl. pre%self! self! pkt! packet_is_fresh!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::receive_real_packet_impl")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:252:5: 252:88 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::maybe_ack_packet_impl")
(declare-fun req%lib!single_delivery_model_v.impl&%2.maybe_ack_packet_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket.) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.)) (! (= (req%lib!single_delivery_model_v.impl&%2.maybe_ack_packet_impl. self! pkt!) (and (=> %%global_location_label%%35 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (=> %%global_location_label%%36 (lib!cmessage_v.impl&%3.abstractable.? (Poly%lib!cmessage_v.CPacket. pkt!))) (=> %%global_location_label%%37 (is-lib!cmessage_v.CSingleMessage./Message_ (lib!cmessage_v.CPacket./CPacket/msg (%Poly%lib!cmessage_v.CPacket. (Poly%lib!cmessage_v.CPacket. pkt!))))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.maybe_ack_packet_impl. self! pkt!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.maybe_ack_packet_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket. core!option.Option.) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.) (opt_ack! core!option.Option.)) (! (= (ens%lib!single_delivery_model_v.impl&%2.maybe_ack_packet_impl. self! pkt! opt_ack!) (and (has_type (Poly%core!option.Option. opt_ack!) (TYPE%core!option.Option. $ TYPE%lib!cmessage_v.CPacket.)) (lib!single_delivery_t.impl&%1.maybe_ack_packet.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. opt_ack!))))) (Poly%vstd!set.Set<lib!network_t.Packet.>. (lib!single_delivery_model_v.impl&%2.option_cpacket_to_set_packet.? (Poly%core!option.Option. opt_ack!)))) (=> (is-core!option.Option./Some_ opt_ack!) (lib!single_delivery_model_v.valid_ack.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. opt_ack!))) (Poly%lib!cmessage_v.CPacket. pkt!))))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.maybe_ack_packet_impl. self! pkt! opt_ack!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::maybe_ack_packet_impl")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:300:5: 300:84 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::receive_impl")
(declare-fun req%lib!single_delivery_model_v.impl&%2.receive_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket.) Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.)) (! (= (req%lib!single_delivery_model_v.impl&%2.receive_impl. pre%self! pkt!) (and (=> %%global_location_label%%38 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (=> %%global_location_label%%39 (lib!single_delivery_state_v.impl&%3.abstractable.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (=> %%global_location_label%%40 (lib!cmessage_v.impl&%3.abstractable.? (Poly%lib!cmessage_v.CPacket. pkt!))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.receive_impl. pre%self! pkt!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.receive_impl. (lib!single_delivery_state_v.CSingleDelivery. lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CPacket. lib!single_delivery_model_v.ReceiveImplResult.) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (self! lib!single_delivery_state_v.CSingleDelivery.) (pkt! lib!cmessage_v.CPacket.) (rr! lib!single_delivery_model_v.ReceiveImplResult.)) (! (= (ens%lib!single_delivery_model_v.impl&%2.receive_impl. pre%self! self! pkt! rr!) (and (has_type (Poly%lib!single_delivery_model_v.ReceiveImplResult. rr!) TYPE%lib!single_delivery_model_v.ReceiveImplResult.) (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)) (lib!single_delivery_model_v.impl&%1.valid_ack.? (Poly%lib!single_delivery_model_v.ReceiveImplResult. rr!) (Poly%lib!cmessage_v.CPacket. pkt!)) (lib!single_delivery_t.impl&%1.receive.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. (lib!single_delivery_model_v.impl&%1.get_ack.? (Poly%lib!single_delivery_model_v.ReceiveImplResult. rr!))))) (Poly%vstd!set.Set<lib!network_t.Packet.>. (lib!single_delivery_model_v.impl&%1.get_abstracted_ack_set.? (Poly%lib!single_delivery_model_v.ReceiveImplResult. rr!)))) (=> (is-lib!single_delivery_model_v.ReceiveImplResult./FreshPacket_ rr!) (lib!single_delivery_t.impl&%1.new_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!))))) (=> (is-lib!single_delivery_model_v.ReceiveImplResult./DuplicatePacket_ rr!) (not (lib!single_delivery_t.impl&%1.new_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!network_t.Packet. (lib!cmessage_v.impl&%3.view.? (Poly%lib!cmessage_v.CPacket. pkt!)))))))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.receive_impl. pre%self! self! pkt! rr!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::receive_impl")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:343:5: 343:76 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CAckState::lemma_seqno_in_un_acked_list")
(declare-fun req%lib!single_delivery_state_v.impl&%0.lemma_seqno_in_un_acked_list. (lib!single_delivery_state_v.CAckState. lib!abstract_end_point_t.AbstractEndPoint. Int) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((self! lib!single_delivery_state_v.CAckState.) (dst! lib!abstract_end_point_t.AbstractEndPoint.) (k! Int)) (! (= (req%lib!single_delivery_state_v.impl&%0.lemma_seqno_in_un_acked_list. self! dst! k!) (and (=> %%global_location_label%%41 (lib!single_delivery_state_v.impl&%0.valid.? (Poly%lib!single_delivery_state_v.CAckState. self!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!))) (=> %%global_location_label%%42 (and (<= 0 k!) (< k! (vstd!seq.Seq.len.? $ TYPE%lib!cmessage_v.CSingleMessage. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!))))))))))) :pattern ((req%lib!single_delivery_state_v.impl&%0.lemma_seqno_in_un_acked_list. self! dst! k!)) )))
(declare-fun ens%lib!single_delivery_state_v.impl&%0.lemma_seqno_in_un_acked_list. (lib!single_delivery_state_v.CAckState. lib!abstract_end_point_t.AbstractEndPoint. Int) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CAckState.) (dst! lib!abstract_end_point_t.AbstractEndPoint.) (k! Int)) (! (= (ens%lib!single_delivery_state_v.impl&%0.lemma_seqno_in_un_acked_list. self! dst! k!) (= (lib!cmessage_v.CSingleMessage./Message/seqno (%Poly%lib!cmessage_v.CSingleMessage. (vstd!seq.Seq.index.? $ TYPE%lib!cmessage_v.CSingleMessage. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CSingleMessage. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CSingleMessage./allocator_global%.>. (lib!single_delivery_state_v.CAckState./CAckState/un_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!))))) (I k!)))) (Add (Add (lib!single_delivery_state_v.CAckState./CAckState/num_packets_acked (%Poly%lib!single_delivery_state_v.CAckState. (Poly%lib!single_delivery_state_v.CAckState. self!))) k!) 1))) :pattern ((ens%lib!single_delivery_state_v.impl&%0.lemma_seqno_in_un_acked_list. self! dst! k!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::send_single_cmessage")
(declare-fun req%lib!single_delivery_model_v.impl&%2.send_single_cmessage. (lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CMessage. lib!io_t.EndPoint.) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (m! lib!cmessage_v.CMessage.) (dst! lib!io_t.EndPoint.)) (! (= (req%lib!single_delivery_model_v.impl&%2.send_single_cmessage. pre%self! m! dst!) (and (=> %%global_location_label%%43 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (=> %%global_location_label%%44 (lib!single_delivery_state_v.impl&%3.abstractable.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (=> %%global_location_label%%45 (lib!cmessage_v.impl&%1.abstractable.? (Poly%lib!cmessage_v.CMessage. m!))) (=> %%global_location_label%%46 (lib!cmessage_v.impl&%1.message_marshallable.? (Poly%lib!cmessage_v.CMessage. m!))) (=> %%global_location_label%%47 (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. m!)))) (=> %%global_location_label%%48 (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst!))))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.send_single_cmessage. pre%self! m! dst!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.send_single_cmessage. (lib!single_delivery_state_v.CSingleDelivery. lib!single_delivery_state_v.CSingleDelivery. lib!cmessage_v.CMessage. lib!io_t.EndPoint. core!option.Option.) Bool)
(assert (forall ((pre%self! lib!single_delivery_state_v.CSingleDelivery.) (self! lib!single_delivery_state_v.CSingleDelivery.) (m! lib!cmessage_v.CMessage.) (dst! lib!io_t.EndPoint.) (sm! core!option.Option.)) (! (= (ens%lib!single_delivery_model_v.impl&%2.send_single_cmessage. pre%self! self! m! dst! sm!) (and (has_type (Poly%core!option.Option. sm!) (TYPE%core!option.Option. $ TYPE%lib!cmessage_v.CSingleMessage.)) (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)) (ite (is-core!option.Option./Some_ sm!) (let ((sm$ (%Poly%lib!cmessage_v.CSingleMessage. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. sm!)))))) (and (and (and (and (lib!cmessage_v.impl&%2.abstractable.? (Poly%lib!cmessage_v.CSingleMessage. sm$)) (is-lib!cmessage_v.CSingleMessage./Message_ sm$)) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. (lib!cmessage_v.CSingleMessage./Message/dst (%Poly%lib!cmessage_v.CSingleMessage. (Poly%lib!cmessage_v.CSingleMessage. sm$))))) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst!)))) (lib!single_delivery_t.impl&%1.send_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!message_t.Message. (lib!cmessage_v.impl&%1.view.? (Poly%lib!cmessage_v.CMessage. m!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst!))) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!single_message_t.SingleMessage. (lib!cmessage_v.impl&%2.view.? (Poly%lib!cmessage_v.CSingleMessage. sm$))))) (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.impl&%0.static_params.? (I 0))))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. (Poly%lib!cmessage_v.CSingleMessage. sm$))))) (lib!single_delivery_t.impl&%1.send_single_message.? $ TYPE%lib!message_t.Message. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. pre%self!))) (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!message_t.Message. (lib!cmessage_v.impl&%1.view.? (Poly%lib!cmessage_v.CMessage. m!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst!))) (Poly%core!option.Option. core!option.Option./None) (Poly%lib!abstract_parameters_t.AbstractParameters. (lib!abstract_parameters_t.impl&%0.static_params.? (I 0))))))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.send_single_cmessage. pre%self! self! m! dst! sm!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::send_single_cmessage")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:394:5: 394:104 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_t::SingleDelivery::lemma_un_acked_messages_for_dests_empty")
(declare-fun req%lib!single_delivery_state_v.impl&%4.lemma_un_acked_messages_for_dests_empty. (lib!single_delivery_t.SingleDelivery. lib!abstract_end_point_t.AbstractEndPoint. vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self! lib!single_delivery_t.SingleDelivery.) (src! lib!abstract_end_point_t.AbstractEndPoint.) (dests! vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= (req%lib!single_delivery_state_v.impl&%4.lemma_un_acked_messages_for_dests_empty. self! src! dests!) (=> %%global_location_label%%49 (= dests! (%Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))))) :pattern ((req%lib!single_delivery_state_v.impl&%4.lemma_un_acked_messages_for_dests_empty. self! src! dests!)) )))
(declare-fun ens%lib!single_delivery_state_v.impl&%4.lemma_un_acked_messages_for_dests_empty. (lib!single_delivery_t.SingleDelivery. lib!abstract_end_point_t.AbstractEndPoint. vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.) Bool)
(assert (forall ((self! lib!single_delivery_t.SingleDelivery.) (src! lib!abstract_end_point_t.AbstractEndPoint.) (dests! vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= (ens%lib!single_delivery_state_v.impl&%4.lemma_un_acked_messages_for_dests_empty. self! src! dests!) (= (lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? (Poly%lib!single_delivery_t.SingleDelivery. self!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. src!) (Poly%vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>. dests!)) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!network_t.Packet.)))) :pattern ((ens%lib!single_delivery_state_v.impl&%4.lemma_un_acked_messages_for_dests_empty. self! src! dests!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_model_v::same_view_same_marshalable")
(declare-fun req%lib!single_delivery_model_v.same_view_same_marshalable. (lib!cmessage_v.CSingleMessage. lib!cmessage_v.CSingleMessage.) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((x! lib!cmessage_v.CSingleMessage.) (y! lib!cmessage_v.CSingleMessage.)) (! (= (req%lib!single_delivery_model_v.same_view_same_marshalable. x! y!) (=> %%global_location_label%%50 (= (lib!cmessage_v.impl&%2.view.? (Poly%lib!cmessage_v.CSingleMessage. x!)) (lib!cmessage_v.impl&%2.view.? (Poly%lib!cmessage_v.CSingleMessage. y!))))) :pattern ((req%lib!single_delivery_model_v.same_view_same_marshalable. x! y!)) )))
(declare-fun ens%lib!single_delivery_model_v.same_view_same_marshalable. (lib!cmessage_v.CSingleMessage. lib!cmessage_v.CSingleMessage.) Bool)
(assert (forall ((x! lib!cmessage_v.CSingleMessage.) (y! lib!cmessage_v.CSingleMessage.)) (! (= (ens%lib!single_delivery_model_v.same_view_same_marshalable. x! y!) (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. (Poly%lib!cmessage_v.CSingleMessage. x!)) (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CSingleMessage. (Poly%lib!cmessage_v.CSingleMessage. y!)))) :pattern ((ens%lib!single_delivery_model_v.same_view_same_marshalable. x! y!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_model_v::same_view_same_marshalable")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:31:1: 31:80 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::un_acked_messages_extend")
(declare-fun req%lib!single_delivery_state_v.impl&%3.un_acked_messages_extend. (lib!single_delivery_state_v.CSingleDelivery. lib!abstract_end_point_t.AbstractEndPoint. lib!abstract_end_point_t.AbstractEndPoint. Int) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (src! lib!abstract_end_point_t.AbstractEndPoint.) (dst! lib!abstract_end_point_t.AbstractEndPoint.) (i! Int)) (! (= (req%lib!single_delivery_state_v.impl&%3.un_acked_messages_extend. self! src! dst! i!) (and (=> %%global_location_label%%51 (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!))) (=> %%global_location_label%%52 (< i! (vstd!seq.Seq.len.? $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!))))))) (=> %%global_location_label%%53 (lib!single_delivery_state_v.impl&%2.valid.? (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))))))) :pattern ((req%lib!single_delivery_state_v.impl&%3.un_acked_messages_extend. self! src! dst! i!)) )))
(declare-fun ens%lib!single_delivery_state_v.impl&%3.un_acked_messages_extend. (lib!single_delivery_state_v.CSingleDelivery. lib!abstract_end_point_t.AbstractEndPoint. lib!abstract_end_point_t.AbstractEndPoint. Int) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (src! lib!abstract_end_point_t.AbstractEndPoint.) (dst! lib!abstract_end_point_t.AbstractEndPoint.) (i! Int)) (! (= (ens%lib!single_delivery_state_v.impl&%3.un_acked_messages_extend. self! src! dst! i!) (= (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. src!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!) (I (nClip (Add i! 1)))) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!network_t.Packet. (Poly%vstd!set.Set<lib!network_t.Packet.>. (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest_up_to.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. src!) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!) (I i!))) (Poly%lib!network_t.Packet. (lib!network_t.Packet./Packet (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!)) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. src!)) (%Poly%lib!single_message_t.SingleMessage. (vstd!seq.Seq.index.? $ (TYPE%lib!single_message_t.SingleMessage. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.AckState./AckState/un_acked (%Poly%lib!single_delivery_t.AckState. (vstd!map.impl&%0.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (lib!single_delivery_t.SingleDelivery./SingleDelivery/send_state (%Poly%lib!single_delivery_t.SingleDelivery. (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. dst!)))) (I i!))))))))) :pattern ((ens%lib!single_delivery_state_v.impl&%3.un_acked_messages_extend. self! src! dst! i!)) )))
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::retransmit_un_acked_packets_for_dst")
(declare-fun req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. (lib!single_delivery_state_v.CSingleDelivery. lib!io_t.EndPoint. lib!io_t.EndPoint. alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.) Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (src! lib!io_t.EndPoint.) (dst! lib!io_t.EndPoint.) (pre%packets! alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)) (! (= (req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. self! src! dst! pre%packets!) (and (=> %%global_location_label%%54 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (=> %%global_location_label%%55 (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))) (=> %%global_location_label%%56 (lib!net_sht_v.outbound_packet_seq_is_valid.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. pre%packets!)))) (=> %%global_location_label%%57 (lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. pre%packets!)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))) (=> %%global_location_label%%58 (vstd!set.impl&%0.contains.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%lib!single_delivery_t.AckState. $ TYPE%lib!message_t.Message.) (Poly%vstd!map.Map<lib!abstract_end_point_t.AbstractEndPoint./lib!single_delivery_t.AckState<lib!message_t.Message.>.>. (lib!single_delivery_state_v.impl&%2.view.? (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))))))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst!))))) (=> %%global_location_label%%59 (lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. pre%packets!)))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. self! src! dst! pre%packets!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. (lib!single_delivery_state_v.CSingleDelivery. lib!io_t.EndPoint. lib!io_t.EndPoint. alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (src! lib!io_t.EndPoint.) (dst! lib!io_t.EndPoint.) (pre%packets! alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.) (packets! alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)) (! (= (ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. self! src! dst! pre%packets! packets!) (and (= (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CPacket. $ TYPE%lib!network_t.Packet. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!)) (Poly%fun%1. (mk_fun %%lambda%%8)))) (vstd!set.impl&%0.union.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CPacket. $ TYPE%lib!network_t.Packet. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. pre%packets!)) (Poly%fun%1. (mk_fun %%lambda%%8)))) (Poly%vstd!set.Set<lib!network_t.Packet.>. (lib!single_delivery_t.impl&%2.un_acked_messages_for_dest.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst!))))))) (lib!net_sht_v.outbound_packet_seq_is_valid.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!))) (lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!)))) (lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!))))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. self! src! dst! pre%packets! packets!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::retransmit_un_acked_packets_for_dst")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:129:17: 173:18 (#0)")
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::retransmit_un_acked_packets_for_dst")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:103:5: 103:114 (#0)")
(set-info :comment ";; Function-Specs lib::single_delivery_state_v::CSingleDelivery::retransmit_un_acked_packets")
(declare-fun req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets. (lib!single_delivery_state_v.CSingleDelivery. lib!io_t.EndPoint.) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (src! lib!io_t.EndPoint.)) (! (= (req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets. self! src!) (and (=> %%global_location_label%%60 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (=> %%global_location_label%%61 (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))))) :pattern ((req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets. self! src!)) )))
(declare-fun ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets. (lib!single_delivery_state_v.CSingleDelivery. lib!io_t.EndPoint. alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.) Bool)
(assert (forall ((self! lib!single_delivery_state_v.CSingleDelivery.) (src! lib!io_t.EndPoint.) (packets! alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)) (! (= (ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets. self! src! packets!) (and (= (lib!cmessage_v.abstractify_seq_of_cpackets_to_set_of_sht_packets.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!))) (lib!single_delivery_t.impl&%2.un_acked_messages.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))) (lib!net_sht_v.outbound_packet_seq_is_valid.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!))) (lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!)))) (= (lib!single_delivery_t.impl&%2.un_acked_messages.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!)))) (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CPacket. $ TYPE%lib!network_t.Packet. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!)) (Poly%fun%1. (mk_fun %%lambda%%8)))))) (lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets!))))) :pattern ((ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets. self! src! packets!)) )))
(set-info :comment ";; Function-Def lib::single_delivery_state_v::CSingleDelivery::retransmit_un_acked_packets")
(set-info :comment ";; ironsht/src/single_delivery_model_v.rs:554:9: 602:10 (#0)")
(declare-const packets! alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)
(declare-const self! lib!single_delivery_state_v.CSingleDelivery.)
(declare-const src! lib!io_t.EndPoint.)
(declare-const tmp%1 Poly)
(declare-const tmp%2 lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>.)
(declare-const tmp%3 Bool)
(declare-const idx@ Poly)
(declare-const tmp%4 Bool)
(declare-const elem@ Poly)
(declare-const tmp%5 Bool)
(declare-const elem$1@ Poly)
(declare-const tmp%6 Bool)
(declare-const tmp%7 lib!single_delivery_t.SingleDelivery.)
(declare-const tmp%8 lib!abstract_end_point_t.AbstractEndPoint.)
(declare-const tmp%9 vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-const s1@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s2@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s1$1@ vstd!set.Set<lib!network_t.Packet.>.)
(declare-const s2$1@ vstd!set.Set<lib!network_t.Packet.>.)
(declare-const s1$2@ vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-const s2$2@ vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-const tmp%10 Int)
(declare-const verus_tmp_packets0_view@ vstd!seq.Seq<lib!cmessage_v.CPacket.>.)
(declare-const tmp%11 Poly)
(declare-const tmp%12 Bool)
(declare-const verus_tmp_dst_i0@ Int)
(declare-const tmp%13 Bool)
(declare-const idx$1@ Poly)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const idx$2@ Poly)
(declare-const tmp%16 Bool)
(declare-const depa@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const depb@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const depc@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s1$3@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s2$3@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s1$4@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s2$4@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const verus_tmp@0 vstd!seq.Seq<lib!cmessage_v.CPacket.>.)
(declare-const packets0_view@0 vstd!seq.Seq<lib!cmessage_v.CPacket.>.)
(declare-const dst@ lib!io_t.EndPoint.)
(declare-const verus_tmp$1@0 Int)
(declare-const dst_i0@0 Int)
(declare-const tmp%17 Bool)
(declare-const idx$3@ Poly)
(declare-const tmp%18 Bool)
(declare-const elem$2@ Poly)
(declare-const tmp%19 Bool)
(declare-const s1$5@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s2$5@ vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-const s1$6@ vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-const s2$6@ vstd!set.Set<lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-const packets@0 alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)
(declare-const dests@ alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)
(declare-const dst_i@0 Int)
(assert fuel_defaults)
(assert (has_type tmp%1 (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL)))
(assert (uInv SZ dst_i@0))
(assert (has_type (Poly%lib!single_delivery_t.SingleDelivery. tmp%7) (TYPE%lib!single_delivery_t.SingleDelivery. $ TYPE%lib!message_t.Message.)))
(assert (uInv SZ tmp%10))
(declare-const verus_tmp@1 vstd!seq.Seq<lib!cmessage_v.CPacket.>.)
(declare-const packets0_view@1 vstd!seq.Seq<lib!cmessage_v.CPacket.>.)
(declare-const packets@1 alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>.)
(declare-const verus_tmp$1@1 Int)
(declare-const dst_i0@1 Int)
(declare-const dst_i@1 Int)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%19 Bool)
(assert (not (=> (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)) (=> (= (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (Poly%fun%1. (mk_fun %%lambda%%2)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState. (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. (Poly%lib!single_delivery_state_v.CSingleDelivery. self!)))))))))) (=> (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!)))) (=> (and (<= 0 dst_i@0) (<= dst_i@0 (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)))) (=> (lib!net_sht_v.outbound_packet_seq_is_valid.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@0))) (=> (lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@0)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!)))) (=> (= (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CPacket. $ TYPE%lib!network_t.Packet. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@0)) (Poly%fun%1. (mk_fun %%lambda%%8))))) (lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq.Seq.subrange.? $ TYPE%lib!io_t.EndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (I 0) (I dst_i@0)) (Poly%fun%1. (mk_fun %%lambda%%2)))))) (=> (lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@0))) (=> (ens%alloc!vec.impl&%1.len. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@) tmp%10) (=> (< dst_i@0 tmp%10) (=> (= verus_tmp@1 (%Poly%vstd!seq.Seq<lib!cmessage_v.CPacket.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@0)))) (=> (= verus_tmp_packets0_view@ verus_tmp@1) (=> (= packets0_view@1 verus_tmp_packets0_view@) (and (=> %%location_label%%0 (req%vstd!std_specs.vec.vec_index. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@) dst_i@0)) (=> (ens%vstd!std_specs.vec.vec_index. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@) dst_i@0 tmp%11) (=> (= dst@ (%Poly%lib!io_t.EndPoint. tmp%11)) (=> (= tmp%12 (= (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq.Seq.index.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (Poly%fun%1. (mk_fun %%lambda%%2))) (I dst_i@0))) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. dst@)))) (and (=> %%location_label%%1 tmp%12) (=> tmp%12 (and (=> %%location_label%%2 (req%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. self! src! dst@ packets@0)) (=> (ens%lib!single_delivery_model_v.impl&%2.retransmit_un_acked_packets_for_dst. self! src! dst@ packets@0 packets@1) (=> (= verus_tmp$1@1 dst_i@0) (=> (= verus_tmp_dst_i0@ verus_tmp$1@1) (=> (= dst_i0@1 verus_tmp_dst_i0@) (and (=> %%location_label%%3 (uInv SZ (Add dst_i@0 1))) (=> (= dst_i@1 (uClip SZ (Add dst_i@0 1))) (=> (= depa@ (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!io_t.EndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (I 0) (I dst_i0@1)))) (=> (= depb@ (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!io_t.EndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (I dst_i0@1) (I dst_i@1)))) (=> (= depc@ (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!io_t.EndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (I 0) (I dst_i@1)))) (=> (= s1$3@ depc@) (=> (= s2$3@ (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq.add.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. depa@) (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. depb@)))) (and (=> (= tmp%13 (= (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@)) (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$3@)))) (and (=> %%location_label%%4 tmp%13) (=> tmp%13 (and (=> (has_type idx$1@ INT) (=> (and (<= 0 (%I idx$1@)) (< (%I idx$1@) (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@)))) (=> %%location_label%%5 (= (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@) idx$1@) (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$3@) idx$1@))))) (=> (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@)))) (= (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@) idx$) (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$3@) idx$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@) idx$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$3@) idx$)) )) (=> (= tmp%14 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.) (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$3@) (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$3@))) (and (=> %%location_label%%6 tmp%14) (=> tmp%14 (=> %%location_label%%7 (= s1$3@ s2$3@)))))))))) (=> (= s1$3@ s2$3@) (=> (= s1$4@ depb@) (=> (= s2$4@ (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq.push.? $ TYPE%lib!io_t.EndPoint. (vstd!seq.Seq.empty.? $ TYPE%lib!io_t.EndPoint.) (Poly%lib!io_t.EndPoint. dst@)))) (and (=> (= tmp%15 (= (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@)) (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$4@)))) (and (=> %%location_label%%8 tmp%15) (=> tmp%15 (and (=> (has_type idx$2@ INT) (=> (and (<= 0 (%I idx$2@)) (< (%I idx$2@) (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@)))) (=> %%location_label%%9 (= (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@) idx$2@) (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$4@) idx$2@))))) (=> (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@)))) (= (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@) idx$) (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$4@) idx$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@) idx$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$4@) idx$)) )) (=> (= tmp%16 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.) (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s1$4@) (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. s2$4@))) (and (=> %%location_label%%10 tmp%16) (=> tmp%16 (=> %%location_label%%11 (= s1$4@ s2$4@)))))))))) (=> (= s1$4@ s2$4@) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_singleton_auto. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_singleton_auto. $ TYPE%lib!io_t.EndPoint.) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_map_values_singleton_auto. $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_map_set_singleton_auto. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_map_seq_singleton_auto. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_flatten_sets_union_auto. $ TYPE%lib!network_t.Packet.) (=> (ens%lib!verus_extra.set_lib_ext_v.lemma_to_set_union_auto. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (=> (ens%lib!verus_extra.set_lib_ext_v.seq_map_values_concat_auto. $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (=> (ens%lib!verus_extra.set_lib_ext_v.map_set_finite_auto. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) (=> (ens%lib!verus_extra.set_lib_ext_v.set_map_union_auto. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%vstd!set.Set. $ TYPE%lib!network_t.Packet.)) (=> (ens%lib!verus_extra.set_lib_ext_v.flatten_sets_singleton_auto. $ TYPE%lib!network_t.Packet.) (and (=> %%location_label%%12 (lib!single_delivery_state_v.impl&%3.valid.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (and (=> %%location_label%%13 (= (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (Poly%fun%1. (mk_fun %%lambda%%2)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ TYPE%lib!single_delivery_state_v.CAckState. (lib!endpoint_hashmap_t.impl&%0.view.? $ TYPE%lib!single_delivery_state_v.CAckState. (Poly%lib!endpoint_hashmap_t.HashMap<lib!single_delivery_state_v.CAckState.>. (lib!single_delivery_state_v.CSendState./CSendState/epmap (%Poly%lib!single_delivery_state_v.CSendState. (Poly%lib!single_delivery_state_v.CSendState. (lib!single_delivery_state_v.CSingleDelivery./CSingleDelivery/send_state (%Poly%lib!single_delivery_state_v.CSingleDelivery. (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))))))))))) (and (=> %%location_label%%14 (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))) (and (=> %%location_label%%15 (and (<= 0 dst_i@1) (<= dst_i@1 (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@))))) (and (=> %%location_label%%16 (lib!net_sht_v.outbound_packet_seq_is_valid.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@1)))) (and (=> %%location_label%%17 (lib!net_sht_v.outbound_packet_seq_has_correct_srcs.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@1)) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))))) (and (=> %%location_label%%18 (= (%Poly%vstd!set.Set<lib!network_t.Packet.>. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!network_t.Packet. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!cmessage_v.CPacket. $ TYPE%lib!network_t.Packet. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@1)) (Poly%fun%1. (mk_fun %%lambda%%8))))) (lib!single_delivery_t.impl&%2.un_acked_messages_for_dests.? (Poly%lib!single_delivery_t.SingleDelivery. (lib!single_delivery_state_v.impl&%3.view.? (Poly%lib!single_delivery_state_v.CSingleDelivery. self!))) (Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. src!))) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%lib!io_t.EndPoint. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (vstd!seq.Seq.subrange.? $ TYPE%lib!io_t.EndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. dests@)) (I 0) (I dst_i@1)) (Poly%fun%1. (mk_fun %%lambda%%2))))))) (=> %%location_label%%19 (lib!single_delivery_model_v.impl&%2.packets_are_valid_messages.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!cmessage_v.CPacket. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!cmessage_v.CPacket./allocator_global%.>. packets@1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
