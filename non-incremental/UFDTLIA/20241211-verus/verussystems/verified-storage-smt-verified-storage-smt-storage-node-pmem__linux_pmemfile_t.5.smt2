(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module pmem::linux_pmemfile_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.control_flow.spec_from_blanket_identity. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!string.axiom_str_literal_len. FuelId)
(declare-const fuel%vstd!string.axiom_str_literal_get_char. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.maybe_corrupted. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.spec_index. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.write. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%59.spec_size_of. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.control_flow.spec_from_blanket_identity. fuel%vstd!std_specs.option.is_none. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!string.axiom_str_literal_len. fuel%vstd!string.axiom_str_literal_get_char. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%42.view. fuel%lib!pmem.pmemspec_t.maybe_corrupted. fuel%lib!pmem.pmemspec_t.impl&%5.write. fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. fuel%lib!pmem.pmemspec_t.impl&%5.flush. fuel%lib!pmem.pmemspec_t.impl&%6.len. fuel%lib!pmem.pmemspec_t.impl&%6.write. fuel%lib!pmem.pmemspec_t.impl&%6.flush. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.committed. fuel%lib!pmem.pmemspec_t.impl&%7.len. fuel%lib!pmem.pmemspec_t.impl&%7.spec_index. fuel%lib!pmem.pmemspec_t.impl&%7.write. fuel%lib!pmem.pmemspec_t.impl&%7.flush. fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range. fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%59.spec_size_of. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!string.group_string_axioms.) (and (fuel_bool_default fuel%vstd!string.axiom_str_literal_len.) (fuel_bool_default fuel%vstd!string.axiom_str_literal_get_char.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.spec_from_blanket_identity.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. 0)
(declare-sort core!convert.Infallible. 0)
(declare-sort lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<int.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<char.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. 0)
(declare-sort slice%<u8.>. 0)
(declare-sort slice%<u64.>. 0)
(declare-sort strslice%. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!ops.control_flow.ControlFlow. 0) (core!option.Option. 0) (core!result.Result. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!pmem.linux_pmemfile_t.FileOpenBehavior. 0) (lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. 0) (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. 0) (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. 0) (lib!pmem.pmemspec_t.PmemError. 0) (lib!pmem.pmemspec_t.PersistentMemoryByte. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionView. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView. 0) (lib!pmem.pmemspec_t.PersistentMemoryConstants. 0) (tuple%0. 0) (tuple%2. 0)) (((core!ops.control_flow.ControlFlow./Continue (core!ops.control_flow.ControlFlow./Continue/?0 Poly)) (core!ops.control_flow.ControlFlow./Break (core!ops.control_flow.ControlFlow./Break/?0 Poly))) ((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!pmem.linux_pmemfile_t.FileOpenBehavior./CreateNew ) (lib!pmem.linux_pmemfile_t.FileOpenBehavior./OpenExisting )) ((lib!pmem.linux_pmemfile_t.PersistentMemoryCheck./CheckForPersistentMemory ) (lib!pmem.linux_pmemfile_t.PersistentMemoryCheck./DontCheckForPersistentMemory )) ((lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./FileBackedPersistentMemoryRegion (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./FileBackedPersistentMemoryRegion/?section lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.))) ((lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions./FileBackedPersistentMemoryRegions (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions./FileBackedPersistentMemoryRegions/?regions alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>.))) ((lib!pmem.pmemspec_t.PmemError./InvalidFileName ) (lib!pmem.pmemspec_t.PmemError./CannotOpenPmFile ) (lib!pmem.pmemspec_t.PmemError./NotPm ) (lib!pmem.pmemspec_t.PmemError./PmdkError ) (lib!pmem.pmemspec_t.PmemError./AccessOutOfRange )) ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush Int) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/?regions vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption Bool))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!ops.control_flow.ControlFlow./Continue/0 (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun core!ops.control_flow.ControlFlow./Break/0 (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./FileBackedPersistentMemoryRegion/section (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.) lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.)
(declare-fun lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions./FileBackedPersistentMemoryRegions/regions (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.) alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (lib!pmem.pmemspec_t.PersistentMemoryByte.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (lib!pmem.pmemspec_t.PersistentMemoryByte.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Bool)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!ops.control_flow.ControlFlow. (Dcr Type Dcr Type) Type)
(declare-const TYPE%core!convert.Infallible. Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. Type)
(declare-const TYPE%lib!pmem.linux_pmemfile_t.FileOpenBehavior. Type)
(declare-const TYPE%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. Type)
(declare-const TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. Type)
(declare-const TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PmemError. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants. Type)
(declare-fun TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. (alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. (Poly) alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>.)
(declare-fun Poly%core!convert.Infallible. (core!convert.Infallible.) Poly)
(declare-fun %Poly%core!convert.Infallible. (Poly) core!convert.Infallible.)
(declare-fun Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. (lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.) Poly)
(declare-fun %Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. (Poly) lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq<int.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<int.>. (Poly) vstd!seq.Seq<int.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<char.>. (vstd!seq.Seq<char.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<char.>. (Poly) vstd!seq.Seq<char.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)
(declare-fun Poly%slice%<u8.>. (slice%<u8.>.) Poly)
(declare-fun %Poly%slice%<u8.>. (Poly) slice%<u8.>.)
(declare-fun Poly%slice%<u64.>. (slice%<u64.>.) Poly)
(declare-fun %Poly%slice%<u64.>. (Poly) slice%<u64.>.)
(declare-fun Poly%strslice%. (strslice%.) Poly)
(declare-fun %Poly%strslice%. (Poly) strslice%.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun %Poly%core!ops.control_flow.ControlFlow. (Poly) core!ops.control_flow.ControlFlow.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. (lib!pmem.linux_pmemfile_t.FileOpenBehavior.) Poly)
(declare-fun %Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. (Poly) lib!pmem.linux_pmemfile_t.FileOpenBehavior.)
(declare-fun Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. (lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) Poly)
(declare-fun %Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. (Poly) lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.)
(declare-fun Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.) Poly)
(declare-fun %Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly) lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.)
(declare-fun Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.) Poly)
(declare-fun %Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly) lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.)
(declare-fun Poly%lib!pmem.pmemspec_t.PmemError. (lib!pmem.pmemspec_t.PmemError.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PmemError. (Poly) lib!pmem.pmemspec_t.PmemError.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryConstants.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly) lib!pmem.pmemspec_t.PersistentMemoryConstants.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. (Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x core!convert.Infallible.)) (! (= x (%Poly%core!convert.Infallible. (Poly%core!convert.Infallible. x))) :pattern ((Poly%core!convert.Infallible. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%core!convert.Infallible.) (= x (Poly%core!convert.Infallible. (%Poly%core!convert.Infallible. x)))) :pattern ((has_type x TYPE%core!convert.Infallible.)) )))
(assert (forall ((x core!convert.Infallible.)) (! (has_type (Poly%core!convert.Infallible. x) TYPE%core!convert.Infallible.) :pattern ((has_type (Poly%core!convert.Infallible. x) TYPE%core!convert.Infallible.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.)) (! (= x (%Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. (Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. x))) :pattern ((Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.) (= x (Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. (%Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. x)))) :pattern ((has_type x TYPE%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.)) (! (has_type (Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. x) TYPE%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.) :pattern ((has_type (Poly%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection. x) TYPE%lib!pmem.linux_pmemfile_t.MemoryMappedFileSection.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (= x (%Poly%vstd!seq.Seq<int.>. (Poly%vstd!seq.Seq<int.>. x))) :pattern ((Poly%vstd!seq.Seq<int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ INT)) (= x (Poly%vstd!seq.Seq<int.>. (%Poly%vstd!seq.Seq<int.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ INT))) )))
(assert (forall ((x vstd!seq.Seq<int.>.)) (! (has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT)) :pattern ((has_type (Poly%vstd!seq.Seq<int.>. x) (TYPE%vstd!seq.Seq. $ INT))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))) )))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))) )))
(assert (forall ((x vstd!seq.Seq<char.>.)) (! (= x (%Poly%vstd!seq.Seq<char.>. (Poly%vstd!seq.Seq<char.>. x))) :pattern ((Poly%vstd!seq.Seq<char.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ CHAR)) (= x (Poly%vstd!seq.Seq<char.>. (%Poly%vstd!seq.Seq<char.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ CHAR))) )))
(assert (forall ((x vstd!seq.Seq<char.>.)) (! (has_type (Poly%vstd!seq.Seq<char.>. x) (TYPE%vstd!seq.Seq. $ CHAR)) :pattern ((has_type (Poly%vstd!seq.Seq<char.>. x) (TYPE%vstd!seq.Seq. $ CHAR))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.))) )))
(assert (forall ((x slice%<u8.>.)) (! (= x (%Poly%slice%<u8.>. (Poly%slice%<u8.>. x))) :pattern ((Poly%slice%<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ (UINT 8))) (= x (Poly%slice%<u8.>. (%Poly%slice%<u8.>. x)))) :pattern ((has_type x (SLICE $ (UINT 8)))) )))
(assert (forall ((x slice%<u8.>.)) (! (has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8))) :pattern ((has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8)))) )))
(assert (forall ((x slice%<u64.>.)) (! (= x (%Poly%slice%<u64.>. (Poly%slice%<u64.>. x))) :pattern ((Poly%slice%<u64.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ (UINT 64))) (= x (Poly%slice%<u64.>. (%Poly%slice%<u64.>. x)))) :pattern ((has_type x (SLICE $ (UINT 64)))) )))
(assert (forall ((x slice%<u64.>.)) (! (has_type (Poly%slice%<u64.>. x) (SLICE $ (UINT 64))) :pattern ((has_type (Poly%slice%<u64.>. x) (SLICE $ (UINT 64)))) )))
(assert (forall ((x strslice%.)) (! (= x (%Poly%strslice%. (Poly%strslice%. x))) :pattern ((Poly%strslice%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (Poly%strslice%. (%Poly%strslice%. x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x strslice%.)) (! (has_type (Poly%strslice%. x) STRSLICE) :pattern ((has_type (Poly%strslice%. x) STRSLICE)) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= x (%Poly%core!ops.control_flow.ControlFlow. (Poly%core!ops.control_flow.ControlFlow. x))) :pattern ((Poly%core!ops.control_flow.ControlFlow. x)) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (= x (Poly%core!ops.control_flow.ControlFlow. (%Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (_0! Poly)) (! (=> (has_type _0! C&) (has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Continue _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Continue _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= (core!ops.control_flow.ControlFlow./Continue/0 x) (core!ops.control_flow.ControlFlow./Continue/?0 x)) :pattern ((core!ops.control_flow.ControlFlow./Continue/0 x)) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (has_type (core!ops.control_flow.ControlFlow./Continue/0 (%Poly%core!ops.control_flow.ControlFlow. x)) C&)) :pattern ((core!ops.control_flow.ControlFlow./Continue/0 (%Poly%core!ops.control_flow.ControlFlow. x)) (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (_0! Poly)) (! (=> (has_type _0! B&) (has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Break _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Break _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= (core!ops.control_flow.ControlFlow./Break/0 x) (core!ops.control_flow.ControlFlow./Break/?0 x)) :pattern ((core!ops.control_flow.ControlFlow./Break/0 x)) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (has_type (core!ops.control_flow.ControlFlow./Break/0 (%Poly%core!ops.control_flow.ControlFlow. x)) B&)) :pattern ((core!ops.control_flow.ControlFlow./Break/0 (%Poly%core!ops.control_flow.ControlFlow. x)) (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(define-fun is-core!ops.control_flow.ControlFlow./Continue_ ((c core!ops.control_flow.ControlFlow.)) Bool ((_ is core!ops.control_flow.ControlFlow./Continue) c))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (=> (is-core!ops.control_flow.ControlFlow./Continue_ x) (height_lt (height (core!ops.control_flow.ControlFlow./Continue/0 x)) (height (Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((height (core!ops.control_flow.ControlFlow./Continue/0 x))) )))
(define-fun is-core!ops.control_flow.ControlFlow./Break_ ((c core!ops.control_flow.ControlFlow.)) Bool ((_ is core!ops.control_flow.ControlFlow./Break) c))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (=> (is-core!ops.control_flow.ControlFlow./Break_ x) (height_lt (height (core!ops.control_flow.ControlFlow./Break/0 x)) (height (Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((height (core!ops.control_flow.ControlFlow./Break/0 x))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileOpenBehavior.)) (! (= x (%Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. (Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. x))) :pattern ((Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.linux_pmemfile_t.FileOpenBehavior.) (= x (Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. (%Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. x)))) :pattern ((has_type x TYPE%lib!pmem.linux_pmemfile_t.FileOpenBehavior.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileOpenBehavior.)) (! (has_type (Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. x) TYPE%lib!pmem.linux_pmemfile_t.FileOpenBehavior.) :pattern ((has_type (Poly%lib!pmem.linux_pmemfile_t.FileOpenBehavior. x) TYPE%lib!pmem.linux_pmemfile_t.FileOpenBehavior.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.)) (! (= x (%Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. (Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. x))) :pattern ((Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) (= x (Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. (%Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. x)))) :pattern ((has_type x TYPE%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.)) (! (has_type (Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. x) TYPE%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) :pattern ((has_type (Poly%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. x) TYPE%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.)) (! (= x (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. x))) :pattern ((Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.) (= x (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. x)))) :pattern ((has_type x TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.)) (! (= (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./FileBackedPersistentMemoryRegion/section x) (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./FileBackedPersistentMemoryRegion/?section x)) :pattern ((lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion./FileBackedPersistentMemoryRegion/section x)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.)) (! (has_type (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. x) TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.) :pattern ((has_type (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. x) TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.)) (! (= x (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. x))) :pattern ((Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.) (= x (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. x)))) :pattern ((has_type x TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.)) (! (= (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions./FileBackedPersistentMemoryRegions/regions x) (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions./FileBackedPersistentMemoryRegions/?regions x)) :pattern ((lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions./FileBackedPersistentMemoryRegions/regions x)) )))
(assert (forall ((x lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.)) (! (has_type (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. x) TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.) :pattern ((has_type (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. x) TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PmemError. (Poly%lib!pmem.pmemspec_t.PmemError. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PmemError. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PmemError.) (= x (Poly%lib!pmem.pmemspec_t.PmemError. (%Poly%lib!pmem.pmemspec_t.PmemError. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PmemError.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PmemError.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PmemError. x) TYPE%lib!pmem.pmemspec_t.PmemError.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((_state_at_last_flush! Int) (_outstanding_write! core!option.Option.)) (! (=> (and (uInv 8 _state_at_last_flush!) (has_type (Poly%core!option.Option. _outstanding_write!) (TYPE%core!option.Option. $ (UINT 8)))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (TYPE%core!option.Option. $ (UINT 8)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))) (ext_eq deep (TYPE%core!option.Option. $ (UINT 8)) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions x) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/?regions x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions x)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x) (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/?impervious_to_corruption x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption x)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryConstants.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun str%strslice_is_ascii (strslice%.) Bool)
(declare-fun str%strslice_len (strslice%.) Int)
(declare-fun str%strslice_get_char (strslice%. Int) Int)
(declare-fun str%new_strlit (Int) strslice%.)
(declare-fun str%from_strlit (strslice%.) Int)
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!convert.From. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%core!convert.From. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (= (proj%%vstd!view.View./V $ STRSLICE) $))
(assert (= (proj%vstd!view.View./V $ STRSLICE) (TYPE%vstd!seq.Seq. $ CHAR)))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ CHAR) $))
(assert (= (proj%vstd!view.View./V $ CHAR) CHAR))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::view")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::inv")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.inv%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::constants")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.constants%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::len")
(declare-fun lib!pmem.pmemspec_t.impl&%7.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::len")
(declare-fun lib!pmem.pmemspec_t.impl&%6.len.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::spec_index")
(declare-fun lib!pmem.pmemspec_t.impl&%7.spec_index.? (Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::SpecPmSized::spec_size_of")
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes_in_range")
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes_in_range")
(declare-fun lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_to_bytes")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::spec_from_bytes")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::PmCopyHelper::bytes_parseable")
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(declare-fun lib!pmem.pmemspec_t.impl&%6.committed.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::pmem::pmcopy_t::MaybeCorruptedBytes::view")
(declare-fun lib!pmem.pmcopy_t.impl&%2.view.? (Dcr Type Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::maybe_corrupted_byte")
(declare-fun lib!pmem.pmemspec_t.maybe_corrupted_byte.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::maybe_corrupted")
(declare-fun lib!pmem.pmemspec_t.maybe_corrupted.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::write")
(declare-fun lib!pmem.pmemspec_t.impl&%5.write.? (Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::write")
(declare-fun lib!pmem.pmemspec_t.impl&%6.write.? (Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::write")
(declare-fun lib!pmem.pmemspec_t.impl&%7.write.? (Poly Poly Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::flush_byte")
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryByte::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%6.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::flush")
(declare-fun lib!pmem.pmemspec_t.impl&%7.flush.? (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(set-info :comment ";; Function-Decl vstd::std_specs::control_flow::spec_from")
(declare-fun vstd!std_specs.control_flow.spec_from.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegion::view")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegion::inv")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.inv%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegion::constants")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegion.constants%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes")
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes")
(declare-fun lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!) BOOL)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::constants")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::len")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (<= 0 (lib!pmem.pmemspec_t.impl&%7.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%7.len.? self!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::get_num_regions")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_num_regions. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_num_regions. Self%&. Self%& self!) (=> %%global_location_label%%0 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_num_regions. Self%&. Self%& self!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_num_regions. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (result! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_num_regions. Self%&. Self%& self! result!) (and (has_type result! (UINT SZ)) (= (%I result!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_num_regions. Self%&. Self%& self! result!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::len")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (<= 0 (lib!pmem.pmemspec_t.impl&%6.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::spec_index")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.spec_index.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i!) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) i!))) :pattern ((lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::get_region_size")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_region_size. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (index! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_region_size. Self%&. Self%& self! index!) (and (=> %%global_location_label%%3 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%4 (< (%I index!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_region_size. Self%&. Self%& self! index!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_region_size. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (index! Poly) (result! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_region_size. Self%&. Self%& self! index! result!) (and (has_type result! (UINT 64)) (= (%I result!) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index!)))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.get_region_size. Self%&. Self%& self! index! result!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::SpecPmSized::spec_size_of")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::pmem::traits_t::PmSized::size_of")
(declare-fun ens%lib!pmem.traits_t.PmSized.size_of. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (out! Poly)) (! (= (ens%lib!pmem.traits_t.PmSized.size_of. Self%&. Self%& out!) (and (has_type out! (UINT SZ)) (= out! (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&)))) :pattern ((ens%lib!pmem.traits_t.PmSized.size_of. Self%&. Self%& out!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes_in_range")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.) (forall ((self! Poly) (i! Poly) (j! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))) ))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes_in_range")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.) (forall ((self! Poly) (index! Poly) (start! Poly) (end! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? self! index! start! end!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! index!)) start! end!)) :pattern ((lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? self! index! start! end!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_to_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::spec_from_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!) Self%&)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::PmCopyHelper::bytes_parseable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!) BOOL)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%0::T::bytes_parseable")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.) (forall ((T&. Dcr) (T& Type) (bytes! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!) (B (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? T&. T& bytes!)) bytes!)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%5 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.committed.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%1 _addr$ b$) (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. b$)))) :pattern ((%%apply%%1 %%lambda%%1 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.committed.? self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ (UINT 8) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.committed.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::maybe_corrupted")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.maybe_corrupted.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.maybe_corrupted.) (forall ((bytes! Poly) (true_bytes! Poly) (addrs! Poly)) (! (= (lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!) (and (let ((tmp%%$ (vstd!seq.Seq.len.? $ (UINT 8) true_bytes!))) (and (= (vstd!seq.Seq.len.? $ (UINT 8) bytes!) tmp%%$) (= tmp%%$ (vstd!seq.Seq.len.? $ INT addrs!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (UINT 8) bytes!))) (lib!pmem.pmemspec_t.maybe_corrupted_byte.? (vstd!seq.Seq.index.? $ (UINT 8) bytes! i$) (vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$) (vstd!seq.Seq.index.? $ INT addrs! i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) true_bytes! i$)) :pattern ((vstd!seq.Seq.index.? $ INT addrs! i$)) )))) :pattern ((lib!pmem.pmemspec_t.maybe_corrupted.? bytes! true_bytes! addrs!)) ))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::read_aligned")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_aligned. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (self! Poly) (index! Poly) (addr! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_aligned. Self%&. Self%& S&. S& self! index! addr!) (and (=> %%global_location_label%%6 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%7 (< (%I index!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)))) (=> %%global_location_label%%8 (let ((tmp%%$ (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) (and (and (<= 0 (%I addr!)) (< (%I addr!) tmp%%$)) (<= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index!))))))) (=> %%global_location_label%%9 (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index! addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))) (=> %%global_location_label%%10 (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? S&. S& (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index!)))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_aligned. Self%&. Self%& S&. S& self! index! addr!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_aligned. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun %%lambda%%2 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0) i$) (I (Add (%I i$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0) i$)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (self! Poly) (index! Poly) (addr! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_aligned. Self%&. Self%& S&. S& self! index! addr! bytes!) (and (has_type bytes! (TYPE%core!result.Result. $ (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. S&. S&) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. bytes!)) (let ((bytes$ (core!result.Result./Ok/0 (%Poly%core!result.Result. bytes!)))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&) (Poly%fun%1. (mk_fun (%%lambda%%2 (%I addr!)))))))) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index!)))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!))) (= (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& bytes$) true_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& bytes$)) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_aligned. Self%&. Self%& S&. S& self! index! addr! bytes!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::read_unaligned")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_unaligned. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (index! Poly) (addr! Poly) (num_bytes! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_unaligned. Self%&. Self%& self! index! addr! num_bytes!) (and (=> %%global_location_label%%11 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%12 (< (%I index!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)))) (=> %%global_location_label%%13 (<= (Add (%I addr!) (%I num_bytes!)) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index!))))) (=> %%global_location_label%%14 (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index! addr! (I (Add (%I addr!) (%I num_bytes!))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_unaligned. Self%&. Self%& self! index! addr! num_bytes!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_unaligned. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (index! Poly) (addr! Poly) (num_bytes! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_unaligned. Self%&. Self%& self! index! addr! num_bytes! bytes!) (and (has_type bytes! (TYPE%core!result.Result. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. bytes!)) (let ((bytes$ (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. bytes!))))) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) index!)))) addr! (I (Add (%I addr!) (%I num_bytes!))))))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) num_bytes! (Poly%fun%1. (mk_fun (%%lambda%%2 (%I addr!)))))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!))) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. bytes$))) true_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. bytes$)) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.read_unaligned. Self%&. Self%& self! index! addr! num_bytes! bytes!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.write.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.write.) (forall ((self! Poly) (byte! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.write.? self! byte!) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (%I (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some byte!))))) :pattern ((lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)) ))))
(assert (forall ((self! Poly) (byte! Poly)) (! (=> (and (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type byte! (UINT 8))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((lib!pmem.pmemspec_t.impl&%5.write.? self! byte!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.write.))
(declare-fun %%lambda%%3 (Int Int Int Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (pos$ Poly) (pre_byte$ Poly)) (! (= (%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos$ pre_byte$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (ite (and (<= %%hole%%0 (%I pos$)) (< (%I pos$) %%hole%%1)) (lib!pmem.pmemspec_t.impl&%5.write.? pre_byte$ (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 (I (Sub (%I pos$) %%hole%%2)))) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. pre_byte$)))) :pattern ((%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pos$ pre_byte$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.write.) (forall ((self! Poly) (addr! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.write.? self! addr! bytes!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun (%%lambda%%3 (%I addr!) (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) bytes!)) (%I addr!) $ (UINT 8) bytes!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.write.? self! addr! bytes!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::write")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.write.))
(declare-fun %%lambda%%4 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (pos$ Poly) (pre_view$ Poly)) (! (= (%%apply%%1 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2) pos$ pre_view$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (ite (= pos$ %%hole%%0) (lib!pmem.pmemspec_t.impl&%6.write.? pre_view$ %%hole%%1 %%hole%%2) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. pre_view$)))) :pattern ((%%apply%%1 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2) pos$ pre_view$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.write.) (forall ((self! Poly) (index! Poly) (addr! Poly) (bytes! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.write.? self! index! addr! bytes!) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) (Poly%fun%2. (mk_fun (%%lambda%%4 index! addr! bytes!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.write.? self! index! addr! bytes!)) ))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::write")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.write. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (index! Poly) (addr! Poly) (bytes! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.write. Self%&. Self%& pre%self! index! addr! bytes!) (and (=> %%global_location_label%%15 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& pre%self!))) (=> %%global_location_label%%16 (< (%I index!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!)))) (=> %%global_location_label%%17 (<= (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index!))))) (=> %%global_location_label%%18 (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index! addr! (I (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!)))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.write. Self%&. Self%& pre%self! index! addr! bytes!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.write. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly) (index! Poly) (addr! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.write. Self%&. Self%& pre%self! self! index! addr! bytes!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%7.write.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index! addr! (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.write. Self%&. Self%& pre%self! self! index! addr! bytes!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::serialize_and_write")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (index! Poly) (addr! Poly) (to_write! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! index! addr! to_write!) (and (=> %%global_location_label%%19 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& pre%self!))) (=> %%global_location_label%%20 (< (%I index!) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!)))) (=> %%global_location_label%%21 (<= (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))) (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index!))))) (=> %%global_location_label%%22 (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index! addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! index! addr! to_write!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. (Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (self! Poly) (index! Poly) (addr! Poly) (to_write! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! self! index! addr! to_write!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%7.write.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!) index! addr! (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.serialize_and_write. Self%&. Self%& S&. S& pre%self! self! index! addr! to_write!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::flush_byte")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!) (let ((tmp%%$ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (ite (is-core!option.Option./None_ tmp%%$) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)) (let ((b$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) b$)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryByte::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (%I (I (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.flush.? self!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush.? self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.flush.))
(declare-fun %%lambda%%5 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%5 _addr$ b$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.impl&%5.flush.? b$))) :pattern ((%%apply%%1 %%lambda%%5 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%5)))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.flush.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::flush")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.flush.))
(declare-fun %%lambda%%6 () %%Function%%)
(assert (forall ((_pos$ Poly) (pm$ Poly)) (! (= (%%apply%%1 %%lambda%%6 _pos$ pm$) (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? pm$))) :pattern ((%%apply%%1 %%lambda%%6 _pos$ pm$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.flush.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.flush.? self!) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) (Poly%fun%2. (mk_fun %%lambda%%6)))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.flush.? self!)) ))))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegions::flush")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self!) (=> %%global_location_label%%23 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& pre%self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self! self!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegions.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%7.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& pre%self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegions.flush. Self%&. Self%& pre%self! self!)) )))
(set-info :comment ";; Function-Specs core::result::impl&%26::branch")
(declare-fun ens%core!result.impl&%26.branch. (Dcr Type Dcr Type core!result.Result. core!ops.control_flow.ControlFlow.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (cf! core!ops.control_flow.ControlFlow.)) (! (= (ens%core!result.impl&%26.branch. T&. T& E&. E& result! cf!) (and (has_type (Poly%core!ops.control_flow.ControlFlow. cf!) (TYPE%core!ops.control_flow.ControlFlow. $ (TYPE%core!result.Result. $ TYPE%core!convert.Infallible. E&. E&) T&. T&)) (= cf! (ite (is-core!result.Result./Ok_ result!) (let ((v$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (core!ops.control_flow.ControlFlow./Continue v$)) (let ((e$ (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (core!ops.control_flow.ControlFlow./Break (Poly%core!result.Result. (core!result.Result./Err e$)))))))) :pattern ((ens%core!result.impl&%26.branch. T&. T& E&. E& result! cf!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::control_flow::spec_from_blanket_identity")
(assert (=> (fuel_bool fuel%vstd!std_specs.control_flow.spec_from_blanket_identity.) (forall ((T&. Dcr) (T& Type) (t! Poly) (s! Poly)) (! (=> (and (has_type t! T&) (has_type s! T&)) (=> (vstd!std_specs.control_flow.spec_from.? T&. T& T&. T& t! s!) (= t! s!))) :pattern ((vstd!std_specs.control_flow.spec_from.? T&. T& T&. T& t! s!)) ))))
(set-info :comment ";; Function-Specs core::result::impl&%27::from_residual")
(declare-fun ens%core!result.impl&%27.from_residual. (Dcr Type Dcr Type Dcr Type core!result.Result. core!result.Result.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (F&. Dcr) (F& Type) (result! core!result.Result.) (result2! core!result.Result.)) (! (= (ens%core!result.impl&%27.from_residual. T&. T& E&. E& F&. F& result! result2!) (and (has_type (Poly%core!result.Result. result2!) (TYPE%core!result.Result. T&. T& F&. F&)) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!result.Result. result!) (Poly%core!result.Result. result2!)))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((e$ (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((e2$ (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (vstd!std_specs.control_flow.spec_from.? F&. F& E&. E& e$ e2$))))))) :pattern ((ens%core!result.impl&%27.from_residual. T&. T& E&. E& F&. F& result! result2!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_len")
(assert (=> (fuel_bool fuel%vstd!string.axiom_str_literal_len.) (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!seq.Seq.len.? $ CHAR (vstd!view.View.view.? $ STRSLICE s!)) (str%strslice_len (%Poly%strslice%. s!)))) :pattern ((vstd!seq.Seq.len.? $ CHAR (vstd!view.View.view.? $ STRSLICE s!))) ))))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_get_char")
(assert (=> (fuel_bool fuel%vstd!string.axiom_str_literal_get_char.) (forall ((s! Poly) (i! Poly)) (! (=> (and (has_type s! STRSLICE) (has_type i! INT)) (= (%I (vstd!seq.Seq.index.? $ CHAR (vstd!view.View.view.? $ STRSLICE s!) i!)) (str%strslice_get_char (%Poly%strslice%. s!) (%I i!)))) :pattern ((vstd!seq.Seq.index.? $ CHAR (vstd!view.View.view.? $ STRSLICE s!) i!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegion::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegion::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!) BOOL)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegion::constants")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryConstants.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::get_region_size")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self!) (=> %%global_location_label%%24 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (result! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self! result!) (and (has_type result! (UINT 64)) (= (%I result!) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.get_region_size. Self%&. Self%& self! result!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::read_aligned")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (self! Poly) (addr! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr!) (and (=> %%global_location_label%%25 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%26 (let ((tmp%%$ (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) (and (and (<= 0 (%I addr!)) (< (%I addr!) tmp%%$)) (<= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)))))) (=> %%global_location_label%%27 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))) (=> %%global_location_label%%28 (%B (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? S&. S& (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (self! Poly) (addr! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr! bytes!) (and (has_type bytes! (TYPE%core!result.Result. $ (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. S&. S&) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. bytes!)) (let ((bytes$ (core!result.Result./Ok/0 (%Poly%core!result.Result. bytes!)))) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&) (Poly%fun%1. (mk_fun (%%lambda%%2 (%I addr!)))))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!))) (= (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& bytes$) true_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& bytes$)) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_aligned. Self%&. Self%& S&. S& self! addr! bytes!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::read_unaligned")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (addr! Poly) (num_bytes! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes!) (and (=> %%global_location_label%%29 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!))) (=> %%global_location_label%%30 (<= (Add (%I addr!) (%I num_bytes!)) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)))) (=> %%global_location_label%%31 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!) addr! (I (Add (%I addr!) (%I num_bytes!))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (addr! Poly) (num_bytes! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes! bytes!) (and (has_type bytes! (TYPE%core!result.Result. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ (%Poly%core!result.Result. bytes!)) (let ((bytes$ (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. bytes!))))) (let ((true_bytes$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))) addr! (I (Add (%I addr!) (%I num_bytes!))))))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) num_bytes! (Poly%fun%1. (mk_fun (%%lambda%%2 (%I addr!)))))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!))) (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. bytes$))) true_bytes$) (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. bytes$)) (Poly%vstd!seq.Seq<u8.>. true_bytes$) (Poly%vstd!seq.Seq<int.>. addrs$))))))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.read_unaligned. Self%&. Self%& self! addr! num_bytes! bytes!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::write")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.write. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (addr! Poly) (bytes! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.write. Self%&. Self%& pre%self! addr! bytes!) (and (=> %%global_location_label%%32 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& pre%self!))) (=> %%global_location_label%%33 (<= (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!)))) (=> %%global_location_label%%34 (<= (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))) 18446744073709551615)) (=> %%global_location_label%%35 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!) addr! (I (Add (%I addr!) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!)))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.write. Self%&. Self%& pre%self! addr! bytes!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.write. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly) (addr! Poly) (bytes! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.write. Self%&. Self%& pre%self! self! addr! bytes!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%6.write.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!) addr! (vstd!view.View.view.? $ (SLICE $ (UINT 8)) bytes!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.write. Self%&. Self%& pre%self! self! addr! bytes!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::serialize_and_write")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.serialize_and_write. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (addr! Poly) (to_write! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.serialize_and_write. Self%&. Self%& S&. S& pre%self! addr! to_write!) (and (=> %%global_location_label%%36 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& pre%self!))) (=> %%global_location_label%%37 (<= (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))) (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!)))) (=> %%global_location_label%%38 (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.serialize_and_write. Self%&. Self%& S&. S& pre%self! addr! to_write!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.serialize_and_write. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (S&. Dcr) (S& Type) (pre%self! Poly) (self! Poly) (addr! Poly) (to_write! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.serialize_and_write. Self%&. Self%& S&. S& pre%self! self! addr! to_write!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%6.write.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!) addr! (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!))) (= (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%6.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!))))) addr! (I (Add (%I addr!) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&))))) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& to_write!)))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.serialize_and_write. Self%&. Self%& S&. S& pre%self! self! addr! to_write!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::PersistentMemoryRegion::flush")
(declare-fun req%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly)) (! (= (req%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self!) (=> %%global_location_label%%39 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& pre%self!)))) :pattern ((req%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self!)) )))
(declare-fun ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre%self! Poly) (self! Poly)) (! (= (ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self! self!) (and (has_type self! Self%&) (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? Self%&. Self%& self!)) (= (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& self!) (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? Self%&. Self%& pre%self!)) (= (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& self!)) (lib!pmem.pmemspec_t.impl&%6.flush.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? Self%&. Self%& pre%self!))))) :pattern ((ens%lib!pmem.pmemspec_t.PersistentMemoryRegion.flush. Self%&. Self%& pre%self! self!)) )))
(set-info :comment ";; Function-Specs lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::new_internal")
(declare-fun ens%lib!pmem.linux_pmemfile_t.impl&%7.new_internal. (strslice%. Int lib!pmem.linux_pmemfile_t.FileOpenBehavior. lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. core!result.Result.) Bool)
(assert (forall ((path! strslice%.) (region_size! Int) (open_behavior! lib!pmem.linux_pmemfile_t.FileOpenBehavior.) (persistent_memory_check! lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) (result! core!result.Result.)) (! (= (ens%lib!pmem.linux_pmemfile_t.impl&%7.new_internal. path! region_size! open_behavior! persistent_memory_check! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (=> (is-core!result.Result./Ok_ result!) (let ((region$ (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. region$))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. region$))) region_size!)))))) :pattern ((ens%lib!pmem.linux_pmemfile_t.impl&%7.new_internal. path! region_size! open_behavior! persistent_memory_check! result!)) )))
(set-info :comment ";; Function-Specs lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::get_slice_at_offset")
(declare-fun req%lib!pmem.linux_pmemfile_t.impl&%7.get_slice_at_offset. (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. Int Int) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((self! lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.) (addr! Int) (len! Int)) (! (= (req%lib!pmem.linux_pmemfile_t.impl&%7.get_slice_at_offset. self! addr! len!) (=> %%global_location_label%%40 (let ((tmp%%$ (Add addr! len!))) (and (and (<= 0 addr!) (<= addr! tmp%%$)) (<= tmp%%$ (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. self!)))))))) :pattern ((req%lib!pmem.linux_pmemfile_t.impl&%7.get_slice_at_offset. self! addr! len!)) )))
(declare-fun ens%lib!pmem.linux_pmemfile_t.impl&%7.get_slice_at_offset. (lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. Int Int core!result.Result.) Bool)
(declare-fun %%lambda%%7 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0) i$) (I (Add %%hole%%0 (%I i$)))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0) i$)))))
(assert (forall ((self! lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.) (addr! Int) (len! Int) (result! core!result.Result.)) (! (= (ens%lib!pmem.linux_pmemfile_t.impl&%7.get_slice_at_offset. self! addr! len! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. (REF $) (SLICE $ (UINT 8)) $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (and (is-core!result.Result./Ok_ result!) (let ((slice$ (%Poly%slice%<u8.>. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (ite (lib!pmem.pmemspec_t.PersistentMemoryConstants./PersistentMemoryConstants/impervious_to_corruption (%Poly%lib!pmem.pmemspec_t.PersistentMemoryConstants. (lib!pmem.pmemspec_t.PersistentMemoryRegion.constants.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. self!)))) (= (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. slice$)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. self!)))) (I addr!) (I (Add addr! len!)))) (let ((addrs$ (%Poly%vstd!seq.Seq<int.>. (vstd!seq.Seq.new.? $ INT $ (TYPE%fun%1. $ INT $ INT) (I len!) (Poly%fun%1. (mk_fun (%%lambda%%7 addr!))))))) (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. slice$)) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. self!)))) (I addr!) (I (Add addr! len!))) (Poly%vstd!seq.Seq<int.>. addrs$)))))))) :pattern ((ens%lib!pmem.linux_pmemfile_t.impl&%7.get_slice_at_offset. self! addr! len! result!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::no_outstanding_writes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! (I 0) (I (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::no_outstanding_writes")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!pmem.pmemspec_t.impl&%7.len.? self!))) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i$))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i$)) ))) :pattern ((lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? self!)) ))))
(set-info :comment ";; Function-Specs lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegions::new_internal")
(declare-fun ens%lib!pmem.linux_pmemfile_t.impl&%9.new_internal. (strslice%. slice%<u64.>. lib!pmem.linux_pmemfile_t.FileOpenBehavior. lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. core!result.Result.) Bool)
(assert (forall ((path! strslice%.) (region_sizes! slice%<u64.>.) (open_behavior! lib!pmem.linux_pmemfile_t.FileOpenBehavior.) (persistent_memory_check! lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) (result! core!result.Result.)) (! (= (ens%lib!pmem.linux_pmemfile_t.impl&%9.new_internal. path! region_sizes! open_behavior! persistent_memory_check! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (=> (is-core!result.Result./Ok_ result!) (let ((regions$ (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (and (and (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))) (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)))) (= (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))) (vstd!seq.Seq.len.? $ (UINT 64) (vstd!view.View.view.? $ (SLICE $ (UINT 64)) (Poly%slice%<u64.>. region_sizes!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)) i$))) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (SLICE $ (UINT 64)) (Poly%slice%<u64.>. region_sizes!)) i$))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)) i$)))) ))))))) :pattern ((ens%lib!pmem.linux_pmemfile_t.impl&%9.new_internal. path! region_sizes! open_behavior! persistent_memory_check! result!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmemspec_t::copy_from_slice")
(declare-fun ens%lib!pmem.pmemspec_t.copy_from_slice. (slice%<u8.>. alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((bytes! slice%<u8.>.) (out! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%lib!pmem.pmemspec_t.copy_from_slice. bytes! out!) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. out!)) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)))) :pattern ((ens%lib!pmem.pmemspec_t.copy_from_slice. bytes! out!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%19::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ (UINT 64)))
(set-info :comment ";; Function-Specs lib::pmem::pmcopy_t::MaybeCorruptedBytes::new")
(declare-fun ens%lib!pmem.pmcopy_t.impl&%2.new. (Dcr Type Poly) Bool)
(assert (forall ((S&. Dcr) (S& Type) (%return! Poly)) (! (= (ens%lib!pmem.pmcopy_t.impl&%2.new. S&. S& %return!) (has_type %return! (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. S&. S&))) :pattern ((ens%lib!pmem.pmcopy_t.impl&%2.new. S&. S& %return!)) )))
(set-info :comment ";; Function-Specs lib::pmem::pmcopy_t::MaybeCorruptedBytes::copy_from_slice")
(declare-fun req%lib!pmem.pmcopy_t.impl&%2.copy_from_slice. (Dcr Type Poly slice%<u8.>. Poly vstd!seq.Seq<int.>. Bool) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((S&. Dcr) (S& Type) (pre%self! Poly) (bytes! slice%<u8.>.) (true_val! Poly) (addrs! vstd!seq.Seq<int.>.) (impervious_to_corruption! Bool)) (! (= (req%lib!pmem.pmcopy_t.impl&%2.copy_from_slice. S&. S& pre%self! bytes! true_val! addrs! impervious_to_corruption!) (and (=> %%global_location_label%%41 (ite impervious_to_corruption! (= (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& true_val!)) (lib!pmem.pmemspec_t.maybe_corrupted.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)) (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? S&. S& true_val!) (Poly%vstd!seq.Seq<int.>. addrs!)))) (=> %%global_location_label%%42 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!))) (%I (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? S&. S&)))))) :pattern ((req%lib!pmem.pmcopy_t.impl&%2.copy_from_slice. S&. S& pre%self! bytes! true_val! addrs! impervious_to_corruption!)) )))
(declare-fun ens%lib!pmem.pmcopy_t.impl&%2.copy_from_slice. (Dcr Type Poly Poly slice%<u8.>. Poly vstd!seq.Seq<int.>. Bool) Bool)
(assert (forall ((S&. Dcr) (S& Type) (pre%self! Poly) (self! Poly) (bytes! slice%<u8.>.) (true_val! Poly) (addrs! vstd!seq.Seq<int.>.) (impervious_to_corruption! Bool)) (! (= (ens%lib!pmem.pmcopy_t.impl&%2.copy_from_slice. S&. S& pre%self! self! bytes! true_val! addrs! impervious_to_corruption!) (and (has_type self! (TYPE%lib!pmem.pmcopy_t.MaybeCorruptedBytes. S&. S&)) (= (lib!pmem.pmcopy_t.impl&%2.view.? S&. S& self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. bytes!)))))) :pattern ((ens%lib!pmem.pmcopy_t.impl&%2.copy_from_slice. S&. S& pre%self! self! bytes! true_val! addrs! impervious_to_corruption!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%38::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ CHAR self!) self!) :pattern ((vstd!view.View.view.? $ CHAR self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%7::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%27::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%55::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms lib::pmem::pmcopy_t::impl&%59::spec_size_of")
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%59.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%59.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ CHAR) (I 4))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ STRSLICE))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. T&. T& T&. T&) :pattern ((tr_bound%core!convert.From. T&. T& T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 8) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ CHAR $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%core!option.Option. (REF T&.) T&) (REF $) (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%core!convert.From. $ (TYPE%core!option.Option. (REF T&.) T&) (REF $) (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%core!convert.From. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT SZ) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT SZ) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (SLICE T&. T&))) :pattern ((tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (REF $) STRSLICE))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!clone.Clone. B&. B&) (tr_bound%core!clone.Clone. C&. C&)) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) )))
(set-info :comment ";; Function-Def lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::read_aligned")
(set-info :comment ";; src/pmem/linux_pmemfile_t.rs:252:5: 254:22 (#0)")
(set-info :comment ";; Function-Def lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::read_unaligned")
(set-info :comment ";; src/pmem/linux_pmemfile_t.rs:268:5: 268:94 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegion. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!pmem.linux_pmemfile_t.FileOpenBehavior.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!pmem.pmemspec_t.PmemError.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ CHAR))
(set-info :comment ";; Function-Specs lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::new")
(declare-fun ens%lib!pmem.linux_pmemfile_t.impl&%7.new. (strslice%. Int lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. core!result.Result.) Bool)
(assert (forall ((path! strslice%.) (region_size! Int) (persistent_memory_check! lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) (result! core!result.Result.)) (! (= (ens%lib!pmem.linux_pmemfile_t.impl&%7.new. path! region_size! persistent_memory_check! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (=> (is-core!result.Result./Ok_ result!) (let ((region$ (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. region$))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. region$))) region_size!)))))) :pattern ((ens%lib!pmem.linux_pmemfile_t.impl&%7.new. path! region_size! persistent_memory_check! result!)) )))
(set-info :comment ";; Function-Def lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::new")
(set-info :comment ";; src/pmem/linux_pmemfile_t.rs:173:5: 174:51 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::restore")
(declare-fun ens%lib!pmem.linux_pmemfile_t.impl&%7.restore. (strslice%. Int core!result.Result.) Bool)
(assert (forall ((path! strslice%.) (region_size! Int) (result! core!result.Result.)) (! (= (ens%lib!pmem.linux_pmemfile_t.impl&%7.restore. path! region_size! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (=> (is-core!result.Result./Ok_ result!) (let ((region$ (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (%B (lib!pmem.pmemspec_t.PersistentMemoryRegion.inv.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. region$))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegion.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegion. region$))) region_size!)))))) :pattern ((ens%lib!pmem.linux_pmemfile_t.impl&%7.restore. path! region_size! result!)) )))
(set-info :comment ";; Function-Def lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegion::restore")
(set-info :comment ";; src/pmem/linux_pmemfile_t.rs:184:5: 184:85 (#0)")
(set-info :comment ";; Function-Specs lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegions::new")
(declare-fun ens%lib!pmem.linux_pmemfile_t.impl&%9.new. (strslice%. slice%<u64.>. lib!pmem.linux_pmemfile_t.PersistentMemoryCheck. core!result.Result.) Bool)
(assert (forall ((path! strslice%.) (region_sizes! slice%<u64.>.) (persistent_memory_check! lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.) (result! core!result.Result.)) (! (= (ens%lib!pmem.linux_pmemfile_t.impl&%9.new. path! region_sizes! persistent_memory_check! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. $ TYPE%lib!pmem.pmemspec_t.PmemError.)) (=> (is-core!result.Result./Ok_ result!) (let ((regions$ (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (and (and (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))) (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)))) (= (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))) (vstd!seq.Seq.len.? $ (UINT 64) (vstd!view.View.view.? $ (SLICE $ (UINT 64)) (Poly%slice%<u64.>. region_sizes!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)) i$))) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (SLICE $ (UINT 64)) (Poly%slice%<u64.>. region_sizes!)) i$))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)) i$)))) ))))))) :pattern ((ens%lib!pmem.linux_pmemfile_t.impl&%9.new. path! region_sizes! persistent_memory_check! result!)) )))
(set-info :comment ";; Function-Def lib::pmem::linux_pmemfile_t::FileBackedPersistentMemoryRegions::new")
(set-info :comment ";; src/pmem/linux_pmemfile_t.rs:406:5: 407:51 (#0)")
(declare-const result! core!result.Result.)
(declare-const path! strslice%.)
(declare-const region_sizes! slice%<u64.>.)
(declare-const persistent_memory_check! lib!pmem.linux_pmemfile_t.PersistentMemoryCheck.)
(declare-const tmp%1 core!result.Result.)
(declare-const tmp%2 lib!pmem.linux_pmemfile_t.FileOpenBehavior.)
(assert fuel_defaults)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= tmp%2 lib!pmem.linux_pmemfile_t.FileOpenBehavior./CreateNew) (=> (ens%lib!pmem.linux_pmemfile_t.impl&%9.new_internal. path! region_sizes! tmp%2 persistent_memory_check! tmp%1) (=> (= result! tmp%1) (=> %%location_label%%0 (=> (is-core!result.Result./Ok_ result!) (let ((regions$ (%Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (and (and (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))) (lib!pmem.pmemspec_t.impl&%7.no_outstanding_writes.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)))) (= (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))) (vstd!seq.Seq.len.? $ (UINT 64) (vstd!view.View.view.? $ (SLICE $ (UINT 64)) (Poly%slice%<u64.>. region_sizes!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!pmem.pmemspec_t.impl&%7.len.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$))))) (= (lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)) i$))) (%I (vstd!seq.Seq.index.? $ (UINT 64) (vstd!view.View.view.? $ (SLICE $ (UINT 64)) (Poly%slice%<u64.>. region_sizes!)) i$))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? $ TYPE%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. (Poly%lib!pmem.linux_pmemfile_t.FileBackedPersistentMemoryRegions. regions$)) i$)))) )))))))))))
(check-sat)
(exit)
