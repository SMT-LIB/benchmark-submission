(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::rwlock::RwLockSpec'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.insert. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.remove. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.choose. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.dom. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_by. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_strong. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.init_by. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.init. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.invariant. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%11.filter_r. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!multiset.impl&%0.insert. fuel%vstd!multiset.impl&%0.remove. fuel%vstd!multiset.impl&%0.subset_of. fuel%vstd!multiset.impl&%0.choose. fuel%vstd!multiset.impl&%0.dom. fuel%vstd!set.impl&%0.choose. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params. fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1. fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2. fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1. fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2. fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize. fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1. fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2. fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params. fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_by. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_strong. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.init_by. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.init. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.invariant. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<int./int.>. 0)
(declare-sort vstd!multiset.Multiset<int.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort vstd!state_machine_internal.NoCopy. 0)
(declare-datatypes ((core!option.Option. 0) (lib!spec.rwlock.RwLockSpec.State. 0) (lib!spec.rwlock.RwLockSpec.Step. 0) (lib!spec.rwlock.RwLockSpec.Config. 0) (lib!spec.rwlock.RwLockSpec.Instance. 0) (lib!spec.rwlock.RwLockSpec.exc_locked. 0) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data. 0) (lib!spec.rwlock.RwLockSpec.ref_counts. 0) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data. 0) (lib!spec.rwlock.RwLockSpec.exc_pending. 0) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data. 0) (lib!spec.rwlock.RwLockSpec.exc_guard. 0) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data. 0) (lib!spec.rwlock.RwLockSpec.shared_pending. 0) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data. 0) (lib!spec.rwlock.RwLockSpec.shared_guard. 0) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%7. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!spec.rwlock.RwLockSpec.State./State (lib!spec.rwlock.RwLockSpec.State./State/?user_inv Poly) (lib!spec.rwlock.RwLockSpec.State./State/?rc_width Int) (lib!spec.rwlock.RwLockSpec.State./State/?storage core!option.Option.) (lib!spec.rwlock.RwLockSpec.State./State/?exc_locked Bool) (lib!spec.rwlock.RwLockSpec.State./State/?ref_counts vstd!map.Map<int./int.>.) (lib!spec.rwlock.RwLockSpec.State./State/?exc_pending core!option.Option.) (lib!spec.rwlock.RwLockSpec.State./State/?exc_guard core!option.Option.) (lib!spec.rwlock.RwLockSpec.State./State/?shared_pending vstd!multiset.Multiset<int.>.) (lib!spec.rwlock.RwLockSpec.State./State/?shared_guard Poly))) ((lib!spec.rwlock.RwLockSpec.Step./exc_start ) (lib!spec.rwlock.RwLockSpec.Step./exc_check_count ) (lib!spec.rwlock.RwLockSpec.Step./exc_finish ) (lib!spec.rwlock.RwLockSpec.Step./exc_release (lib!spec.rwlock.RwLockSpec.Step./exc_release/?0 Poly)) (lib!spec.rwlock.RwLockSpec.Step./shared_start (lib!spec.rwlock.RwLockSpec.Step./shared_start/?0 Int)) (lib!spec.rwlock.RwLockSpec.Step./shared_abandon (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/?0 Int)) (lib!spec.rwlock.RwLockSpec.Step./shared_finish (lib!spec.rwlock.RwLockSpec.Step./shared_finish/?0 Int)) (lib!spec.rwlock.RwLockSpec.Step./shared_release (lib!spec.rwlock.RwLockSpec.Step./shared_release/?0 tuple%2.)) (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/?0 lib!spec.rwlock.RwLockSpec.State.))) ((lib!spec.rwlock.RwLockSpec.Config./initialize (lib!spec.rwlock.RwLockSpec.Config./initialize/?0 Int) (lib!spec.rwlock.RwLockSpec.Config./initialize/?1 Poly) (lib!spec.rwlock.RwLockSpec.Config./initialize/?2 Poly)) (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/?0 lib!spec.rwlock.RwLockSpec.State.))) ((lib!spec.rwlock.RwLockSpec.Instance./Instance (lib!spec.rwlock.RwLockSpec.Instance./Instance/?send_sync Poly) (lib!spec.rwlock.RwLockSpec.Instance./Instance/?state lib!spec.rwlock.RwLockSpec.State.) (lib!spec.rwlock.RwLockSpec.Instance./Instance/?location Int))) ((lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/?dummy_instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?value Bool))) ((lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/?dummy_instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?key Int) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?value Int))) ((lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/?dummy_instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?value Int))) ((lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/?dummy_instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?value tuple%0.))) ((lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/?dummy_instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?key Int) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?count Int))) ((lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/?dummy_instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?instance lib!spec.rwlock.RwLockSpec.Instance.) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?key tuple%2.) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?count Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%7./tuple%7 (tuple%7./tuple%7/?0 Poly) (tuple%7./tuple%7/?1 Poly) (tuple%7./tuple%7/?2 Poly) (tuple%7./tuple%7/?3 Poly) (tuple%7./tuple%7/?4 Poly) (tuple%7./tuple%7/?5 Poly) (tuple%7./tuple%7/?6 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/user_inv (lib!spec.rwlock.RwLockSpec.State.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/rc_width (lib!spec.rwlock.RwLockSpec.State.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/storage (lib!spec.rwlock.RwLockSpec.State.) core!option.Option.)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/exc_locked (lib!spec.rwlock.RwLockSpec.State.) Bool)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/ref_counts (lib!spec.rwlock.RwLockSpec.State.) vstd!map.Map<int./int.>.)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/exc_pending (lib!spec.rwlock.RwLockSpec.State.) core!option.Option.)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/exc_guard (lib!spec.rwlock.RwLockSpec.State.) core!option.Option.)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/shared_pending (lib!spec.rwlock.RwLockSpec.State.) vstd!multiset.Multiset<int.>.)
(declare-fun lib!spec.rwlock.RwLockSpec.State./State/shared_guard (lib!spec.rwlock.RwLockSpec.State.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (lib!spec.rwlock.RwLockSpec.Step.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.Step./shared_start/0 (lib!spec.rwlock.RwLockSpec.Step.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 (lib!spec.rwlock.RwLockSpec.Step.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 (lib!spec.rwlock.RwLockSpec.Step.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (lib!spec.rwlock.RwLockSpec.Step.) tuple%2.)
(declare-fun lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 (lib!spec.rwlock.RwLockSpec.Step.) lib!spec.rwlock.RwLockSpec.State.)
(declare-fun lib!spec.rwlock.RwLockSpec.Config./initialize/0 (lib!spec.rwlock.RwLockSpec.Config.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.Config./initialize/1 (lib!spec.rwlock.RwLockSpec.Config.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.Config./initialize/2 (lib!spec.rwlock.RwLockSpec.Config.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 (lib!spec.rwlock.RwLockSpec.Config.) lib!spec.rwlock.RwLockSpec.State.)
(declare-fun lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync (lib!spec.rwlock.RwLockSpec.Instance.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.Instance./Instance/state (lib!spec.rwlock.RwLockSpec.Instance.) lib!spec.rwlock.RwLockSpec.State.)
(declare-fun lib!spec.rwlock.RwLockSpec.Instance./Instance/location (lib!spec.rwlock.RwLockSpec.Instance.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance (lib!spec.rwlock.RwLockSpec.exc_locked.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/no_copy (lib!spec.rwlock.RwLockSpec.exc_locked.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (lib!spec.rwlock.RwLockSpec.exc_locked_token_data.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (lib!spec.rwlock.RwLockSpec.exc_locked_token_data.) Bool)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance (lib!spec.rwlock.RwLockSpec.ref_counts.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/no_copy (lib!spec.rwlock.RwLockSpec.ref_counts.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance (lib!spec.rwlock.RwLockSpec.exc_pending.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/no_copy (lib!spec.rwlock.RwLockSpec.exc_pending.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (lib!spec.rwlock.RwLockSpec.exc_pending_token_data.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (lib!spec.rwlock.RwLockSpec.exc_pending_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance (lib!spec.rwlock.RwLockSpec.exc_guard.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/no_copy (lib!spec.rwlock.RwLockSpec.exc_guard.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (lib!spec.rwlock.RwLockSpec.exc_guard_token_data.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value (lib!spec.rwlock.RwLockSpec.exc_guard_token_data.) tuple%0.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance (lib!spec.rwlock.RwLockSpec.shared_pending.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/no_copy (lib!spec.rwlock.RwLockSpec.shared_pending.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance (lib!spec.rwlock.RwLockSpec.shared_guard.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/no_copy (lib!spec.rwlock.RwLockSpec.shared_guard.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) tuple%2.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%7./tuple%7/0 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/1 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/2 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/3 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/4 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/5 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/6 (tuple%7.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!multiset.Multiset. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. (Dcr Type) Type)
(declare-const TYPE%vstd!state_machine_internal.NoCopy. Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.Step. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.Config. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%7. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<int./int.>. (vstd!map.Map<int./int.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./int.>. (Poly) vstd!map.Map<int./int.>.)
(declare-fun Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.Multiset<int.>.) Poly)
(declare-fun %Poly%vstd!multiset.Multiset<int.>. (Poly) vstd!multiset.Multiset<int.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%vstd!state_machine_internal.NoCopy. (vstd!state_machine_internal.NoCopy.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.NoCopy. (Poly) vstd!state_machine_internal.NoCopy.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.State.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.State. (Poly) lib!spec.rwlock.RwLockSpec.State.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.Step. (Poly) lib!spec.rwlock.RwLockSpec.Step.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.Config. (lib!spec.rwlock.RwLockSpec.Config.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.Config. (Poly) lib!spec.rwlock.RwLockSpec.Config.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.Instance.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.Instance. (Poly) lib!spec.rwlock.RwLockSpec.Instance.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (lib!spec.rwlock.RwLockSpec.exc_locked.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (Poly) lib!spec.rwlock.RwLockSpec.exc_locked.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly) lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.ref_counts. (lib!spec.rwlock.RwLockSpec.ref_counts.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.ref_counts. (Poly) lib!spec.rwlock.RwLockSpec.ref_counts.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly) lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_pending. (lib!spec.rwlock.RwLockSpec.exc_pending.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_pending. (Poly) lib!spec.rwlock.RwLockSpec.exc_pending.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly) lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_guard. (lib!spec.rwlock.RwLockSpec.exc_guard.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_guard. (Poly) lib!spec.rwlock.RwLockSpec.exc_guard.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly) lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (lib!spec.rwlock.RwLockSpec.shared_pending.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (Poly) lib!spec.rwlock.RwLockSpec.shared_pending.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly) lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (lib!spec.rwlock.RwLockSpec.shared_guard.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (Poly) lib!spec.rwlock.RwLockSpec.shared_guard.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly) lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%7. (tuple%7.) Poly)
(declare-fun %Poly%tuple%7. (Poly) tuple%7.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (= x (%Poly%vstd!map.Map<int./int.>. (Poly%vstd!map.Map<int./int.>. x))) :pattern ((Poly%vstd!map.Map<int./int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ INT)) (= x (Poly%vstd!map.Map<int./int.>. (%Poly%vstd!map.Map<int./int.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ INT))) )))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT)) :pattern ((has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT))) )))
(assert (forall ((x vstd!multiset.Multiset<int.>.)) (! (= x (%Poly%vstd!multiset.Multiset<int.>. (Poly%vstd!multiset.Multiset<int.>. x))) :pattern ((Poly%vstd!multiset.Multiset<int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!multiset.Multiset. $ INT)) (= x (Poly%vstd!multiset.Multiset<int.>. (%Poly%vstd!multiset.Multiset<int.>. x)))) :pattern ((has_type x (TYPE%vstd!multiset.Multiset. $ INT))) )))
(assert (forall ((x vstd!multiset.Multiset<int.>.)) (! (has_type (Poly%vstd!multiset.Multiset<int.>. x) (TYPE%vstd!multiset.Multiset. $ INT)) :pattern ((has_type (Poly%vstd!multiset.Multiset<int.>. x) (TYPE%vstd!multiset.Multiset. $ INT))) )))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))) )))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (= x (%Poly%vstd!state_machine_internal.NoCopy. (Poly%vstd!state_machine_internal.NoCopy. x))) :pattern ((Poly%vstd!state_machine_internal.NoCopy. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!state_machine_internal.NoCopy.) (= x (Poly%vstd!state_machine_internal.NoCopy. (%Poly%vstd!state_machine_internal.NoCopy. x)))) :pattern ((has_type x TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.) :pattern ((has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.State. (Poly%lib!spec.rwlock.RwLockSpec.State. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.State. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.State. (%Poly%lib!spec.rwlock.RwLockSpec.State. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_user_inv! Poly) (_rc_width! Int) (_storage! core!option.Option.) (_exc_locked! Bool) (_ref_counts! vstd!map.Map<int./int.>.) (_exc_pending! core!option.Option.) (_exc_guard! core!option.Option.) (_shared_pending! vstd!multiset.Multiset<int.>.) (_shared_guard! Poly)) (! (=> (and (has_type _user_inv! (TYPE%vstd!set.Set. T&. T&)) (has_type (Poly%core!option.Option. _storage!) (TYPE%core!option.Option. T&. T&)) (has_type (Poly%core!option.Option. _exc_pending!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _exc_guard!) (TYPE%core!option.Option. $ TYPE%tuple%0.)) (has_type _shared_guard! (TYPE%vstd!multiset.Multiset. $ (TYPE%tuple%2. $ INT T&. T&)))) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.State./State _user_inv! _rc_width! _storage! _exc_locked! _ref_counts! _exc_pending! _exc_guard! _shared_pending! _shared_guard!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.State./State _user_inv! _rc_width! _storage! _exc_locked! _ref_counts! _exc_pending! _exc_guard! _shared_pending! _shared_guard!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv x) (lib!spec.rwlock.RwLockSpec.State./State/?user_inv x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/user_inv x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width x) (lib!spec.rwlock.RwLockSpec.State./State/?rc_width x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/rc_width x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/storage x) (lib!spec.rwlock.RwLockSpec.State./State/?storage x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/storage x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. x))) (TYPE%core!option.Option. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked x) (lib!spec.rwlock.RwLockSpec.State./State/?exc_locked x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/exc_locked x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts x) (lib!spec.rwlock.RwLockSpec.State./State/?ref_counts x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/ref_counts x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending x) (lib!spec.rwlock.RwLockSpec.State./State/?exc_pending x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/exc_pending x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. x))) (TYPE%core!option.Option. $ INT))) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard x) (lib!spec.rwlock.RwLockSpec.State./State/?exc_guard x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/exc_guard x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. x))) (TYPE%core!option.Option. $ TYPE%tuple%0.))) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending x) (lib!spec.rwlock.RwLockSpec.State./State/?shared_pending x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/shared_pending x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard x) (lib!spec.rwlock.RwLockSpec.State./State/?shared_guard x)) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/shared_guard x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (TYPE%vstd!multiset.Multiset. $ (TYPE%tuple%2. $ INT T&. T&)))) :pattern ((lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.State./State_ ((c lib!spec.rwlock.RwLockSpec.State.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.State./State) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.State./State_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.State./State/user_inv x)) (height (Poly%lib!spec.rwlock.RwLockSpec.State. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.State./State/user_inv x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.State./State_ x) (height_lt (height (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage x))) (height (Poly%lib!spec.rwlock.RwLockSpec.State. x)))) :pattern ((height (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.State.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.State./State_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.State./State/shared_guard x)) (height (Poly%lib!spec.rwlock.RwLockSpec.State. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.State./State/shared_guard x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.Step. (Poly%lib!spec.rwlock.RwLockSpec.Step. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.Step. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.Step. (%Poly%lib!spec.rwlock.RwLockSpec.Step. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. lib!spec.rwlock.RwLockSpec.Step./exc_start) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. lib!spec.rwlock.RwLockSpec.Step./exc_start) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. lib!spec.rwlock.RwLockSpec.Step./exc_check_count) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. lib!spec.rwlock.RwLockSpec.Step./exc_check_count) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. lib!spec.rwlock.RwLockSpec.Step./exc_finish) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. lib!spec.rwlock.RwLockSpec.Step./exc_finish) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./exc_release _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./exc_release _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 x) (lib!spec.rwlock.RwLockSpec.Step./exc_release/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./exc_release/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. x)) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Int)) (! (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_start _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_start _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= (lib!spec.rwlock.RwLockSpec.Step./shared_start/0 x) (lib!spec.rwlock.RwLockSpec.Step./shared_start/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./shared_start/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Int)) (! (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_abandon _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_abandon _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 x) (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Int)) (! (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_finish _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_finish _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= (lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 x) (lib!spec.rwlock.RwLockSpec.Step./shared_finish/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! tuple%2.)) (! (=> (has_type (Poly%tuple%2. _0!) (TYPE%tuple%2. $ INT T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_release _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./shared_release _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 x) (lib!spec.rwlock.RwLockSpec.Step./shared_release/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./shared_release/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. x))) (TYPE%tuple%2. $ INT T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!spec.rwlock.RwLockSpec.State.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. _0!) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Step. (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (= (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 x) (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. x))) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./exc_release_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./exc_release) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Step./exc_release_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 x)) (height (Poly%lib!spec.rwlock.RwLockSpec.Step. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 x))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./shared_release_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./shared_release) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Step./shared_release_ x) (height_lt (height (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 x))) (height (Poly%lib!spec.rwlock.RwLockSpec.Step. x)))) :pattern ((height (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 x)))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Step.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.rwlock.RwLockSpec.Step. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.Config. (Poly%lib!spec.rwlock.RwLockSpec.Config. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.Config. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.Config. (%Poly%lib!spec.rwlock.RwLockSpec.Config. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Int) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _1! T&) (has_type _2! (TYPE%vstd!set.Set. T&. T&))) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Config. (lib!spec.rwlock.RwLockSpec.Config./initialize _0! _1! _2!)) (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Config. (lib!spec.rwlock.RwLockSpec.Config./initialize _0! _1! _2!)) (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (= (lib!spec.rwlock.RwLockSpec.Config./initialize/0 x) (lib!spec.rwlock.RwLockSpec.Config./initialize/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Config./initialize/0 x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (= (lib!spec.rwlock.RwLockSpec.Config./initialize/1 x) (lib!spec.rwlock.RwLockSpec.Config./initialize/?1 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Config./initialize/1 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.Config./initialize/1 (%Poly%lib!spec.rwlock.RwLockSpec.Config. x)) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.Config./initialize/1 (%Poly%lib!spec.rwlock.RwLockSpec.Config. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (= (lib!spec.rwlock.RwLockSpec.Config./initialize/2 x) (lib!spec.rwlock.RwLockSpec.Config./initialize/?2 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Config./initialize/2 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.Config./initialize/2 (%Poly%lib!spec.rwlock.RwLockSpec.Config. x)) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.Config./initialize/2 (%Poly%lib!spec.rwlock.RwLockSpec.Config. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!spec.rwlock.RwLockSpec.State.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. _0!) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Config. (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Config. (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (= (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 x) (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. x))) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.Config./initialize_ ((c lib!spec.rwlock.RwLockSpec.Config.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Config./initialize) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Config./initialize_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.Config./initialize/1 x)) (height (Poly%lib!spec.rwlock.RwLockSpec.Config. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.Config./initialize/1 x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Config./initialize_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.Config./initialize/2 x)) (height (Poly%lib!spec.rwlock.RwLockSpec.Config. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.Config./initialize/2 x))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params_ ((c lib!spec.rwlock.RwLockSpec.Config.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Config.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.rwlock.RwLockSpec.Config. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Instance.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.Instance. (Poly%lib!spec.rwlock.RwLockSpec.Instance. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.Instance. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.Instance. (%Poly%lib!spec.rwlock.RwLockSpec.Instance. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_send_sync! Poly) (_state! lib!spec.rwlock.RwLockSpec.State.) (_location! Int)) (! (=> (and (has_type _send_sync! (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. _state!) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.Instance./Instance _send_sync! _state! _location!)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.Instance./Instance _send_sync! _state! _location!)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Instance.)) (! (= (lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync x) (lib!spec.rwlock.RwLockSpec.Instance./Instance/?send_sync x)) :pattern ((lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync (%Poly%lib!spec.rwlock.RwLockSpec.Instance. x)) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync (%Poly%lib!spec.rwlock.RwLockSpec.Instance. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Instance.)) (! (= (lib!spec.rwlock.RwLockSpec.Instance./Instance/state x) (lib!spec.rwlock.RwLockSpec.Instance./Instance/?state x)) :pattern ((lib!spec.rwlock.RwLockSpec.Instance./Instance/state x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Instance./Instance/state (%Poly%lib!spec.rwlock.RwLockSpec.Instance. x))) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.Instance./Instance/state (%Poly%lib!spec.rwlock.RwLockSpec.Instance. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Instance.)) (! (= (lib!spec.rwlock.RwLockSpec.Instance./Instance/location x) (lib!spec.rwlock.RwLockSpec.Instance./Instance/?location x)) :pattern ((lib!spec.rwlock.RwLockSpec.Instance./Instance/location x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.Instance./Instance_ ((c lib!spec.rwlock.RwLockSpec.Instance.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Instance./Instance) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Instance.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Instance./Instance_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync x)) (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.Instance./Instance/send_sync x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.Instance.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.Instance./Instance_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Instance./Instance/state x))) (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.Instance./Instance/state x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_locked. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_dummy_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _dummy_instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance x) (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/?dummy_instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/no_copy x) (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/?no_copy x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/no_copy x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked_ ((c lib!spec.rwlock.RwLockSpec.exc_locked.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_locked./exc_locked/dummy_instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_value! Bool)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value x) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data_ ((c lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.ref_counts. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_dummy_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _dummy_instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance x) (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/?dummy_instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/no_copy x) (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/?no_copy x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/no_copy x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts_ ((c lib!spec.rwlock.RwLockSpec.ref_counts.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.ref_counts./ref_counts/dummy_instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_key! Int) (_value! Int)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data _instance! _key! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data _instance! _key! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key x) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?key x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value x) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data_ ((c lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_pending. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_dummy_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _dummy_instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance x) (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/?dummy_instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/no_copy x) (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/?no_copy x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/no_copy x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending_ ((c lib!spec.rwlock.RwLockSpec.exc_pending.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_pending./exc_pending/dummy_instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_value! Int)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value x) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data_ ((c lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_guard. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_guard. (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_dummy_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _dummy_instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard. (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard. (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance x) (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/?dummy_instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/no_copy x) (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/?no_copy x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/no_copy x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard_ ((c lib!spec.rwlock.RwLockSpec.exc_guard.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_guard. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_guard./exc_guard/dummy_instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_value! tuple%0.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value x) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data_ ((c lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_dummy_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _dummy_instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance x) (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/?dummy_instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/no_copy x) (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/?no_copy x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/no_copy x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending_ ((c lib!spec.rwlock.RwLockSpec.shared_pending.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_pending./shared_pending/dummy_instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_key! Int) (_count! Int)) (! (=> (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (<= 0 _count!)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key x) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?key x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count x) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?count x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&)) (<= 0 (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data_ ((c lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_dummy_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _dummy_instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard _dummy_instance! _no_copy!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance x) (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/?dummy_instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/no_copy x) (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/?no_copy x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/no_copy x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard_ ((c lib!spec.rwlock.RwLockSpec.shared_guard.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_guard./shared_guard/dummy_instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! lib!spec.rwlock.RwLockSpec.Instance.) (_key! tuple%2.) (_count! Int)) (! (=> (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. _instance!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%tuple%2. _key!) (TYPE%tuple%2. $ INT T&. T&)) (<= 0 _count!)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x))) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?key x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (has_type (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x))) (TYPE%tuple%2. $ INT T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count x) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?count x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (<= 0 (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data_ ((c lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data_ x) (height_lt (height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x))) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((height (Poly%lib!spec.rwlock.RwLockSpec.Instance. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data_ x) (height_lt (height (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x))) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((height (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x)))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x tuple%7.)) (! (= x (%Poly%tuple%7. (Poly%tuple%7. x))) :pattern ((Poly%tuple%7. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (= x (Poly%tuple%7. (%Poly%tuple%7. x)))) :pattern ((has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly) (_6! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&) (has_type _6! T%6&)) (has_type (Poly%tuple%7. (tuple%7./tuple%7 _0! _1! _2! _3! _4! _5! _6!)) (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) :pattern ((has_type (Poly%tuple%7. (tuple%7./tuple%7 _0! _1! _2! _3! _4! _5! _6!)) (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/0 x) (tuple%7./tuple%7/?0 x)) :pattern ((tuple%7./tuple%7/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/0 (%Poly%tuple%7. x)) T%0&)) :pattern ((tuple%7./tuple%7/0 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/1 x) (tuple%7./tuple%7/?1 x)) :pattern ((tuple%7./tuple%7/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/1 (%Poly%tuple%7. x)) T%1&)) :pattern ((tuple%7./tuple%7/1 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/2 x) (tuple%7./tuple%7/?2 x)) :pattern ((tuple%7./tuple%7/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/2 (%Poly%tuple%7. x)) T%2&)) :pattern ((tuple%7./tuple%7/2 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/3 x) (tuple%7./tuple%7/?3 x)) :pattern ((tuple%7./tuple%7/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/3 (%Poly%tuple%7. x)) T%3&)) :pattern ((tuple%7./tuple%7/3 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/4 x) (tuple%7./tuple%7/?4 x)) :pattern ((tuple%7./tuple%7/4 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/4 (%Poly%tuple%7. x)) T%4&)) :pattern ((tuple%7./tuple%7/4 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/5 x) (tuple%7./tuple%7/?5 x)) :pattern ((tuple%7./tuple%7/5 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/5 (%Poly%tuple%7. x)) T%5&)) :pattern ((tuple%7./tuple%7/5 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/6 x) (tuple%7./tuple%7/?6 x)) :pattern ((tuple%7./tuple%7/6 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/6 (%Poly%tuple%7. x)) T%6&)) :pattern ((tuple%7./tuple%7/6 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(define-fun is-tuple%7./tuple%7_ ((c tuple%7.)) Bool ((_ is tuple%7./tuple%7) c))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/0 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/0 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/1 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/1 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/2 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/2 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/3 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/3 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/4 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/4 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/5 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/5 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/6 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/6 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type y (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (ext_eq deep T%0& (tuple%7./tuple%7/0 (%Poly%tuple%7. x)) (tuple%7./tuple%7/0 (%Poly%tuple%7. y))) (ext_eq deep T%1& (tuple%7./tuple%7/1 (%Poly%tuple%7. x)) (tuple%7./tuple%7/1 (%Poly%tuple%7. y))) (ext_eq deep T%2& (tuple%7./tuple%7/2 (%Poly%tuple%7. x)) (tuple%7./tuple%7/2 (%Poly%tuple%7. y))) (ext_eq deep T%3& (tuple%7./tuple%7/3 (%Poly%tuple%7. x)) (tuple%7./tuple%7/3 (%Poly%tuple%7. y))) (ext_eq deep T%4& (tuple%7./tuple%7/4 (%Poly%tuple%7. x)) (tuple%7./tuple%7/4 (%Poly%tuple%7. y))) (ext_eq deep T%5& (tuple%7./tuple%7/5 (%Poly%tuple%7. x)) (tuple%7./tuple%7/5 (%Poly%tuple%7. y))) (ext_eq deep T%6& (tuple%7./tuple%7/6 (%Poly%tuple%7. x)) (tuple%7./tuple%7/6 (%Poly%tuple%7. y)))) (ext_eq deep (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&) x y)) :pattern ((ext_eq deep (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::count")
(declare-fun vstd!multiset.impl&%0.count.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::len")
(declare-fun vstd!multiset.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::empty")
(declare-fun vstd!multiset.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::from_map")
(declare-fun vstd!multiset.impl&%0.from_map.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::singleton")
(declare-fun vstd!multiset.impl&%0.singleton.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::add")
(declare-fun vstd!multiset.impl&%0.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::sub")
(declare-fun vstd!multiset.impl&%0.sub.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::insert")
(declare-fun vstd!multiset.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::remove")
(declare-fun vstd!multiset.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::subset_of")
(declare-fun vstd!multiset.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::filter")
(declare-fun vstd!multiset.impl&%0.filter.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::choose")
(declare-fun vstd!multiset.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::dom")
(declare-fun vstd!multiset.impl&%0.dom.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.State.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_exc_release_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_shared_start_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_shared_abandon_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_shared_finish_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_shared_release_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.? (Dcr Type Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.State.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_exc_start")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_exc_check_count")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_exc_finish")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_exc_release")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::get_exc_release_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_shared_start")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::get_shared_start_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_shared_abandon")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::get_shared_abandon_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_shared_finish")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::get_shared_finish_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_shared_release")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::get_shared_release_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.? (Dcr Type Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::is_dummy_to_use_type_params")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.State.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::arrow_1")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::arrow_2")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::arrow_initialize_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::arrow_initialize_1")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::arrow_initialize_2")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.State.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::is_initialize")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::get_initialize_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::get_initialize_1")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::get_initialize_2")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::is_dummy_to_use_type_params")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.State.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_locked::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%4.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::ref_counts::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%5.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::ref_counts::map_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::ref_counts::map_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_pending::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%6.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_pending::option_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_pending::option_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_guard::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%7.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_guard::option_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_guard::option_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_pending::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%8.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_pending::multiset_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_pending::multiset_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_guard::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%9.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_guard::multiset_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_guard::multiset_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Instance::user_inv")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Instance::rc_width")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%10.rc_width.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::initialize")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.initialize.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::initialize_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_start")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_start.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_start_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_start_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_check_count")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_check_count_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_check_count_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_finish")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_finish_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_finish_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_release")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_release.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_release_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_release_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_start")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_start.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_start_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_start_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_abandon")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_abandon_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_abandon_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_finish")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_finish_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_finish_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_release")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_release.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_release_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_release_enabled")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::next_by")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.next_by.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::next")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.next.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::next_strong_by")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::next_strong")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.next_strong.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::init_by")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.init_by.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::init")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::invariant")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::sto_user_inv")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::ref_counts_domain")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::exc_inv")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_pending_in_range")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_guard_in_range")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_inv_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::shared_counts_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::State::filter_r")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%0 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%2 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%6 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%8 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::count")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type value! V&)) (<= 0 (vstd!multiset.impl&%0.count.? V&. V& self! value!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! value!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::len")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (<= 0 (vstd!multiset.impl&%0.len.? V&. V& self!))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::empty")
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (vstd!multiset.impl&%0.empty.? V&. V&) (TYPE%vstd!multiset.Multiset. V&. V&)) :pattern ((vstd!multiset.impl&%0.empty.? V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::from_map")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!map.Map. V&. V& $ NAT)) (has_type (vstd!multiset.impl&%0.from_map.? V&. V& m!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.from_map.? V&. V& m!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (has_type (vstd!multiset.impl&%0.singleton.? V&. V& v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::add")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.add.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.add.? V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::sub")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.sub.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.sub.? V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::filter")
(assert (forall ((V&. Dcr) (V& Type) (impl%1&. Dcr) (impl%1& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type f! impl%1&)) (has_type (vstd!multiset.impl&%0.filter.? V&. V& impl%1&. impl%1& self! f!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.filter.? V&. V& impl%1&. impl%1& self! f!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_empty")
(declare-fun ens%vstd!multiset.axiom_multiset_empty. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_empty. V&. V& v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((ens%vstd!multiset.axiom_multiset_empty. V&. V& v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_empty")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_contained")
(declare-fun req%vstd!multiset.axiom_multiset_contained. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (req%vstd!multiset.axiom_multiset_contained. V&. V& m! v!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!))) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!)))) :pattern ((req%vstd!multiset.axiom_multiset_contained. V&. V& m! v!)) )))
(declare-fun ens%vstd!multiset.axiom_multiset_contained. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_contained. V&. V& m! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) (%I (vstd!map.impl&%0.index.? V&. V& $ NAT m! v!)))) :pattern ((ens%vstd!multiset.axiom_multiset_contained. V&. V& m! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_contained")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. V&. V& $ NAT)) (has_type v! V&)) (=> (and (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!)) (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) (%I (vstd!map.impl&%0.index.? V&. V& $ NAT m! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_new_not_contained")
(declare-fun req%vstd!multiset.axiom_multiset_new_not_contained. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (req%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!))) (=> %%global_location_label%%12 (not (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!))))) :pattern ((req%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!)) )))
(declare-fun ens%vstd!multiset.axiom_multiset_new_not_contained. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) 0)) :pattern ((ens%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_new_not_contained")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. V&. V& $ NAT)) (has_type v! V&)) (=> (and (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!)) (not (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!))) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) 0))) :pattern ((vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_singleton")
(declare-fun ens%vstd!multiset.axiom_multiset_singleton. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_singleton. V&. V& v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((ens%vstd!multiset.axiom_multiset_singleton. V&. V& v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_singleton_different")
(declare-fun ens%vstd!multiset.axiom_multiset_singleton_different. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_singleton_different. V&. V& v! w!) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((ens%vstd!multiset.axiom_multiset_singleton_different. V&. V& v! w!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton_different")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (=> (and (has_type v! V&) (has_type w! V&)) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_add")
(declare-fun ens%vstd!multiset.axiom_multiset_add. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_add. V&. V& m1! m2! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((ens%vstd!multiset.axiom_multiset_add. V&. V& m1! m2! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_add")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_sub")
(declare-fun ens%vstd!multiset.axiom_multiset_sub. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_sub. V&. V& m1! m2! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!) (ite (>= (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) (Sub (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) 0))) :pattern ((ens%vstd!multiset.axiom_multiset_sub. V&. V& m1! m2! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_sub")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!) (ite (>= (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) (Sub (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_ext_equal")
(declare-fun ens%vstd!multiset.axiom_multiset_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_ext_equal. V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ens%vstd!multiset.axiom_multiset_ext_equal. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_ext_equal_deep")
(declare-fun ens%vstd!multiset.axiom_multiset_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_ext_equal_deep. V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ens%vstd!multiset.axiom_multiset_ext_equal_deep. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal_deep")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_empty")
(declare-fun ens%vstd!multiset.axiom_len_empty. (Dcr Type) Bool)
(assert (forall ((V&. Dcr) (V& Type)) (! (= (ens%vstd!multiset.axiom_len_empty. V&. V&) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&)) 0)) :pattern ((ens%vstd!multiset.axiom_len_empty. V&. V&)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_empty")
(assert (forall ((V&. Dcr) (V& Type)) (! (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&)) 0) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&))) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_singleton")
(declare-fun ens%vstd!multiset.axiom_len_singleton. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (= (ens%vstd!multiset.axiom_len_singleton. V&. V& v!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!)) 1)) :pattern ((ens%vstd!multiset.axiom_len_singleton. V&. V& v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!)) 1)) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!))) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_add")
(declare-fun ens%vstd!multiset.axiom_len_add. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_len_add. V&. V& m1! m2!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!)) (nClip (Add (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((ens%vstd!multiset.axiom_len_add. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_add")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!)) (nClip (Add (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!))) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.subset_of.) (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (<= (vstd!multiset.impl&%0.count.? V&. V& self! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) ))) :pattern ((vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_sub")
(declare-fun req%vstd!multiset.axiom_len_sub. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (req%vstd!multiset.axiom_len_sub. V&. V& m1! m2!) (=> %%global_location_label%%13 (vstd!multiset.impl&%0.subset_of.? V&. V& m2! m1!))) :pattern ((req%vstd!multiset.axiom_len_sub. V&. V& m1! m2!)) )))
(declare-fun ens%vstd!multiset.axiom_len_sub. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_len_sub. V&. V& m1! m2!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!)) (Sub (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!)))) :pattern ((ens%vstd!multiset.axiom_len_sub. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_sub")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (=> (vstd!multiset.impl&%0.subset_of.? V&. V& m2! m1!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!)) (Sub (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!))) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_count_le_len")
(declare-fun ens%vstd!multiset.axiom_count_le_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_count_le_len. V&. V& m! v!) (<= (vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!))) :pattern ((ens%vstd!multiset.axiom_count_le_len. V&. V& m! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_count_le_len")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (<= (vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_filter_count")
(declare-fun ens%vstd!multiset.axiom_filter_count. (Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (f! %%Function%%) (v! Poly)) (! (= (ens%vstd!multiset.axiom_filter_count. V&. V& m! f! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.filter.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) m! (Poly%fun%1. f!)) v!) (ite (%B (%%apply%%0 f! v!)) (vstd!multiset.impl&%0.count.? V&. V& m! v!) 0))) :pattern ((ens%vstd!multiset.axiom_filter_count. V&. V& m! f! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_filter_count")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (f! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type f! (TYPE%fun%1. V&. V& $ BOOL)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.filter.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) m! f!) v!) (ite (%B (%%apply%%0 (%Poly%fun%1. f!) v!)) (vstd!multiset.impl&%0.count.? V&. V& m! v!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.filter.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) m! f!) v!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Int Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Int) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$)) )) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.choose.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.choose.? V&. V& self!) (as_type (%%choose%%0 V& V&. V& self! 0 V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.choose.? V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_choose_count")
(declare-fun req%vstd!multiset.axiom_choose_count. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (= (req%vstd!multiset.axiom_choose_count. V&. V& m!) (=> %%global_location_label%%14 (not (= (vstd!multiset.impl&%0.len.? V&. V& m!) 0)))) :pattern ((req%vstd!multiset.axiom_choose_count. V&. V& m!)) )))
(declare-fun ens%vstd!multiset.axiom_choose_count. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (= (ens%vstd!multiset.axiom_choose_count. V&. V& m!) (> (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!)) 0)) :pattern ((ens%vstd!multiset.axiom_choose_count. V&. V& m!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_choose_count")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (=> (not (= (vstd!multiset.impl&%0.len.? V&. V& m!) 0)) (> (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!)) 0))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& m!) (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!))) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::dom")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.dom.))
(declare-fun %%lambda%%0 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (B (> (vstd!multiset.impl&%0.count.? %%hole%%0 %%hole%%1 %%hole%%2 v$) %%hole%%3))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.dom.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.dom.? V&. V& self!) (vstd!set.impl&%0.new.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 V&. V& self! 0))))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.dom.? V&. V& self!) (TYPE%vstd!set.Set. V&. V&))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_always_finite")
(declare-fun ens%vstd!multiset.axiom_multiset_always_finite. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_always_finite. V&. V& m!) (vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) :pattern ((ens%vstd!multiset.axiom_multiset_always_finite. V&. V& m!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_always_finite")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) :pattern ((vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%15 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%17 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%18 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%19 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%20 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%21 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%22 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%23 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%24 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%1 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%1 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%25 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%26 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%27 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%28 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%29 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%30 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%31 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_start")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_start.? T&. T& pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (not (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))) (let ((update_tmp_exc_locked$ true)) (let ((tmp_assert$1 (and tmp_assert$ (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$)))))))) (let ((update_tmp_exc_pending$1 (core!option.Option./Some (I 0)))) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$1)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_start.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_check_count")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count.? T&. T& pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$))))) (and (let ((r$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$)))))) (let ((update_tmp_exc_pending$1 core!option.Option./None)) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$) (I 0))) (let ((tmp_assert$1 (and tmp_assert$ (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$1)))))))) (let ((update_tmp_exc_pending$2 (core!option.Option./Some (I (Add r$ 1))))) (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$2))))))) (let ((tmp_assert$2 (let ((r$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$)))))) (let ((update_tmp_exc_pending$3 core!option.Option./None)) (let ((tmp_assert$3 (and tmp_assert$ (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$3)))))))) (let ((update_tmp_exc_pending$4 (core!option.Option./Some (I (Add r$ 1))))) tmp_assert$3)))))) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_finish")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish.? T&. T& pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (= update_tmp_exc_pending$ (core!option.Option./Some (I (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))) (let ((update_tmp_exc_pending$1 core!option.Option./None)) (let ((tmp_assert$1 (and tmp_assert$ (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_guard$)))))))) (let ((update_tmp_exc_guard$1 (core!option.Option./Some (Poly%tuple%0. tuple%0./tuple%0)))) (and (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) (let ((tmp_assert$2 (and tmp_assert$1 (= update_tmp_storage$ (core!option.Option./Some x$))))) (let ((update_tmp_storage$1 core!option.Option./None)) (let ((tmp_assert$3 (and tmp_assert$2 (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) x$)))) (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$1)))))) (let ((tmp_assert$4 (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) (let ((tmp_assert$5 (and tmp_assert$1 (= update_tmp_storage$ (core!option.Option./Some x$))))) (let ((update_tmp_storage$2 core!option.Option./None)) (let ((tmp_assert$6 (and tmp_assert$5 (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) x$)))) tmp_assert$6)))))) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$1)) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$1)) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$)) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$)) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$)) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$4 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_release")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (t! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_release.? T&. T& pre! post! t!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) t!) (let ((update_tmp_exc_locked$ false)) (and (= update_tmp_exc_guard$ (core!option.Option./Some (Poly%tuple%0. tuple%0./tuple%0))) (let ((update_tmp_exc_guard$1 core!option.Option./None)) (let ((tmp_assert$1 (and tmp_assert$ (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_storage$)))))))) (let ((update_tmp_storage$1 (core!option.Option./Some t!))) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$1)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$1)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$)) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_release.? T&. T& pre! post! t!)) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.insert.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (vstd!multiset.impl&%0.add.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_start")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_start.? T&. T& pre! post! r!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) r!) (and (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) r!))))) (let ((update_tmp_ref_counts$2 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1) r! (I (Add rc$ 1)))))) (let ((update_tmp_shared_pending$1 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.insert.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$1)) (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$2)))))))) (let ((tmp_assert$2 (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$3 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$3)) r!))))) (let ((update_tmp_ref_counts$4 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$3) r! (I (Add rc$ 1)))))) (let ((update_tmp_shared_pending$2 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.insert.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) tmp_assert$3))))))) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_start.? T&. T& pre! post! r!)) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.remove.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.remove.? V&. V& self! v!) (vstd!multiset.impl&%0.sub.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.remove.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.remove.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.remove.? V&. V& self! v!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_abandon")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon.? T&. T& pre! post! r!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) r!) (and (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (and (=> tmp_assert$ (> rc$ 0)) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) r!))))) (let ((update_tmp_ref_counts$2 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1) r! (I (Sub rc$ 1)))))) (and (=> tmp_assert$1 (>= (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!) 1)) (let ((update_tmp_shared_pending$1 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.remove.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) (and (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$1)) (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$2)))))))))) (let ((tmp_assert$2 (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$3 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$3)) r!))))) (let ((update_tmp_ref_counts$4 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$3) r! (I (Sub rc$ 1)))))) (let ((update_tmp_shared_pending$2 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.remove.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) tmp_assert$3))))))) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon.? T&. T& pre! post! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_finish")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish.? T&. T& pre! post! r!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (not (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))) (and (>= (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!) 1) (let ((update_tmp_shared_pending$1 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.remove.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) (and (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) (let ((update_tmp_shared_guard$1 (vstd!multiset.impl&%0.insert.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ (Poly%tuple%2. (tuple%2./tuple%2 r! t$))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) t$)))) (=> tmp_assert$1 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$1))))) (let ((tmp_assert$2 (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) (let ((update_tmp_shared_guard$2 (vstd!multiset.impl&%0.insert.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ (Poly%tuple%2. (tuple%2./tuple%2 r! t$))))) (let ((tmp_assert$3 (and tmp_assert$ (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) t$)))) tmp_assert$3))))) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$1)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$)) (and (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$))))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish.? T&. T& pre! post! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_release")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (val! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_release.? T&. T& pre! post! val!) (let ((tmp_assert$ true)) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (>= (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ val!) 1) (let ((update_tmp_shared_guard$1 (vstd!multiset.impl&%0.remove.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ val!))) (and (let ((r$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. val!))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) (I r$))) (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$))))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) (I r$)))))) (let ((update_tmp_ref_counts$2 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1) (I r$) (I (Sub rc$ 1)))))) (let ((tmp_assert$2 (and tmp_assert$1 (> rc$ 0)))) (=> tmp_assert$2 (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$2))))))))) (let ((tmp_assert$3 (let ((r$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. val!))))) (let ((tmp_assert$4 (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$))))) (let ((update_tmp_ref_counts$3 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$))))) (let ((tmp_assert$5 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$3)) (I r$)))))) (let ((update_tmp_ref_counts$4 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$3) (I r$) (I (Sub rc$ 1)))))) (let ((tmp_assert$6 (and tmp_assert$5 (> rc$ 0)))) tmp_assert$6))))))) tmp_assert$4)))) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$1)) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$)) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$)) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$)) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$)) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$)) (and (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$)) (=> tmp_assert$3 (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_release.? T&. T& pre! post! val!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::next_by")
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./exc_start_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./exc_start) c))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./exc_check_count_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./exc_check_count) c))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./exc_finish_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./exc_finish) c))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./shared_start_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./shared_start) c))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./shared_abandon_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./shared_abandon) c))
(define-fun is-lib!spec.rwlock.RwLockSpec.Step./shared_finish_ ((c lib!spec.rwlock.RwLockSpec.Step.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.Step./shared_finish) c))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_by.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.next_by.? T&. T& pre! post! step!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_start_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_start.? T&. T& pre! post!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_check_count_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count.? T&. T& pre! post!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_finish_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish.? T&. T& pre! post!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_release_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((t$ (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_release.? T&. T& pre! post! t$)) (ite (is-lib!spec.rwlock.RwLockSpec.Step./shared_start_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((r$ (lib!spec.rwlock.RwLockSpec.Step./shared_start/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_start.? T&. T& pre! post! (I r$))) (ite (is-lib!spec.rwlock.RwLockSpec.Step./shared_abandon_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((r$ (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon.? T&. T& pre! post! (I r$))) (ite (is-lib!spec.rwlock.RwLockSpec.Step./shared_finish_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((r$ (lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish.? T&. T& pre! post! (I r$))) (and (is-lib!spec.rwlock.RwLockSpec.Step./shared_release_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((val$ (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_release.? T&. T& pre! post! (Poly%tuple%2. val$)))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.next_by.? T&. T& pre! post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::next")
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.next.? T&. T& pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (lib!spec.rwlock.RwLockSpec.impl&%11.next_by.? T&. T& pre! post! step$)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.next_by.? T&. T& pre! post! step$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.next.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::initialize")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize.))
(declare-fun %%lambda%%1 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) i$)))))
(declare-fun %%lambda%%2 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0) i$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0) i$)))))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize.) (forall ((T&. Dcr) (T& Type) (post! Poly) (rc_width! Poly) (init_t! Poly) (user_inv! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.initialize.? T&. T& post! rc_width! init_t! user_inv!) (and (< 0 (%I rc_width!)) (and (vstd!set.impl&%0.contains.? T&. T& user_inv! init_t!) (let ((update_tmp_rc_width$ (%I rc_width!))) (let ((update_tmp_user_inv$ user_inv!)) (let ((update_tmp_storage$ (core!option.Option./Some init_t!))) (let ((update_tmp_exc_locked$ false)) (let ((update_tmp_ref_counts$ (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%1 0 (%I rc_width!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 (I 0)))))))) (let ((update_tmp_exc_pending$ core!option.Option./None)) (let ((update_tmp_exc_guard$ core!option.Option./None)) (let ((update_tmp_shared_pending$ (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.empty.? $ INT)))) (let ((update_tmp_shared_guard$ (vstd!multiset.impl&%0.empty.? $ (TYPE%tuple%2. $ INT T&. T&)))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$) (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.initialize.? T&. T& post! rc_width! init_t! user_inv!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::init_by")
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.init_by.) (forall ((T&. Dcr) (T& Type) (post! Poly) (step! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.init_by.? T&. T& post! step!) (and (is-lib!spec.rwlock.RwLockSpec.Config./initialize_ (%Poly%lib!spec.rwlock.RwLockSpec.Config. step!)) (let ((rc_width$ (lib!spec.rwlock.RwLockSpec.Config./initialize/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. step!)))) (let ((init_t$ (lib!spec.rwlock.RwLockSpec.Config./initialize/1 (%Poly%lib!spec.rwlock.RwLockSpec.Config. step!)))) (let ((user_inv$ (lib!spec.rwlock.RwLockSpec.Config./initialize/2 (%Poly%lib!spec.rwlock.RwLockSpec.Config. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.initialize.? T&. T& post! (I rc_width$) init_t$ user_inv$)))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.init_by.? T&. T& post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::init")
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.init.) (forall ((T&. Dcr) (T& Type) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.init.? T&. T& post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (lib!spec.rwlock.RwLockSpec.impl&%11.init_by.? T&. T& post! step$)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.init_by.? T&. T& post! step$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.init.? T&. T& post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_locked::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::exc_locked::arbitrary")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%4.arbitrary. (Dcr Type lib!spec.rwlock.RwLockSpec.exc_locked.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (%return! lib!spec.rwlock.RwLockSpec.exc_locked.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%4.arbitrary. T&. T& %return!) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. %return!) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%4.arbitrary. T&. T& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::ref_counts::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::ref_counts::arbitrary")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%5.arbitrary. (Dcr Type lib!spec.rwlock.RwLockSpec.ref_counts.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (%return! lib!spec.rwlock.RwLockSpec.ref_counts.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%5.arbitrary. T&. T& %return!) (has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. %return!) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%5.arbitrary. T&. T& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_pending::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::exc_pending::arbitrary")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%6.arbitrary. (Dcr Type lib!spec.rwlock.RwLockSpec.exc_pending.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (%return! lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%6.arbitrary. T&. T& %return!) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. %return!) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%6.arbitrary. T&. T& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_guard::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::exc_guard::arbitrary")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%7.arbitrary. (Dcr Type lib!spec.rwlock.RwLockSpec.exc_guard.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (%return! lib!spec.rwlock.RwLockSpec.exc_guard.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%7.arbitrary. T&. T& %return!) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard. %return!) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%7.arbitrary. T&. T& %return!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_pending::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::shared_pending::arbitrary")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%8.arbitrary. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_pending.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (%return! lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%8.arbitrary. T&. T& %return!) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. %return!) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%8.arbitrary. T&. T& %return!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::shared_pending::join")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%8.join. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_pending. lib!spec.rwlock.RwLockSpec.shared_pending.) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_pending.) (other! lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%8.join. T&. T& self! other!) (=> %%global_location_label%%32 (and (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. other!)))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. other!))))))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%8.join. T&. T& self! other!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%8.join. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_pending. lib!spec.rwlock.RwLockSpec.shared_pending. lib!spec.rwlock.RwLockSpec.shared_pending.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_pending.) (other! lib!spec.rwlock.RwLockSpec.shared_pending.) (s! lib!spec.rwlock.RwLockSpec.shared_pending.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%8.join. T&. T& self! other! s!) (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. s!) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (and (and (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. s!))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!)))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. s!))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. s!))))) (nClip (Add (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. other!))))))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%8.join. T&. T& self! other! s!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::shared_pending::split")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%8.split. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_pending. Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_pending.) (i! Int)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%8.split. T&. T& self! i!) (=> %%global_location_label%%33 (<= i! (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!)))))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%8.split. T&. T& self! i!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%8.split. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_pending. Int tuple%2.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_pending.) (i! Int) (s! tuple%2.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%8.split. T&. T& self! i! s!) (and (has_type (Poly%tuple%2. s!) (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&))) (let ((x$ (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. s!)))))) (let ((y$ (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. s!)))))) (and (and (and (and (and (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x$))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!)))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. y$))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x$))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. y$))))) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. x$))))) i!)) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. y$))))) (Sub (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_pending. self!))))) i!))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%8.split. T&. T& self! i! s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_guard::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::shared_guard::arbitrary")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%9.arbitrary. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_guard.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (%return! lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%9.arbitrary. T&. T& %return!) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. %return!) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%9.arbitrary. T&. T& %return!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::shared_guard::join")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%9.join. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_guard. lib!spec.rwlock.RwLockSpec.shared_guard.) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_guard.) (other! lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%9.join. T&. T& self! other!) (=> %%global_location_label%%34 (and (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. other!)))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. other!))))))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%9.join. T&. T& self! other!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%9.join. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_guard. lib!spec.rwlock.RwLockSpec.shared_guard. lib!spec.rwlock.RwLockSpec.shared_guard.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_guard.) (other! lib!spec.rwlock.RwLockSpec.shared_guard.) (s! lib!spec.rwlock.RwLockSpec.shared_guard.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%9.join. T&. T& self! other! s!) (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. s!) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)) (and (and (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. s!))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!)))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. s!))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. s!))))) (nClip (Add (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. other!))))))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%9.join. T&. T& self! other! s!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::shared_guard::split")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%9.split. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_guard. Int) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_guard.) (i! Int)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%9.split. T&. T& self! i!) (=> %%global_location_label%%35 (<= i! (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!)))))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%9.split. T&. T& self! i!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%9.split. (Dcr Type lib!spec.rwlock.RwLockSpec.shared_guard. Int tuple%2.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.shared_guard.) (i! Int) (s! tuple%2.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%9.split. T&. T& self! i! s!) (and (has_type (Poly%tuple%2. s!) (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&))) (let ((x$ (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. s!)))))) (let ((y$ (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. s!)))))) (and (and (and (and (and (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x$))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!)))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. y$))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x$))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. y$))))) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. x$))))) i!)) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. y$))))) (Sub (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.shared_guard. self!))))) i!))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%9.split. T&. T& self! i! s!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::clone")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.clone. (Dcr Type lib!spec.rwlock.RwLockSpec.Instance. lib!spec.rwlock.RwLockSpec.Instance.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.Instance.) (s! lib!spec.rwlock.RwLockSpec.Instance.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.clone. T&. T& self! s!) (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.Instance. s!) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (= self! s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.clone. T&. T& self! s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Instance::user_inv")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& self!) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::sto_user_inv")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.? T&. T& self!) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))))))) (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_sto_user_inv")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::ref_counts_domain")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.? T&. T& self!) (and (< 0 (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (= (and (<= 0 (%I i$)) (< (%I i$) (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))) i$)) )))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_ref_counts_domain")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_inv")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.? T&. T& self!) (and (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) (or (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))))))))) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))))) (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))))))) (let ((tmp%%$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((cur_r$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (and (<= 0 cur_r$) (<= cur_r$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))))))) (forall ((x$ Poly)) (! (=> (has_type x$ (TYPE%tuple%2. $ INT T&. T&)) (=> (> (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) x$) 0) (not (let ((tmp%%$1 (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. x$))))) (and (<= 0 tmp%%$1) (< tmp%%$1 cur_r$)))))) :pattern ((vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) x$)) )))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_exc_inv")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_pending_in_range")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.? T&. T& self!) (forall ((r$ Poly)) (! (=> (has_type r$ INT) (=> (> (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))) r$) 0) (and (<= 0 (%I r$)) (< (%I r$) (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))))) :pattern ((vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))) r$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_shared_pending_in_range")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_guard_in_range")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.? T&. T& self!) (forall ((x$ Poly)) (! (=> (has_type x$ (TYPE%tuple%2. $ INT T&. T&)) (=> (> (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) x$) 0) (let ((tmp%%$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. x$))))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))))))) :pattern ((vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_shared_guard_in_range")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_inv_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.? T&. T& self!) (forall ((v$ Poly)) (! (=> (has_type v$ (TYPE%tuple%2. $ INT T&. T&)) (=> (> (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) v$) 0) (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) (core!option.Option./Some (tuple%2./tuple%2/1 (%Poly%tuple%2. v$)))))) :pattern ((vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) v$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_shared_inv_agree")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::filter_r")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.))
(declare-fun %%lambda%%3 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (val$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0) val$) (B (= (tuple%2./tuple%2/0 (%Poly%tuple%2. val$)) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0) val$)))))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.) (forall ((T&. Dcr) (T& Type) (shared_guard! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.? T&. T& shared_guard! r!) (vstd!multiset.impl&%0.filter.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%fun%1. $ (TYPE%tuple%2. $ INT T&. T&) $ BOOL) shared_guard! (Poly%fun%1. (mk_fun (%%lambda%%3 r!))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.? T&. T& shared_guard! r!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (shared_guard! Poly) (r! Poly)) (! (=> (and (has_type shared_guard! (TYPE%vstd!multiset.Multiset. $ (TYPE%tuple%2. $ INT T&. T&))) (has_type r! INT)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.? T&. T& shared_guard! r!) (TYPE%vstd!multiset.Multiset. $ (TYPE%tuple%2. $ INT T&. T&)))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.? T&. T& shared_guard! r!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_counts_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.? T&. T& self!) (forall ((r$ Poly)) (! (=> (has_type r$ INT) (=> (and (<= 0 (%I r$)) (< (%I r$) (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)))) (= (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))) r$)) (Add (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))) r$) (vstd!multiset.impl&%0.len.? $ (TYPE%tuple%2. $ INT T&. T&) (lib!spec.rwlock.RwLockSpec.impl&%11.filter_r.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. self!)) r$)))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. self!))) r$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::lemma_msg_shared_counts_agree")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. T&. T& s!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. (Dcr Type lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. T&. T& s!) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_exc_release_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.? T&. T& self!) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_exc_release_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_shared_start_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_start/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_start_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_shared_abandon_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_abandon_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_shared_finish_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_finish_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_shared_release_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.? T&. T& self!)) (TYPE%tuple%2. $ INT T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_shared_release_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%0.arrow_dummy_to_use_type_params_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_exc_start")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./exc_start_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_start.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_exc_check_count")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./exc_check_count_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_check_count.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_exc_finish")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./exc_finish_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_finish.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_exc_release")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./exc_release_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_exc_release.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::get_exc_release_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.? T&. T& self!) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_exc_release_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_shared_start")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./shared_start_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_start.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::get_shared_start_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_start/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_start_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_shared_abandon")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./shared_abandon_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_abandon.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::get_shared_abandon_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_abandon_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_shared_finish")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./shared_finish_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_finish.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::get_shared_finish_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_finish_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_shared_release")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./shared_release_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_shared_release.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::get_shared_release_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.? T&. T& self!)) (TYPE%tuple%2. $ INT T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_shared_release_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.is_dummy_to_use_type_params.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%1.get_dummy_to_use_type_params_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::arrow_1")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/1 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.? T&. T& self!) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_1.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::arrow_2")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/2 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.? T&. T& self!) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_2.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::arrow_initialize_1")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/1 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.? T&. T& self!) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_1.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::arrow_initialize_2")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/2 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.? T&. T& self!) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_initialize_2.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%2.arrow_dummy_to_use_type_params_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Config./initialize_ (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.is_initialize.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_0.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::get_initialize_1")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/1 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.? T&. T& self!) T&)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_1.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::get_initialize_2")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./initialize/2 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.? T&. T& self!) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_initialize_2.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params.? T&. T& self!) (is-lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params_ (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.is_dummy_to_use_type_params.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.rwlock.RwLockSpec.Config. self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Config. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. (lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%3.get_dummy_to_use_type_params_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::ref_counts::map_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.) (forall ((T&. Dcr) (T& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? T&. T& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map!) key$) (and (and (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!)) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$))))) (%I key$))) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$))))) (%I (vstd!map.impl&%0.index.? $ INT $ INT m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? T&. T& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::ref_counts::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.) (forall ((T&. Dcr) (T& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? T&. T& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map!) (vstd!map.impl&%0.dom.? $ INT $ INT m!)) (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? T&. T& token_map! m! instance!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? T&. T& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_pending::option_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)))) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. token_opt!)))) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. opt!))))) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_pending::option_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.? T&. T& token_opt! opt! instance!) (and (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. token_opt!))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_guard::option_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)))) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. token_opt!)))) (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%tuple%0. (core!option.Option./Some/0 (%Poly%core!option.Option. opt!))))) (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_guard::option_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.? T&. T& token_opt! opt! instance!) (and (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. token_opt!))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_pending::multiset_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree.) (forall ((T&. Dcr) (T& Type) (tokens! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree.? T&. T& tokens! m! instance!) (forall ((x$ Poly)) (! (=> (has_type x$ INT) (=> (> (vstd!multiset.impl&%0.count.? $ INT m! x$) 0) (and (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens!) x$) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!))) (>= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (vstd!multiset.impl&%0.count.? $ INT m! x$))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (%I x$))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens!) x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree.? T&. T& tokens! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_pending::multiset_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.) (forall ((T&. Dcr) (T& Type) (tokens! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? T&. T& tokens! m! instance!) (forall ((x$ Poly)) (! (=> (has_type x$ INT) (and (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens!) x$) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (vstd!multiset.impl&%0.count.? $ INT m! x$))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (%I x$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens!) x$)) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? T&. T& tokens! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_guard::multiset_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree.) (forall ((T&. Dcr) (T& Type) (tokens! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree.? T&. T& tokens! m! instance!) (forall ((x$ Poly)) (! (=> (has_type x$ (TYPE%tuple%2. $ INT T&. T&)) (=> (> (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) m! x$) 0) (and (and (and (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT T&. T&) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens!) x$) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!))) (>= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) m! x$))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (%Poly%tuple%2. x$))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT T&. T&) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens!) x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree.? T&. T& tokens! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_guard::multiset_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.) (forall ((T&. Dcr) (T& Type) (tokens! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? T&. T& tokens! m! instance!) (forall ((x$ Poly)) (! (=> (has_type x$ (TYPE%tuple%2. $ INT T&. T&)) (and (and (and (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT T&. T&) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens!) x$) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (%Poly%lib!spec.rwlock.RwLockSpec.Instance. instance!))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) m! x$))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (%Poly%tuple%2. x$)))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT T&. T&) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens!) x$)) :pattern ((vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? T&. T& tokens! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled.) (forall ((T&. Dcr) (T& Type) (rc_width! Poly) (init_t! Poly) (user_inv! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled.? T&. T& rc_width! init_t! user_inv!) (and (< 0 (%I rc_width!)) (vstd!set.impl&%0.contains.? T&. T& user_inv! init_t!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.initialize_enabled.? T&. T& rc_width! init_t! user_inv!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_start_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.? T&. T& pre! post!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (not (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))) (let ((update_tmp_exc_locked$ true)) (and (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$))))) (let ((update_tmp_exc_pending$1 (core!option.Option./Some (I 0)))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_start_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled.? T&. T& pre!) (not (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_enabled.? T&. T& pre!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_check_count_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.? T&. T& pre! post!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$))))) (and (let ((r$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$)))))) (let ((update_tmp_exc_pending$1 core!option.Option./None)) (and (vstd!map_lib.impl&%0.contains_pair.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$) (I 0)) (and (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$1))))) (let ((update_tmp_exc_pending$2 (core!option.Option./Some (I (Add r$ 1))))) (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$2)))))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_check_count_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled.? T&. T& pre!) (let ((tmp_assert$ true)) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$))))) (let ((r$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_pending$)))))) (=> tmp_assert$ (vstd!map_lib.impl&%0.contains_pair.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$) (I 0))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_enabled.? T&. T& pre!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.? T&. T& pre! post!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (= update_tmp_exc_pending$ (core!option.Option./Some (I (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))) (let ((update_tmp_exc_pending$1 core!option.Option./None)) (and (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_exc_guard$))))) (let ((update_tmp_exc_guard$1 (core!option.Option./Some (Poly%tuple%0. tuple%0./tuple%0)))) (and (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) (and (= update_tmp_storage$ (core!option.Option./Some x$)) (let ((update_tmp_storage$1 core!option.Option./None)) (and (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) x$) (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$1))))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled.? T&. T& pre!) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (= update_tmp_exc_pending$ (core!option.Option./Some (I (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_enabled.? T&. T& pre!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_release_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (t! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong.? T&. T& pre! post! t!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) t!) (let ((update_tmp_exc_locked$ false)) (and (= update_tmp_exc_guard$ (core!option.Option./Some (Poly%tuple%0. tuple%0./tuple%0))) (let ((update_tmp_exc_guard$1 core!option.Option./None)) (and (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_storage$))))) (let ((update_tmp_storage$1 (core!option.Option./Some t!))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong.? T&. T& pre! post! t!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::exc_release_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (t! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled.? T&. T& pre! t!) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) t!) (= update_tmp_exc_guard$ (core!option.Option./Some (Poly%tuple%0. tuple%0./tuple%0)))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_enabled.? T&. T& pre! t!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_start_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong.? T&. T& pre! post! r!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) r!) (and (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (and (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) r!)) (let ((update_tmp_ref_counts$2 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1) r! (I (Add rc$ 1)))))) (let ((update_tmp_shared_pending$1 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.insert.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$1) (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$2))))))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong.? T&. T& pre! post! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_start_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled.? T&. T& pre! r!) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) r!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_enabled.? T&. T& pre! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_abandon_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong.? T&. T& pre! post! r!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) r!) (and (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (and (> rc$ 0) (and (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) r!)) (let ((update_tmp_ref_counts$2 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1) r! (I (Sub rc$ 1)))))) (and (>= (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!) 1) (let ((update_tmp_shared_pending$1 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.remove.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$1) (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$2))))))))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong.? T&. T& pre! post! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_abandon_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled.? T&. T& pre! r!) (let ((tmp_assert$ true)) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) r!) (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) r!)))) (and (=> tmp_assert$ (> rc$ 0)) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) r!))))) (=> tmp_assert$1 (>= (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!) 1))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_enabled.? T&. T& pre! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_finish_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong.? T&. T& pre! post! r!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (not (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))) (and (>= (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!) 1) (let ((update_tmp_shared_pending$1 (%Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.impl&%0.remove.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!)))) (and (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))))))) (let ((update_tmp_shared_guard$1 (vstd!multiset.impl&%0.insert.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ (Poly%tuple%2. (tuple%2./tuple%2 r! t$))))) (and (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) t$) (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$1)))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$)))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong.? T&. T& pre! post! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_finish_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (r! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled.? T&. T& pre! r!) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (not (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!))) (>= (vstd!multiset.impl&%0.count.? $ INT (Poly%vstd!multiset.Multiset<int.>. update_tmp_shared_pending$) r!) 1)))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_enabled.? T&. T& pre! r!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_release_strong")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (val! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong.? T&. T& pre! post! val!) (let ((update_tmp_user_inv$ (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_rc_width$ (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_storage$ (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_locked$ (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_pending$ (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_exc_guard$ (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_pending$ (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (>= (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ val!) 1) (let ((update_tmp_shared_guard$1 (vstd!multiset.impl&%0.remove.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ val!))) (and (let ((r$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. val!))))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) (I r$)) (let ((rc$ (%I (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$))))) (let ((update_tmp_ref_counts$1 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.remove.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$) (I r$))))) (and (not (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1)) (I r$))) (let ((update_tmp_ref_counts$2 (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.insert.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$1) (I r$) (I (Sub rc$ 1)))))) (and (> rc$ 0) (= (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_ref_counts$2)))))))) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_guard$1) (and (= (lib!spec.rwlock.RwLockSpec.State./State/shared_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_shared_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_guard$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_pending (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_pending$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/exc_locked (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_exc_locked$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/storage (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_storage$) (and (= (lib!spec.rwlock.RwLockSpec.State./State/rc_width (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_rc_width$) (= (lib!spec.rwlock.RwLockSpec.State./State/user_inv (%Poly%lib!spec.rwlock.RwLockSpec.State. post!)) update_tmp_user_inv$))))))))))))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong.? T&. T& pre! post! val!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::shared_release_enabled")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (val! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled.? T&. T& pre! val!) (let ((tmp_assert$ true)) (let ((update_tmp_ref_counts$ (lib!spec.rwlock.RwLockSpec.State./State/ref_counts (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (let ((update_tmp_shared_guard$ (lib!spec.rwlock.RwLockSpec.State./State/shared_guard (%Poly%lib!spec.rwlock.RwLockSpec.State. pre!)))) (and (>= (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) update_tmp_shared_guard$ val!) 1) (let ((r$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. val!))))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. update_tmp_ref_counts$)) (I r$))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_enabled.? T&. T& pre! val!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by.? T&. T& pre! post! step!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_start_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.? T&. T& pre! post!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_check_count_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.? T&. T& pre! post!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_finish_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.? T&. T& pre! post!) (ite (is-lib!spec.rwlock.RwLockSpec.Step./exc_release_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((t$ (lib!spec.rwlock.RwLockSpec.Step./exc_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_release_strong.? T&. T& pre! post! t$)) (ite (is-lib!spec.rwlock.RwLockSpec.Step./shared_start_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((r$ (lib!spec.rwlock.RwLockSpec.Step./shared_start/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_start_strong.? T&. T& pre! post! (I r$))) (ite (is-lib!spec.rwlock.RwLockSpec.Step./shared_abandon_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((r$ (lib!spec.rwlock.RwLockSpec.Step./shared_abandon/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_abandon_strong.? T&. T& pre! post! (I r$))) (ite (is-lib!spec.rwlock.RwLockSpec.Step./shared_finish_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((r$ (lib!spec.rwlock.RwLockSpec.Step./shared_finish/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_finish_strong.? T&. T& pre! post! (I r$))) (and (is-lib!spec.rwlock.RwLockSpec.Step./shared_release_ (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)) (let ((val$ (lib!spec.rwlock.RwLockSpec.Step./shared_release/0 (%Poly%lib!spec.rwlock.RwLockSpec.Step. step!)))) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_release_strong.? T&. T& pre! post! (Poly%tuple%2. val$)))))))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by.? T&. T& pre! post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::next_strong")
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.next_strong.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.next_strong.? T&. T& pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.rwlock.RwLockSpec.Step. T&. T&)) (lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by.? T&. T& pre! post! step$)) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.next_strong_by.? T&. T& pre! post! step$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.next_strong.? T&. T& pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::State::invariant")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%11.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%11.invariant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& self!) (and (and (and (and (and (and (lib!spec.rwlock.RwLockSpec.impl&%11.sto_user_inv.? T&. T& self!) (lib!spec.rwlock.RwLockSpec.impl&%11.ref_counts_domain.? T&. T& self!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_inv.? T&. T& self!)) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_pending_in_range.? T&. T& self!)) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_guard_in_range.? T&. T& self!)) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_inv_agree.? T&. T& self!)) (lib!spec.rwlock.RwLockSpec.impl&%11.shared_counts_agree.? T&. T& self!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::initialize_inductive")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. Int Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((T&. Dcr) (T& Type) (post! lib!spec.rwlock.RwLockSpec.State.) (rc_width! Int) (init_t! Poly) (user_inv! Poly)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_inductive. T&. T& post! rc_width! init_t! user_inv!) (=> %%global_location_label%%36 (lib!spec.rwlock.RwLockSpec.impl&%11.initialize.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. post!) (I rc_width!) init_t! user_inv!))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_inductive. T&. T& post! rc_width! init_t! user_inv!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. Int Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (post! lib!spec.rwlock.RwLockSpec.State.) (rc_width! Int) (init_t! Poly) (user_inv! Poly)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_inductive. T&. T& post! rc_width! init_t! user_inv!) (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. post!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.initialize_inductive. T&. T& post! rc_width! init_t! user_inv!)) )))
(set-info :comment ";; Function-Def lib::spec::rwlock::RwLockSpec::State::initialize_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/rwlock.rs:221:9: 221:89 (#0)")
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::initialize")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. (Dcr Type Int Poly Poly core!option.Option.) Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((T&. Dcr) (T& Type) (rc_width! Int) (init_t! Poly) (user_inv! Poly) (param_token_storage! core!option.Option.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage!) (and (=> %%global_location_label%%37 (< 0 rc_width!)) (=> %%global_location_label%%38 (vstd!set.impl&%0.contains.? T&. T& user_inv! init_t!)) (=> %%global_location_label%%39 (= param_token_storage! (core!option.Option./Some init_t!))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. (Dcr Type Int Poly Poly core!option.Option. tuple%7.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (rc_width! Int) (init_t! Poly) (user_inv! Poly) (param_token_storage! core!option.Option.) (tmp_tuple! tuple%7.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage! tmp_tuple!) (and (has_type (Poly%tuple%7. tmp_tuple!) (TYPE%tuple%7. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&) (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&) (TRACKED $) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&)) (TRACKED $) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (TRACKED $) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&)) (TRACKED $) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (TRACKED $) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)))) (let ((instance$ (%Poly%lib!spec.rwlock.RwLockSpec.Instance. (tuple%7./tuple%7/0 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!)))))) (let ((param_token_exc_locked$ (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked. (tuple%7./tuple%7/1 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!)))))) (let ((param_token_ref_counts$ (tuple%7./tuple%7/2 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((param_token_exc_pending$ (%Poly%core!option.Option. (tuple%7./tuple%7/3 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!)))))) (let ((param_token_exc_guard$ (%Poly%core!option.Option. (tuple%7./tuple%7/4 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!)))))) (let ((param_token_shared_pending$ (tuple%7./tuple%7/5 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((param_token_shared_guard$ (tuple%7./tuple%7/6 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((instance$1 instance$)) (let ((param_token_exc_locked$1 param_token_exc_locked$)) (let ((param_token_ref_counts$1 param_token_ref_counts$)) (let ((param_token_exc_pending$1 param_token_exc_pending$)) (let ((param_token_exc_guard$1 param_token_exc_guard$)) (let ((param_token_shared_pending$1 param_token_shared_pending$)) (let ((param_token_shared_guard$1 param_token_shared_guard$)) (and (and (and (and (and (and (and (and (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. param_token_exc_locked$1))))) instance$1) (= (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1)) user_inv!)) (= (lib!spec.rwlock.RwLockSpec.impl&%10.rc_width.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1)) rc_width!)) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. param_token_exc_locked$1))))) false)) (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? T&. T& param_token_ref_counts$1 (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%1 0 rc_width!))) (Poly%fun%1. (mk_fun (%%lambda%%2 (I 0))))) (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1))) (and (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& (Poly%core!option.Option. param_token_exc_pending$1) (Poly%core!option.Option. core!option.Option./None) (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1)) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. param_token_exc_pending$1)))))))) (and (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& (Poly%core!option.Option. param_token_exc_guard$1) (Poly%core!option.Option. core!option.Option./None) (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1)) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. param_token_exc_guard$1)))))))) (lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? T&. T& param_token_shared_pending$1 (vstd!multiset.impl&%0.empty.? $ INT) (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1))) (lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? T&. T& param_token_shared_guard$1 (vstd!multiset.impl&%0.empty.? $ (TYPE%tuple%2. $ INT T&. T&)) (Poly%lib!spec.rwlock.RwLockSpec.Instance. instance$1))))))))))))))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_safety")
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)) )))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_map")
(declare-fun req%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_map. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_map. b!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::exc_start_inductive")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. lib!spec.rwlock.RwLockSpec.State.) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!spec.rwlock.RwLockSpec.State.) (post! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_inductive. T&. T& pre! post!) (=> %%global_location_label%%40 (and (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_strong.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!) (Poly%lib!spec.rwlock.RwLockSpec.State. post!))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_inductive. T&. T& pre! post!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!spec.rwlock.RwLockSpec.State.) (post! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_inductive. T&. T& pre! post!) (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. post!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_start_inductive. T&. T& pre! post!)) )))
(set-info :comment ";; Function-Def lib::spec::rwlock::RwLockSpec::State::exc_start_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/rwlock.rs:236:9: 236:54 (#0)")
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_option")
(declare-fun req%vstd!state_machine_internal.assert_add_option. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_option. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_option. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_add_option. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_option. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_option. b!)) )))
(set-info :comment ";; Function-Def lib::spec::rwlock::RwLockSpec::State::exc_start_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/rwlock.rs:12:1: 305:2 (#2846)")
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::exc_start")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. (Dcr Type lib!spec.rwlock.RwLockSpec.Instance. lib!spec.rwlock.RwLockSpec.exc_locked.) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.Instance.) (pre%param_token_exc_locked! lib!spec.rwlock.RwLockSpec.exc_locked.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked!) (and (=> %%global_location_label%%41 (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. pre%param_token_exc_locked!))))) self!)) (=> %%global_location_label%%42 (not (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. pre%param_token_exc_locked!))))))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. (Dcr Type lib!spec.rwlock.RwLockSpec.Instance. lib!spec.rwlock.RwLockSpec.exc_locked. lib!spec.rwlock.RwLockSpec.exc_locked. lib!spec.rwlock.RwLockSpec.exc_pending.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.Instance.) (pre%param_token_exc_locked! lib!spec.rwlock.RwLockSpec.exc_locked.) (param_token_exc_locked! lib!spec.rwlock.RwLockSpec.exc_locked.) (param_token_0_exc_pending! lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked! param_token_exc_locked! param_token_0_exc_pending!) (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_0_exc_pending!) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. param_token_exc_locked!) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&)) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. param_token_exc_locked!))))) self!) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_0_exc_pending!))))) self!) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_0_exc_pending!))))) 0) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_locked. param_token_exc_locked!))))) true))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked! param_token_exc_locked! param_token_0_exc_pending!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::exc_check_count_inductive")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. lib!spec.rwlock.RwLockSpec.State.) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!spec.rwlock.RwLockSpec.State.) (post! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_inductive. T&. T& pre! post!) (=> %%global_location_label%%43 (and (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_strong.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!) (Poly%lib!spec.rwlock.RwLockSpec.State. post!))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_inductive. T&. T& pre! post!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!spec.rwlock.RwLockSpec.State.) (post! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_inductive. T&. T& pre! post!) (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. post!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_check_count_inductive. T&. T& pre! post!)) )))
(set-info :comment ";; Function-Def lib::spec::rwlock::RwLockSpec::State::exc_check_count_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/rwlock.rs:241:9: 241:60 (#0)")
(set-info :comment ";; Function-Def lib::spec::rwlock::RwLockSpec::State::exc_check_count_asserts")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/rwlock.rs:12:1: 305:2 (#2846)")
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::exc_check_count")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. (Dcr Type lib!spec.rwlock.RwLockSpec.Instance. lib!spec.rwlock.RwLockSpec.ref_counts. lib!spec.rwlock.RwLockSpec.exc_pending.) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.Instance.) (param_token_1_ref_counts! lib!spec.rwlock.RwLockSpec.ref_counts.) (param_token_0_exc_pending! lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending!) (and (=> %%global_location_label%%44 (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. param_token_1_ref_counts!))))) self!)) (=> %%global_location_label%%45 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_0_exc_pending!))))) self!)) (=> %%global_location_label%%46 true) (=> %%global_location_label%%47 (let ((r$ (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_0_exc_pending!))))))) (and (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. param_token_1_ref_counts!))))) r$) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.ref_counts. param_token_1_ref_counts!))))) 0)))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. (Dcr Type lib!spec.rwlock.RwLockSpec.Instance. lib!spec.rwlock.RwLockSpec.ref_counts. lib!spec.rwlock.RwLockSpec.exc_pending. lib!spec.rwlock.RwLockSpec.exc_pending.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!spec.rwlock.RwLockSpec.Instance.) (param_token_1_ref_counts! lib!spec.rwlock.RwLockSpec.ref_counts.) (param_token_0_exc_pending! lib!spec.rwlock.RwLockSpec.exc_pending.) (param_token_2_exc_pending! lib!spec.rwlock.RwLockSpec.exc_pending.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending! param_token_2_exc_pending!) (and (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_2_exc_pending!) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_2_exc_pending!))))) self!) (let ((r$ (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_0_exc_pending!))))))) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.exc_pending. param_token_2_exc_pending!))))) (Add r$ 1))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending! param_token_2_exc_pending!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::State::exc_finish_inductive")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. lib!spec.rwlock.RwLockSpec.State.) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!spec.rwlock.RwLockSpec.State.) (post! lib!spec.rwlock.RwLockSpec.State.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_inductive. T&. T& pre! post!) (=> %%global_location_label%%48 (and (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!) (Poly%lib!spec.rwlock.RwLockSpec.State. post!))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_inductive. T&. T& pre! post!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_inductive. (Dcr Type lib!spec.rwlock.RwLockSpec.State. lib!spec.rwlock.RwLockSpec.State.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!spec.rwlock.RwLockSpec.State.) (post! lib!spec.rwlock.RwLockSpec.State.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_inductive. T&. T& pre! post!) (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. post!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_inductive. T&. T& pre! post!)) )))
(set-info :comment ";; Function-Def lib::spec::rwlock::RwLockSpec::State::exc_finish_inductive")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/rwlock.rs:251:9: 251:55 (#0)")
(declare-const T&. Dcr)
(declare-const T& Type)
(declare-const pre! lib!spec.rwlock.RwLockSpec.State.)
(declare-const post! lib!spec.rwlock.RwLockSpec.State.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. pre!) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)))
(assert (has_type (Poly%lib!spec.rwlock.RwLockSpec.State. post!) (TYPE%lib!spec.rwlock.RwLockSpec.State. T&. T&)))
(assert (and (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!)) (lib!spec.rwlock.RwLockSpec.impl&%11.exc_finish_strong.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. pre!) (Poly%lib!spec.rwlock.RwLockSpec.State. post!))))
(set-info :comment ";; could not show invariant `sto_user_inv` on the `post` state")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; could not show invariant `ref_counts_domain` on the `post` state")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; could not show invariant `exc_inv` on the `post` state")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; could not show invariant `shared_pending_in_range` on the `post` state")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; could not show invariant `shared_guard_in_range` on the `post` state")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; could not show invariant `shared_inv_agree` on the `post` state")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; could not show invariant `shared_counts_agree` on the `post` state")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%7 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_sto_user_inv. T&. T& post!) (and (=> %%location_label%%1 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_ref_counts_domain. T&. T& post!) (and (=> %%location_label%%2 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_exc_inv. T&. T& post!) (and (=> %%location_label%%3 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_pending_in_range. T&. T& post!) (and (=> %%location_label%%4 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_guard_in_range. T&. T& post!) (and (=> %%location_label%%5 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_inv_agree. T&. T& post!) (and (=> %%location_label%%6 (req%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. T&. T& post!)) (=> (ens%lib!spec.rwlock.RwLockSpec.impl&%11.lemma_msg_shared_counts_agree. T&. T& post!) (=> %%location_label%%7 (lib!spec.rwlock.RwLockSpec.impl&%11.invariant.? T&. T& (Poly%lib!spec.rwlock.RwLockSpec.State. post!)))))))))))))))))))
(check-sat)
(exit)
