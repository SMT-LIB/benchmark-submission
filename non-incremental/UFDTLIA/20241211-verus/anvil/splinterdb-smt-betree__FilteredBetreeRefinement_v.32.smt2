(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module betree::FilteredBetreeRefinement_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.query. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.put. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.next. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.dup. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.update. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.empty. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.query_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.extend. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.insert_ref. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.query_internal. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.apply_filter. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.merge. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.insert. FuelId)
(declare-const fuel%lib!betree.Buffer_v.all_keys. FuelId)
(declare-const fuel%lib!betree.Buffer_v.total_keys. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%0.arrow_end. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%0.arrow_start. FuelId)
(declare-const fuel%lib!betree.Domain_v.total_domain. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.contains. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.includes. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.key_set. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%1.i. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%2.i. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%3.i. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%4.i. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.inv. FuelId)
(declare-const fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.i. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_flushed. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_pivots. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_buffers. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.local_structure. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.valid_child_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.my_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.child_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.linked_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.wf_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.push_memtable. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.is_leaf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.is_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_leaf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.split_leaf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.split_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_parent. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.split_parent. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.empty_root. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.grow. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.promote. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_flush. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.flush. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_compact. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.compact. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.key_in_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.child. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.make_offset_map. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.structure. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.all_lines_wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.child_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.result_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.valid. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.result. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.valid_for. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.subpath. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.valid. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.target. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.can_substitute. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.replaced_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.substitute. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.apply_put. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.apply_puts. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%1.empty_memtable. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%1.drain. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.is_total. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.active_keys. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.decrement. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%0.arrow_buffer. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%0.arrow_pivots. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%0.arrow_children. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.local_structure. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.valid_child_index. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.my_domain. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.child_domain. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.linked_children. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.wf_children. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.merge_buffer. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.push_memtable. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.is_leaf. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.is_index. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.can_split_leaf. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.split_leaf. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.can_split_index. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.split_index. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.can_split_parent. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.split_parent. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.empty_root. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.grow. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.promote. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.can_flush. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.flush. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.key_in_domain. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%1.child. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.structure. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.all_lines_wf. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.child_at. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.child_linked_at. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.result_at. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.result_linked_at. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.valid. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.result. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%3.valid_for. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%4.subpath. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%4.valid. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%4.target. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%4.can_substitute. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%4.replaced_children. FuelId)
(declare-const fuel%lib!betree.PivotBetree_v.impl&%4.substitute. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.domain_to_pivots. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.update. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.subrange. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.can_insert. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.insert. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.bounded_key. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.route. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.route_lemma. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.route_is_lemma. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_split_key. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%0.arrow_e. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_key. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_element. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.min_elem. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.is_sorted. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.largest_lte. FuelId)
(declare-const fuel%lib!spec.Messages_t.default_value. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.combine_deltas. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.apply_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.merge. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.spec_le. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.query. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.put. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.next. fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next. fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. fuel%lib!betree.BufferOffsets_v.impl&%0.len. fuel%lib!betree.BufferOffsets_v.impl&%0.slice. fuel%lib!betree.BufferOffsets_v.impl&%0.dup. fuel%lib!betree.BufferOffsets_v.impl&%0.update. fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte. fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left. fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. fuel%lib!betree.BufferSeq_v.impl&%0.empty. fuel%lib!betree.BufferSeq_v.impl&%0.len. fuel%lib!betree.BufferSeq_v.impl&%0.spec_index. fuel%lib!betree.BufferSeq_v.impl&%0.slice. fuel%lib!betree.BufferSeq_v.impl&%0.query_from. fuel%lib!betree.BufferSeq_v.impl&%0.query. fuel%lib!betree.BufferSeq_v.impl&%0.extend. fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange. fuel%lib!betree.BufferSeq_v.impl&%0.i_from. fuel%lib!betree.BufferSeq_v.impl&%0.i. fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer. fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered. fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. fuel%lib!betree.Buffer_v.impl&%0.query. fuel%lib!betree.Buffer_v.impl&%0.insert_ref. fuel%lib!betree.Buffer_v.impl&%0.is_empty. fuel%lib!betree.Buffer_v.impl&%1.query_internal. fuel%lib!betree.Buffer_v.impl&%1.apply_filter. fuel%lib!betree.Buffer_v.impl&%1.merge. fuel%lib!betree.Buffer_v.impl&%1.empty. fuel%lib!betree.Buffer_v.impl&%1.insert. fuel%lib!betree.Buffer_v.all_keys. fuel%lib!betree.Buffer_v.total_keys. fuel%lib!betree.Domain_v.impl&%0.arrow_end. fuel%lib!betree.Domain_v.impl&%0.arrow_start. fuel%lib!betree.Domain_v.total_domain. fuel%lib!betree.Domain_v.impl&%1.wf. fuel%lib!betree.Domain_v.impl&%1.contains. fuel%lib!betree.Domain_v.impl&%1.includes. fuel%lib!betree.Domain_v.impl&%1.key_set. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range. fuel%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%1.i. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%2.i. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%3.i. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%4.i. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.inv. fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.i. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_children. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_flushed. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_pivots. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_buffers. fuel%lib!betree.FilteredBetree_v.impl&%1.local_structure. fuel%lib!betree.FilteredBetree_v.impl&%1.valid_child_index. fuel%lib!betree.FilteredBetree_v.impl&%1.my_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.child_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.linked_children. fuel%lib!betree.FilteredBetree_v.impl&%1.wf_children. fuel%lib!betree.FilteredBetree_v.impl&%1.wf. fuel%lib!betree.FilteredBetree_v.impl&%1.push_memtable. fuel%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. fuel%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. fuel%lib!betree.FilteredBetree_v.impl&%1.is_leaf. fuel%lib!betree.FilteredBetree_v.impl&%1.is_index. fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_leaf. fuel%lib!betree.FilteredBetree_v.impl&%1.split_leaf. fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_index. fuel%lib!betree.FilteredBetree_v.impl&%1.split_index. fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_parent. fuel%lib!betree.FilteredBetree_v.impl&%1.split_parent. fuel%lib!betree.FilteredBetree_v.impl&%1.empty_root. fuel%lib!betree.FilteredBetree_v.impl&%1.grow. fuel%lib!betree.FilteredBetree_v.impl&%1.promote. fuel%lib!betree.FilteredBetree_v.impl&%1.can_flush. fuel%lib!betree.FilteredBetree_v.impl&%1.flush. fuel%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.can_compact. fuel%lib!betree.FilteredBetree_v.impl&%1.compact. fuel%lib!betree.FilteredBetree_v.impl&%1.key_in_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.child. fuel%lib!betree.FilteredBetree_v.impl&%1.make_offset_map. fuel%lib!betree.FilteredBetree_v.impl&%2.wf. fuel%lib!betree.FilteredBetree_v.impl&%3.structure. fuel%lib!betree.FilteredBetree_v.impl&%3.all_lines_wf. fuel%lib!betree.FilteredBetree_v.impl&%3.child_at. fuel%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. fuel%lib!betree.FilteredBetree_v.impl&%3.result_at. fuel%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. fuel%lib!betree.FilteredBetree_v.impl&%3.valid. fuel%lib!betree.FilteredBetree_v.impl&%3.result. fuel%lib!betree.FilteredBetree_v.impl&%3.valid_for. fuel%lib!betree.FilteredBetree_v.impl&%4.subpath. fuel%lib!betree.FilteredBetree_v.impl&%4.valid. fuel%lib!betree.FilteredBetree_v.impl&%4.target. fuel%lib!betree.FilteredBetree_v.impl&%4.can_substitute. fuel%lib!betree.FilteredBetree_v.impl&%4.replaced_children. fuel%lib!betree.FilteredBetree_v.impl&%4.substitute. fuel%lib!betree.Memtable_v.impl&%0.query. fuel%lib!betree.Memtable_v.impl&%0.is_empty. fuel%lib!betree.Memtable_v.impl&%0.apply_put. fuel%lib!betree.Memtable_v.impl&%0.apply_puts. fuel%lib!betree.Memtable_v.impl&%1.empty_memtable. fuel%lib!betree.Memtable_v.impl&%1.drain. fuel%lib!betree.OffsetMap_v.impl&%0.is_total. fuel%lib!betree.OffsetMap_v.impl&%0.active_keys. fuel%lib!betree.OffsetMap_v.impl&%0.decrement. fuel%lib!betree.PivotBetree_v.impl&%0.arrow_buffer. fuel%lib!betree.PivotBetree_v.impl&%0.arrow_pivots. fuel%lib!betree.PivotBetree_v.impl&%0.arrow_children. fuel%lib!betree.PivotBetree_v.impl&%1.local_structure. fuel%lib!betree.PivotBetree_v.impl&%1.valid_child_index. fuel%lib!betree.PivotBetree_v.impl&%1.my_domain. fuel%lib!betree.PivotBetree_v.impl&%1.child_domain. fuel%lib!betree.PivotBetree_v.impl&%1.linked_children. fuel%lib!betree.PivotBetree_v.impl&%1.wf_children. fuel%lib!betree.PivotBetree_v.impl&%1.wf. fuel%lib!betree.PivotBetree_v.impl&%1.merge_buffer. fuel%lib!betree.PivotBetree_v.impl&%1.push_memtable. fuel%lib!betree.PivotBetree_v.impl&%1.is_leaf. fuel%lib!betree.PivotBetree_v.impl&%1.is_index. fuel%lib!betree.PivotBetree_v.impl&%1.can_split_leaf. fuel%lib!betree.PivotBetree_v.impl&%1.split_leaf. fuel%lib!betree.PivotBetree_v.impl&%1.can_split_index. fuel%lib!betree.PivotBetree_v.impl&%1.split_index. fuel%lib!betree.PivotBetree_v.impl&%1.can_split_parent. fuel%lib!betree.PivotBetree_v.impl&%1.split_parent. fuel%lib!betree.PivotBetree_v.impl&%1.empty_root. fuel%lib!betree.PivotBetree_v.impl&%1.grow. fuel%lib!betree.PivotBetree_v.impl&%1.promote. fuel%lib!betree.PivotBetree_v.impl&%1.can_flush. fuel%lib!betree.PivotBetree_v.impl&%1.flush. fuel%lib!betree.PivotBetree_v.impl&%1.key_in_domain. fuel%lib!betree.PivotBetree_v.impl&%1.child. fuel%lib!betree.PivotBetree_v.impl&%2.wf. fuel%lib!betree.PivotBetree_v.impl&%3.structure. fuel%lib!betree.PivotBetree_v.impl&%3.all_lines_wf. fuel%lib!betree.PivotBetree_v.impl&%3.child_at. fuel%lib!betree.PivotBetree_v.impl&%3.child_linked_at. fuel%lib!betree.PivotBetree_v.impl&%3.result_at. fuel%lib!betree.PivotBetree_v.impl&%3.result_linked_at. fuel%lib!betree.PivotBetree_v.impl&%3.valid. fuel%lib!betree.PivotBetree_v.impl&%3.result. fuel%lib!betree.PivotBetree_v.impl&%3.valid_for. fuel%lib!betree.PivotBetree_v.impl&%4.subpath. fuel%lib!betree.PivotBetree_v.impl&%4.valid. fuel%lib!betree.PivotBetree_v.impl&%4.target. fuel%lib!betree.PivotBetree_v.impl&%4.can_substitute. fuel%lib!betree.PivotBetree_v.impl&%4.replaced_children. fuel%lib!betree.PivotBetree_v.impl&%4.substitute. fuel%lib!betree.PivotTable_v.domain_to_pivots. fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. fuel%lib!betree.PivotTable_v.impl&%0.wf. fuel%lib!betree.PivotTable_v.impl&%0.len. fuel%lib!betree.PivotTable_v.impl&%0.update. fuel%lib!betree.PivotTable_v.impl&%0.subrange. fuel%lib!betree.PivotTable_v.impl&%0.can_insert. fuel%lib!betree.PivotTable_v.impl&%0.insert. fuel%lib!betree.PivotTable_v.impl&%0.bounded_key. fuel%lib!betree.PivotTable_v.impl&%0.route. fuel%lib!betree.PivotTable_v.impl&%0.route_lemma. fuel%lib!betree.PivotTable_v.impl&%0.route_is_lemma. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_split_key. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx. fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx. fuel%lib!spec.KeyType_t.impl&%0.arrow_e. fuel%lib!spec.KeyType_t.to_key. fuel%lib!spec.KeyType_t.to_element. fuel%lib!spec.KeyType_t.impl&%1.lte. fuel%lib!spec.KeyType_t.impl&%2.lte. fuel%lib!spec.KeyType_t.impl&%2.lt. fuel%lib!spec.KeyType_t.impl&%2.min_elem. fuel%lib!spec.KeyType_t.impl&%2.is_sorted. fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. fuel%lib!spec.KeyType_t.impl&%2.largest_lte. fuel%lib!spec.Messages_t.default_value. fuel%lib!spec.Messages_t.nop_delta. fuel%lib!spec.Messages_t.impl&%1.combine_deltas. fuel%lib!spec.Messages_t.impl&%1.apply_delta. fuel%lib!spec.Messages_t.impl&%1.merge. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.route_lemma.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.KeyType_t.Element.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!betree.PivotBetree_v.PivotBetree.State. 0) (lib!betree.PivotBetree_v.PivotBetree.Step. 0) (lib!betree.PivotBetree_v.PivotBetree.Label. 0) (lib!betree.FilteredBetree_v.FilteredBetree.State. 0) (lib!betree.FilteredBetree_v.FilteredBetree.Step. 0) (lib!betree.FilteredBetree_v.FilteredBetree.Label. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!abstract_system.StampedMap_v.Stamped. 0) (lib!betree.BufferOffsets_v.BufferOffsets. 0) (lib!betree.BufferSeq_v.BufferSeq. 0) (lib!betree.Buffer_v.SimpleBuffer. 0) (lib!betree.Domain_v.Domain. 0) (lib!betree.FilteredBetree_v.BetreeNode. 0) (lib!betree.FilteredBetree_v.QueryReceiptLine. 0) (lib!betree.FilteredBetree_v.QueryReceipt. 0) (lib!betree.FilteredBetree_v.Path. 0) (lib!betree.Memtable_v.Memtable. 0) (lib!betree.OffsetMap_v.OffsetMap. 0) (lib!betree.PivotBetree_v.BetreeNode. 0) (lib!betree.PivotBetree_v.QueryReceiptLine. 0) (lib!betree.PivotBetree_v.QueryReceipt. 0) (lib!betree.PivotBetree_v.Path. 0) (lib!betree.PivotTable_v.PivotTable. 0) (lib!betree.SplitRequest_v.SplitRequest. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.KeyType_t.Element. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!betree.PivotBetree_v.PivotBetree.State./State (lib!betree.PivotBetree_v.PivotBetree.State./State/?memtable lib!betree.Memtable_v.Memtable.) (lib!betree.PivotBetree_v.PivotBetree.State./State/?root lib!betree.PivotBetree_v.BetreeNode.))) ((lib!betree.PivotBetree_v.PivotBetree.Step./query (lib!betree.PivotBetree_v.PivotBetree.Step./query/?0 lib!betree.PivotBetree_v.QueryReceipt.)) (lib!betree.PivotBetree_v.PivotBetree.Step./put ) (lib!betree.PivotBetree_v.PivotBetree.Step./freeze_as ) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_memtable ) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_grow ) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/?0 lib!betree.PivotBetree_v.Path.) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/?1 lib!betree.SplitRequest_v.SplitRequest.)) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/?0 lib!betree.PivotBetree_v.Path.) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/?1 Int)) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_noop ) (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/?0 lib!betree.PivotBetree_v.PivotBetree.State.))) ((lib!betree.PivotBetree_v.PivotBetree.Label./Query (lib!betree.PivotBetree_v.PivotBetree.Label./Query/?end_lsn Int) (lib!betree.PivotBetree_v.PivotBetree.Label./Query/?key lib!spec.KeyType_t.Key.) (lib!betree.PivotBetree_v.PivotBetree.Label./Query/?value lib!spec.Messages_t.Value.)) (lib!betree.PivotBetree_v.PivotBetree.Label./Put (lib!betree.PivotBetree_v.PivotBetree.Label./Put/?puts lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/?stamped_betree lib!abstract_system.StampedMap_v.Stamped.)) (lib!betree.PivotBetree_v.PivotBetree.Label./Internal )) ((lib!betree.FilteredBetree_v.FilteredBetree.State./State (lib!betree.FilteredBetree_v.FilteredBetree.State./State/?memtable lib!betree.Memtable_v.Memtable.) (lib!betree.FilteredBetree_v.FilteredBetree.State./State/?root lib!betree.FilteredBetree_v.BetreeNode.))) ((lib!betree.FilteredBetree_v.FilteredBetree.Step./query (lib!betree.FilteredBetree_v.FilteredBetree.Step./query/?0 lib!betree.FilteredBetree_v.QueryReceipt.)) (lib!betree.FilteredBetree_v.FilteredBetree.Step./put ) (lib!betree.FilteredBetree_v.FilteredBetree.Step./freeze_as ) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_memtable ) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_grow ) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/?0 lib!betree.FilteredBetree_v.Path.) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/?1 lib!betree.SplitRequest_v.SplitRequest.)) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/?0 lib!betree.FilteredBetree_v.Path.) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/?1 Int) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/?2 Int)) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?0 lib!betree.FilteredBetree_v.Path.) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?1 Int) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?2 Int) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?3 lib!betree.Buffer_v.SimpleBuffer.)) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_noop ) (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/?0 lib!betree.FilteredBetree_v.FilteredBetree.State.))) ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/?end_lsn Int) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/?key lib!spec.KeyType_t.Key.) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/?value lib!spec.Messages_t.Value.)) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/?puts lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/?stamped_betree lib!abstract_system.StampedMap_v.Stamped.)) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal )) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!abstract_system.StampedMap_v.Stamped./Stamped (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value Poly) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end Int))) ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets vstd!seq.Seq<nat.>.))) ((lib!betree.BufferSeq_v.BufferSeq./BufferSeq (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/?buffers vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.))) ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((lib!betree.Domain_v.Domain./EmptyDomain ) (lib!betree.Domain_v.Domain./Domain (lib!betree.Domain_v.Domain./Domain/?start lib!spec.KeyType_t.Element.) (lib!betree.Domain_v.Domain./Domain/?end lib!spec.KeyType_t.Element.))) ((lib!betree.FilteredBetree_v.BetreeNode./Nil ) (lib!betree.FilteredBetree_v.BetreeNode./Node (lib!betree.FilteredBetree_v.BetreeNode./Node/?buffers lib!betree.BufferSeq_v.BufferSeq.) (lib!betree.FilteredBetree_v.BetreeNode./Node/?pivots lib!betree.PivotTable_v.PivotTable.) (lib!betree.FilteredBetree_v.BetreeNode./Node/?children vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.) (lib!betree.FilteredBetree_v.BetreeNode./Node/?flushed lib!betree.BufferOffsets_v.BufferOffsets.))) ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?node lib!betree.FilteredBetree_v.BetreeNode.) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?result lib!spec.Messages_t.Message.))) ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?key lib!spec.KeyType_t.Key.) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?root lib!betree.FilteredBetree_v.BetreeNode.) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?lines vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.))) ((lib!betree.FilteredBetree_v.Path./Path (lib!betree.FilteredBetree_v.Path./Path/?node lib!betree.FilteredBetree_v.BetreeNode.) (lib!betree.FilteredBetree_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.FilteredBetree_v.Path./Path/?depth Int))) ((lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Memtable_v.Memtable./Memtable/?buffer Poly) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end Int))) ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.))) ((lib!betree.PivotBetree_v.BetreeNode./Nil ) (lib!betree.PivotBetree_v.BetreeNode./Node (lib!betree.PivotBetree_v.BetreeNode./Node/?buffer lib!betree.Buffer_v.SimpleBuffer.) (lib!betree.PivotBetree_v.BetreeNode./Node/?pivots lib!betree.PivotTable_v.PivotTable.) (lib!betree.PivotBetree_v.BetreeNode./Node/?children vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.))) ((lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/?node lib!betree.PivotBetree_v.BetreeNode.) (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/?result lib!spec.Messages_t.Message.))) ((lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/?key lib!spec.KeyType_t.Key.) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/?root lib!betree.PivotBetree_v.BetreeNode.) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/?lines vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.))) ((lib!betree.PivotBetree_v.Path./Path (lib!betree.PivotBetree_v.Path./Path/?node lib!betree.PivotBetree_v.BetreeNode.) (lib!betree.PivotBetree_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.PivotBetree_v.Path./Path/?depth Int))) ((lib!betree.PivotTable_v.PivotTable./PivotTable (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots vstd!seq.Seq<lib!spec.KeyType_t.Element.>.))) ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key lib!spec.KeyType_t.Key.)) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.KeyType_t.Element./Max ) (lib!spec.KeyType_t.Element./Elem (lib!spec.KeyType_t.Element./Elem/?e Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (lib!betree.PivotBetree_v.PivotBetree.State.) lib!betree.Memtable_v.Memtable.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.State./State/root (lib!betree.PivotBetree_v.PivotBetree.State.) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Step./query/0 (lib!betree.PivotBetree_v.PivotBetree.Step.) lib!betree.PivotBetree_v.QueryReceipt.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/0 (lib!betree.PivotBetree_v.PivotBetree.Step.) lib!betree.PivotBetree_v.Path.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/1 (lib!betree.PivotBetree_v.PivotBetree.Step.) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/0 (lib!betree.PivotBetree_v.PivotBetree.Step.) lib!betree.PivotBetree_v.Path.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/1 (lib!betree.PivotBetree_v.PivotBetree.Step.) Int)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/0 (lib!betree.PivotBetree_v.PivotBetree.Step.) lib!betree.PivotBetree_v.PivotBetree.State.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn (lib!betree.PivotBetree_v.PivotBetree.Label.) Int)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Label./Query/key (lib!betree.PivotBetree_v.PivotBetree.Label.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Label./Query/value (lib!betree.PivotBetree_v.PivotBetree.Label.) lib!spec.Messages_t.Value.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts (lib!betree.PivotBetree_v.PivotBetree.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree (lib!betree.PivotBetree_v.PivotBetree.Label.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (lib!betree.FilteredBetree_v.FilteredBetree.State.) lib!betree.Memtable_v.Memtable.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (lib!betree.FilteredBetree_v.FilteredBetree.State.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./query/0 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.FilteredBetree_v.QueryReceipt.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/0 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.FilteredBetree_v.Path.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/1 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/0 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.FilteredBetree_v.Path.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/1 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) Int)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/2 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) Int)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/0 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.FilteredBetree_v.Path.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/1 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) Int)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/2 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) Int)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/3 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/0 (lib!betree.FilteredBetree_v.FilteredBetree.Step.) lib!betree.FilteredBetree_v.FilteredBetree.State.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn (lib!betree.FilteredBetree_v.FilteredBetree.Label.) Int)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key (lib!betree.FilteredBetree_v.FilteredBetree.Label.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value (lib!betree.FilteredBetree_v.FilteredBetree.Label.) lib!spec.Messages_t.Value.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts (lib!betree.FilteredBetree_v.FilteredBetree.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree (lib!betree.FilteredBetree_v.FilteredBetree.Label.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/value (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (lib!abstract_system.StampedMap_v.Stamped.) Int)
(declare-fun lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (lib!betree.BufferOffsets_v.BufferOffsets.) vstd!seq.Seq<nat.>.)
(declare-fun lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (lib!betree.BufferSeq_v.BufferSeq.) vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (lib!betree.Buffer_v.SimpleBuffer.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.Domain_v.Domain./Domain/start (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.Domain_v.Domain./Domain/end (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (lib!betree.FilteredBetree_v.BetreeNode.) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (lib!betree.FilteredBetree_v.BetreeNode.) lib!betree.PivotTable_v.PivotTable.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/children (lib!betree.FilteredBetree_v.BetreeNode.) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (lib!betree.FilteredBetree_v.BetreeNode.) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (lib!betree.FilteredBetree_v.QueryReceiptLine.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (lib!betree.FilteredBetree_v.QueryReceiptLine.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (lib!betree.FilteredBetree_v.QueryReceipt.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root (lib!betree.FilteredBetree_v.QueryReceipt.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (lib!betree.FilteredBetree_v.QueryReceipt.) vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)
(declare-fun lib!betree.FilteredBetree_v.Path./Path/node (lib!betree.FilteredBetree_v.Path.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.Path./Path/key (lib!betree.FilteredBetree_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.FilteredBetree_v.Path./Path/depth (lib!betree.FilteredBetree_v.Path.) Int)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/buffer (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/seq_end (lib!betree.Memtable_v.Memtable.) Int)
(declare-fun lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (lib!betree.OffsetMap_v.OffsetMap.) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun lib!betree.PivotBetree_v.BetreeNode./Node/buffer (lib!betree.PivotBetree_v.BetreeNode.) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.PivotBetree_v.BetreeNode./Node/pivots (lib!betree.PivotBetree_v.BetreeNode.) lib!betree.PivotTable_v.PivotTable.)
(declare-fun lib!betree.PivotBetree_v.BetreeNode./Node/children (lib!betree.PivotBetree_v.BetreeNode.) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(declare-fun lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (lib!betree.PivotBetree_v.QueryReceiptLine.) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (lib!betree.PivotBetree_v.QueryReceiptLine.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (lib!betree.PivotBetree_v.QueryReceipt.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/root (lib!betree.PivotBetree_v.QueryReceipt.) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (lib!betree.PivotBetree_v.QueryReceipt.) vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.)
(declare-fun lib!betree.PivotBetree_v.Path./Path/node (lib!betree.PivotBetree_v.Path.) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.PivotBetree_v.Path./Path/key (lib!betree.PivotBetree_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBetree_v.Path./Path/depth (lib!betree.PivotBetree_v.Path.) Int)
(declare-fun lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (lib!betree.PivotTable_v.PivotTable.) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (lib!betree.SplitRequest_v.SplitRequest.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.KeyType_t.Element./Elem/e (lib!spec.KeyType_t.Element.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!betree.PivotBetree_v.PivotBetree.State. Type)
(declare-const TYPE%lib!betree.PivotBetree_v.PivotBetree.Step. Type)
(declare-const TYPE%lib!betree.PivotBetree_v.PivotBetree.Label. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-fun TYPE%lib!abstract_system.StampedMap_v.Stamped. (Dcr Type) Type)
(declare-const TYPE%lib!betree.BufferOffsets_v.BufferOffsets. Type)
(declare-const TYPE%lib!betree.BufferSeq_v.BufferSeq. Type)
(declare-const TYPE%lib!betree.Buffer_v.SimpleBuffer. Type)
(declare-const TYPE%lib!betree.Domain_v.Domain. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.BetreeNode. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.QueryReceipt. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.Path. Type)
(declare-fun TYPE%lib!betree.Memtable_v.Memtable. (Dcr Type) Type)
(declare-const TYPE%lib!betree.OffsetMap_v.OffsetMap. Type)
(declare-const TYPE%lib!betree.PivotBetree_v.BetreeNode. Type)
(declare-const TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. Type)
(declare-const TYPE%lib!betree.PivotBetree_v.QueryReceipt. Type)
(declare-const TYPE%lib!betree.PivotBetree_v.Path. Type)
(declare-const TYPE%lib!betree.PivotTable_v.PivotTable. Type)
(declare-const TYPE%lib!betree.SplitRequest_v.SplitRequest. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.KeyType_t.Element. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (Poly) vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (Poly) vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq<lib!spec.KeyType_t.Element.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!betree.PivotBetree_v.PivotBetree.State. (lib!betree.PivotBetree_v.PivotBetree.State.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.PivotBetree.State. (Poly) lib!betree.PivotBetree_v.PivotBetree.State.)
(declare-fun Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (Poly) lib!betree.PivotBetree_v.PivotBetree.Step.)
(declare-fun Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly) lib!betree.PivotBetree_v.PivotBetree.Label.)
(declare-fun Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (lib!betree.FilteredBetree_v.FilteredBetree.State.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (Poly) lib!betree.FilteredBetree_v.FilteredBetree.State.)
(declare-fun Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (Poly) lib!betree.FilteredBetree_v.FilteredBetree.Step.)
(declare-fun Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly) lib!betree.FilteredBetree_v.FilteredBetree.Label.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun %Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets.) Poly)
(declare-fun %Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.BufferSeq.) Poly)
(declare-fun %Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.SimpleBuffer.) Poly)
(declare-fun %Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain.) Poly)
(declare-fun %Poly%lib!betree.Domain_v.Domain. (Poly) lib!betree.Domain_v.Domain.)
(declare-fun Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.BetreeNode.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (lib!betree.FilteredBetree_v.QueryReceiptLine.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly) lib!betree.FilteredBetree_v.QueryReceiptLine.)
(declare-fun Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.QueryReceipt.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.QueryReceipt. (Poly) lib!betree.FilteredBetree_v.QueryReceipt.)
(declare-fun Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.Path.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.Path. (Poly) lib!betree.FilteredBetree_v.Path.)
(declare-fun Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun %Poly%lib!betree.Memtable_v.Memtable. (Poly) lib!betree.Memtable_v.Memtable.)
(declare-fun Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.OffsetMap_v.OffsetMap.) Poly)
(declare-fun %Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(declare-fun Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.BetreeNode.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (lib!betree.PivotBetree_v.QueryReceiptLine.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly) lib!betree.PivotBetree_v.QueryReceiptLine.)
(declare-fun Poly%lib!betree.PivotBetree_v.QueryReceipt. (lib!betree.PivotBetree_v.QueryReceipt.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.QueryReceipt. (Poly) lib!betree.PivotBetree_v.QueryReceipt.)
(declare-fun Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.Path.) Poly)
(declare-fun %Poly%lib!betree.PivotBetree_v.Path. (Poly) lib!betree.PivotBetree_v.Path.)
(declare-fun Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.PivotTable.) Poly)
(declare-fun %Poly%lib!betree.PivotTable_v.PivotTable. (Poly) lib!betree.PivotTable_v.PivotTable.)
(declare-fun Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest.) Poly)
(declare-fun %Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Element. (Poly) lib!spec.KeyType_t.Element.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (= x (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (= x (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) (= x (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.)) (= x (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) (= x (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (= x (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.State.)) (! (= x (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. (Poly%lib!betree.PivotBetree_v.PivotBetree.State. x))) :pattern ((Poly%lib!betree.PivotBetree_v.PivotBetree.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.State.) (= x (Poly%lib!betree.PivotBetree_v.PivotBetree.State. (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.State.)) )))
(assert (forall ((_memtable! lib!betree.Memtable_v.Memtable.) (_root! lib!betree.PivotBetree_v.BetreeNode.)) (! (=> (has_type (Poly%lib!betree.Memtable_v.Memtable. _memtable!) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.State. (lib!betree.PivotBetree_v.PivotBetree.State./State _memtable! _root!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.State.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.State. (lib!betree.PivotBetree_v.PivotBetree.State./State _memtable! _root!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.State.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.State.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable x) (lib!betree.PivotBetree_v.PivotBetree.State./State/?memtable x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.State./State/memtable x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.State.) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. x))) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.State.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.State.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root x) (lib!betree.PivotBetree_v.PivotBetree.State./State/?root x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.State./State/root x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= x (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x))) :pattern ((Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (= x (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((_0! lib!betree.PivotBetree_v.QueryReceipt.)) (! (=> (has_type (Poly%lib!betree.PivotBetree_v.QueryReceipt. _0!) TYPE%lib!betree.PivotBetree_v.QueryReceipt.) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./query _0!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./query _0!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Step./query/0 x) (lib!betree.PivotBetree_v.PivotBetree.Step./query/?0 x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./query/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (has_type (Poly%lib!betree.PivotBetree_v.QueryReceipt. (lib!betree.PivotBetree_v.PivotBetree.Step./query/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x))) TYPE%lib!betree.PivotBetree_v.QueryReceipt.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./query/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. lib!betree.PivotBetree_v.PivotBetree.Step./put) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.))
(assert (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. lib!betree.PivotBetree_v.PivotBetree.Step./freeze_as) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.))
(assert (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_memtable) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.))
(assert (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. lib!betree.PivotBetree_v.PivotBetree.Step./internal_grow) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.))
(assert (forall ((_0! lib!betree.PivotBetree_v.Path.) (_1! lib!betree.SplitRequest_v.SplitRequest.)) (! (=> (and (has_type (Poly%lib!betree.PivotBetree_v.Path. _0!) TYPE%lib!betree.PivotBetree_v.Path.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. _1!) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split _0! _1!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split _0! _1!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/0 x) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/?0 x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (has_type (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x))) TYPE%lib!betree.PivotBetree_v.Path.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/1 x) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/?1 x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/1 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x))) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/1 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((_0! lib!betree.PivotBetree_v.Path.) (_1! Int)) (! (=> (and (has_type (Poly%lib!betree.PivotBetree_v.Path. _0!) TYPE%lib!betree.PivotBetree_v.Path.) (<= 0 _1!)) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush _0! _1!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush _0! _1!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/0 x) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/?0 x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (has_type (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x))) TYPE%lib!betree.PivotBetree_v.Path.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/1 x) (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/?1 x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (<= 0 (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/1 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/1 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. lib!betree.PivotBetree_v.PivotBetree.Step./internal_noop) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.))
(assert (forall ((_0! lib!betree.PivotBetree_v.PivotBetree.State.)) (! (=> (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.State. _0!) TYPE%lib!betree.PivotBetree_v.PivotBetree.State.) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params _0!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Step. (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params _0!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Step.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/0 x) (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.State. (lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x))) TYPE%lib!betree.PivotBetree_v.PivotBetree.State.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Label.)) (! (= x (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x))) :pattern ((Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.) (= x (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((_end_lsn! Int) (_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (<= 0 _end_lsn!) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label./Query _end_lsn! _key! _value!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label./Query _end_lsn! _key! _value!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Label.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn x) (lib!betree.PivotBetree_v.PivotBetree.Label./Query/?end_lsn x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.) (<= 0 (lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Label.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Label./Query/key x) (lib!betree.PivotBetree_v.PivotBetree.Label./Query/?key x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Query/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.PivotBetree.Label./Query/key (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Query/key (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Label.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Label./Query/value x) (lib!betree.PivotBetree_v.PivotBetree.Label./Query/?value x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Query/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!betree.PivotBetree_v.PivotBetree.Label./Query/value (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Query/value (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((_puts! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _puts!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label./Put _puts!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label./Put _puts!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Label.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts x) (lib!betree.PivotBetree_v.PivotBetree.Label./Put/?puts x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((_stamped_betree! lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _stamped_betree!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.)) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs _stamped_betree!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs _stamped_betree!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.PivotBetree.Label.)) (! (= (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree x) (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/?stamped_betree x)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. x)) (has_type x TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) )))
(assert (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lib!betree.PivotBetree_v.PivotBetree.Label./Internal) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.State.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.) (= x (Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.)) )))
(assert (forall ((_memtable! lib!betree.Memtable_v.Memtable.) (_root! lib!betree.FilteredBetree_v.BetreeNode.)) (! (=> (has_type (Poly%lib!betree.Memtable_v.Memtable. _memtable!) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (lib!betree.FilteredBetree_v.FilteredBetree.State./State _memtable! _root!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (lib!betree.FilteredBetree_v.FilteredBetree.State./State _memtable! _root!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.State.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable x) (lib!betree.FilteredBetree_v.FilteredBetree.State./State/?memtable x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. x))) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.State.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root x) (lib!betree.FilteredBetree_v.FilteredBetree.State./State/?root x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.State./State/root x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (= x (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((_0! lib!betree.FilteredBetree_v.QueryReceipt.)) (! (=> (has_type (Poly%lib!betree.FilteredBetree_v.QueryReceipt. _0!) TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./query _0!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./query _0!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./query/0 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./query/?0 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./query/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (has_type (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.FilteredBetree.Step./query/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./query/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. lib!betree.FilteredBetree_v.FilteredBetree.Step./put) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.))
(assert (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. lib!betree.FilteredBetree_v.FilteredBetree.Step./freeze_as) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.))
(assert (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_memtable) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.))
(assert (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_grow) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.))
(assert (forall ((_0! lib!betree.FilteredBetree_v.Path.) (_1! lib!betree.SplitRequest_v.SplitRequest.)) (! (=> (and (has_type (Poly%lib!betree.FilteredBetree_v.Path. _0!) TYPE%lib!betree.FilteredBetree_v.Path.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. _1!) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split _0! _1!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split _0! _1!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/0 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/?0 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) TYPE%lib!betree.FilteredBetree_v.Path.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/1 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/?1 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((_0! lib!betree.FilteredBetree_v.Path.) (_1! Int) (_2! Int)) (! (=> (and (has_type (Poly%lib!betree.FilteredBetree_v.Path. _0!) TYPE%lib!betree.FilteredBetree_v.Path.) (<= 0 _1!) (<= 0 _2!)) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush _0! _1! _2!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush _0! _1! _2!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/0 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/?0 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) TYPE%lib!betree.FilteredBetree_v.Path.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/1 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/?1 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (<= 0 (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/2 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/?2 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (<= 0 (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/2 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/2 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((_0! lib!betree.FilteredBetree_v.Path.) (_1! Int) (_2! Int) (_3! lib!betree.Buffer_v.SimpleBuffer.)) (! (=> (and (has_type (Poly%lib!betree.FilteredBetree_v.Path. _0!) TYPE%lib!betree.FilteredBetree_v.Path.) (<= 0 _1!) (<= 0 _2!)) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact _0! _1! _2! _3!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact _0! _1! _2! _3!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/0 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?0 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) TYPE%lib!betree.FilteredBetree_v.Path.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/1 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?1 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (<= 0 (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/2 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?2 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (<= 0 (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/2 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/2 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/3 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/?3 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/3 x)) )))
(assert (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_noop) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.))
(assert (forall ((_0! lib!betree.FilteredBetree_v.FilteredBetree.State.)) (! (=> (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. _0!) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params _0!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params _0!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Step.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/0 x) (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. (lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x))) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Label.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (= x (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((_end_lsn! Int) (_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (<= 0 _end_lsn!) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query _end_lsn! _key! _value!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query _end_lsn! _key! _value!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Label.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn x) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/?end_lsn x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (<= 0 (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Label.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key x) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/?key x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Label.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value x) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/?value x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((_puts! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _puts!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put _puts!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put _puts!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Label.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts x) (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/?puts x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((_stamped_betree! lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _stamped_betree!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs _stamped_betree!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs _stamped_betree!)) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.FilteredBetree.Label.)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree x) (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/?stamped_betree x)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.)) )))
(assert (has_type (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal) TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= x (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. x))) :pattern ((Poly%lib!abstract_system.StampedMap_v.Stamped. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (= x (Poly%lib!abstract_system.StampedMap_v.Stamped. (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! Poly) (_seq_end! Int)) (! (=> (and (has_type _value! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) :pattern ((has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (has_type (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) T&)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (<= 0 (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(define-fun is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ ((c lib!abstract_system.StampedMap_v.Stamped.)) Bool ((_ is lib!abstract_system.StampedMap_v.Stamped./Stamped) c))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ x) (height_lt (height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) (height (Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x))) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= x (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) :pattern ((Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (= x (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)))) :pattern ((has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets x)) :pattern ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) :pattern ((has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (has_type y TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (ext_eq deep (TYPE%vstd!seq.Seq. $ NAT) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. y))))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (= x (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. x))) :pattern ((Poly%lib!betree.BufferSeq_v.BufferSeq. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.) (= x (Poly%lib!betree.BufferSeq_v.BufferSeq. (%Poly%lib!betree.BufferSeq_v.BufferSeq. x)))) :pattern ((has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (= (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers x) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/?buffers x)) :pattern ((lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers x)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (has_type (Poly%lib!betree.BufferSeq_v.BufferSeq. x) TYPE%lib!betree.BufferSeq_v.BufferSeq.) :pattern ((has_type (Poly%lib!betree.BufferSeq_v.BufferSeq. x) TYPE%lib!betree.BufferSeq_v.BufferSeq.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type y TYPE%lib!betree.BufferSeq_v.BufferSeq.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. x))) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. y))))) (ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. x y)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= x (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. x))) :pattern ((Poly%lib!betree.Buffer_v.SimpleBuffer. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (= x (Poly%lib!betree.Buffer_v.SimpleBuffer. (%Poly%lib!betree.Buffer_v.SimpleBuffer. x)))) :pattern ((has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map x)) :pattern ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.) :pattern ((has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type y TYPE%lib!betree.Buffer_v.SimpleBuffer.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. y))))) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) :pattern ((ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= x (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. x))) :pattern ((Poly%lib!betree.Domain_v.Domain. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (= x (Poly%lib!betree.Domain_v.Domain. (%Poly%lib!betree.Domain_v.Domain. x)))) :pattern ((has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (has_type (Poly%lib!betree.Domain_v.Domain. lib!betree.Domain_v.Domain./EmptyDomain) TYPE%lib!betree.Domain_v.Domain.))
(assert (forall ((_start! lib!spec.KeyType_t.Element.) (_end! lib!spec.KeyType_t.Element.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Element. _start!) TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Element. _end!) TYPE%lib!spec.KeyType_t.Element.)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/start x) (lib!betree.Domain_v.Domain./Domain/?start x)) :pattern ((lib!betree.Domain_v.Domain./Domain/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/end x) (lib!betree.Domain_v.Domain./Domain/?end x)) :pattern ((lib!betree.Domain_v.Domain./Domain/end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= x (Poly%lib!betree.FilteredBetree_v.BetreeNode. (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?buffers x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/buffers x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?pivots x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/pivots x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/children x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?children x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/children x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?flushed x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/flushed x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (has_type (Poly%lib!betree.FilteredBetree_v.BetreeNode. x) TYPE%lib!betree.FilteredBetree_v.BetreeNode.) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.BetreeNode. x) TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) )))
(define-fun is-lib!betree.FilteredBetree_v.BetreeNode./Node_ ((c lib!betree.FilteredBetree_v.BetreeNode.)) Bool ((_ is lib!betree.FilteredBetree_v.BetreeNode./Node) c))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children x))) (height (Poly%lib!betree.FilteredBetree_v.BetreeNode. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children x)))) )))
(define-fun is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ ((c lib!betree.FilteredBetree_v.BetreeNode.)) Bool ((_ is lib!betree.FilteredBetree_v.BetreeNode./Nil) c))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))) (ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y)) (ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x))) (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y)))) (= (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))) (= (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x))) (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))))) (ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceiptLine.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.) (= x (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) )))
(assert (forall ((_node! lib!betree.FilteredBetree_v.BetreeNode.) (_result! lib!spec.Messages_t.Message.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Message. _result!) TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceiptLine.)) (! (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node x) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?node x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceiptLine.)) (! (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result x) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?result x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. (Poly%lib!betree.FilteredBetree_v.QueryReceipt. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.QueryReceipt. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (= x (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_root! lib!betree.FilteredBetree_v.BetreeNode.) (_lines! vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key x) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?key x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root x) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?root x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines x) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?lines x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.Path. (Poly%lib!betree.FilteredBetree_v.Path. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.Path. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.Path.) (= x (Poly%lib!betree.FilteredBetree_v.Path. (%Poly%lib!betree.FilteredBetree_v.Path. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((_node! lib!betree.FilteredBetree_v.BetreeNode.) (_key! lib!spec.KeyType_t.Key.) (_depth! Int)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (<= 0 _depth!)) (has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.FilteredBetree_v.Path.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= (lib!betree.FilteredBetree_v.Path./Path/node x) (lib!betree.FilteredBetree_v.Path./Path/?node x)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/node x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= (lib!betree.FilteredBetree_v.Path./Path/key x) (lib!betree.FilteredBetree_v.Path./Path/?key x)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.Path.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= (lib!betree.FilteredBetree_v.Path./Path/depth x) (lib!betree.FilteredBetree_v.Path./Path/?depth x)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/depth x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.Path.) (<= 0 (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. x)))) :pattern ((lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= x (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. x))) :pattern ((Poly%lib!betree.Memtable_v.Memtable. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (= x (Poly%lib!betree.Memtable_v.Memtable. (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_buffer! Poly) (_seq_end! Int)) (! (=> (and (has_type _buffer! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/buffer x) (lib!betree.Memtable_v.Memtable./Memtable/?buffer x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) T&)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end x) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (<= 0 (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(define-fun is-lib!betree.Memtable_v.Memtable./Memtable_ ((c lib!betree.Memtable_v.Memtable.)) Bool ((_ is lib!betree.Memtable_v.Memtable./Memtable) c))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (=> (is-lib!betree.Memtable_v.Memtable./Memtable_ x) (height_lt (height (lib!betree.Memtable_v.Memtable./Memtable/buffer x)) (height (Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((height (lib!betree.Memtable_v.Memtable./Memtable/buffer x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type y (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (ext_eq deep T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. y))) (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. y)))) (ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= x (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. x))) :pattern ((Poly%lib!betree.OffsetMap_v.OffsetMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (= x (Poly%lib!betree.OffsetMap_v.OffsetMap. (%Poly%lib!betree.OffsetMap_v.OffsetMap. x)))) :pattern ((has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets x)) :pattern ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.) :pattern ((has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type y TYPE%lib!betree.OffsetMap_v.OffsetMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. y))))) (ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) :pattern ((ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) )))
(assert (forall ((x lib!betree.PivotBetree_v.BetreeNode.)) (! (= x (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. x))) :pattern ((Poly%lib!betree.PivotBetree_v.BetreeNode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.BetreeNode.) (= x (Poly%lib!betree.PivotBetree_v.BetreeNode. (%Poly%lib!betree.PivotBetree_v.BetreeNode. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.BetreeNode.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.BetreeNode.)) (! (= (lib!betree.PivotBetree_v.BetreeNode./Node/buffer x) (lib!betree.PivotBetree_v.BetreeNode./Node/?buffer x)) :pattern ((lib!betree.PivotBetree_v.BetreeNode./Node/buffer x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.BetreeNode.)) (! (= (lib!betree.PivotBetree_v.BetreeNode./Node/pivots x) (lib!betree.PivotBetree_v.BetreeNode./Node/?pivots x)) :pattern ((lib!betree.PivotBetree_v.BetreeNode./Node/pivots x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.BetreeNode.)) (! (= (lib!betree.PivotBetree_v.BetreeNode./Node/children x) (lib!betree.PivotBetree_v.BetreeNode./Node/?children x)) :pattern ((lib!betree.PivotBetree_v.BetreeNode./Node/children x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.BetreeNode.)) (! (has_type (Poly%lib!betree.PivotBetree_v.BetreeNode. x) TYPE%lib!betree.PivotBetree_v.BetreeNode.) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.BetreeNode. x) TYPE%lib!betree.PivotBetree_v.BetreeNode.)) )))
(define-fun is-lib!betree.PivotBetree_v.BetreeNode./Node_ ((c lib!betree.PivotBetree_v.BetreeNode.)) Bool ((_ is lib!betree.PivotBetree_v.BetreeNode./Node) c))
(assert (forall ((x lib!betree.PivotBetree_v.BetreeNode.)) (! (=> (is-lib!betree.PivotBetree_v.BetreeNode./Node_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children x))) (height (Poly%lib!betree.PivotBetree_v.BetreeNode. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children x)))) )))
(define-fun is-lib!betree.PivotBetree_v.BetreeNode./Nil_ ((c lib!betree.PivotBetree_v.BetreeNode.)) Bool ((_ is lib!betree.PivotBetree_v.BetreeNode./Nil) c))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.PivotBetree_v.BetreeNode.) (is-lib!betree.PivotBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. x)) (is-lib!betree.PivotBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. y))) (ext_eq deep TYPE%lib!betree.PivotBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBetree_v.BetreeNode. x y)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.PivotBetree_v.BetreeNode.) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. x)) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. y)) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. x))) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. y)))) (= (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. x)) (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. y))) (= (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. x)) (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. y)))) (ext_eq deep TYPE%lib!betree.PivotBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBetree_v.BetreeNode. x y)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceiptLine.)) (! (= x (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%lib!betree.PivotBetree_v.QueryReceiptLine. x))) :pattern ((Poly%lib!betree.PivotBetree_v.QueryReceiptLine. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.) (= x (Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) )))
(assert (forall ((_node! lib!betree.PivotBetree_v.BetreeNode.) (_result! lib!spec.Messages_t.Message.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Message. _result!) TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceiptLine.)) (! (= (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node x) (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/?node x)) :pattern ((lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceiptLine.)) (! (= (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result x) (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/?result x)) :pattern ((lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. x)) (has_type x TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceipt.)) (! (= x (%Poly%lib!betree.PivotBetree_v.QueryReceipt. (Poly%lib!betree.PivotBetree_v.QueryReceipt. x))) :pattern ((Poly%lib!betree.PivotBetree_v.QueryReceipt. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.QueryReceipt.) (= x (Poly%lib!betree.PivotBetree_v.QueryReceipt. (%Poly%lib!betree.PivotBetree_v.QueryReceipt. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.QueryReceipt.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_root! lib!betree.PivotBetree_v.BetreeNode.) (_lines! vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.PivotBetree_v.QueryReceipt. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.PivotBetree_v.QueryReceipt.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.QueryReceipt. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.PivotBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceipt.)) (! (= (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key x) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/?key x)) :pattern ((lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PivotBetree_v.QueryReceipt. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PivotBetree_v.QueryReceipt. x)) (has_type x TYPE%lib!betree.PivotBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceipt.)) (! (= (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/root x) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/?root x)) :pattern ((lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/root x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.QueryReceipt.)) (! (= (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines x) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/?lines x)) :pattern ((lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.Path.)) (! (= x (%Poly%lib!betree.PivotBetree_v.Path. (Poly%lib!betree.PivotBetree_v.Path. x))) :pattern ((Poly%lib!betree.PivotBetree_v.Path. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.Path.) (= x (Poly%lib!betree.PivotBetree_v.Path. (%Poly%lib!betree.PivotBetree_v.Path. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBetree_v.Path.)) )))
(assert (forall ((_node! lib!betree.PivotBetree_v.BetreeNode.) (_key! lib!spec.KeyType_t.Key.) (_depth! Int)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (<= 0 _depth!)) (has_type (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.PivotBetree_v.Path.)) :pattern ((has_type (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.PivotBetree_v.Path.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.Path.)) (! (= (lib!betree.PivotBetree_v.Path./Path/node x) (lib!betree.PivotBetree_v.Path./Path/?node x)) :pattern ((lib!betree.PivotBetree_v.Path./Path/node x)) )))
(assert (forall ((x lib!betree.PivotBetree_v.Path.)) (! (= (lib!betree.PivotBetree_v.Path./Path/key x) (lib!betree.PivotBetree_v.Path./Path/?key x)) :pattern ((lib!betree.PivotBetree_v.Path./Path/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.Path.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. x)) (has_type x TYPE%lib!betree.PivotBetree_v.Path.)) )))
(assert (forall ((x lib!betree.PivotBetree_v.Path.)) (! (= (lib!betree.PivotBetree_v.Path./Path/depth x) (lib!betree.PivotBetree_v.Path./Path/?depth x)) :pattern ((lib!betree.PivotBetree_v.Path./Path/depth x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBetree_v.Path.) (<= 0 (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. x)))) :pattern ((lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. x)) (has_type x TYPE%lib!betree.PivotBetree_v.Path.)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= x (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. x))) :pattern ((Poly%lib!betree.PivotTable_v.PivotTable. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotTable_v.PivotTable.) (= x (Poly%lib!betree.PivotTable_v.PivotTable. (%Poly%lib!betree.PivotTable_v.PivotTable. x)))) :pattern ((has_type x TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x) (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots x)) :pattern ((lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.) :pattern ((has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= x (%Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly%lib!betree.SplitRequest_v.SplitRequest. x))) :pattern ((Poly%lib!betree.SplitRequest_v.SplitRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (= x (Poly%lib!betree.SplitRequest_v.SplitRequest. (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_split_key! lib!spec.KeyType_t.Key.)) (! (=> (and (<= 0 _child_idx!) (has_type (Poly%lib!spec.KeyType_t.Key. _split_key!) TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_child_pivot_idx! Int)) (! (=> (and (<= 0 _child_idx!) (<= 0 _child_pivot_idx!)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= x (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. x))) :pattern ((Poly%lib!spec.KeyType_t.Element. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (= x (Poly%lib!spec.KeyType_t.Element. (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (has_type (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max) TYPE%lib!spec.KeyType_t.Element.))
(assert (forall ((_e! Int)) (! (=> (uInv 64 _e!) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= (lib!spec.KeyType_t.Element./Elem/e x) (lib!spec.KeyType_t.Element./Elem/?e x)) :pattern ((lib!spec.KeyType_t.Element./Elem/e x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)) (has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%lib!betree.Buffer_v.Buffer. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.Buffer_v.Buffer. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::spec_affirm")
(declare-fun vstd!pervasive.spec_affirm.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::default_value")
(declare-fun lib!spec.Messages_t.default_value.? (Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::spec_le")
(declare-fun vstd!map_lib.impl&%0.spec_le.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::structure")
(declare-fun lib!betree.PivotBetree_v.impl&%3.structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::num_ranges")
(declare-fun lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::lte")
(declare-fun lib!spec.KeyType_t.impl&%1.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::arrow_e")
(declare-fun lib!spec.KeyType_t.impl&%0.arrow_e.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::to_key")
(declare-fun lib!spec.KeyType_t.to_key.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::lte")
(declare-fun lib!spec.KeyType_t.impl&%2.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::lt")
(declare-fun lib!spec.KeyType_t.impl&%2.lt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::is_strictly_sorted")
(declare-fun lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::wf")
(declare-fun lib!betree.PivotTable_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::arrow_pivots")
(declare-fun lib!betree.PivotBetree_v.impl&%0.arrow_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::arrow_children")
(declare-fun lib!betree.PivotBetree_v.impl&%0.arrow_children.? (Poly) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::local_structure")
(declare-fun lib!betree.PivotBetree_v.impl&%1.local_structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::valid_child_index")
(declare-fun lib!betree.PivotBetree_v.impl&%1.valid_child_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::my_domain")
(declare-fun lib!betree.PivotBetree_v.impl&%1.my_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::child_domain")
(declare-fun lib!betree.PivotBetree_v.impl&%1.child_domain.? (Poly Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::linked_children")
(declare-fun lib!betree.PivotBetree_v.impl&%1.linked_children.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::wf_children")
(declare-fun lib!betree.PivotBetree_v.impl&%1.wf_children.? (Poly) Bool)
(declare-fun lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::wf")
(declare-fun lib!betree.PivotBetree_v.impl&%1.wf.? (Poly) Bool)
(declare-fun lib!betree.PivotBetree_v.impl&%1.rec%wf.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceiptLine::wf")
(declare-fun lib!betree.PivotBetree_v.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::to_element")
(declare-fun lib!spec.KeyType_t.to_element.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::bounded_key")
(declare-fun lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::key_in_domain")
(declare-fun lib!betree.PivotBetree_v.impl&%1.key_in_domain.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::all_lines_wf")
(declare-fun lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::largest_lte")
(declare-fun lib!spec.KeyType_t.impl&%2.largest_lte.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%2.rec%largest_lte.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::route")
(declare-fun lib!betree.PivotTable_v.impl&%0.route.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::child")
(declare-fun lib!betree.PivotBetree_v.impl&%1.child.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::child_at")
(declare-fun lib!betree.PivotBetree_v.impl&%3.child_at.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::child_linked_at")
(declare-fun lib!betree.PivotBetree_v.impl&%3.child_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::query")
(declare-fun lib!betree.Buffer_v.Buffer.query.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::insert_ref")
(declare-fun lib!betree.Buffer_v.Buffer.insert_ref.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.insert_ref%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::is_empty")
(declare-fun lib!betree.Buffer_v.Buffer.is_empty.? (Dcr Type Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.is_empty%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::nop_delta")
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::query_internal")
(declare-fun lib!betree.Buffer_v.impl&%1.query_internal.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::insert")
(declare-fun lib!betree.Buffer_v.impl&%1.insert.? (Poly Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::empty")
(declare-fun lib!betree.Buffer_v.impl&%1.empty.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::arrow_buffer")
(declare-fun lib!betree.PivotBetree_v.impl&%0.arrow_buffer.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::combine_deltas")
(declare-fun lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::apply_delta")
(declare-fun lib!spec.Messages_t.impl&%1.apply_delta.? (Poly Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::merge")
(declare-fun lib!spec.Messages_t.impl&%1.merge.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::result_at")
(declare-fun lib!betree.PivotBetree_v.impl&%3.result_at.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::result_linked_at")
(declare-fun lib!betree.PivotBetree_v.impl&%3.result_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::valid")
(declare-fun lib!betree.PivotBetree_v.impl&%3.valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::valid_for")
(declare-fun lib!betree.PivotBetree_v.impl&%3.valid_for.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::QueryReceipt::result")
(declare-fun lib!betree.PivotBetree_v.impl&%3.result.? (Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::query")
(declare-fun lib!betree.Memtable_v.impl&%0.query.? (Dcr Type Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::query")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.query.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::apply_put")
(declare-fun lib!betree.Memtable_v.impl&%0.apply_put.? (Dcr Type Poly Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::apply_puts")
(declare-fun lib!betree.Memtable_v.impl&%0.apply_puts.? (Dcr Type Poly Poly) lib!betree.Memtable_v.Memtable.)
(declare-fun lib!betree.Memtable_v.impl&%0.rec%apply_puts.? (Dcr Type Poly Poly Fuel) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::put")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.put.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::wf")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::is_empty")
(declare-fun lib!betree.Memtable_v.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::freeze_as")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::empty_memtable")
(declare-fun lib!betree.Memtable_v.impl&%1.empty_memtable.? (Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::drain")
(declare-fun lib!betree.Memtable_v.impl&%1.drain.? (Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::merge")
(declare-fun lib!betree.Buffer_v.impl&%1.merge.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::merge_buffer")
(declare-fun lib!betree.PivotBetree_v.impl&%1.merge_buffer.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::arrow_start")
(declare-fun lib!betree.Domain_v.impl&%0.arrow_start.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::arrow_end")
(declare-fun lib!betree.Domain_v.impl&%0.arrow_end.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::wf")
(declare-fun lib!betree.Domain_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::domain_to_pivots")
(declare-fun lib!betree.PivotTable_v.domain_to_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::empty_root")
(declare-fun lib!betree.PivotBetree_v.impl&%1.empty_root.? (Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::promote")
(declare-fun lib!betree.PivotBetree_v.impl&%1.promote.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::min_elem")
(declare-fun lib!spec.KeyType_t.impl&%2.min_elem.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::total_domain")
(declare-fun lib!betree.Domain_v.total_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::push_memtable")
(declare-fun lib!betree.PivotBetree_v.impl&%1.push_memtable.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::internal_flush_memtable")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::grow")
(declare-fun lib!betree.PivotBetree_v.impl&%1.grow.? (Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::internal_grow")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::is_index")
(declare-fun lib!betree.PivotBetree_v.impl&%1.is_index.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::Path::subpath")
(declare-fun lib!betree.PivotBetree_v.impl&%4.subpath.? (Poly) lib!betree.PivotBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::Path::valid")
(declare-fun lib!betree.PivotBetree_v.impl&%4.valid.? (Poly) Bool)
(declare-fun lib!betree.PivotBetree_v.impl&%4.rec%valid.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::is_leaf")
(declare-fun lib!betree.PivotBetree_v.impl&%1.is_leaf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::contains")
(declare-fun lib!betree.Domain_v.impl&%1.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::can_split_leaf")
(declare-fun lib!betree.PivotBetree_v.impl&%1.can_split_leaf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::can_split_index")
(declare-fun lib!betree.PivotBetree_v.impl&%1.can_split_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::can_split_parent")
(declare-fun lib!betree.PivotBetree_v.impl&%1.can_split_parent.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::Path::target")
(declare-fun lib!betree.PivotBetree_v.impl&%4.target.? (Poly) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.PivotBetree_v.impl&%4.rec%target.? (Poly Fuel) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::Path::can_substitute")
(declare-fun lib!betree.PivotBetree_v.impl&%4.can_substitute.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::Path::replaced_children")
(declare-fun lib!betree.PivotBetree_v.impl&%4.replaced_children.? (Poly Poly) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(declare-fun lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? (Poly Poly Fuel) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::Path::substitute")
(declare-fun lib!betree.PivotBetree_v.impl&%4.substitute.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.PivotBetree_v.impl&%4.rec%substitute.? (Poly Poly Fuel) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::apply_filter")
(declare-fun lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::key_set")
(declare-fun lib!betree.Domain_v.impl&%1.key_set.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::len")
(declare-fun lib!betree.PivotTable_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::update")
(declare-fun lib!betree.PivotTable_v.impl&%0.update.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::split_leaf")
(declare-fun lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::can_insert")
(declare-fun lib!betree.PivotTable_v.impl&%0.can_insert.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::insert")
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::insert")
(declare-fun lib!betree.PivotTable_v.impl&%0.insert.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::subrange")
(declare-fun lib!betree.PivotTable_v.impl&%0.subrange.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::split_index")
(declare-fun lib!betree.PivotBetree_v.impl&%1.split_index.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::split_parent")
(declare-fun lib!betree.PivotBetree_v.impl&%1.split_parent.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::internal_split")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::can_flush")
(declare-fun lib!betree.PivotBetree_v.impl&%1.can_flush.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::all_keys")
(declare-fun lib!betree.Buffer_v.all_keys.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::BetreeNode::flush")
(declare-fun lib!betree.PivotBetree_v.impl&%1.flush.? (Poly Poly) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::internal_flush")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::internal_noop")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::next_by")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::next")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotBetree_v::PivotBetree::State::initialize")
(declare-fun lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::total_keys")
(declare-fun lib!betree.Buffer_v.total_keys.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::len")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::all_lte")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::is_sorted")
(declare-fun lib!spec.KeyType_t.impl&%2.is_sorted.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::get_child_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%1.get_child_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::dup")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::slice")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::all_gte")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_gte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::update")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.update.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.shift_left.? (Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::decrement")
(declare-fun lib!betree.OffsetMap_v.impl&%0.decrement.? (Poly Poly) lib!betree.OffsetMap_v.OffsetMap.)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::is_total")
(declare-fun lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::structure")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_pivots")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_children.? (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_flushed")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_flushed.? (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::len")
(declare-fun lib!betree.BufferSeq_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_buffers")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_buffers.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::local_structure")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.local_structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::valid_child_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::my_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::child_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.child_domain.? (Poly Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::linked_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.linked_children.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::wf_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.wf_children.? (Poly) Bool)
(declare-fun lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::wf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly) Bool)
(declare-fun lib!betree.FilteredBetree_v.impl&%1.rec%wf.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceiptLine::wf")
(declare-fun lib!betree.FilteredBetree_v.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::key_in_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::all_lines_wf")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::child")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.child.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::child_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.child_at.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::child_linked_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.child_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::flushed_ofs")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::query_from")
(declare-fun lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%query_from.? (Poly Poly Poly Fuel) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::result_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.result_at.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::result_linked_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.result_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::valid")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::valid_for")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.valid_for.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::result")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.result.? (Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::query")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::put")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::wf")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::freeze_as")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::extend")
(declare-fun lib!betree.BufferSeq_v.impl&%0.extend.? (Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::empty")
(declare-fun lib!betree.BufferSeq_v.impl&%0.empty.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::empty_root")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.empty_root.? (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::promote")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.promote.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::push_memtable")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.push_memtable.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::internal_flush_memtable")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::grow")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.grow.? (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::internal_grow")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::is_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.is_index.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::subpath")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.subpath.? (Poly) lib!betree.FilteredBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::valid")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.valid.? (Poly) Bool)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%valid.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::is_leaf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.is_leaf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_split_leaf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_split_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_split_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_split_parent")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::target")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.target.? (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%target.? (Poly Fuel) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::can_substitute")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.can_substitute.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::replaced_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.replaced_children.? (Poly Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? (Poly Poly Fuel) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::substitute")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.substitute.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? (Poly Poly Fuel) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_leaf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.split_index.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_parent")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.split_parent.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::internal_split")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_flush")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_flush.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::slice")
(declare-fun lib!betree.BufferSeq_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::flush")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.flush.? (Poly Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::internal_flush")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::spec_index")
(declare-fun lib!betree.BufferSeq_v.impl&%0.spec_index.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::key_in_buffer")
(declare-fun lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::key_in_buffer_filtered")
(declare-fun lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::make_offset_map")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::valid_compact_key_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_compact")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_compact.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::update_subrange")
(declare-fun lib!betree.BufferSeq_v.impl&%0.update_subrange.? (Poly Poly Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::compact")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.compact.? (Poly Poly Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::internal_compact")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::internal_noop")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::next_by")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::next")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::initialize")
(declare-fun lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::query")
(declare-fun lib!betree.BufferSeq_v.impl&%0.query.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::i_from")
(declare-fun lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%i_from.? (Poly Poly Fuel) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::i")
(declare-fun lib!betree.BufferSeq_v.impl&%0.i.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::active_keys")
(declare-fun lib!betree.OffsetMap_v.impl&%0.active_keys.? (Poly Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::i_filtered_from")
(declare-fun lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? (Poly Poly Poly Fuel) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::i_filtered")
(declare-fun lib!betree.BufferSeq_v.impl&%0.i_filtered.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::includes")
(declare-fun lib!betree.Domain_v.impl&%1.includes.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::i_buffer")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::i_children")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children.? (Poly) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? (Poly Fuel) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::i")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly) lib!betree.PivotBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? (Poly Fuel) lib!betree.PivotBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::i_children_seq")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? (Poly Poly) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? (Poly Poly Fuel) vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::is_active_key")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::children_have_matching_domains")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_element")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.? (Poly Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::shared_keys_same_active_range")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetreeRefinement_v::i_stamped_betree")
(declare-fun lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.? (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceiptLine::i")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%1.i.? (Poly) lib!betree.PivotBetree_v.QueryReceiptLine.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::i")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%2.i.? (Poly) lib!betree.PivotBetree_v.QueryReceipt.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::i")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%3.i.? (Poly) lib!betree.PivotBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::Label::i")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%4.i.? (Poly) lib!betree.PivotBetree_v.PivotBetree.Label.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::inv")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%5.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::FilteredBetree::State::i")
(declare-fun lib!betree.FilteredBetreeRefinement_v.impl&%5.i.? (Poly) lib!betree.PivotBetree_v.PivotBetree.State.)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_split_key")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_split_key.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_child_pivot_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.? (Poly) Int)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%1 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::pervasive::spec_affirm")
(declare-fun req%vstd!pervasive.spec_affirm. (Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((b! Poly)) (! (= (req%vstd!pervasive.spec_affirm. b!) (=> %%global_location_label%%6 (%B b!))) :pattern ((req%vstd!pervasive.spec_affirm. b!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::default_value")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.default_value.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.default_value.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.default_value.? no%param) (lib!spec.Messages_t.Value./Value (%I (I 0)))) :pattern ((lib!spec.Messages_t.default_value.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? no%param)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.default_value.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!) (=> %%global_location_label%%8 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.))
(declare-fun %%lambda%%1 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%1 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I lsn!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) ))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.spec_le.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!) (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) :pattern ((vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%9 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::structure")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.structure.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.structure.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.structure.? self!) (and (and (and (< 0 (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))))) (= (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) (I 0)))) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))))) (= (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i$)))) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i$)) ))) (= (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.last.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? (I 0)))))))) :pattern ((lib!betree.PivotBetree_v.impl&%3.structure.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::num_ranges")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) 1)) :pattern ((lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Key::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lte.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (<= (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. a!)) (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::arrow_e")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%0.arrow_e.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%0.arrow_e.) (forall ((self! Poly)) (! (= (lib!spec.KeyType_t.impl&%0.arrow_e.? self!) (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.impl&%0.arrow_e.? self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) )))
(set-info :comment ";; Function-Specs lib::spec::KeyType_t::to_key")
(declare-fun req%lib!spec.KeyType_t.to_key. (Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(define-fun is-lib!spec.KeyType_t.Element./Elem_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Elem) c))
(assert (forall ((elem! Poly)) (! (= (req%lib!spec.KeyType_t.to_key. elem!) (=> %%global_location_label%%10 (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. elem!)))) :pattern ((req%lib!spec.KeyType_t.to_key. elem!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::to_key")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_key.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_key.) (forall ((elem! Poly)) (! (= (lib!spec.KeyType_t.to_key.? elem!) (lib!spec.KeyType_t.Key./Key (%I (I (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. elem!)))))) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) ))))
(assert (forall ((elem! Poly)) (! (=> (has_type elem! TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? elem!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lte.))
(define-fun is-lib!spec.KeyType_t.Element./Max_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Max) c))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (or (is-lib!spec.KeyType_t.Element./Max_ (%Poly%lib!spec.KeyType_t.Element. b!)) (and (and (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. a!)) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. b!))) (lib!spec.KeyType_t.impl&%1.lte.? (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? a!)) (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? b!)))))) :pattern ((lib!spec.KeyType_t.impl&%2.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::lt")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lt.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lt.? a! b!) (and (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (not (= a! b!)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::is_strictly_sorted")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::wf")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.wf.? self!) (and (and (> (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) 0) (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!))) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$)) )))) :pattern ((lib!betree.PivotTable_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::arrow_pivots")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%0.arrow_pivots.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%0.arrow_pivots.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%0.arrow_pivots.? self!) (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PivotBetree_v.impl&%0.arrow_pivots.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::arrow_children")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%0.arrow_children.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%0.arrow_children.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%0.arrow_children.? self!) (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PivotBetree_v.impl&%0.arrow_children.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::local_structure")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.local_structure.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.local_structure.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.local_structure.? self!) (=> (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)) (and (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.local_structure.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::valid_child_index")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.valid_child_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.valid_child_index.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! child_idx!) (and (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)) (< (%I child_idx!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! child_idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::my_domain")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.my_domain. (Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.my_domain. self!) (and (=> %%global_location_label%%11 (lib!betree.PivotBetree_v.impl&%1.local_structure.? self!)) (=> %%global_location_label%%12 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.my_domain. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::my_domain")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.my_domain.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.my_domain.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!) (let ((tmp%%$ (vstd!pervasive.spec_affirm.? (B (< 0 (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))))))) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))) (I 0))) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::child_domain")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.child_domain. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (child_idx! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.child_domain. self! child_idx!) (and (=> %%global_location_label%%13 (lib!betree.PivotBetree_v.impl&%1.local_structure.? self!)) (=> %%global_location_label%%14 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (=> %%global_location_label%%15 (and (<= 0 (%I child_idx!)) (< (%I child_idx!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.child_domain. self! child_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::child_domain")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.child_domain.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.child_domain.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.child_domain.? self! child_idx!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))) child_idx!)) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))) (I (Add (%I child_idx!) 1)))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.child_domain.? self! child_idx!)) ))))
(assert (forall ((self! Poly) (child_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (has_type child_idx! NAT)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.child_domain.? self! child_idx!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.PivotBetree_v.impl&%1.child_domain.? self! child_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::linked_children")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.linked_children. (Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.linked_children. self!) (and (=> %%global_location_label%%16 (lib!betree.PivotBetree_v.impl&%1.local_structure.? self!)) (=> %%global_location_label%%17 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.linked_children. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::linked_children")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.linked_children.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.linked_children.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.linked_children.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (and (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! i$) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) i$)))) (lib!betree.PivotBetree_v.impl&%1.local_structure.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) i$))) (= (lib!betree.PivotBetree_v.impl&%1.my_domain.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) i$)) (lib!betree.PivotBetree_v.impl&%1.child_domain.? self! i$)))) :pattern ((lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! i$)) ))) :pattern ((lib!betree.PivotBetree_v.impl&%1.linked_children.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::wf_children")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.wf_children. (Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.wf_children. self!) (and (=> %%global_location_label%%18 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (=> %%global_location_label%%19 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.wf_children. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::wf_children")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.wf_children.))
(declare-const fuel_nat%lib!betree.PivotBetree_v.impl&%1.wf_children. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! fuel%) (lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! zero)) :pattern ((lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (= (lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! (succ fuel%)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! i$) (lib!betree.PivotBetree_v.impl&%1.rec%wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) i$) fuel%))) :pattern ((lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! i$)) )))) :pattern ((lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.wf_children.) (forall ((self! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (= (lib!betree.PivotBetree_v.impl&%1.wf_children.? self!) (lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! (succ (succ fuel_nat%lib!betree.PivotBetree_v.impl&%1.wf_children.))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.wf_children.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::wf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.wf.))
(declare-const fuel_nat%lib!betree.PivotBetree_v.impl&%1.wf. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBetree_v.impl&%1.rec%wf.? self! fuel%) (lib!betree.PivotBetree_v.impl&%1.rec%wf.? self! zero)) :pattern ((lib!betree.PivotBetree_v.impl&%1.rec%wf.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (= (lib!betree.PivotBetree_v.impl&%1.rec%wf.? self! (succ fuel%)) (and (lib!betree.PivotBetree_v.impl&%1.local_structure.? self!) (=> (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)) (and (lib!betree.PivotBetree_v.impl&%1.rec%wf_children.? self! fuel%) (lib!betree.PivotBetree_v.impl&%1.linked_children.? self!)))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.rec%wf.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (= (lib!betree.PivotBetree_v.impl&%1.wf.? self!) (lib!betree.PivotBetree_v.impl&%1.rec%wf.? self! (succ (succ fuel_nat%lib!betree.PivotBetree_v.impl&%1.wf.))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceiptLine::wf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%2.wf.))
(define-fun is-lib!spec.Messages_t.Message./Define_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Define) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%2.wf.? self!) (and (lib!betree.PivotBetree_v.impl&%1.wf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. self!)))) (is-lib!spec.Messages_t.Message./Define_ (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. self!))))) :pattern ((lib!betree.PivotBetree_v.impl&%2.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::to_element")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_element.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_element.) (forall ((key! Poly)) (! (= (lib!spec.KeyType_t.to_element.? key!) (lib!spec.KeyType_t.Element./Elem (%I (I (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. key!)))))) :pattern ((lib!spec.KeyType_t.to_element.? key!)) ))))
(assert (forall ((key! Poly)) (! (=> (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!spec.KeyType_t.to_element.? key!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::bounded_key")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.bounded_key. (Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.bounded_key. self! key!) (=> %%global_location_label%%20 (lib!betree.PivotTable_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.bounded_key. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::bounded_key")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.bounded_key.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.bounded_key.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!) (and (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I 0)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))))) :pattern ((lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::key_in_domain")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.key_in_domain.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.key_in_domain.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.key_in_domain.? self! key!) (and (and (lib!betree.PivotBetree_v.impl&%1.wf.? self!) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) key!))) :pattern ((lib!betree.PivotBetree_v.impl&%1.key_in_domain.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::all_lines_wf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.all_lines_wf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.all_lines_wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? self!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))))) (lib!betree.PivotBetree_v.impl&%2.wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.PivotBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i$)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i$)) )))) :pattern ((lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::largest_lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.largest_lte.))
(declare-const fuel_nat%lib!spec.KeyType_t.impl&%2.largest_lte. Fuel)
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (= (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! fuel%) (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! zero)) :pattern ((lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! fuel%)) )))
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (has_type needle! TYPE%lib!spec.KeyType_t.Element.)) (= (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel%)) (ite (or (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!) 0) (lib!spec.KeyType_t.impl&%2.lt.? needle! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! (I 0)))) (Sub 0 1) (Add 1 (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Element. run! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) needle! fuel%))))) :pattern ((lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.largest_lte.) (forall ((run! Poly) (needle! Poly)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (has_type needle! TYPE%lib!spec.KeyType_t.Element.)) (= (lib!spec.KeyType_t.impl&%2.largest_lte.? run! needle!) (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel_nat%lib!spec.KeyType_t.impl&%2.largest_lte.)))) :pattern ((lib!spec.KeyType_t.impl&%2.largest_lte.? run! needle!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::route")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.route. (Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.route. self! key!) (and (=> %%global_location_label%%21 (lib!betree.PivotTable_v.impl&%0.wf.? self!)) (=> %%global_location_label%%22 (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.route. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::route")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.route.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.route.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.route.? self! key!) (lib!spec.KeyType_t.impl&%2.largest_lte.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.route.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::child")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.child. (Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.child. self! key!) (and (=> %%global_location_label%%23 (lib!betree.PivotBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%24 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (=> %%global_location_label%%25 (lib!betree.PivotBetree_v.impl&%1.key_in_domain.? self! key!)))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.child. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::child")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.child.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.child.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.child.? self! key!) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) key!))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.child.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::QueryReceipt::child_at")
(declare-fun req%lib!betree.PivotBetree_v.impl&%3.child_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%3.child_at. self! i!) (and (=> %%global_location_label%%26 (lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? self!)) (=> %%global_location_label%%27 (lib!betree.PivotBetree_v.impl&%3.structure.? self!)) (=> %%global_location_label%%28 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%3.child_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::child_at")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.child_at.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.child_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.child_at.? self! i!) (lib!betree.PivotBetree_v.impl&%1.child.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i!)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))))) :pattern ((lib!betree.PivotBetree_v.impl&%3.child_at.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::QueryReceipt::child_linked_at")
(declare-fun req%lib!betree.PivotBetree_v.impl&%3.child_linked_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%3.child_linked_at. self! i!) (and (=> %%global_location_label%%29 (lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? self!)) (=> %%global_location_label%%30 (lib!betree.PivotBetree_v.impl&%3.structure.? self!)) (=> %%global_location_label%%31 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%3.child_linked_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::child_linked_at")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.child_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.child_linked_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.child_linked_at.? self! i!) (= (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) (I (Add (%I i!) 1))))) (lib!betree.PivotBetree_v.impl&%3.child_at.? self! i!))) :pattern ((lib!betree.PivotBetree_v.impl&%3.child_linked_at.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::query")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::insert_ref")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly) (msg! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type msg! TYPE%lib!spec.Messages_t.Message.)) (has_type (lib!betree.Buffer_v.Buffer.insert_ref.? Self%&. Self%& self! key! msg!) Self%&)) :pattern ((lib!betree.Buffer_v.Buffer.insert_ref.? Self%&. Self%& self! key! msg!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::is_empty")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!betree.Buffer_v.Buffer.is_empty.? Self%&. Self%& self!) BOOL)) :pattern ((lib!betree.Buffer_v.Buffer.is_empty.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::nop_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query_internal")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.query_internal.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.query_internal.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::insert")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.insert.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.insert.) (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key! msg!)))) :pattern ((lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::empty")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!betree.Buffer_v.impl&%1.empty.? no%param) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)))) :pattern ((lib!betree.Buffer_v.impl&%1.empty.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::arrow_buffer")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%0.arrow_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%0.arrow_buffer.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%0.arrow_buffer.? self!) (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PivotBetree_v.impl&%0.arrow_buffer.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::combine_deltas")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.combine_deltas.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.combine_deltas.) (forall ((new! Poly) (old! Poly)) (! (= (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!) (%Poly%lib!spec.Messages_t.Delta. (ite (= (%Poly%lib!spec.Messages_t.Delta. new!) (lib!spec.Messages_t.nop_delta.? (I 0))) old! (ite (= (%Poly%lib!spec.Messages_t.Delta. old!) (lib!spec.Messages_t.nop_delta.? (I 0))) new! new!)))) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) ))))
(assert (forall ((new! Poly) (old! Poly)) (! (=> (and (has_type new! TYPE%lib!spec.Messages_t.Delta.) (has_type old! TYPE%lib!spec.Messages_t.Delta.)) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::apply_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.apply_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.apply_delta.) (forall ((delta! Poly) (value! Poly)) (! (= (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!) (%Poly%lib!spec.Messages_t.Value. value!)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) ))))
(assert (forall ((delta! Poly) (value! Poly)) (! (=> (and (has_type delta! TYPE%lib!spec.Messages_t.Delta.) (has_type value! TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::merge")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.merge.))
(define-fun is-lib!spec.Messages_t.Message./Update_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Update) c))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.merge.) (forall ((self! Poly) (new! Poly)) (! (= (lib!spec.Messages_t.impl&%1.merge.? self! new!) (let ((tmp%%$ (tuple%2./tuple%2 self! new!))) (ite (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Define_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. new_value$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((new_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly%lib!spec.Messages_t.Delta. new_delta$) (Poly%lib!spec.Messages_t.Delta. old_delta$))))))) (let ((value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? (Poly%lib!spec.Messages_t.Delta. delta$) (Poly%lib!spec.Messages_t.Value. value$))))))))))) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) ))))
(assert (forall ((self! Poly) (new! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type new! TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? self! new!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::QueryReceipt::result_at")
(declare-fun req%lib!betree.PivotBetree_v.impl&%3.result_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%3.result_at. self! i!) (=> %%global_location_label%%32 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%3.result_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::result_at")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.result_at.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.result_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.result_at.? self! i!) (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i!)))) :pattern ((lib!betree.PivotBetree_v.impl&%3.result_at.? self! i!)) ))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.QueryReceipt.) (has_type i! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBetree_v.impl&%3.result_at.? self! i!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PivotBetree_v.impl&%3.result_at.? self! i!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::QueryReceipt::result_linked_at")
(declare-fun req%lib!betree.PivotBetree_v.impl&%3.result_linked_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%3.result_linked_at. self! i!) (and (=> %%global_location_label%%33 (lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? self!)) (=> %%global_location_label%%34 (lib!betree.PivotBetree_v.impl&%3.structure.? self!)) (=> %%global_location_label%%35 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%3.result_linked_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::result_linked_at")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.result_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.result_linked_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.result_linked_at.? self! i!) (let ((msg$ (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i!))))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))))))) (= (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!))) i!))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBetree_v.impl&%3.result_at.? self! (I (Add (%I i!) 1)))) (Poly%lib!spec.Messages_t.Message. msg$))))) :pattern ((lib!betree.PivotBetree_v.impl&%3.result_linked_at.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::valid")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.valid.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.valid.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.valid.? self!) (and (and (and (lib!betree.PivotBetree_v.impl&%3.structure.? self!) (lib!betree.PivotBetree_v.impl&%3.all_lines_wf.? self!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.PivotBetree_v.impl&%3.child_linked_at.? self! i$))) :pattern ((lib!betree.PivotBetree_v.impl&%3.child_linked_at.? self! i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.PivotBetree_v.impl&%3.result_linked_at.? self! i$))) :pattern ((lib!betree.PivotBetree_v.impl&%3.result_linked_at.? self! i$)) )))) :pattern ((lib!betree.PivotBetree_v.impl&%3.valid.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::valid_for")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.valid_for.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.valid_for.) (forall ((self! Poly) (root! Poly) (key! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.valid_for.? self! root! key!) (and (and (lib!betree.PivotBetree_v.impl&%3.valid.? self!) (= (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)) (%Poly%lib!betree.PivotBetree_v.BetreeNode. root!))) (= (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PivotBetree_v.QueryReceipt. self!)) (%Poly%lib!spec.KeyType_t.Key. key!)))) :pattern ((lib!betree.PivotBetree_v.impl&%3.valid_for.? self! root! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::QueryReceipt::result")
(declare-fun req%lib!betree.PivotBetree_v.impl&%3.result. (Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%3.result. self!) (=> %%global_location_label%%36 (lib!betree.PivotBetree_v.impl&%3.structure.? self!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%3.result. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::QueryReceipt::result")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%3.result.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%3.result.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%3.result.? self!) (lib!betree.PivotBetree_v.impl&%3.result_at.? self! (I 0))) :pattern ((lib!betree.PivotBetree_v.impl&%3.result.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBetree_v.impl&%3.result.? self!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PivotBetree_v.impl&%3.result.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::insert_ref")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.insert_ref.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.insert_ref.) (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (lib!betree.Buffer_v.Buffer.insert_ref.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key! msg!) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!))) :pattern ((lib!betree.Buffer_v.Buffer.insert_ref.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key! msg!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::is_empty")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!betree.Buffer_v.Buffer.is_empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self!) (B (= (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!) (lib!betree.Buffer_v.impl&%1.empty.? (I 0))))) :pattern ((lib!betree.Buffer_v.Buffer.is_empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!betree.Buffer_v.Buffer. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::query")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.query.) (forall ((T&. Dcr) (T& Type) (self! Poly) (key! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!) (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!)) key!))) :pattern ((lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::query")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.query.))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Label./Query_ ((c lib!betree.PivotBetree_v.PivotBetree.Label.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Label./Query) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.query.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (receipt! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.query.? pre! post! lbl! receipt!) (let ((update_tmp_memtable$ (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Query_ tmp_for_match_0$) (let ((end_lsn$ (lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) (let ((key$ (lib!betree.PivotBetree_v.PivotBetree.Label./Query/key (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) (let ((value$ (lib!betree.PivotBetree_v.PivotBetree.Label./Query/value (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!betree.PivotBetree_v.PivotBetree.Label./Query_ tmp_for_match_0$) (let ((end_lsn$ (lib!betree.PivotBetree_v.PivotBetree.Label./Query/end_lsn (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) (let ((key$ (lib!betree.PivotBetree_v.PivotBetree.Label./Query/key (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) (let ((value$ (lib!betree.PivotBetree_v.PivotBetree.Label./Query/value (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) (tuple%3./tuple%3 (I end_lsn$) (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Value. value$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Value.)))))) (let ((end_lsn$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((key$ (%Poly%lib!spec.KeyType_t.Key. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((value$ (%Poly%lib!spec.Messages_t.Value. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (= end_lsn$ (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))))) (and (lib!betree.PivotBetree_v.impl&%3.valid_for.? receipt! (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$)) (= (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBetree_v.impl&%3.result.? receipt!)) (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$))))))))))))) (and (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.query.? pre! post! lbl! receipt!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::apply_put")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.apply_put.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.apply_put.) (forall ((T&. Dcr) (T& Type) (self! Poly) (km! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!) (let ((msg$ (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? T&. T& self! (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. km!))))) (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. km!)))))) (lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Buffer_v.Buffer.insert_ref.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!)) (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. km!))) (Poly%lib!spec.Messages_t.Message. msg$)) (%I (I (nClip (Add (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!)) 1))))))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (km! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type km! TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!)) )))
(set-info :comment ";; Function-Specs lib::betree::Memtable_v::Memtable::apply_puts")
(declare-fun req%lib!betree.Memtable_v.impl&%0.apply_puts. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly)) (! (= (req%lib!betree.Memtable_v.impl&%0.apply_puts. T&. T& self! puts!) (and (=> %%global_location_label%%37 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)) (=> %%global_location_label%%38 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? puts! (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!))))) (=> %%global_location_label%%39 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)))) :pattern ((req%lib!betree.Memtable_v.impl&%0.apply_puts. T&. T& self! puts!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::apply_puts")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.apply_puts.))
(declare-const fuel_nat%lib!betree.Memtable_v.impl&%0.apply_puts. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly) (fuel% Fuel)) (! (= (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! fuel%) (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! zero)) :pattern ((lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!betree.Buffer_v.Buffer. T&. T&) (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type puts! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)) (= (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! (succ fuel%)) (ite (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? puts!) (%Poly%lib!betree.Memtable_v.Memtable. self!) (let ((last_lsn$ (nClip (Sub (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts!)) 1)))) (lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? puts! (I last_lsn$))) fuel%)) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts!))) (I last_lsn$))))))) :pattern ((lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.apply_puts.) (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly)) (! (=> (and (tr_bound%lib!betree.Buffer_v.Buffer. T&. T&) (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type puts! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)) (= (lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!) (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! (succ fuel_nat%lib!betree.Memtable_v.impl&%0.apply_puts.)))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type puts! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::put")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.put.))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Label./Put_ ((c lib!betree.PivotBetree_v.PivotBetree.Label.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Label./Put) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.put.? pre! post! lbl!) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Put_ tmp_for_match_0$) (let ((puts$ (lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) true)) (let ((puts$ (ite (is-lib!betree.PivotBetree_v.PivotBetree.Label./Put_ tmp_for_match_0$) (let ((puts$2 (lib!betree.PivotBetree_v.PivotBetree.Label./Put/puts (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) puts$2) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (vstd!pervasive.arbitrary.? $ TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.))))) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$))) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))))) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%0.apply_puts.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$))))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$)))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.put.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::wf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? self!) (lib!betree.PivotBetree_v.impl&%1.wf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. self!))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::is_empty")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.is_empty.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.is_empty.? T&. T& self!) (%B (lib!betree.Buffer_v.Buffer.is_empty.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!))))) :pattern ((lib!betree.Memtable_v.impl&%0.is_empty.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::freeze_as")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as.))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs_ ((c lib!betree.PivotBetree_v.PivotBetree.Label.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as.? pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs_ tmp_for_match_0$) (let ((stamped_betree$ (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) true)) (let ((stamped_betree$ (ite (is-lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs_ tmp_for_match_0$) (let ((stamped_betree$2 (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. tmp_for_match_0$))))) stamped_betree$2) (%Poly%lib!abstract_system.StampedMap_v.Stamped. (vstd!pervasive.arbitrary.? $ (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.)))))) (and (lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? pre!) (and (lib!betree.Memtable_v.impl&%0.is_empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (= stamped_betree$ (lib!abstract_system.StampedMap_v.Stamped./Stamped (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (%I (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))))))))))))) (and (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::empty_memtable")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%1.empty_memtable.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%1.empty_memtable.) (forall ((lsn! Poly)) (! (= (lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!) (lib!betree.Memtable_v.Memtable./Memtable (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.empty.? (I 0))) (%I lsn!))) :pattern ((lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!)) ))))
(assert (forall ((lsn! Poly)) (! (=> (has_type lsn! NAT) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!)) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::drain")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%1.drain.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%1.drain.) (forall ((self! Poly)) (! (= (lib!betree.Memtable_v.impl&%1.drain.? self!) (lib!betree.Memtable_v.impl&%1.empty_memtable.? (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!))))) :pattern ((lib!betree.Memtable_v.impl&%1.drain.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%1.drain.? self!)) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.Memtable_v.impl&%1.drain.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::merge")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.merge.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Poly Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Dcr) (%%hole%%14 Type) (%%hole%%15 Poly) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Poly) (%%hole%%19 Dcr) (%%hole%%20 Type) (%%hole%%21 Dcr) (%%hole%%22 Type) (%%hole%%23 Poly) (%%hole%%24 Dcr) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28) k$) (Poly%lib!spec.Messages_t.Message. (ite (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)) (lib!spec.Messages_t.impl&%1.merge.? (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 k$) (vstd!map.impl&%0.index.? %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 k$)) (%Poly%lib!spec.Messages_t.Message. (ite (vstd!set.impl&%0.contains.? %%hole%%16 %%hole%%17 %%hole%%18 k$) (vstd!map.impl&%0.index.? %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 k$) (vstd!map.impl&%0.index.? %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 k$)))))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.merge.) (forall ((self! Poly) (new_Buffer! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.merge.? self! new_Buffer!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%3 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))))))) (Poly%fun%1. (mk_fun (%%lambda%%4 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!)))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!)))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))))))))) :pattern ((lib!betree.Buffer_v.impl&%1.merge.? self! new_Buffer!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::merge_buffer")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.merge_buffer. (Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((self! Poly) (new_buffer! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.merge_buffer. self! new_buffer!) (=> %%global_location_label%%40 (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.merge_buffer. self! new_buffer!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::merge_buffer")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.merge_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.merge_buffer.) (forall ((self! Poly) (new_buffer! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.merge_buffer.? self! new_buffer!) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.merge.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) new_buffer!))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.merge_buffer.? self! new_buffer!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::arrow_start")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%0.arrow_start.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%0.arrow_start.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%0.arrow_start.? self!) (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) :pattern ((lib!betree.Domain_v.impl&%0.arrow_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.impl&%0.arrow_start.? self!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.impl&%0.arrow_start.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::arrow_end")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%0.arrow_end.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%0.arrow_end.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%0.arrow_end.? self!) (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!))) :pattern ((lib!betree.Domain_v.impl&%0.arrow_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.impl&%0.arrow_end.? self!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.impl&%0.arrow_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::wf")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.wf.))
(define-fun is-lib!betree.Domain_v.Domain./Domain_ ((c lib!betree.Domain_v.Domain.)) Bool ((_ is lib!betree.Domain_v.Domain./Domain) c))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%1.wf.? self!) (=> (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (and (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))) (is-lib!spec.KeyType_t.Element./Elem_ (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::domain_to_pivots")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.domain_to_pivots.))
(declare-fun %%array%%0 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1))) (and (= (%%apply%%1 %%x%% 0) %%hole%%0) (= (%%apply%%1 %%x%% 1) %%hole%%1))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1)) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.domain_to_pivots.) (forall ((domain! Poly)) (! (= (lib!betree.PivotTable_v.domain_to_pivots.? domain!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!spec.KeyType_t.Element. $ (CONST_INT 2)) (array_new $ TYPE%lib!spec.KeyType_t.Element. 2 (%%array%%0 (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. domain!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. domain!))))))))) :pattern ((lib!betree.PivotTable_v.domain_to_pivots.? domain!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::empty_root")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.empty_root. (Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((domain! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.empty_root. domain!) (and (=> %%global_location_label%%41 (lib!betree.Domain_v.impl&%1.wf.? domain!)) (=> %%global_location_label%%42 (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. domain!))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.empty_root. domain!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::empty_root")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.empty_root.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.empty_root.) (forall ((domain! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.empty_root.? domain!) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.empty.? (I 0)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.domain_to_pivots.? domain!))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) (Poly%lib!betree.PivotBetree_v.BetreeNode. lib!betree.PivotBetree_v.BetreeNode./Nil))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.empty_root.? domain!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::promote")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.promote. (Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! Poly) (domain! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.promote. self! domain!) (and (=> %%global_location_label%%43 (lib!betree.PivotBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%44 (lib!betree.Domain_v.impl&%1.wf.? domain!)) (=> %%global_location_label%%45 (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. domain!))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.promote. self! domain!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::promote")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.promote.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.promote.) (forall ((self! Poly) (domain! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.promote.? self! domain!) (ite (is-lib!betree.PivotBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)) (lib!betree.PivotBetree_v.impl&%1.empty_root.? domain!) (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PivotBetree_v.impl&%1.promote.? self! domain!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::min_elem")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.min_elem.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.min_elem.) (forall ((no%param Poly)) (! (= (lib!spec.KeyType_t.impl&%2.min_elem.? no%param) (lib!spec.KeyType_t.Element./Elem (%I (I 0)))) :pattern ((lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::total_domain")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.total_domain.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.total_domain.) (forall ((no%param Poly)) (! (= (lib!betree.Domain_v.total_domain.? no%param) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.impl&%2.min_elem.? (I 0)))) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max)))) :pattern ((lib!betree.Domain_v.total_domain.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? no%param)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.Domain_v.total_domain.? no%param)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::push_memtable")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.push_memtable. (Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((self! Poly) (memtable! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.push_memtable. self! memtable!) (=> %%global_location_label%%46 (lib!betree.PivotBetree_v.impl&%1.wf.? self!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.push_memtable. self! memtable!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::push_memtable")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.push_memtable.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.push_memtable.) (forall ((self! Poly) (memtable! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.push_memtable.? self! memtable!) (lib!betree.PivotBetree_v.impl&%1.merge_buffer.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%1.promote.? self! (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? (I 0))))) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. memtable!)))) :pattern ((lib!betree.PivotBetree_v.impl&%1.push_memtable.? self! memtable!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::internal_flush_memtable")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable.))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Label./Internal_ ((c lib!betree.PivotBetree_v.PivotBetree.Label.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable.? pre! post! lbl!) (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? pre!) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%1.drain.? (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))))) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.impl&%1.push_memtable.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))))) (and (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::grow")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.grow.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.grow.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.grow.? self!) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.empty.? (I 0)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.domain_to_pivots.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? (I 0)))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) self!)))) :pattern ((lib!betree.PivotBetree_v.impl&%1.grow.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::internal_grow")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow.? pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? pre!) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.impl&%1.grow.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::is_index")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.is_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.is_index.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.is_index.? self!) (and (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! i$) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) i$))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! i$)) )))) :pattern ((lib!betree.PivotBetree_v.impl&%1.is_index.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::Path::subpath")
(declare-fun req%lib!betree.PivotBetree_v.impl&%4.subpath. (Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%4.subpath. self!) (and (=> %%global_location_label%%47 (< 0 (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!)))) (=> %%global_location_label%%48 (lib!betree.PivotBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. self!))))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%4.subpath. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::Path::subpath")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%4.subpath.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%4.subpath.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%4.subpath.? self!) (let ((depth$ (nClip (Sub (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!)) 1)))) (lib!betree.PivotBetree_v.Path./Path (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%1.child.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. self!)))))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. self!)))) (%I (I depth$))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.subpath.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (has_type (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.impl&%4.subpath.? self!)) TYPE%lib!betree.PivotBetree_v.Path.)) :pattern ((lib!betree.PivotBetree_v.impl&%4.subpath.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::Path::valid")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%4.valid.))
(declare-const fuel_nat%lib!betree.PivotBetree_v.impl&%4.valid. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBetree_v.impl&%4.rec%valid.? self! fuel%) (lib!betree.PivotBetree_v.impl&%4.rec%valid.? self! zero)) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%valid.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (= (lib!betree.PivotBetree_v.impl&%4.rec%valid.? self! (succ fuel%)) (and (and (and (lib!betree.PivotBetree_v.impl&%1.wf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!)))) (lib!betree.PivotBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. self!))))) (=> (< 0 (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!))) (lib!betree.PivotBetree_v.impl&%1.is_index.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!)))))) (=> (< 0 (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!))) (lib!betree.PivotBetree_v.impl&%4.rec%valid.? (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.impl&%4.subpath.? self!)) fuel%))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%valid.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%4.valid.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (= (lib!betree.PivotBetree_v.impl&%4.valid.? self!) (lib!betree.PivotBetree_v.impl&%4.rec%valid.? self! (succ fuel_nat%lib!betree.PivotBetree_v.impl&%4.valid.)))) :pattern ((lib!betree.PivotBetree_v.impl&%4.valid.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::is_leaf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.is_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.is_leaf.) (forall ((self! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.is_leaf.? self!) (and (and (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)) (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) 1)) (is-lib!betree.PivotBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I 0)))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.is_leaf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::contains")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.contains.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.contains.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Domain_v.impl&%1.contains.? self! key!) (and (and (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (lib!spec.KeyType_t.impl&%2.lte.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.contains.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::can_split_leaf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.can_split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.can_split_leaf.) (forall ((self! Poly) (split_key! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.can_split_leaf.? self! split_key!) (and (and (and (lib!betree.PivotBetree_v.impl&%1.wf.? self!) (lib!betree.PivotBetree_v.impl&%1.is_leaf.? self!)) (lib!betree.Domain_v.impl&%1.contains.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)) split_key!)) (not (= (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)))) (lib!spec.KeyType_t.to_element.? split_key!))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.can_split_leaf.? self! split_key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::can_split_index")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.can_split_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.can_split_index.) (forall ((self! Poly) (pivot_idx! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.can_split_index.? self! pivot_idx!) (and (and (lib!betree.PivotBetree_v.impl&%1.wf.? self!) (lib!betree.PivotBetree_v.impl&%1.is_index.? self!)) (and (< 0 (%I pivot_idx!)) (< (%I pivot_idx!) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.can_split_index.? self! pivot_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::can_split_parent")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.can_split_parent.))
(define-fun is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ ((c lib!betree.SplitRequest_v.SplitRequest.)) Bool ((_ is lib!betree.SplitRequest_v.SplitRequest./SplitLeaf) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.can_split_parent.) (forall ((self! Poly) (request! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.can_split_parent.? self! request!) (and (and (lib!betree.PivotBetree_v.impl&%1.wf.? self!) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (and (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! (I child_idx$)) (lib!betree.PivotBetree_v.impl&%1.can_split_leaf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I child_idx$)) (Poly%lib!spec.KeyType_t.Key. split_key$))))) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (and (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! (I child_idx$)) (lib!betree.PivotBetree_v.impl&%1.can_split_index.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I child_idx$)) (I child_pivot_idx$)))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.can_split_parent.? self! request!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::Path::target")
(declare-fun req%lib!betree.PivotBetree_v.impl&%4.target. (Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%4.target. self!) (=> %%global_location_label%%49 (lib!betree.PivotBetree_v.impl&%4.valid.? self!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%4.target. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::Path::target")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%4.target.))
(declare-const fuel_nat%lib!betree.PivotBetree_v.impl&%4.target. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBetree_v.impl&%4.rec%target.? self! fuel%) (lib!betree.PivotBetree_v.impl&%4.rec%target.? self! zero)) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%target.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (= (lib!betree.PivotBetree_v.impl&%4.rec%target.? self! (succ fuel%)) (ite (= (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!)) 0) (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!)) (lib!betree.PivotBetree_v.impl&%4.rec%target.? (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.impl&%4.subpath.? self!)) fuel%)))) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%target.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%4.target.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (= (lib!betree.PivotBetree_v.impl&%4.target.? self!) (lib!betree.PivotBetree_v.impl&%4.rec%target.? self! (succ fuel_nat%lib!betree.PivotBetree_v.impl&%4.target.)))) :pattern ((lib!betree.PivotBetree_v.impl&%4.target.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::Path::can_substitute")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%4.can_substitute.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%4.can_substitute.) (forall ((self! Poly) (replacement! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%4.can_substitute.? self! replacement!) (and (and (and (lib!betree.PivotBetree_v.impl&%4.valid.? self!) (lib!betree.PivotBetree_v.impl&%1.wf.? replacement!)) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. replacement!))) (= (lib!betree.PivotBetree_v.impl&%1.my_domain.? replacement!) (lib!betree.PivotBetree_v.impl&%1.my_domain.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%4.target.? self!)))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.can_substitute.? self! replacement!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::Path::replaced_children")
(declare-fun req%lib!betree.PivotBetree_v.impl&%4.replaced_children. (Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%4.replaced_children. self! replacement!) (and (=> %%global_location_label%%50 (lib!betree.PivotBetree_v.impl&%4.can_substitute.? self! replacement!)) (=> %%global_location_label%%51 (< 0 (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!)))))) :pattern ((req%lib!betree.PivotBetree_v.impl&%4.replaced_children. self! replacement!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::Path::substitute")
(declare-fun req%lib!betree.PivotBetree_v.impl&%4.substitute. (Poly Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%4.substitute. self! replacement!) (=> %%global_location_label%%52 (lib!betree.PivotBetree_v.impl&%4.can_substitute.? self! replacement!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%4.substitute. self! replacement!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::Path::replaced_children")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%4.replaced_children.))
(declare-const fuel_nat%lib!betree.PivotBetree_v.impl&%4.replaced_children. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! fuel%) (lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! zero)) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBetree_v.BetreeNode.)) (= (lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! (succ fuel%)) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (let ((new_child$ (lib!betree.PivotBetree_v.impl&%4.rec%substitute.? (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.PivotBetree_v.impl&%4.subpath.? self!)) replacement! fuel%))) (let ((r$ (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!)))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBetree_v.Path./Path/key (%Poly%lib!betree.PivotBetree_v.Path. self!)))))) (vstd!seq.Seq.update.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!)))))) (I r$) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_child$))))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%4.replaced_children.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBetree_v.BetreeNode.)) (= (lib!betree.PivotBetree_v.impl&%4.replaced_children.? self! replacement!) (lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! (succ (succ fuel_nat%lib!betree.PivotBetree_v.impl&%4.replaced_children.))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.replaced_children.? self! replacement!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::Path::substitute")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%4.substitute.))
(declare-const fuel_nat%lib!betree.PivotBetree_v.impl&%4.substitute. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBetree_v.impl&%4.rec%substitute.? self! replacement! fuel%) (lib!betree.PivotBetree_v.impl&%4.rec%substitute.? self! replacement! zero)) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%substitute.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBetree_v.BetreeNode.)) (= (lib!betree.PivotBetree_v.impl&%4.rec%substitute.? self! replacement! (succ fuel%)) (ite (= (lib!betree.PivotBetree_v.Path./Path/depth (%Poly%lib!betree.PivotBetree_v.Path. self!)) 0) (%Poly%lib!betree.PivotBetree_v.BetreeNode. replacement!) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!))))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. self!))))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.impl&%4.rec%replaced_children.? self! replacement! fuel%))))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.rec%substitute.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%4.substitute.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBetree_v.BetreeNode.)) (= (lib!betree.PivotBetree_v.impl&%4.substitute.? self! replacement!) (lib!betree.PivotBetree_v.impl&%4.rec%substitute.? self! replacement! (succ (succ fuel_nat%lib!betree.PivotBetree_v.impl&%4.substitute.))))) :pattern ((lib!betree.PivotBetree_v.impl&%4.substitute.? self! replacement!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::apply_filter")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.apply_filter.))
(declare-fun %%lambda%%5 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.apply_filter.) (forall ((self! Poly) (accept! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.apply_filter.? self! accept!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%5 $ TYPE%lib!spec.KeyType_t.Key. accept! $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))))))) (Poly%fun%1. (mk_fun (%%lambda%%2 $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))))))))) :pattern ((lib!betree.Buffer_v.impl&%1.apply_filter.? self! accept!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::key_set")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.key_set.))
(declare-fun %%lambda%%6 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0) k$) (B (lib!betree.Domain_v.impl&%1.contains.? %%hole%%0 k$))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.key_set.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%1.key_set.? self!) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%6 self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.key_set.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::len")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (<= 0 (lib!betree.PivotTable_v.impl&%0.len.? self!))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::update")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.update. self! i! element!) (=> %%global_location_label%%53 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.update. self! i! element!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::update")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.update.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.update.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.update.? self! i! element!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq.update.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i! element!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.update.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::split_leaf")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.split_leaf. (Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! Poly) (split_key! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.split_leaf. self! split_key!) (=> %%global_location_label%%54 (lib!betree.PivotBetree_v.impl&%1.can_split_leaf.? self! split_key!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.split_leaf. self! split_key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::split_leaf")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.split_leaf.) (forall ((self! Poly) (split_key! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.split_leaf.? self! split_key!) (let ((left_filter$ (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)))))) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!)))))) (let ((right_filter$ (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!))))))))) (let ((new_left$ (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. left_filter$)))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.update.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I 1) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))))) (let ((new_right$ (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. right_filter$)))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.update.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I 0) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))))))) (tuple%2./tuple%2 (Poly%lib!betree.PivotBetree_v.BetreeNode. new_left$) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_right$))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.split_leaf.? self! split_key!)) ))))
(assert (forall ((self! Poly) (split_key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (has_type split_key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%tuple%2. (lib!betree.PivotBetree_v.impl&%1.split_leaf.? self! split_key!)) (TYPE%tuple%2. $ TYPE%lib!betree.PivotBetree_v.BetreeNode. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.))) :pattern ((lib!betree.PivotBetree_v.impl&%1.split_leaf.? self! split_key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::can_insert")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.can_insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.can_insert.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!) (and (and (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? self!) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. element!))) (and (<= 0 (%I i!)) (<= (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!)))) (=> (= (%I i!) 0) (lib!spec.KeyType_t.impl&%2.lt.? element! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I 0))))) (=> (= (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!)) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) element!))) (=> (and (< 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))) (and (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (Sub (%I i!) 1))) element!) (lib!spec.KeyType_t.impl&%2.lt.? element! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i!)))))) :pattern ((lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::insert")
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%55 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::insert")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.insert. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.insert. self! i! element!) (=> %%global_location_label%%56 (lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.insert. self! i! element!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::insert")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.insert.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.insert.? self! i! element!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i! element!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.insert.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::subrange")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.subrange. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.subrange. self! start! end!) (=> %%global_location_label%%57 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.subrange. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::subrange")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.subrange.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.subrange.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.subrange.? self! start! end!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) start! end!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.subrange.? self! start! end!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::split_index")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.split_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! Poly) (pivot_idx! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.split_index. self! pivot_idx!) (=> %%global_location_label%%58 (lib!betree.PivotBetree_v.impl&%1.can_split_index.? self! pivot_idx!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.split_index. self! pivot_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::split_index")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.split_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.split_index.) (forall ((self! Poly) (pivot_idx! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.split_index.? self! pivot_idx!) (let ((split_element$ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))) pivot_idx!)))) (let ((left_filter$ (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!)))))) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. split_element$))))) (let ((right_filter$ (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. split_element$)) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.PivotBetree_v.impl&%1.my_domain.? self!))))))))) (let ((new_left$ (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. left_filter$)))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.subrange.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I 0) (I (Add (%I pivot_idx!) 1))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I 0) pivot_idx!))))) (let ((new_right$ (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. right_filter$)))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.subrange.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) pivot_idx! (I (lib!betree.PivotTable_v.impl&%0.len.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) pivot_idx! (I (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))))))))) (tuple%2./tuple%2 (Poly%lib!betree.PivotBetree_v.BetreeNode. new_left$) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_right$)))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.split_index.? self! pivot_idx!)) ))))
(assert (forall ((self! Poly) (pivot_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBetree_v.BetreeNode.) (has_type pivot_idx! NAT)) (has_type (Poly%tuple%2. (lib!betree.PivotBetree_v.impl&%1.split_index.? self! pivot_idx!)) (TYPE%tuple%2. $ TYPE%lib!betree.PivotBetree_v.BetreeNode. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.))) :pattern ((lib!betree.PivotBetree_v.impl&%1.split_index.? self! pivot_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::split_parent")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.split_parent. (Poly Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! Poly) (request! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.split_parent. self! request!) (=> %%global_location_label%%59 (lib!betree.PivotBetree_v.impl&%1.can_split_parent.? self! request!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.split_parent. self! request!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::split_parent")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.split_parent.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.split_parent.) (forall ((self! Poly) (request! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.split_parent.? self! request!) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((idx$ child_idx$)) (let ((old_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I idx$))))) (let ((tmp%%$ (lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. old_child$) (Poly%lib!spec.KeyType_t.Key. split_key$)))) (let ((new_left_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_right_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I (Add idx$ 1)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. split_key$)))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.update.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I idx$) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_left_child$)) (I (Add idx$ 1)) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_right_child$))))))))))) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((idx$ child_idx$)) (let ((old_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I idx$))))) (let ((tmp%%$ (lib!betree.PivotBetree_v.impl&%1.split_index.? (Poly%lib!betree.PivotBetree_v.BetreeNode. old_child$) (I child_pivot_idx$)))) (let ((new_left_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_right_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((split_element$ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. old_child$))))))) (I child_pivot_idx$))))) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I (Add idx$ 1)) (Poly%lib!spec.KeyType_t.Element. split_element$)))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.update.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (I idx$) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_left_child$)) (I (Add idx$ 1)) (Poly%lib!betree.PivotBetree_v.BetreeNode. new_right_child$)))))))))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.split_parent.? self! request!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::internal_split")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (path! Poly) (request! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split.? pre! post! lbl! path! request!) (let ((update_tmp_memtable$ (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.PivotBetree_v.impl&%4.valid.? path!) (and (lib!betree.PivotBetree_v.impl&%1.can_split_parent.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%4.target.? path!)) request!) (and (= (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. path!)) (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.impl&%4.substitute.? path! (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%1.split_parent.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%4.target.? path!)) request!))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$))))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split.? pre! post! lbl! path! request!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::can_flush")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.can_flush.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.can_flush.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.can_flush.? self! child_idx!) (and (and (lib!betree.PivotBetree_v.impl&%1.wf.? self!) (is-lib!betree.PivotBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (lib!betree.PivotBetree_v.impl&%1.valid_child_index.? self! child_idx!))) :pattern ((lib!betree.PivotBetree_v.impl&%1.can_flush.? self! child_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::all_keys")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.all_keys.))
(declare-fun %%lambda%%7 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0) k$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.all_keys.) (forall ((no%param Poly)) (! (= (lib!betree.Buffer_v.all_keys.? no%param) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%7 (B true))))))) :pattern ((lib!betree.Buffer_v.all_keys.? no%param)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotBetree_v::BetreeNode::flush")
(declare-fun req%lib!betree.PivotBetree_v.impl&%1.flush. (Poly Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((self! Poly) (child_idx! Poly)) (! (= (req%lib!betree.PivotBetree_v.impl&%1.flush. self! child_idx!) (=> %%global_location_label%%60 (lib!betree.PivotBetree_v.impl&%1.can_flush.? self! child_idx!))) :pattern ((req%lib!betree.PivotBetree_v.impl&%1.flush. self! child_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::BetreeNode::flush")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.impl&%1.flush.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.impl&%1.flush.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.PivotBetree_v.impl&%1.flush.? self! child_idx!) (let ((child_domain$ (lib!betree.PivotBetree_v.impl&%1.child_domain.? self! child_idx!))) (let ((keep_keys$ (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.difference.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Buffer_v.all_keys.? (I 0))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. child_domain$))))))) (let ((kept_buffer$ (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. keep_keys$)))) (let ((moved_buffer$ (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. child_domain$)))))) (let ((old_child$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) child_idx!)))) (let ((new_child$ (lib!betree.PivotBetree_v.impl&%1.merge_buffer.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%1.promote.? (Poly%lib!betree.PivotBetree_v.BetreeNode. old_child$) (Poly%lib!betree.Domain_v.Domain. child_domain$))) (Poly%lib!betree.Buffer_v.SimpleBuffer. moved_buffer$)))) (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. kept_buffer$)) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (vstd!seq.Seq.update.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. self!))) child_idx! (Poly%lib!betree.PivotBetree_v.BetreeNode. new_child$))))))))))) :pattern ((lib!betree.PivotBetree_v.impl&%1.flush.? self! child_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::internal_flush")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (path! Poly) (child_idx! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush.? pre! post! lbl! path! child_idx!) (let ((update_tmp_memtable$ (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.PivotBetree_v.impl&%4.valid.? path!) (and (lib!betree.PivotBetree_v.impl&%1.can_flush.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%4.target.? path!)) child_idx!) (and (= (lib!betree.PivotBetree_v.Path./Path/node (%Poly%lib!betree.PivotBetree_v.Path. path!)) (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!))) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.impl&%4.substitute.? path! (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%1.flush.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.PivotBetree_v.impl&%4.target.? path!)) child_idx!))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$))))))) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush.? pre! post! lbl! path! child_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::internal_noop")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop.? pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (let ((update_tmp_root$ (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Label. lbl!))) (and (is-lib!betree.PivotBetree_v.PivotBetree.Label./Internal_ tmp_for_match_0$) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.wf.? pre!))) (and (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::next_by")
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./query_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./query) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./put_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./put) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./freeze_as_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./freeze_as) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_memtable_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_memtable) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_grow_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./internal_grow) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_split_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./internal_split) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush) c))
(define-fun is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_noop_ ((c lib!betree.PivotBetree_v.PivotBetree.Step.)) Bool ((_ is lib!betree.PivotBetree_v.PivotBetree.Step./internal_noop) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./query_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (let ((receipt$ (lib!betree.PivotBetree_v.PivotBetree.Step./query/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)))) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.query.? pre! post! label! (Poly%lib!betree.PivotBetree_v.QueryReceipt. receipt$))) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./put_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.put.? pre! post! label!) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./freeze_as_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.freeze_as.? pre! post! label!) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_memtable_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush_memtable.? pre! post! label!) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_grow_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_grow.? pre! post! label!) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_split_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (let ((path$ (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)))) (let ((request$ (lib!betree.PivotBetree_v.PivotBetree.Step./internal_split/1 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)))) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_split.? pre! post! label! (Poly%lib!betree.PivotBetree_v.Path. path$) (Poly%lib!betree.SplitRequest_v.SplitRequest. request$)))) (ite (is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (let ((path$ (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/0 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)))) (let ((child_idx$ (lib!betree.PivotBetree_v.PivotBetree.Step./internal_flush/1 (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)))) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_flush.? pre! post! label! (Poly%lib!betree.PivotBetree_v.Path. path$) (I child_idx$)))) (and (is-lib!betree.PivotBetree_v.PivotBetree.Step./internal_noop_ (%Poly%lib!betree.PivotBetree_v.PivotBetree.Step. step!)) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.internal_noop.? pre! post! label!)))))))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::next")
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!betree.PivotBetree_v.PivotBetree.Step.) (lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotBetree_v::PivotBetree::State::initialize")
(assert (fuel_bool_default fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize.) (forall ((post! Poly) (stamped_betree! Poly)) (! (= (lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize.? post! stamped_betree!) (and (lib!betree.PivotBetree_v.impl&%1.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree!))) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%1.empty_memtable.? (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree!)))))) (let ((update_tmp_root$ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree!))))) (and (= (lib!betree.PivotBetree_v.PivotBetree.State./State/root (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_root$) (= (lib!betree.PivotBetree_v.PivotBetree.State./State/memtable (%Poly%lib!betree.PivotBetree_v.PivotBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.PivotBetree_v.PivotBetree.impl&%5.initialize.? post! stamped_betree!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::total_keys")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.total_keys.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.total_keys.) (forall ((keys! Poly)) (! (= (lib!betree.Buffer_v.total_keys.? keys!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) ))) :pattern ((lib!betree.Buffer_v.total_keys.? keys!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::len")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (<= 0 (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::all_lte")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (<= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::is_sorted")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.is_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.is_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.is_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (<= (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%2.is_sorted.? run!)) ))))
(set-info :comment ";; Function-Specs lib::spec::KeyType_t::Element::strictly_sorted_implies_sorted")
(declare-fun req%lib!spec.KeyType_t.impl&%2.strictly_sorted_implies_sorted. (vstd!seq.Seq<lib!spec.KeyType_t.Element.>.) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (= (req%lib!spec.KeyType_t.impl&%2.strictly_sorted_implies_sorted. run!) (=> %%global_location_label%%61 (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. run!)))) :pattern ((req%lib!spec.KeyType_t.impl&%2.strictly_sorted_implies_sorted. run!)) )))
(declare-fun ens%lib!spec.KeyType_t.impl&%2.strictly_sorted_implies_sorted. (vstd!seq.Seq<lib!spec.KeyType_t.Element.>.) Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (= (ens%lib!spec.KeyType_t.impl&%2.strictly_sorted_implies_sorted. run!) (lib!spec.KeyType_t.impl&%2.is_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. run!))) :pattern ((ens%lib!spec.KeyType_t.impl&%2.strictly_sorted_implies_sorted. run!)) )))
(set-info :comment ";; Broadcast lib::betree::PivotTable_v::PivotTable::route_lemma")
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.route_lemma.) (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (=> (and (lib!betree.PivotTable_v.impl&%0.wf.? self!) (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) (and (and (let ((tmp%%$ (lib!betree.PivotTable_v.impl&%0.route.? self! key!))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)))) (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (lib!betree.PivotTable_v.impl&%0.route.? self! key!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (Add (lib!betree.PivotTable_v.impl&%0.route.? self! key!) 1))))))) :pattern ((lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::SplitRequest_v::SplitRequest::get_child_idx")
(assert (fuel_bool_default fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx.))
(assert (=> (fuel_bool fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx.) (forall ((self! Poly)) (! (= (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!)))) child_idx$) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!)))) child_idx$))) :pattern ((lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!))) :pattern ((lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::dup")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.dup. (Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.dup. self! idx!) (=> %%global_location_label%%62 (and (<= 0 (%I idx!)) (< (%I idx!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.dup. self! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::dup")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.dup.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.dup.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.dup.? self! idx!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq_lib.impl&%0.insert.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx! (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.dup.? self! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::slice")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.slice. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.slice. self! start! end!) (=> %%global_location_label%%63 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.slice. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::slice")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.slice.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.slice.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.slice.? self! start! end!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.subrange.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) start! end!)))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.slice.? self! start! end!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::all_gte")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (>= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::update")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((self! Poly) (idx! Poly) (value! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.update. self! idx! value!) (=> %%global_location_label%%64 (and (<= 0 (%I idx!)) (< (%I idx!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.update. self! idx! value!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::update")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.update.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.update.) (forall ((self! Poly) (idx! Poly) (value! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.update.? self! idx! value!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.update.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx! value!)))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.update.? self! idx! value!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.shift_left. (Poly Poly) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((self! Poly) (target! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.shift_left. self! target!) (=> %%global_location_label%%65 (lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.shift_left. self! target!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left.))
(declare-fun %%lambda%%8 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (I (nClip (Sub (%I (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) %%hole%%3)))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.shift_left.? self! target!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.new.? $ NAT $ (TYPE%fun%1. $ INT $ NAT) (I (lib!betree.BufferOffsets_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%8 $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I target!)))))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.shift_left.? self! target!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::decrement")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.decrement.))
(declare-fun %%lambda%%9 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%10 (Dcr Type Dcr Type Poly Int Dcr Type Dcr Type Poly Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Int) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Int) (%%hole%%12 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (I (ite (<= %%hole%%5 (%I (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$))) (nClip (Sub (%I (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 k$)) %%hole%%11)) %%hole%%12))) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.decrement.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.decrement.? self! i!) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I i!) $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I i!) 0))))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.decrement.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::is_total")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.is_total.))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.is_total.) (forall ((self! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.is_total.? self!) (lib!betree.Buffer_v.total_keys.? (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!)))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.is_total.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. self! start! end!) (=> %%global_location_label%%66 (and (<= 0 (%I start!)) (< (%I start!) (%I end!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact.))
(declare-fun %%lambda%%11 (Dcr Type Poly Int Dcr Type Poly Dcr Type Poly Int Dcr Type Poly Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Int) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 Int) (%%hole%%15 Int) (%%hole%%16 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) i$) (I (ite (<= (%I (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) %%hole%%3) (%I (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 %%hole%%6 i$)) (ite (< (%I (vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)) %%hole%%10) %%hole%%16 (nClip (Add (Sub (%I (vstd!seq.Seq.index.? %%hole%%11 %%hole%%12 %%hole%%13 i$)) %%hole%%14) %%hole%%15)))))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? self! start! end!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.new.? $ NAT $ (TYPE%fun%1. $ INT $ NAT) (I (lib!betree.BufferOffsets_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%11 $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I start!) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I end!) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (Sub (%I end!) (%I start!)) 1 (nClip (%I start!))))))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? self! start! end!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::structure")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.structure.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.structure.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.structure.? self!) (and (and (and (< 0 (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) (I 0)))) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (= (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1))))) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) ))) (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.last.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? (I 0)))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.structure.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::arrow_pivots")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_pivots.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_pivots.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%0.arrow_pivots.? self!) (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) :pattern ((lib!betree.FilteredBetree_v.impl&%0.arrow_pivots.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::arrow_children")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_children.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_children.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%0.arrow_children.? self!) (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) :pattern ((lib!betree.FilteredBetree_v.impl&%0.arrow_children.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::arrow_flushed")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_flushed.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_flushed.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%0.arrow_flushed.? self!) (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) :pattern ((lib!betree.FilteredBetree_v.impl&%0.arrow_flushed.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::len")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (<= 0 (lib!betree.BufferSeq_v.impl&%0.len.? self!))) :pattern ((lib!betree.BufferSeq_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::arrow_buffers")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_buffers.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_buffers.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%0.arrow_buffers.? self!) (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) :pattern ((lib!betree.FilteredBetree_v.impl&%0.arrow_buffers.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::local_structure")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.local_structure.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.local_structure.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.local_structure.? self!) (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (lib!betree.BufferOffsets_v.impl&%0.len.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.local_structure.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::valid_child_index")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.valid_child_index.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.valid_child_index.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! child_idx!) (and (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (< (%I child_idx!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! child_idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::my_domain")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.my_domain. (Poly) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.my_domain. self!) (and (=> %%global_location_label%%67 (lib!betree.FilteredBetree_v.impl&%1.local_structure.? self!)) (=> %%global_location_label%%68 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.my_domain. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::my_domain")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.my_domain.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.my_domain.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (I 0))) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::child_domain")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.child_domain. (Poly Poly) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((self! Poly) (child_idx! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.child_domain. self! child_idx!) (and (=> %%global_location_label%%69 (lib!betree.FilteredBetree_v.impl&%1.local_structure.? self!)) (=> %%global_location_label%%70 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%71 (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! child_idx!)))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.child_domain. self! child_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::child_domain")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.child_domain.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.child_domain.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.child_domain.? self! child_idx!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) child_idx!)) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (I (Add (%I child_idx!) 1)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.child_domain.? self! child_idx!)) ))))
(assert (forall ((self! Poly) (child_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type child_idx! NAT)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.child_domain.? self! child_idx!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.child_domain.? self! child_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::linked_children")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.linked_children. (Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.linked_children. self!) (and (=> %%global_location_label%%72 (lib!betree.FilteredBetree_v.impl&%1.local_structure.? self!)) (=> %%global_location_label%%73 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.linked_children. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::linked_children")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.linked_children.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.linked_children.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.linked_children.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (and (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! i$) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$)))) (lib!betree.FilteredBetree_v.impl&%1.local_structure.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$))) (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$)) (lib!betree.FilteredBetree_v.impl&%1.child_domain.? self! i$)))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! i$)) ))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.linked_children.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::wf_children")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.wf_children. (Poly) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.wf_children. self!) (and (=> %%global_location_label%%74 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%75 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.wf_children. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::wf_children")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.wf_children.))
(declare-const fuel_nat%lib!betree.FilteredBetree_v.impl&%1.wf_children. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! fuel%) (lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! zero)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (= (lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! (succ fuel%)) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! i$) (lib!betree.FilteredBetree_v.impl&%1.rec%wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$) fuel%))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! i$)) )))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.wf_children.) (forall ((self! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (= (lib!betree.FilteredBetree_v.impl&%1.wf_children.? self!) (lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! (succ (succ fuel_nat%lib!betree.FilteredBetree_v.impl&%1.wf_children.))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.wf_children.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::wf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.wf.))
(declare-const fuel_nat%lib!betree.FilteredBetree_v.impl&%1.wf. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetree_v.impl&%1.rec%wf.? self! fuel%) (lib!betree.FilteredBetree_v.impl&%1.rec%wf.? self! zero)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.rec%wf.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= (lib!betree.FilteredBetree_v.impl&%1.rec%wf.? self! (succ fuel%)) (and (lib!betree.FilteredBetree_v.impl&%1.local_structure.? self!) (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (and (lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? self! fuel%) (lib!betree.FilteredBetree_v.impl&%1.linked_children.? self!)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.rec%wf.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (lib!betree.FilteredBetree_v.impl&%1.rec%wf.? self! (succ (succ fuel_nat%lib!betree.FilteredBetree_v.impl&%1.wf.))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceiptLine::wf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%2.wf.? self!) (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. self!)))) (is-lib!spec.Messages_t.Message./Define_ (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. self!))))) :pattern ((lib!betree.FilteredBetree_v.impl&%2.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::key_in_domain")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.key_in_domain.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.key_in_domain.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! key!) (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) key!))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::all_lines_wf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? self!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))) (lib!betree.FilteredBetree_v.impl&%2.wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) )))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::child")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.child. (Poly Poly) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.child. self! key!) (and (=> %%global_location_label%%76 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%77 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%78 (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! key!)))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.child. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::child")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.child.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.child.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.child.? self! key!) (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (let ((tmp%%$ (vstd!pervasive.spec_affirm.? (B (lib!betree.FilteredBetree_v.impl&%1.wf_children.? self!))))) (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) key!)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.child.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceipt::child_at")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%3.child_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%3.child_at. self! i!) (and (=> %%global_location_label%%79 (lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? self!)) (=> %%global_location_label%%80 (lib!betree.FilteredBetree_v.impl&%3.structure.? self!)) (=> %%global_location_label%%81 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%3.child_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::child_at")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.child_at.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.child_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.child_at.? self! i!) (lib!betree.FilteredBetree_v.impl&%1.child.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i!)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.child_at.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceipt::child_linked_at")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. self! i!) (and (=> %%global_location_label%%82 (lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? self!)) (=> %%global_location_label%%83 (lib!betree.FilteredBetree_v.impl&%3.structure.? self!)) (=> %%global_location_label%%84 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::child_linked_at")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.child_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.child_linked_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.child_linked_at.? self! i!) (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) (I (Add (%I i!) 1))))) (lib!betree.FilteredBetree_v.impl&%3.child_at.? self! i!))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.child_linked_at.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::flushed_ofs")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. (Poly Poly) Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. self! key!) (=> %%global_location_label%%85 (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! key!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::flushed_ofs")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! key!) (%I (let ((r$ (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) key!))) (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (I r$))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (<= 0 (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! key!))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! key!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::query_from")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.query_from. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((self! Poly) (key! Poly) (start! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.query_from. self! key! start!) (and (=> %%global_location_label%%86 (and (<= 0 (%I start!)) (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (=> %%global_location_label%%87 (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.query_from. self! key! start!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::query_from")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.query_from.))
(declare-const fuel_nat%lib!betree.BufferSeq_v.impl&%0.query_from. Fuel)
(assert (forall ((self! Poly) (key! Poly) (start! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! fuel%) (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! zero)) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! fuel%)) )))
(assert (forall ((self! Poly) (key! Poly) (start! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT) (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))) (= (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! (succ fuel%)) (ite (= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))) (lib!spec.Messages_t.impl&%1.merge.? (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) start!) key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! (I (Add (%I start!) 1)) fuel%)))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.query_from.) (forall ((self! Poly) (key! Poly) (start! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT) (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!) (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! (succ fuel_nat%lib!betree.BufferSeq_v.impl&%0.query_from.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!)) ))))
(assert (forall ((self! Poly) (key! Poly) (start! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceipt::result_at")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%3.result_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%3.result_at. self! i!) (=> %%global_location_label%%88 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%3.result_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::result_at")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.result_at.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.result_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.result_at.? self! i!) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i!)))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.result_at.? self! i!)) ))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (has_type i! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.impl&%3.result_at.? self! i!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.FilteredBetree_v.impl&%3.result_at.? self! i!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceipt::result_linked_at")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. self! i!) (and (=> %%global_location_label%%89 (lib!betree.FilteredBetree_v.impl&%3.structure.? self!)) (=> %%global_location_label%%90 (lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? self!)) (=> %%global_location_label%%91 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::result_linked_at")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.result_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.result_linked_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.result_linked_at.? self! i!) (let ((start$ (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i!)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))) (let ((msg$ (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i!))))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) (I start$)))) (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i!))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.impl&%3.result_at.? self! (I (Add (%I i!) 1)))) (Poly%lib!spec.Messages_t.Message. msg$)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.result_linked_at.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::valid")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.valid.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.valid.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.valid.? self!) (and (and (and (lib!betree.FilteredBetree_v.impl&%3.structure.? self!) (lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? self!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.FilteredBetree_v.impl&%3.child_linked_at.? self! i$))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.child_linked_at.? self! i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.FilteredBetree_v.impl&%3.result_linked_at.? self! i$))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.result_linked_at.? self! i$)) )))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.valid.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::valid_for")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.valid_for.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.valid_for.) (forall ((self! Poly) (root! Poly) (key! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.valid_for.? self! root! key!) (and (and (lib!betree.FilteredBetree_v.impl&%3.valid.? self!) (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)) (%Poly%lib!betree.FilteredBetree_v.BetreeNode. root!))) (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)) (%Poly%lib!spec.KeyType_t.Key. key!)))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.valid_for.? self! root! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceipt::result")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%3.result. (Poly) Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%3.result. self!) (=> %%global_location_label%%92 (lib!betree.FilteredBetree_v.impl&%3.structure.? self!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%3.result. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::result")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%3.result.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%3.result.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%3.result.? self!) (lib!betree.FilteredBetree_v.impl&%3.result_at.? self! (I 0))) :pattern ((lib!betree.FilteredBetree_v.impl&%3.result.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.impl&%3.result.? self!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.FilteredBetree_v.impl&%3.result.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::query")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query.))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Query_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Label.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Label./Query) c))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (receipt! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query.? pre! post! lbl! receipt!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Query_ tmp_for_match_0$) (let ((end_lsn$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) (let ((key$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) (let ((value$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Query_ tmp_for_match_0$) (let ((end_lsn$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) (let ((key$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) (let ((value$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) (tuple%3./tuple%3 (I end_lsn$) (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Value. value$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Value.)))))) (let ((end_lsn$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((key$ (%Poly%lib!spec.KeyType_t.Key. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((value$ (%Poly%lib!spec.Messages_t.Value. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (= end_lsn$ (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))))) (and (lib!betree.FilteredBetree_v.impl&%3.valid_for.? receipt! (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$)) (= (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.impl&%3.result.? receipt!)) (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$))))))))))))) (and (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query.? pre! post! lbl! receipt!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::put")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put.))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Put_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Label.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Label./Put) c))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put.? pre! post! lbl!) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Put_ tmp_for_match_0$) (let ((puts$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) true)) (let ((puts$ (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Put_ tmp_for_match_0$) (let ((puts$2 (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) puts$2) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (vstd!pervasive.arbitrary.? $ TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.))))) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$))) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))))) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%0.apply_puts.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$))))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::wf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? self!) (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. self!))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::freeze_as")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as.))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Label.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs) c))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as.? pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs_ tmp_for_match_0$) (let ((stamped_betree$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) true)) (let ((stamped_betree$ (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs_ tmp_for_match_0$) (let ((stamped_betree$2 (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. (Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. tmp_for_match_0$))))) stamped_betree$2) (%Poly%lib!abstract_system.StampedMap_v.Stamped. (vstd!pervasive.arbitrary.? $ (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)))))) (and (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? pre!) (and (lib!betree.Memtable_v.impl&%0.is_empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (= stamped_betree$ (lib!abstract_system.StampedMap_v.Stamped./Stamped (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (%I (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))))))))))))) (and (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::extend")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.extend.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.extend.) (forall ((self! Poly) (new_buffers! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.extend.? self! new_buffers!) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.add.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. new_buffers!))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.extend.? self! new_buffers!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. (Poly Poly) Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((self! Poly) (buffers! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. self! buffers!) (=> %%global_location_label%%93 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. self! buffers!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.) (forall ((self! Poly) (buffers! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? self! buffers!) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.extend.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) buffers!))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? self! buffers!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::empty")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.empty.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.empty.) (forall ((no%param Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.empty.? no%param) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.empty.? no%param)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::empty_root")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.empty_root. (Poly) Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((domain! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.empty_root. domain!) (and (=> %%global_location_label%%94 (lib!betree.Domain_v.impl&%1.wf.? domain!)) (=> %%global_location_label%%95 (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. domain!))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.empty_root. domain!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::empty_root")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.empty_root.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.empty_root.) (forall ((domain! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.empty_root.? domain!) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.empty.? (I 0)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.domain_to_pivots.? domain!))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (Poly%lib!betree.FilteredBetree_v.BetreeNode. lib!betree.FilteredBetree_v.BetreeNode./Nil))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (vstd!seq.Seq.empty.? $ NAT) (I 0)))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.empty_root.? domain!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::promote")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.promote. (Poly Poly) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((self! Poly) (domain! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.promote. self! domain!) (and (=> %%global_location_label%%96 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%97 (lib!betree.Domain_v.impl&%1.wf.? domain!)) (=> %%global_location_label%%98 (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. domain!))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.promote. self! domain!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::promote")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.promote.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.promote.) (forall ((self! Poly) (domain! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.promote.? self! domain!) (ite (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (lib!betree.FilteredBetree_v.impl&%1.empty_root.? domain!) (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.promote.? self! domain!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::push_memtable")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.push_memtable. (Poly Poly) Bool)
(declare-const %%global_location_label%%99 Bool)
(assert (forall ((self! Poly) (memtable! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.push_memtable. self! memtable!) (=> %%global_location_label%%99 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.push_memtable. self! memtable!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::push_memtable")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.push_memtable.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.push_memtable.) (forall ((self! Poly) (memtable! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.push_memtable.? self! memtable!) (let ((buffers$ (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. memtable!))))))) (lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.promote.? self! (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? (I 0))))) (Poly%lib!betree.BufferSeq_v.BufferSeq. buffers$)))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.push_memtable.? self! memtable!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::internal_flush_memtable")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable.))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Label.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable.? pre! post! lbl!) (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? pre!) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%1.drain.? (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.impl&%1.push_memtable.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))))) (and (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::grow")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.grow.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.grow.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.grow.? self!) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.empty.? (I 0)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.domain_to_pivots.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? (I 0)))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.) self!)) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (vstd!seq.Seq.empty.? $ NAT) (I 0)))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.grow.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::internal_grow")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow.? pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? pre!) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.impl&%1.grow.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::is_index")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.is_index.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.is_index.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.is_index.? self!) (and (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$)) )))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.is_index.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::Path::subpath")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%4.subpath. (Poly) Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%4.subpath. self!) (and (=> %%global_location_label%%100 (< 0 (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!)))) (=> %%global_location_label%%101 (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. self!))))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%4.subpath. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::subpath")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%4.subpath.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%4.subpath.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%4.subpath.? self!) (let ((depth$ (nClip (Sub (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!)) 1)))) (lib!betree.FilteredBetree_v.Path./Path (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.child.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. self!)))) (%I (I depth$))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.subpath.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.impl&%4.subpath.? self!)) TYPE%lib!betree.FilteredBetree_v.Path.)) :pattern ((lib!betree.FilteredBetree_v.impl&%4.subpath.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::valid")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%4.valid.))
(declare-const fuel_nat%lib!betree.FilteredBetree_v.impl&%4.valid. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetree_v.impl&%4.rec%valid.? self! fuel%) (lib!betree.FilteredBetree_v.impl&%4.rec%valid.? self! zero)) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%valid.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (= (lib!betree.FilteredBetree_v.impl&%4.rec%valid.? self! (succ fuel%)) (and (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!)))) (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. self!))))) (=> (< 0 (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!))) (lib!betree.FilteredBetree_v.impl&%1.is_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) (=> (< 0 (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!))) (lib!betree.FilteredBetree_v.impl&%4.rec%valid.? (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.impl&%4.subpath.? self!)) fuel%))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%valid.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%4.valid.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (= (lib!betree.FilteredBetree_v.impl&%4.valid.? self!) (lib!betree.FilteredBetree_v.impl&%4.rec%valid.? self! (succ fuel_nat%lib!betree.FilteredBetree_v.impl&%4.valid.)))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.valid.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::is_leaf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.is_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.is_leaf.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.is_leaf.? self!) (and (and (and (and (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) 1)) (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0))))) (= (lib!betree.BufferOffsets_v.impl&%0.len.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) 1)) (= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (I 0))) 0))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.is_leaf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::can_split_leaf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.) (forall ((self! Poly) (split_key! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? self! split_key!) (and (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (lib!betree.FilteredBetree_v.impl&%1.is_leaf.? self!)) (lib!betree.Domain_v.impl&%1.contains.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!)) split_key!)) (not (= (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!)))) (lib!spec.KeyType_t.to_element.? split_key!))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? self! split_key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::can_split_index")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_index.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_index.) (forall ((self! Poly) (pivot_idx! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.can_split_index.? self! pivot_idx!) (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (lib!betree.FilteredBetree_v.impl&%1.is_index.? self!)) (and (< 0 (%I pivot_idx!)) (< (%I pivot_idx!) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.can_split_index.? self! pivot_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::can_split_parent")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_parent.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_parent.) (forall ((self! Poly) (request! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? self! request!) (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (and (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! (I child_idx$)) (lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I child_idx$)) (Poly%lib!spec.KeyType_t.Key. split_key$))))) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (and (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! (I child_idx$)) (lib!betree.FilteredBetree_v.impl&%1.can_split_index.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I child_idx$)) (I child_pivot_idx$)))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? self! request!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::Path::target")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%4.target. (Poly) Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%4.target. self!) (=> %%global_location_label%%102 (lib!betree.FilteredBetree_v.impl&%4.valid.? self!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%4.target. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::target")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%4.target.))
(declare-const fuel_nat%lib!betree.FilteredBetree_v.impl&%4.target. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetree_v.impl&%4.rec%target.? self! fuel%) (lib!betree.FilteredBetree_v.impl&%4.rec%target.? self! zero)) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%target.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (= (lib!betree.FilteredBetree_v.impl&%4.rec%target.? self! (succ fuel%)) (ite (= (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!)) 0) (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!)) (lib!betree.FilteredBetree_v.impl&%4.rec%target.? (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.impl&%4.subpath.? self!)) fuel%)))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%target.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%4.target.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (= (lib!betree.FilteredBetree_v.impl&%4.target.? self!) (lib!betree.FilteredBetree_v.impl&%4.rec%target.? self! (succ fuel_nat%lib!betree.FilteredBetree_v.impl&%4.target.)))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.target.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::can_substitute")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%4.can_substitute.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%4.can_substitute.) (forall ((self! Poly) (replacement! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%4.can_substitute.? self! replacement!) (and (and (and (lib!betree.FilteredBetree_v.impl&%4.valid.? self!) (lib!betree.FilteredBetree_v.impl&%1.wf.? replacement!)) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. replacement!))) (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? replacement!) (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? self!)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.can_substitute.? self! replacement!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::Path::replaced_children")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%4.replaced_children. (Poly Poly) Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%4.replaced_children. self! replacement!) (and (=> %%global_location_label%%103 (lib!betree.FilteredBetree_v.impl&%4.can_substitute.? self! replacement!)) (=> %%global_location_label%%104 (< 0 (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%4.replaced_children. self! replacement!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::Path::substitute")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%4.substitute. (Poly Poly) Bool)
(declare-const %%global_location_label%%105 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%4.substitute. self! replacement!) (=> %%global_location_label%%105 (lib!betree.FilteredBetree_v.impl&%4.can_substitute.? self! replacement!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%4.substitute. self! replacement!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::replaced_children")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%4.replaced_children.))
(declare-const fuel_nat%lib!betree.FilteredBetree_v.impl&%4.replaced_children. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! fuel%) (lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! zero)) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (has_type replacement! TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (= (lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! (succ fuel%)) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (let ((new_child$ (lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.impl&%4.subpath.? self!)) replacement! fuel%))) (let ((r$ (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) (vstd!seq.Seq.update.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) (I r$) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_child$))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%4.replaced_children.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (has_type replacement! TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (= (lib!betree.FilteredBetree_v.impl&%4.replaced_children.? self! replacement!) (lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! (succ (succ fuel_nat%lib!betree.FilteredBetree_v.impl&%4.replaced_children.))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.replaced_children.? self! replacement!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::substitute")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%4.substitute.))
(declare-const fuel_nat%lib!betree.FilteredBetree_v.impl&%4.substitute. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? self! replacement! fuel%) (lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? self! replacement! zero)) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (has_type replacement! TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (= (lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? self! replacement! (succ fuel%)) (ite (= (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!)) 0) (%Poly%lib!betree.FilteredBetree_v.BetreeNode. replacement!) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!))))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!))))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? self! replacement! fuel%))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!))))))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%4.substitute.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (has_type replacement! TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (= (lib!betree.FilteredBetree_v.impl&%4.substitute.? self! replacement!) (lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? self! replacement! (succ (succ fuel_nat%lib!betree.FilteredBetree_v.impl&%4.substitute.))))) :pattern ((lib!betree.FilteredBetree_v.impl&%4.substitute.? self! replacement!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_leaf")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.split_leaf. (Poly Poly) Bool)
(declare-const %%global_location_label%%106 Bool)
(assert (forall ((self! Poly) (split_key! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.split_leaf. self! split_key!) (=> %%global_location_label%%106 (lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? self! split_key!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.split_leaf. self! split_key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::split_leaf")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.split_leaf.) (forall ((self! Poly) (split_key! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? self! split_key!) (let ((new_left$ (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.update.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 1) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) (let ((new_right$ (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.update.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) (tuple%2./tuple%2 (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_left$) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_right$))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.split_leaf.? self! split_key!)) ))))
(assert (forall ((self! Poly) (split_key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type split_key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? self! split_key!)) (TYPE%tuple%2. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.split_leaf.? self! split_key!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_index")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.split_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%107 Bool)
(assert (forall ((self! Poly) (pivot_idx! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.split_index. self! pivot_idx!) (=> %%global_location_label%%107 (lib!betree.FilteredBetree_v.impl&%1.can_split_index.? self! pivot_idx!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.split_index. self! pivot_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::split_index")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.split_index.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.split_index.) (forall ((self! Poly) (pivot_idx! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.split_index.? self! pivot_idx!) (let ((idx$ (%I pivot_idx!))) (let ((new_left$ (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.subrange.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0) (I (Add idx$ 1))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0) (I idx$))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0) (I idx$))))))) (let ((new_right$ (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.subrange.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (I (lib!betree.PivotTable_v.impl&%0.len.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (I (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (I (lib!betree.BufferOffsets_v.impl&%0.len.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))))))) (tuple%2./tuple%2 (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_left$) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_right$)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.split_index.? self! pivot_idx!)) ))))
(assert (forall ((self! Poly) (pivot_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type pivot_idx! NAT)) (has_type (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_index.? self! pivot_idx!)) (TYPE%tuple%2. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.split_index.? self! pivot_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_parent")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.split_parent. (Poly Poly) Bool)
(declare-const %%global_location_label%%108 Bool)
(assert (forall ((self! Poly) (request! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.split_parent. self! request!) (=> %%global_location_label%%108 (lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? self! request!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.split_parent. self! request!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::split_parent")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.split_parent.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.split_parent.) (forall ((self! Poly) (request! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.split_parent.? self! request!) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((idx$ child_idx$)) (let ((old_child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$))))) (let ((tmp%%$ (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. old_child$) (Poly%lib!spec.KeyType_t.Key. split_key$)))) (let ((new_left_child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_right_child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I (Add idx$ 1)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. split_key$)))))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.update.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_left_child$)) (I (Add idx$ 1)) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_right_child$))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$)))))))))))) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((idx$ child_idx$)) (let ((old_child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$))))) (let ((tmp%%$ (lib!betree.FilteredBetree_v.impl&%1.split_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. old_child$) (I child_pivot_idx$)))) (let ((new_left_child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_right_child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((split_element$ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. old_child$))))))) (I child_pivot_idx$))))) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I (Add idx$ 1)) (Poly%lib!spec.KeyType_t.Element. split_element$)))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.update.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_left_child$)) (I (Add idx$ 1)) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_right_child$))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$))))))))))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.split_parent.? self! request!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::internal_split")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (path! Poly) (request! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split.? pre! post! lbl! path! request!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.FilteredBetree_v.impl&%4.valid.? path!) (and (lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? path!)) request!) (and (= (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. path!)) (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.impl&%4.substitute.? path! (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.split_parent.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? path!)) request!))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$))))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split.? pre! post! lbl! path! request!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::can_flush")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.can_flush.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.can_flush.) (forall ((self! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.can_flush.? self! child_idx! buffer_gc!) (and (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! child_idx!)) (lib!betree.BufferOffsets_v.impl&%0.all_gte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.update.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) child_idx! (I (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) buffer_gc!))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.can_flush.? self! child_idx! buffer_gc!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::slice")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.slice. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%109 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.slice. self! start! end!) (=> %%global_location_label%%109 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.slice. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::slice")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.slice.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.slice.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.slice.? self! start! end!) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) start! end!)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.slice.? self! start! end!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::flush")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.flush. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%110 Bool)
(assert (forall ((self! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.flush. self! child_idx! buffer_gc!) (=> %%global_location_label%%110 (lib!betree.FilteredBetree_v.impl&%1.can_flush.? self! child_idx! buffer_gc!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.flush. self! child_idx! buffer_gc!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::flush")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.flush.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.flush.) (forall ((self! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.flush.? self! child_idx! buffer_gc!) (let ((idx$ (%I child_idx!))) (let ((flush_upto$ (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (let ((flushed_ofs$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (I idx$))))) (let ((buffers_to_child$ (lib!betree.BufferSeq_v.impl&%0.slice.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I flushed_ofs$) (I flush_upto$)))) (let ((new_child$ (lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.promote.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$)) (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.child_domain.? self! child_idx!)))) (Poly%lib!betree.BufferSeq_v.BufferSeq. buffers_to_child$)))) (let ((bfrs$ (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (let ((start$ (%I buffer_gc!))) (let ((end$ flush_upto$)) (let ((gc_buffers$ (lib!betree.BufferSeq_v.impl&%0.slice.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) buffer_gc! (I flush_upto$)))) (let ((gc_flushed$ (lib!betree.BufferOffsets_v.impl&%0.shift_left.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.update.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (I flush_upto$))) buffer_gc!))) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. gc_buffers$)) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq.update.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I idx$) (Poly%lib!betree.FilteredBetree_v.BetreeNode. new_child$))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. gc_flushed$)))))))))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.flush.? self! child_idx! buffer_gc!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::internal_flush")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (path! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush.? pre! post! lbl! path! child_idx! buffer_gc!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.FilteredBetree_v.impl&%4.valid.? path!) (and (lib!betree.FilteredBetree_v.impl&%1.can_flush.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? path!)) child_idx! buffer_gc!) (and (= (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. path!)) (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.impl&%4.substitute.? path! (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.flush.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? path!)) child_idx! buffer_gc!))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$))))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush.? pre! post! lbl! path! child_idx! buffer_gc!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::spec_index")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%111 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.spec_index. self! i!) (=> %%global_location_label%%111 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.spec_index. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::spec_index")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.spec_index.? self! i!) (%Poly%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) i!))) :pattern ((lib!betree.BufferSeq_v.impl&%0.spec_index.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::key_in_buffer")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer.) (forall ((self! Poly) (from_idx! Poly) (k! Poly) (buffer_idx! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? self! from_idx! k! buffer_idx!) (and (and (<= (%I from_idx!) (%I buffer_idx!)) (< (%I buffer_idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) buffer_idx!))))) k!))) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? self! from_idx! k! buffer_idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::key_in_buffer_filtered")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(assert (forall ((self! Poly) (offset_map! Poly) (from_idx! Poly) (k! Poly) (buffer_idx! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. self! offset_map! from_idx! k! buffer_idx!) (and (=> %%global_location_label%%112 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!)) (=> %%global_location_label%%113 (<= 0 (%I from_idx!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. self! offset_map! from_idx! k! buffer_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::key_in_buffer_filtered")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.) (forall ((self! Poly) (offset_map! Poly) (from_idx! Poly) (k! Poly) (buffer_idx! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? self! offset_map! from_idx! k! buffer_idx!) (and (lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? self! from_idx! k! buffer_idx!) (<= (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) k!)) (%I buffer_idx!)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? self! offset_map! from_idx! k! buffer_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::make_offset_map")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.make_offset_map.))
(declare-fun %%lambda%%12 (Poly Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2) k$) (I (ite (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? %%hole%%0 k$) (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? %%hole%%1 k$) %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.make_offset_map.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%7 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%12 self! self! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::valid_compact_key_domain")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. self! start! end! k!) (and (=> %%global_location_label%%114 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%115 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%116 (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. self! start! end! k!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::valid_compact_key_domain")
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain.) (forall ((self! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain.? self! start! end! k!) (and (and (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! k!) (<= (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! k!) (%I end!))) (exists ((buffer_idx$ Poly)) (! (and (has_type buffer_idx$ INT) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.slice.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) start! end!)) (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.OffsetMap_v.impl&%0.decrement.? (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!)) start!)) (I 0) k! buffer_idx$)) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.slice.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) start! end!)) (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.OffsetMap_v.impl&%0.decrement.? (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!)) start!)) (I 0) k! buffer_idx$)) )))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain.? self! start! end! k!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::can_compact")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.can_compact.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.can_compact.) (forall ((self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.can_compact.? self! start! end! compacted_buffer!) (and (and (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer!)))) k$) (lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain.? self! start! end! k$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer!)))) k$)) ))) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer!)))) k$) (let ((from$ (ite (<= (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! k$) (%I start!)) 0 (Sub (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! k$) (%I start!))))) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer! k$)) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.slice.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) start! end!)) k$ (I from$)))))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer! k$)) )))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.can_compact.? self! start! end! compacted_buffer!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::update_subrange")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.update_subrange. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%117 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly) (new_buffer! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.update_subrange. self! start! end! new_buffer!) (=> %%global_location_label%%117 (and (and (<= 0 (%I start!)) (< (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.update_subrange. self! start! end! new_buffer!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::update_subrange")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange.) (forall ((self! Poly) (start! Poly) (end! Poly) (new_buffer! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.update_subrange.? self! start! end! new_buffer!) (let ((s$ (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) new_buffer!)))) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.add.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.add.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) (I 0) start!) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. s$)) (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) end! (I (lib!betree.BufferSeq_v.impl&%0.len.? self!)))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.update_subrange.? self! start! end! new_buffer!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::compact")
(declare-fun req%lib!betree.FilteredBetree_v.impl&%1.compact. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%118 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (req%lib!betree.FilteredBetree_v.impl&%1.compact. self! start! end! compacted_buffer!) (=> %%global_location_label%%118 (lib!betree.FilteredBetree_v.impl&%1.can_compact.? self! start! end! compacted_buffer!))) :pattern ((req%lib!betree.FilteredBetree_v.impl&%1.compact. self! start! end! compacted_buffer!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::compact")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.impl&%1.compact.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.impl&%1.compact.) (forall ((self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (lib!betree.FilteredBetree_v.impl&%1.compact.? self! start! end! compacted_buffer!) (lib!betree.FilteredBetree_v.BetreeNode./Node (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.update_subrange.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) start! end! compacted_buffer!))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) start! end!))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.compact.? self! start! end! compacted_buffer!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::internal_compact")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (path! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact.? pre! post! lbl! path! start! end! compacted_buffer!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ tmp_for_match_0$) (and (lib!betree.FilteredBetree_v.impl&%4.valid.? path!) (and (lib!betree.FilteredBetree_v.impl&%1.can_compact.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? path!)) start! end! compacted_buffer!) (and (= (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. path!)) (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.impl&%4.substitute.? path! (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.compact.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%4.target.? path!)) start! end! compacted_buffer!))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$))))))) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact.? pre! post! lbl! path! start! end! compacted_buffer!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::internal_noop")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop.? pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (let ((update_tmp_root$ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. lbl!))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Internal_ tmp_for_match_0$) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? pre!))) (and (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::next_by")
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./query_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./query) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./put_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./put) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./freeze_as_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./freeze_as) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_memtable_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_memtable) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_grow_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_grow) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact) c))
(define-fun is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_noop_ ((c lib!betree.FilteredBetree_v.FilteredBetree.Step.)) Bool ((_ is lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_noop) c))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./query_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (let ((receipt$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./query/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.query.? pre! post! label! (Poly%lib!betree.FilteredBetree_v.QueryReceipt. receipt$))) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./put_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.put.? pre! post! label!) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./freeze_as_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.freeze_as.? pre! post! label!) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_memtable_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush_memtable.? pre! post! label!) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_grow_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_grow.? pre! post! label!) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (let ((path$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (let ((request$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_split/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_split.? pre! post! label! (Poly%lib!betree.FilteredBetree_v.Path. path$) (Poly%lib!betree.SplitRequest_v.SplitRequest. request$)))) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (let ((path$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (let ((child_idx$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (let ((buffer_gc$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_flush/2 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_flush.? pre! post! label! (Poly%lib!betree.FilteredBetree_v.Path. path$) (I child_idx$) (I buffer_gc$))))) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (let ((path$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/0 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (let ((start$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/1 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (let ((end$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/2 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (let ((compacted_buffer$ (lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_compact/3 (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)))) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_compact.? pre! post! label! (Poly%lib!betree.FilteredBetree_v.Path. path$) (I start$) (I end$) (Poly%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer$)))))) (and (is-lib!betree.FilteredBetree_v.FilteredBetree.Step./internal_noop_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Step. step!)) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.internal_noop.? pre! post! label!))))))))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::next")
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Step.) (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::initialize")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize.) (forall ((post! Poly) (stamped_betree! Poly)) (! (= (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize.? post! stamped_betree!) (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree!))) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%1.empty_memtable.? (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree!)))))) (let ((update_tmp_root$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree!))))) (and (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_root$) (= (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.initialize.? post! stamped_betree!)) ))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::query")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.query.? self! key!) (lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! (I 0))) :pattern ((lib!betree.BufferSeq_v.impl&%0.query.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.query.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.BufferSeq_v.impl&%0.query.? self! key!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::i_from")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_from. (Poly Poly) Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_from. self! idx!) (and (=> %%global_location_label%%119 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (=> %%global_location_label%%120 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_from. self! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::i_from")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i_from.))
(declare-const fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_from. Fuel)
(assert (forall ((self! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! fuel%) (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! zero)) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! fuel%)) )))
(assert (forall ((self! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! (succ fuel%)) (ite (= (lib!betree.BufferSeq_v.impl&%0.len.? self!) (%I idx!)) (lib!betree.Buffer_v.impl&%1.empty.? (I 0)) (lib!betree.Buffer_v.impl&%1.merge.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) idx!) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! (I (Add (%I idx!) 1)) fuel%)))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i_from.) (forall ((self! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.i_from.? self! idx!) (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! (succ fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_from.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i_from.? self! idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::i")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i.) (forall ((self! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.i.? self!) (lib!betree.BufferSeq_v.impl&%0.i_from.? self! (I 0))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::OffsetMap_v::OffsetMap::active_keys")
(declare-fun req%lib!betree.OffsetMap_v.impl&%0.active_keys. (Poly Poly) Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((self! Poly) (offset! Poly)) (! (= (req%lib!betree.OffsetMap_v.impl&%0.active_keys. self! offset!) (=> %%global_location_label%%121 (lib!betree.OffsetMap_v.impl&%0.is_total.? self!))) :pattern ((req%lib!betree.OffsetMap_v.impl&%0.active_keys. self! offset!)) )))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::active_keys")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.active_keys.))
(declare-fun %%lambda%%13 (Dcr Type Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (<= (%I (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) %%hole%%5))) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.active_keys.) (forall ((self! Poly) (offset! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.active_keys.? self! offset!) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%13 $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I offset!))))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.active_keys.? self! offset!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::i_filtered_from")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(assert (forall ((self! Poly) (offset_map! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. self! offset_map! idx!) (and (=> %%global_location_label%%122 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!)) (=> %%global_location_label%%123 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (=> %%global_location_label%%124 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. self! offset_map! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::i_filtered_from")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from.))
(declare-const fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. Fuel)
(assert (forall ((self! Poly) (offset_map! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! fuel%) (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! zero)) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! fuel%)) )))
(assert (forall ((self! Poly) (offset_map! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type offset_map! TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! (succ fuel%)) (ite (= (lib!betree.BufferSeq_v.impl&%0.len.? self!) (%I idx!)) (lib!betree.Buffer_v.impl&%1.empty.? (I 0)) (let ((bottom_buffer$ (lib!betree.Buffer_v.impl&%1.apply_filter.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) idx!) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.OffsetMap_v.impl&%0.active_keys.? offset_map! (I (nClip (%I idx!)))))))) (lib!betree.Buffer_v.impl&%1.merge.? (Poly%lib!betree.Buffer_v.SimpleBuffer. bottom_buffer$) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! (I (Add (%I idx!) 1)) fuel%))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from.) (forall ((self! Poly) (offset_map! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type offset_map! TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? self! offset_map! idx!) (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! (succ fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_filtered_from.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? self! offset_map! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::i_filtered")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_filtered. (Poly Poly) Bool)
(declare-const %%global_location_label%%125 Bool)
(assert (forall ((self! Poly) (offset_map! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_filtered. self! offset_map!) (=> %%global_location_label%%125 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_filtered. self! offset_map!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferSeq_v::BufferSeq::i_filtered")
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered.) (forall ((self! Poly) (offset_map! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.i_filtered.? self! offset_map!) (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? self! offset_map! (I 0))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i_filtered.? self! offset_map!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::includes")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.includes.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.includes.) (forall ((self! Poly) (other! Poly)) (! (= (lib!betree.Domain_v.impl&%1.includes.? self! other!) (and (and (and (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. other!))) (lib!spec.KeyType_t.impl&%2.lte.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. other!))))) (lib!spec.KeyType_t.impl&%2.lte.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. other!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.includes.? self! other!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_buffer")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer. (Poly) Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer. self!) (and (=> %%global_location_label%%126 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%127 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::BetreeNode::i_buffer")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:23:5: 23:61 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::i_buffer")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? self!) (let ((offset_map$ (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!))) (lib!betree.BufferSeq_v.impl&%0.i_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map$)))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_children")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children. (Poly) Bool)
(declare-const %%global_location_label%%128 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children. self!) (=> %%global_location_label%%128 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children. self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i. (Poly) Bool)
(declare-const %%global_location_label%%129 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i. self!) (=> %%global_location_label%%129 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i. self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_children_seq")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq. (Poly Poly) Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(assert (forall ((self! Poly) (start! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq. self! start!) (and (=> %%global_location_label%%130 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%131 (and (<= 0 (%I start!)) (<= (%I start!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) (=> %%global_location_label%%132 (and (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (and (<= 0 (%I start!)) (<= (%I start!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq. self! start!)) )))
(set-info :comment ";; Spec-Termination lib::betree::FilteredBetree_v::BetreeNode::i_children")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:44:5: 44:81 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::BetreeNode::i_children")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:44:5: 44:81 (#0)")
(set-info :comment ";; Spec-Termination lib::betree::FilteredBetree_v::BetreeNode::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:51:5: 51:67 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::BetreeNode::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:51:5: 51:67 (#0)")
(set-info :comment ";; Spec-Termination lib::betree::FilteredBetree_v::BetreeNode::i_children_seq")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:30:5: 30:105 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::i_children")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children.))
(declare-const fuel_nat%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! fuel%) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! zero)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! (succ fuel%)) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! (I 0) fuel%))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children.? self!) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! (succ (succ (succ fuel_nat%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children.)))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::i")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i.))
(declare-const fuel_nat%lib!betree.FilteredBetreeRefinement_v.impl&%0.i. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? self! fuel%) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? self! zero)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? self! (succ fuel%)) (ite (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) lib!betree.PivotBetree_v.BetreeNode./Nil (lib!betree.PivotBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? self!))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children.? self! fuel%))))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? self!) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? self! (succ (succ (succ fuel_nat%lib!betree.FilteredBetreeRefinement_v.impl&%0.i.)))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::i_children_seq")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.))
(declare-const fuel_nat%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq. Fuel)
(assert (forall ((self! Poly) (start! Poly) (fuel% Fuel)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! start! fuel%) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! start! zero)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! start! fuel%)) )))
(assert (forall ((self! Poly) (start! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type start! INT) (and (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (and (<= 0 (%I start!)) (<= (%I start!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! start! (succ fuel%)) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (ite (= (%I start!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) (vstd!seq.Seq.empty.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) (let ((child$ (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) start!) fuel%))) (vstd!seq.Seq.add.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.push.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) (Poly%lib!betree.PivotBetree_v.BetreeNode. child$)) (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! (I (Add (%I start!) 1)) fuel%)))))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! start! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.) (forall ((self! Poly) (start! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type start! INT) (and (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (and (<= 0 (%I start!)) (<= (%I start!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? self! start!) (lib!betree.FilteredBetreeRefinement_v.impl&%0.rec%i_children_seq.? self! start! (succ fuel_nat%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.)))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? self! start!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::is_active_key")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key. (Poly Poly) Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(assert (forall ((self! Poly) (k! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key. self! k!) (and (=> %%global_location_label%%133 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%134 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key. self! k!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::BetreeNode::is_active_key")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:123:26: 123:64 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::is_active_key")
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.) (forall ((self! Poly) (k! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.? self! k!) (exists ((idx$ Poly)) (! (and (has_type idx$ INT) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!)) (I 0) k! idx$)) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? self!)) (I 0) k! idx$)) ))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.? self! k!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::children_have_matching_domains")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains. (Poly Poly) Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(assert (forall ((self! Poly) (other_children! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains. self! other_children!) (and (=> %%global_location_label%%135 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%136 (lib!betree.FilteredBetree_v.impl&%1.is_index.? self!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains. self! other_children!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::children_have_matching_domains")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains.) (forall ((self! Poly) (other_children! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains.? self! other_children!) (and (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. other_children!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! i$) (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. other_children! i$)) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. other_children! i$)))) (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. other_children! i$)) (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) i$)))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? self! i$)) )))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.children_have_matching_domains.? self! other_children!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_element")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element. (Poly Poly) Bool)
(declare-const %%global_location_label%%137 Bool)
(assert (forall ((self! Poly) (request! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element. self! request!) (=> %%global_location_label%%137 (lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? self! request!))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element. self! request!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::BetreeNode::split_element")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:331:5: 331:84 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::split_element")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.) (forall ((self! Poly) (request! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.? self! request!) (let ((child$ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? request!)))))) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. split_key$)))) (%Poly%lib!spec.KeyType_t.Element. (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. child$))))))) (I child_pivot_idx$)))))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.? self! request!)) ))))
(assert (forall ((self! Poly) (request! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type request! TYPE%lib!betree.SplitRequest_v.SplitRequest.)) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.? self! request!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.split_element.? self! request!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::shared_keys_same_active_range")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range. (Poly Poly) Bool)
(declare-const %%global_location_label%%138 Bool)
(declare-const %%global_location_label%%139 Bool)
(assert (forall ((self! Poly) (other! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range. self! other!) (and (=> %%global_location_label%%138 (lib!betree.FilteredBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%139 (lib!betree.FilteredBetree_v.impl&%1.wf.? other!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range. self! other!)) )))
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::BetreeNode::shared_keys_same_active_range")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range.) (forall ((self! Poly) (other! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range.? self! other!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (=> (and (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? other! k$) (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! k$)) (= (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? other! k$) (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! k$)))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? other! k$)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! k$)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? other! k$)) :pattern ((lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! k$)) ))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range.? self! other!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetreeRefinement_v::i_stamped_betree")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree. (Poly) Bool)
(declare-const %%global_location_label%%140 Bool)
(assert (forall ((stamped! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree. stamped!) (=> %%global_location_label%%140 (lib!betree.FilteredBetree_v.impl&%1.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree. stamped!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetreeRefinement_v::i_stamped_betree")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:866:1: 866:99 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetreeRefinement_v::i_stamped_betree")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.) (forall ((stamped! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.? stamped!) (lib!abstract_system.StampedMap_v.Stamped./Stamped (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped!)))) (%I (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped!)))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.? stamped!)) ))))
(assert (forall ((stamped! Poly)) (! (=> (has_type stamped! (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.? stamped!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.))) :pattern ((lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.? stamped!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceiptLine::i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%1.i. (Poly) Bool)
(declare-const %%global_location_label%%141 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%1.i. self!) (=> %%global_location_label%%141 (lib!betree.FilteredBetree_v.impl&%2.wf.? self!))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%1.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::QueryReceiptLine::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:874:5: 874:73 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceiptLine::i")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%1.i.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%1.i.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%1.i.? self!) (lib!betree.PivotBetree_v.QueryReceiptLine./QueryReceiptLine (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. self!)))))) (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. self!)))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%1.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.) (has_type (Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (lib!betree.FilteredBetreeRefinement_v.impl&%1.i.? self!)) TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%1.i.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::QueryReceipt::i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%2.i. (Poly) Bool)
(declare-const %%global_location_label%%142 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%2.i. self!) (=> %%global_location_label%%142 (lib!betree.FilteredBetree_v.impl&%3.valid.? self!))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%2.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::QueryReceipt::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:882:5: 882:69 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::QueryReceipt::i")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%2.i.))
(declare-fun %%lambda%%14 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2) i$) (Poly%lib!betree.PivotBetree_v.QueryReceiptLine. (lib!betree.FilteredBetreeRefinement_v.impl&%1.i.? (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%2.i.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%2.i.? self!) (lib!betree.PivotBetree_v.QueryReceipt./QueryReceipt (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) (I 0)))))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.QueryReceiptLine.>. (vstd!seq.Seq.new.? $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine. $ (TYPE%fun%1. $ INT $ TYPE%lib!betree.PivotBetree_v.QueryReceiptLine.) (I (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (Poly%fun%1. (mk_fun (%%lambda%%14 $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%2.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (has_type (Poly%lib!betree.PivotBetree_v.QueryReceipt. (lib!betree.FilteredBetreeRefinement_v.impl&%2.i.? self!)) TYPE%lib!betree.PivotBetree_v.QueryReceipt.)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%2.i.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::Path::i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%3.i. (Poly) Bool)
(declare-const %%global_location_label%%143 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%3.i. self!) (=> %%global_location_label%%143 (lib!betree.FilteredBetree_v.impl&%4.valid.? self!))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%3.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::Path::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:923:5: 923:61 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::Path::i")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%3.i.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%3.i.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%3.i.? self!) (lib!betree.PivotBetree_v.Path./Path (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.Path./Path/node (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. self!)))) (%I (I (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. self!)))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%3.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.Path.) (has_type (Poly%lib!betree.PivotBetree_v.Path. (lib!betree.FilteredBetreeRefinement_v.impl&%3.i.? self!)) TYPE%lib!betree.PivotBetree_v.Path.)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%3.i.? self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::FilteredBetree::Label::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:1081:5: 1081:60 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::Label::i")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%4.i.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%4.i.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%4.i.? self!) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Query_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)) (let ((end_lsn$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/end_lsn (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)))) (let ((key$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/key (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)))) (let ((value$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Query/value (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)))) (lib!betree.PivotBetree_v.PivotBetree.Label./Query (%I (I end_lsn$)) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. key$)) (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$)))))) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./Put_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)) (let ((puts$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./Put/puts (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)))) (lib!betree.PivotBetree_v.PivotBetree.Label./Put (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)))) (ite (is-lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs_ (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)) (let ((stamped_betree$ (lib!betree.FilteredBetree_v.FilteredBetree.Label./FreezeAs/stamped_betree (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.Label. self!)))) (lib!betree.PivotBetree_v.PivotBetree.Label./FreezeAs (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (ite (lib!betree.FilteredBetree_v.impl&%1.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree$)))) (lib!betree.FilteredBetreeRefinement_v.i_stamped_betree.? (Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree$)) (%Poly%lib!abstract_system.StampedMap_v.Stamped. (vstd!pervasive.arbitrary.? $ (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.)))))))) lib!betree.PivotBetree_v.PivotBetree.Label./Internal)))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%4.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.FilteredBetree.Label.) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.Label. (lib!betree.FilteredBetreeRefinement_v.impl&%4.i.? self!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.Label.)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%4.i.? self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::FilteredBetree::State::inv")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:1096:5: 1096:48 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::inv")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.inv.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%5.inv.? self!) (and (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? self!) (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. self!))) (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. self!)))) (lib!betree.Domain_v.total_domain.? (I 0)))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%5.inv.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::FilteredBetree::State::i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%5.i. (Poly) Bool)
(declare-const %%global_location_label%%144 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%5.i. self!) (=> %%global_location_label%%144 (lib!betree.FilteredBetree_v.FilteredBetree.impl&%5.wf.? self!))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%5.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::FilteredBetree::State::i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:1101:5: 1101:60 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::FilteredBetree_v::FilteredBetree::State::i")
(assert (fuel_bool_default fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.i.))
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%5.i.) (forall ((self! Poly)) (! (= (lib!betree.FilteredBetreeRefinement_v.impl&%5.i.? self!) (lib!betree.PivotBetree_v.PivotBetree.State./State (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/memtable (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. self!)))) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.FilteredBetree.State./State/root (%Poly%lib!betree.FilteredBetree_v.FilteredBetree.State. self!)))))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%5.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.FilteredBetree.State.) (has_type (Poly%lib!betree.PivotBetree_v.PivotBetree.State. (lib!betree.FilteredBetreeRefinement_v.impl&%5.i.? self!)) TYPE%lib!betree.PivotBetree_v.PivotBetree.State.)) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%5.i.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::route_is_lemma")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.route_is_lemma. (lib!betree.PivotTable_v.PivotTable. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(declare-const %%global_location_label%%148 Bool)
(assert (forall ((self! lib!betree.PivotTable_v.PivotTable.) (key! lib!spec.KeyType_t.Key.) (r! Int)) (! (= (req%lib!betree.PivotTable_v.impl&%0.route_is_lemma. self! key! r!) (and (=> %%global_location_label%%145 (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. self!))) (=> %%global_location_label%%146 (and (<= 0 r!) (< r! (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. self!))))) (=> %%global_location_label%%147 (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. self!)))) (I r!)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. key!))))) (=> %%global_location_label%%148 (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. key!))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. self!)))) (I (Add r! 1))))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.route_is_lemma. self! key! r!)) )))
(declare-fun ens%lib!betree.PivotTable_v.impl&%0.route_is_lemma. (lib!betree.PivotTable_v.PivotTable. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((self! lib!betree.PivotTable_v.PivotTable.) (key! lib!spec.KeyType_t.Key.) (r! Int)) (! (= (ens%lib!betree.PivotTable_v.impl&%0.route_is_lemma. self! key! r!) (and (lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (Poly%lib!spec.KeyType_t.Key. key!)) (= (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (Poly%lib!spec.KeyType_t.Key. key!)) r!))) :pattern ((ens%lib!betree.PivotTable_v.impl&%0.route_is_lemma. self! key! r!)) )))
(set-info :comment ";; Broadcast lib::betree::PivotTable_v::PivotTable::route_is_lemma")
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.route_is_lemma.) (forall ((self! Poly) (key! Poly) (r! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type r! INT)) (=> (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? self!) (and (<= 0 (%I r!)) (< (%I r!) (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)))) (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) r!) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (Add (%I r!) 1))))) (and (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!) (= (lib!betree.PivotTable_v.impl&%0.route.? self! key!) (%I r!))))) :pattern ((lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) r!) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) ))))
(set-info :comment ";; Function-Axioms lib::betree::SplitRequest_v::SplitRequest::arrow_split_key")
(assert (fuel_bool_default fuel%lib!betree.SplitRequest_v.impl&%0.arrow_split_key.))
(assert (=> (fuel_bool fuel%lib!betree.SplitRequest_v.impl&%0.arrow_split_key.) (forall ((self! Poly)) (! (= (lib!betree.SplitRequest_v.impl&%0.arrow_split_key.? self!) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!))) :pattern ((lib!betree.SplitRequest_v.impl&%0.arrow_split_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.SplitRequest_v.impl&%0.arrow_split_key.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.SplitRequest_v.impl&%0.arrow_split_key.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::SplitRequest_v::SplitRequest::arrow_child_pivot_idx")
(assert (fuel_bool_default fuel%lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.))
(assert (=> (fuel_bool fuel%lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.) (forall ((self! Poly)) (! (= (lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.? self!) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!))) :pattern ((lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.? self!))) :pattern ((lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.? self!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::insert_wf")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.insert_wf. (lib!betree.PivotTable_v.PivotTable. Int lib!spec.KeyType_t.Element.) Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(assert (forall ((self! lib!betree.PivotTable_v.PivotTable.) (idx! Int) (element! lib!spec.KeyType_t.Element.)) (! (= (req%lib!betree.PivotTable_v.impl&%0.insert_wf. self! idx! element!) (and (=> %%global_location_label%%149 (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. self!))) (=> %%global_location_label%%150 (lib!betree.PivotTable_v.impl&%0.can_insert.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (I idx!) (Poly%lib!spec.KeyType_t.Element. element!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.insert_wf. self! idx! element!)) )))
(declare-fun ens%lib!betree.PivotTable_v.impl&%0.insert_wf. (lib!betree.PivotTable_v.PivotTable. Int lib!spec.KeyType_t.Element.) Bool)
(assert (forall ((self! lib!betree.PivotTable_v.PivotTable.) (idx! Int) (element! lib!spec.KeyType_t.Element.)) (! (= (ens%lib!betree.PivotTable_v.impl&%0.insert_wf. self! idx! element!) (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (I idx!) (Poly%lib!spec.KeyType_t.Element. element!))))) :pattern ((ens%lib!betree.PivotTable_v.impl&%0.insert_wf. self! idx! element!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::shift_left_preserves_lte")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.shift_left_preserves_lte. (lib!betree.BufferOffsets_v.BufferOffsets. Int Int) Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(declare-const %%global_location_label%%153 Bool)
(assert (forall ((self! lib!betree.BufferOffsets_v.BufferOffsets.) (target! Int) (limit! Int)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.shift_left_preserves_lte. self! target! limit!) (and (=> %%global_location_label%%151 (lib!betree.BufferOffsets_v.impl&%0.all_gte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!) (I target!))) (=> %%global_location_label%%152 (lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!) (I limit!))) (=> %%global_location_label%%153 (>= limit! target!)))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.shift_left_preserves_lte. self! target! limit!)) )))
(declare-fun ens%lib!betree.BufferOffsets_v.impl&%0.shift_left_preserves_lte. (lib!betree.BufferOffsets_v.BufferOffsets. Int Int) Bool)
(assert (forall ((self! lib!betree.BufferOffsets_v.BufferOffsets.) (target! Int) (limit! Int)) (! (= (ens%lib!betree.BufferOffsets_v.impl&%0.shift_left_preserves_lte. self! target! limit!) (lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.shift_left.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!) (I target!))) (I (nClip (Sub limit! target!))))) :pattern ((ens%lib!betree.BufferOffsets_v.impl&%0.shift_left_preserves_lte. self! target! limit!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::query_agrees_with_i")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%154 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!) (=> %%global_location_label%%154 (and (<= 0 start!) (<= start! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!) (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I start!))))))) (Poly%lib!spec.KeyType_t.Key. k!)) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start!)) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I start!)))))) (Poly%lib!spec.KeyType_t.Key. k!))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I start!))))))) (Poly%lib!spec.KeyType_t.Key. k!))) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::i_from_domain")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_from_domain. (lib!betree.BufferSeq_v.BufferSeq. Int) Bool)
(declare-const %%global_location_label%%155 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (idx! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!) (=> %%global_location_label%%155 (and (<= 0 idx!) (<= idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.i_from_domain. (lib!betree.BufferSeq_v.BufferSeq. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (idx! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!))))))) k$) (exists ((buffer_idx$ Poly)) (! (and (has_type buffer_idx$ INT) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!) k$ buffer_idx$)) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!) k$ buffer_idx$)) )))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!))))))) k$)) ))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::i_filtered_from_domain")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.OffsetMap_v.OffsetMap. Int) Bool)
(declare-const %%global_location_label%%156 Bool)
(declare-const %%global_location_label%%157 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (offset_map! lib!betree.OffsetMap_v.OffsetMap.) (idx! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!) (and (=> %%global_location_label%%156 (lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) (=> %%global_location_label%%157 (and (<= 0 idx!) (<= idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.OffsetMap_v.OffsetMap. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (offset_map! lib!betree.OffsetMap_v.OffsetMap.) (idx! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!))))))) k$) (exists ((buffer_idx$ Poly)) (! (and (has_type buffer_idx$ INT) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!) k$ buffer_idx$)) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!) k$ buffer_idx$)) )))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!))))))) k$)) ))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::query_from_same_as_i_filtered")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int lib!betree.OffsetMap_v.OffsetMap.) Bool)
(declare-const %%global_location_label%%158 Bool)
(declare-const %%global_location_label%%159 Bool)
(declare-const %%global_location_label%%160 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (buffer_idx! Int) (offset_map! lib!betree.OffsetMap_v.OffsetMap.)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!) (and (=> %%global_location_label%%158 (lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) (=> %%global_location_label%%159 (and (<= 0 buffer_idx!) (<= buffer_idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))) (=> %%global_location_label%%160 (<= (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int lib!betree.OffsetMap_v.OffsetMap.) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (buffer_idx! Int) (offset_map! lib!betree.OffsetMap_v.OffsetMap.)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!) (let ((start$ (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))) (Poly%lib!spec.KeyType_t.Key. k!))))) (and (=> (<= start$ buffer_idx!) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I buffer_idx!))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I buffer_idx!)))) (=> (> start$ buffer_idx!) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I buffer_idx!))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start$))))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::common_buffer_seqs")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.common_buffer_seqs. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.BufferSeq_v.BufferSeq. Int Int lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%161 Bool)
(declare-const %%global_location_label%%162 Bool)
(declare-const %%global_location_label%%163 Bool)
(declare-const %%global_location_label%%164 Bool)
(assert (forall ((a! lib!betree.BufferSeq_v.BufferSeq.) (b! lib!betree.BufferSeq_v.BufferSeq.) (a_start! Int) (b_delta! Int) (key! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.common_buffer_seqs. a! b! a_start! b_delta! key!) (and (=> %%global_location_label%%161 (and (<= 0 a_start!) (<= a_start! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. a!))))) (=> %%global_location_label%%162 (let ((tmp%%$ (Add a_start! b_delta!))) (and (<= 0 tmp%%$) (<= tmp%%$ (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. b!)))))) (=> %%global_location_label%%163 (= (Sub (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. a!)) a_start!) (Sub (Sub (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. b!)) a_start!) b_delta!))) (=> %%global_location_label%%164 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= a_start! (%I i$)) (< (%I i$) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. a!)))) (= (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. a!)))) i$) (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. b!)))) (I (Add (%I i$) b_delta!)))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. a!)))) i$)) ))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.common_buffer_seqs. a! b! a_start! b_delta! key!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.common_buffer_seqs. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.BufferSeq_v.BufferSeq. Int Int lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((a! lib!betree.BufferSeq_v.BufferSeq.) (b! lib!betree.BufferSeq_v.BufferSeq.) (a_start! Int) (b_delta! Int) (key! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.common_buffer_seqs. a! b! a_start! b_delta! key!) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. a!) (Poly%lib!spec.KeyType_t.Key. key!) (I a_start!)) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. b!) (Poly%lib!spec.KeyType_t.Key. key!) (I (Add a_start! b_delta!))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.common_buffer_seqs. a! b! a_start! b_delta! key!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::extend_buffer_seq_query_ensures")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.extend_buffer_seq_query_ensures. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%165 Bool)
(assert (forall ((top! lib!betree.BufferSeq_v.BufferSeq.) (bottom! lib!betree.BufferSeq_v.BufferSeq.) (key! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.extend_buffer_seq_query_ensures. top! bottom! key! start!) (=> %%global_location_label%%165 (and (<= 0 start!) (<= start! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. bottom!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.extend_buffer_seq_query_ensures. top! bottom! key! start!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.extend_buffer_seq_query_ensures. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((top! lib!betree.BufferSeq_v.BufferSeq.) (bottom! lib!betree.BufferSeq_v.BufferSeq.) (key! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.extend_buffer_seq_query_ensures. top! bottom! key! start!) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.impl&%0.extend.? (Poly%lib!betree.BufferSeq_v.BufferSeq. bottom!) (Poly%lib!betree.BufferSeq_v.BufferSeq. top!))) (Poly%lib!spec.KeyType_t.Key. key!) (I start!)) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. bottom!) (Poly%lib!spec.KeyType_t.Key. key!) (I start!))) (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.query.? (Poly%lib!betree.BufferSeq_v.BufferSeq. top!) (Poly%lib!spec.KeyType_t.Key. key!)))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.extend_buffer_seq_query_ensures. top! bottom! key! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferSeq_v::BufferSeq::not_present_query_lemma")
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.not_present_query_lemma. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%166 Bool)
(declare-const %%global_location_label%%167 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.not_present_query_lemma. self! k! start!) (and (=> %%global_location_label%%166 (and (<= 0 start!) (<= start! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))) (=> %%global_location_label%%167 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= start! (%I i$)) (< (%I i$) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))) i$))))) (Poly%lib!spec.KeyType_t.Key. k!))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))) i$)) ))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.not_present_query_lemma. self! k! start!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.not_present_query_lemma. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.not_present_query_lemma. self! k! start!) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.not_present_query_lemma. self! k! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_children_lemma")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_lemma. (lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(declare-const %%global_location_label%%168 Bool)
(declare-const %%global_location_label%%169 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_lemma. self!) (and (=> %%global_location_label%%168 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%169 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_lemma. self!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_lemma. (lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_lemma. self!) (and (lib!betree.PivotBetree_v.impl&%1.wf_children.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) i$) (= (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) i$)) (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) i$))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) i$)) )))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_lemma. self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_wf")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. (lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(declare-const %%global_location_label%%170 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. self!) (=> %%global_location_label%%170 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. self!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. (lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. self!) (and (lib!betree.PivotBetree_v.impl&%1.wf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!) (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (lib!betree.PivotBetree_v.impl&%1.my_domain.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf. self!)) )))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_children_seq_lemma")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq_lemma. (lib!betree.FilteredBetree_v.BetreeNode. Int) Bool)
(declare-const %%global_location_label%%171 Bool)
(declare-const %%global_location_label%%172 Bool)
(declare-const %%global_location_label%%173 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (start! Int)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq_lemma. self! start!) (and (=> %%global_location_label%%171 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%172 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%173 (and (<= 0 start!) (<= start! (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq_lemma. self! start!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq_lemma. (lib!betree.FilteredBetree_v.BetreeNode. Int) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (start! Int)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq_lemma. self! start!) (and (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I start!)))) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))) start!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I start!)))))) (and (lib!betree.PivotBetree_v.impl&%1.wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I start!))) i$)) (= (%Poly%lib!betree.PivotBetree_v.BetreeNode. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I start!))) i$)) (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (I (Add (%I i$) start!)))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I start!))) i$)) )))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_children_seq_lemma. self! start!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::i_children_lemma")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:87:11: 87:36 (#0)")
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::i_wf")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:99:21: 99:34 (#0)")
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::i_children_seq_lemma")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:66:11: 66:52 (#0)")
(set-info :comment ";; Broadcast lib::betree::FilteredBetree_v::BetreeNode::i_wf")
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (=> (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (and (lib!betree.PivotBetree_v.impl&%1.wf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? self!))) (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)) (= (lib!betree.FilteredBetree_v.impl&%1.my_domain.? self!) (lib!betree.PivotBetree_v.impl&%1.my_domain.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? self!)))))))) :pattern ((lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::instantiate_buffer_idx_for_active_key")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.instantiate_buffer_idx_for_active_key. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%174 Bool)
(declare-const %%global_location_label%%175 Bool)
(declare-const %%global_location_label%%176 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (k! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.instantiate_buffer_idx_for_active_key. self! k!) (and (=> %%global_location_label%%174 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%175 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%176 (lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. k!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.instantiate_buffer_idx_for_active_key. self! k!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.instantiate_buffer_idx_for_active_key. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (k! lib!spec.KeyType_t.Key.) (idx! Int)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.instantiate_buffer_idx_for_active_key. self! k! idx!) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0) (Poly%lib!spec.KeyType_t.Key. k!) (I idx!))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.instantiate_buffer_idx_for_active_key. self! k! idx!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::instantiate_buffer_idx_for_active_key")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:129:11: 129:78 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::key_in_buffer_implies_active_key")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.key_in_buffer_implies_active_key. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%177 Bool)
(declare-const %%global_location_label%%178 Bool)
(declare-const %%global_location_label%%179 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (k! lib!spec.KeyType_t.Key.) (idx! Int)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.key_in_buffer_implies_active_key. self! k! idx!) (and (=> %%global_location_label%%177 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%178 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%179 (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (I 0) (Poly%lib!spec.KeyType_t.Key. k!) (I idx!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.key_in_buffer_implies_active_key. self! k! idx!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.key_in_buffer_implies_active_key. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (k! lib!spec.KeyType_t.Key.) (idx! Int)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.key_in_buffer_implies_active_key. self! k! idx!) (lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. k!))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.key_in_buffer_implies_active_key. self! k! idx!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::key_in_buffer_implies_active_key")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:142:11: 142:70 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_buffer_domain")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer_domain. (lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(declare-const %%global_location_label%%180 Bool)
(declare-const %%global_location_label%%181 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer_domain. self!) (and (=> %%global_location_label%%180 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%181 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer_domain. self!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer_domain. (lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer_domain. self!) (and (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) k$) (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) k$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) k$)) )) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) k$) (lib!betree.FilteredBetreeRefinement_v.impl&%0.is_active_key.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) k$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))) k$)) )))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_buffer_domain. self!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::i_buffer_domain")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:153:11: 153:35 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::query_from_refines")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%182 Bool)
(declare-const %%global_location_label%%183 Bool)
(declare-const %%global_location_label%%184 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (key! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. self! key!) (and (=> %%global_location_label%%182 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%183 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%184 (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. key!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. self! key!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (key! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. self! key!) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (Poly%lib!spec.KeyType_t.Key. key!) (I (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. key!)))) (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (Poly%lib!spec.KeyType_t.Key. key!))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines. self! key!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::query_from_refines")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:163:21: 163:58 (#0)")
(set-info :comment ";; Broadcast lib::betree::FilteredBetree_v::BetreeNode::query_from_refines")
(assert (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.query_from_refines.) (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (=> (and (and (lib!betree.FilteredBetree_v.impl&%1.wf.? self!) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! key!)) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) key! (I (lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? self! key!))) (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? self!))))) key!))))) :pattern ((lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::i_preserves_children")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_preserves_children. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.FilteredBetree_v.BetreeNode. Int Int) Bool)
(declare-const %%global_location_label%%185 Bool)
(declare-const %%global_location_label%%186 Bool)
(declare-const %%global_location_label%%187 Bool)
(declare-const %%global_location_label%%188 Bool)
(declare-const %%global_location_label%%189 Bool)
(declare-const %%global_location_label%%190 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (other! lib!betree.FilteredBetree_v.BetreeNode.) (start! Int) (end! Int)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_preserves_children. self! other! start! end!) (and (=> %%global_location_label%%185 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%186 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!))) (=> %%global_location_label%%187 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%188 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ other!)) (=> %%global_location_label%%189 (and (and (<= 0 start!) (<= start! end!)) (<= end! (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))) (=> %%global_location_label%%190 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))) (I start!) (I end!)) (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!)))))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_preserves_children. self! other! start! end!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_preserves_children. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.FilteredBetree_v.BetreeNode. Int Int) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (other! lib!betree.FilteredBetree_v.BetreeNode.) (start! Int) (end! Int)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_preserves_children. self! other! start! end!) (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.PivotBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (I start!) (I end!)) (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!)))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_preserves_children. self! other! start! end!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::i_preserves_children")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:183:11: 183:75 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::child_domain_implies_key_in_domain")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.child_domain_implies_key_in_domain. (lib!betree.FilteredBetree_v.BetreeNode. Int) Bool)
(declare-const %%global_location_label%%191 Bool)
(declare-const %%global_location_label%%192 Bool)
(declare-const %%global_location_label%%193 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (child_idx! Int)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.child_domain_implies_key_in_domain. self! child_idx!) (and (=> %%global_location_label%%191 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%192 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%193 (< child_idx! (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.BetreeNode. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))))))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.child_domain_implies_key_in_domain. self! child_idx!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.child_domain_implies_key_in_domain. (lib!betree.FilteredBetree_v.BetreeNode. Int) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (child_idx! Int)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.child_domain_implies_key_in_domain. self! child_idx!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (=> (lib!betree.Domain_v.impl&%1.contains.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.child_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I child_idx!))) k$) (lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) k$))) :pattern ((lib!betree.Domain_v.impl&%1.contains.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.child_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I child_idx!))) k$)) ))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.child_domain_implies_key_in_domain. self! child_idx!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::child_domain_implies_key_in_domain")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:207:11: 207:70 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq_wf")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_wf. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.BufferSeq_v.BufferSeq.) Bool)
(declare-const %%global_location_label%%194 Bool)
(declare-const %%global_location_label%%195 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (buffers! lib!betree.BufferSeq_v.BufferSeq.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_wf. self! buffers!) (and (=> %%global_location_label%%194 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%195 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_wf. self! buffers!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_wf. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.BufferSeq_v.BufferSeq.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (buffers! lib!betree.BufferSeq_v.BufferSeq.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_wf. self! buffers!) (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!betree.BufferSeq_v.BufferSeq. buffers!))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_wf. self! buffers!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq_wf")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:230:11: 230:60 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq_refines_merge_buffer")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_refines_merge_buffer. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.BufferSeq_v.BufferSeq.) Bool)
(declare-const %%global_location_label%%196 Bool)
(declare-const %%global_location_label%%197 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (buffers! lib!betree.BufferSeq_v.BufferSeq.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_refines_merge_buffer. self! buffers!) (and (=> %%global_location_label%%196 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%197 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_refines_merge_buffer. self! buffers!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_refines_merge_buffer. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.BufferSeq_v.BufferSeq.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (buffers! lib!betree.BufferSeq_v.BufferSeq.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_refines_merge_buffer. self! buffers!) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!betree.BufferSeq_v.BufferSeq. buffers!)))) (lib!betree.PivotBetree_v.impl&%1.merge_buffer.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i.? (Poly%lib!betree.BufferSeq_v.BufferSeq. buffers!))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.extend_buffer_seq_refines_merge_buffer. self! buffers!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq_refines_merge_buffer")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:240:11: 240:78 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::promote_commutes_with_i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.promote_commutes_with_i. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.Domain_v.Domain.) Bool)
(declare-const %%global_location_label%%198 Bool)
(declare-const %%global_location_label%%199 Bool)
(declare-const %%global_location_label%%200 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (domain! lib!betree.Domain_v.Domain.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.promote_commutes_with_i. self! domain!) (and (=> %%global_location_label%%198 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%199 (lib!betree.Domain_v.impl&%1.wf.? (Poly%lib!betree.Domain_v.Domain. domain!))) (=> %%global_location_label%%200 (is-lib!betree.Domain_v.Domain./Domain_ domain!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.promote_commutes_with_i. self! domain!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.promote_commutes_with_i. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.Domain_v.Domain.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (domain! lib!betree.Domain_v.Domain.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.promote_commutes_with_i. self! domain!) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.promote.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!betree.Domain_v.Domain. domain!)))) (lib!betree.PivotBetree_v.impl&%1.promote.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!betree.Domain_v.Domain. domain!)))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.promote_commutes_with_i. self! domain!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::promote_commutes_with_i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:319:11: 319:59 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_leaf_wf")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%201 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (split_key! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. self! split_key!) (=> %%global_location_label%%201 (lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. self! split_key!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (split_key! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. self! split_key!) (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. self! split_key!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::split_leaf_wf")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:341:11: 341:49 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_index_wf")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_index_wf. (lib!betree.FilteredBetree_v.BetreeNode. Int) Bool)
(declare-const %%global_location_label%%202 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (pivot_idx! Int)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_index_wf. self! pivot_idx!) (=> %%global_location_label%%202 (lib!betree.FilteredBetree_v.impl&%1.can_split_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I pivot_idx!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_index_wf. self! pivot_idx!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_index_wf. (lib!betree.FilteredBetree_v.BetreeNode. Int) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (pivot_idx! Int)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_index_wf. self! pivot_idx!) (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I pivot_idx!)))))) (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_index.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (I pivot_idx!)))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_index_wf. self! pivot_idx!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::split_index_wf")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:349:11: 349:50 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_parent_wf")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_parent_wf. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.SplitRequest_v.SplitRequest.) Bool)
(declare-const %%global_location_label%%203 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (request! lib!betree.SplitRequest_v.SplitRequest.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_parent_wf. self! request!) (=> %%global_location_label%%203 (lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_parent_wf. self! request!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_parent_wf. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.SplitRequest_v.SplitRequest.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (request! lib!betree.SplitRequest_v.SplitRequest.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_parent_wf. self! request!) (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.impl&%1.split_parent.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!betree.SplitRequest_v.SplitRequest. request!))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_parent_wf. self! request!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::split_parent_wf")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:362:11: 362:58 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::sub_domain_equiv_apply_filter")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(declare-const %%global_location_label%%204 Bool)
(declare-const %%global_location_label%%205 Bool)
(declare-const %%global_location_label%%206 Bool)
(declare-const %%global_location_label%%207 Bool)
(declare-const %%global_location_label%%208 Bool)
(declare-const %%global_location_label%%209 Bool)
(declare-const %%global_location_label%%210 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (other! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! other!) (and (=> %%global_location_label%%204 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (=> %%global_location_label%%205 (lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!))) (=> %%global_location_label%%206 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ self!)) (=> %%global_location_label%%207 (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ other!)) (=> %%global_location_label%%208 (= (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!))))) (=> %%global_location_label%%209 (lib!betree.Domain_v.impl&%1.includes.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!))))) (=> %%global_location_label%%210 (lib!betree.FilteredBetreeRefinement_v.impl&%0.shared_keys_same_active_range.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!))))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! other!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. (lib!betree.FilteredBetree_v.BetreeNode. lib!betree.FilteredBetree_v.BetreeNode.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (other! lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! other!) (ext_eq false TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!)))))) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!)))))) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Domain_v.impl&%1.key_set.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. other!))))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! other!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::sub_domain_equiv_apply_filter")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:393:11: 393:62 (#0)")
(set-info :comment ";; Function-Specs lib::betree::FilteredBetree_v::BetreeNode::split_leaf_commutes_with_i")
(declare-fun req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_commutes_with_i. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%211 Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (split_key! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_commutes_with_i. self! split_key!) (=> %%global_location_label%%211 (lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))) :pattern ((req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_commutes_with_i. self! split_key!)) )))
(declare-fun ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_commutes_with_i. (lib!betree.FilteredBetree_v.BetreeNode. lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((self! lib!betree.FilteredBetree_v.BetreeNode.) (split_key! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_commutes_with_i. self! split_key!) (and (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!spec.KeyType_t.Key. split_key!))))))) (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!spec.KeyType_t.Key. split_key!))))))))) :pattern ((ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_commutes_with_i. self! split_key!)) )))
(set-info :comment ";; Function-Def lib::betree::FilteredBetree_v::BetreeNode::split_leaf_commutes_with_i")
(set-info :comment ";; betree/FilteredBetreeRefinement_v.rs:432:11: 432:62 (#0)")
(declare-const self! lib!betree.FilteredBetree_v.BetreeNode.)
(declare-const split_key! lib!spec.KeyType_t.Key.)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%%@ tuple%2.)
(declare-const left@ lib!betree.FilteredBetree_v.BetreeNode.)
(declare-const right@ lib!betree.FilteredBetree_v.BetreeNode.)
(declare-const tmp%%$1@ tuple%2.)
(declare-const i_left@ lib!betree.PivotBetree_v.BetreeNode.)
(declare-const i_right@ lib!betree.PivotBetree_v.BetreeNode.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.KeyType_t.Key. split_key!) TYPE%lib!spec.KeyType_t.Key.))
(assert (lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%8 Bool)
(assert (not (=> (fuel_bool fuel%lib!betree.FilteredBetreeRefinement_v.impl&%0.i_wf.) (=> (= tmp%%@ (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!))) (=> (= left@ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= right@ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= tmp%%$1@ (lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!spec.KeyType_t.Key. split_key!))) (=> (= i_left@ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (=> (= i_right@ (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (and (=> %%location_label%%0 (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. self! split_key!)) (=> (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.split_leaf_wf. self! split_key!) (=> (= tmp%1 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. left@)))))) (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. i_left@)))))) (and (=> %%location_label%%1 tmp%1) (=> tmp%1 (=> (= tmp%2 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBetree_v.BetreeNode.) (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. right@)))))) (Poly%vstd!seq.Seq<lib!betree.PivotBetree_v.BetreeNode.>. (lib!betree.PivotBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PivotBetree_v.BetreeNode. (Poly%lib!betree.PivotBetree_v.BetreeNode. i_right@)))))) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 (and (=> %%location_label%%3 (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! left@)) (=> (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! left@) (and (=> %%location_label%%4 (req%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! right@)) (=> (ens%lib!betree.FilteredBetreeRefinement_v.impl&%0.sub_domain_equiv_apply_filter. self! right@) (and (=> %%location_label%%5 (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!))))))) (and (=> %%location_label%%6 (lib!betree.FilteredBetree_v.impl&%1.wf.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!))))))) (and (=> %%location_label%%7 (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!spec.KeyType_t.Key. split_key!)))))))) (=> %%location_label%%8 (= (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!) (Poly%lib!spec.KeyType_t.Key. split_key!)))))) (%Poly%lib!betree.PivotBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!betree.PivotBetree_v.impl&%1.split_leaf.? (Poly%lib!betree.PivotBetree_v.BetreeNode. (lib!betree.FilteredBetreeRefinement_v.impl&%0.i.? (Poly%lib!betree.FilteredBetree_v.BetreeNode. self!))) (Poly%lib!spec.KeyType_t.Key. split_key!))))))))))))))))))))))))))))))))
(check-sat)
(exit)
