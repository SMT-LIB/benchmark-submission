(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_read_for_recovery. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_freeze_for_commit. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_observe_fresh_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_discard_old. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_FreezeForCommitLabel_frozen_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_QueryEndLsnLabel_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_DiscardOldLabel_start_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_DiscardOldLabel_require_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal_enabled. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_strong_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_strong. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.invariant. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%0.arrow_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_read_for_recovery. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_freeze_for_commit. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_observe_fresh_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_put. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_discard_old. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_internal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_dummy_to_use_type_params. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%2.arrow_initialize_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.is_initialize. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.get_initialize_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.is_dummy_to_use_type_params. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_FreezeForCommitLabel_frozen_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_QueryEndLsnLabel_end_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_DiscardOldLabel_start_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_DiscardOldLabel_require_end. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal_enabled. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_strong_by. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_strong. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.invariant. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0)) (((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/?journal lib!abstract_system.MsgHistory_v.MsgHistory.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/?0 lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/?frozen_journal lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/?end_lsn Int)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?start_lsn Int) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?require_end Int)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel )) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 ))))
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((_journal! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _journal!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State _journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State _journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/?journal x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((_0! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _0!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/?messages x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_frozen_journal! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _frozen_journal!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel _frozen_journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel _frozen_journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/?frozen_journal x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/?messages x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_start_lsn! Int) (_require_end! Int)) (! (=> (and (<= 0 _start_lsn!) (<= 0 _require_end!)) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel _start_lsn! _require_end!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel _start_lsn! _require_end!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?start_lsn x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?require_end x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%0.arrow_0.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_read_for_recovery.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_freeze_for_commit.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_observe_fresh_journal.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_put.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_discard_old.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_internal.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%2.arrow_initialize_0.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.is_initialize.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.get_initialize_0.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_FreezeForCommitLabel_frozen_journal.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_QueryEndLsnLabel_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_DiscardOldLabel_start_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_DiscardOldLabel_require_end.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize_enabled.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery_enabled.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit_enabled.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal_enabled.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put_enabled.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old_enabled.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal_enabled.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_strong_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_strong.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.invariant.? (Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%0 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? other! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!) (=> %%global_location_label%%2 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.))
(declare-fun %%lambda%%2 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%2 (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I lsn!) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.concat. (Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((self! Poly) (other! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!) (=> %%global_location_label%%3 (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) ))))
(assert (forall ((self! Poly) (other! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type other! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? self!) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. self!))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? self!)) ))))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. (Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((self! Poly) (subseq! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. self! subseq!) (and (=> %%global_location_label%%4 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (=> %%global_location_label%%5 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? subseq!)))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. self! subseq!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.) (forall ((self! Poly) (subseq! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? self! subseq!) (and (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!))) (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (=> (lib!abstract_system.MsgHistory_v.impl&%0.contains.? subseq! lsn$) (and (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$) (= (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) lsn$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!))) lsn$))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? subseq! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) )))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? self! subseq!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (and (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! lbl!)) ))))
(declare-const %return! Bool)
(declare-const self! Poly)
(declare-const lsn! Poly)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))
(assert (has_type lsn! NAT))
(assert (not true))
(check-sat)
(exit)
