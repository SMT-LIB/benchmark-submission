(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module betree::LinkedBranch_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.agrees. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.take. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_pivot_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_SplitIndex_pivot. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_SplitIndex_pivot_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_SplitLeaf_pivot. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%1.get_pivot. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_keys. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_msgs. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_pivots. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_children. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Leaf_keys. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Leaf_msgs. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Index_pivots. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Index_children. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%3.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%3.keys_or_pivots. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%3.keys_strictly_sorted. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%3.valid_child_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%3.route. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.entries_wf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.valid_address. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.no_dangling_address. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.get. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.get_keys. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.representation. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.agrees_with_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.is_subset_of. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.node_children_respects_rank. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.valid_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.is_fresh. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.merge_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.remove_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.modify_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%4.same_except. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.empty_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.query. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.insert. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.grow. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.append. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.split. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.has_root. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.root. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.get_rank. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.valid_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.the_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.acyclic. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.keys_strictly_sorted_internal. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_in_range. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_in_range_internal. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.map_all_keys. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.children_keys. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_below_bound. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_above_bound. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.child_at_idx. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.representation. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.reachable_addrs_using_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.children_reachable_addrs_using_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.child_reachable_addrs_using_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.tight_disk_view. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.query_internal. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.insert_leaf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.append_leaf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.split_leaf. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.sub_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.split_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.split_node. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.can_split_child_of_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%5.split_child_of_index. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.empty_linked_branch. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%6.subpath. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%6.valid. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%6.target. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%6.substitute. FuelId)
(declare-const fuel%lib!betree.LinkedBranch_v.impl&%6.path_equiv. FuelId)
(declare-const fuel%lib!betree.Utils_v.union_seq_of_sets. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.is_strictly_sorted. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.largest_lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.largest_lt. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.spec_le. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!map_lib.impl&%0.agrees. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.take. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.drop_last. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.fold_left. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_union_finite. fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_pivot_index. fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_SplitIndex_pivot. fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_SplitIndex_pivot_index. fuel%lib!betree.LinkedBranch_v.impl&%0.arrow_SplitLeaf_pivot. fuel%lib!betree.LinkedBranch_v.impl&%1.wf. fuel%lib!betree.LinkedBranch_v.impl&%1.get_pivot. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_keys. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_msgs. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_pivots. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_children. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Leaf_keys. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Leaf_msgs. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Index_pivots. fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_Index_children. fuel%lib!betree.LinkedBranch_v.impl&%3.wf. fuel%lib!betree.LinkedBranch_v.impl&%3.keys_or_pivots. fuel%lib!betree.LinkedBranch_v.impl&%3.keys_strictly_sorted. fuel%lib!betree.LinkedBranch_v.impl&%3.valid_child_index. fuel%lib!betree.LinkedBranch_v.impl&%3.route. fuel%lib!betree.LinkedBranch_v.impl&%4.wf. fuel%lib!betree.LinkedBranch_v.impl&%4.entries_wf. fuel%lib!betree.LinkedBranch_v.impl&%4.valid_address. fuel%lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address. fuel%lib!betree.LinkedBranch_v.impl&%4.no_dangling_address. fuel%lib!betree.LinkedBranch_v.impl&%4.get. fuel%lib!betree.LinkedBranch_v.impl&%4.get_keys. fuel%lib!betree.LinkedBranch_v.impl&%4.representation. fuel%lib!betree.LinkedBranch_v.impl&%4.agrees_with_disk. fuel%lib!betree.LinkedBranch_v.impl&%4.is_subset_of. fuel%lib!betree.LinkedBranch_v.impl&%4.node_children_respects_rank. fuel%lib!betree.LinkedBranch_v.impl&%4.valid_ranking. fuel%lib!betree.LinkedBranch_v.impl&%4.is_fresh. fuel%lib!betree.LinkedBranch_v.impl&%4.merge_disk. fuel%lib!betree.LinkedBranch_v.impl&%4.remove_disk. fuel%lib!betree.LinkedBranch_v.impl&%4.modify_disk. fuel%lib!betree.LinkedBranch_v.impl&%4.same_except. fuel%lib!betree.LinkedBranch_v.empty_disk. fuel%lib!betree.LinkedBranch_v.impl&%5.query. fuel%lib!betree.LinkedBranch_v.impl&%5.insert. fuel%lib!betree.LinkedBranch_v.impl&%5.grow. fuel%lib!betree.LinkedBranch_v.impl&%5.append. fuel%lib!betree.LinkedBranch_v.impl&%5.split. fuel%lib!betree.LinkedBranch_v.impl&%5.wf. fuel%lib!betree.LinkedBranch_v.impl&%5.has_root. fuel%lib!betree.LinkedBranch_v.impl&%5.root. fuel%lib!betree.LinkedBranch_v.impl&%5.get_rank. fuel%lib!betree.LinkedBranch_v.impl&%5.valid_ranking. fuel%lib!betree.LinkedBranch_v.impl&%5.the_ranking. fuel%lib!betree.LinkedBranch_v.impl&%5.acyclic. fuel%lib!betree.LinkedBranch_v.impl&%5.keys_strictly_sorted_internal. fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_in_range. fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_in_range_internal. fuel%lib!betree.LinkedBranch_v.impl&%5.map_all_keys. fuel%lib!betree.LinkedBranch_v.impl&%5.children_keys. fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys. fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_below_bound. fuel%lib!betree.LinkedBranch_v.impl&%5.all_keys_above_bound. fuel%lib!betree.LinkedBranch_v.impl&%5.child_at_idx. fuel%lib!betree.LinkedBranch_v.impl&%5.representation. fuel%lib!betree.LinkedBranch_v.impl&%5.reachable_addrs_using_ranking. fuel%lib!betree.LinkedBranch_v.impl&%5.children_reachable_addrs_using_ranking. fuel%lib!betree.LinkedBranch_v.impl&%5.child_reachable_addrs_using_ranking. fuel%lib!betree.LinkedBranch_v.impl&%5.tight_disk_view. fuel%lib!betree.LinkedBranch_v.impl&%5.query_internal. fuel%lib!betree.LinkedBranch_v.impl&%5.insert_leaf. fuel%lib!betree.LinkedBranch_v.impl&%5.append_leaf. fuel%lib!betree.LinkedBranch_v.impl&%5.split_leaf. fuel%lib!betree.LinkedBranch_v.impl&%5.sub_index. fuel%lib!betree.LinkedBranch_v.impl&%5.split_index. fuel%lib!betree.LinkedBranch_v.impl&%5.split_node. fuel%lib!betree.LinkedBranch_v.impl&%5.can_split_child_of_index. fuel%lib!betree.LinkedBranch_v.impl&%5.split_child_of_index. fuel%lib!betree.LinkedBranch_v.empty_linked_branch. fuel%lib!betree.LinkedBranch_v.impl&%6.subpath. fuel%lib!betree.LinkedBranch_v.impl&%6.valid. fuel%lib!betree.LinkedBranch_v.impl&%6.target. fuel%lib!betree.LinkedBranch_v.impl&%6.substitute. fuel%lib!betree.LinkedBranch_v.impl&%6.path_equiv. fuel%lib!betree.Utils_v.union_seq_of_sets. fuel%lib!spec.KeyType_t.impl&%1.lte. fuel%lib!spec.KeyType_t.impl&%1.lt. fuel%lib!spec.KeyType_t.impl&%1.is_strictly_sorted. fuel%lib!spec.KeyType_t.impl&%1.largest_lte. fuel%lib!spec.KeyType_t.impl&%1.largest_lt. fuel%lib!spec.Messages_t.nop_delta. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.KeyType_t.Key.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. 0)
(declare-sort vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-datatypes ((lib!betree.LinkedBranch_v.SplitArg. 0) (lib!betree.LinkedBranch_v.Node. 0) (lib!betree.LinkedBranch_v.DiskView. 0) (lib!betree.LinkedBranch_v.LinkedBranch. 0) (lib!betree.LinkedBranch_v.Path. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!betree.LinkedBranch_v.SplitArg./SplitIndex (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/?pivot lib!spec.KeyType_t.Key.) (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/?pivot_index Int)) (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/?pivot lib!spec.KeyType_t.Key.))) ((lib!betree.LinkedBranch_v.Node./Leaf (lib!betree.LinkedBranch_v.Node./Leaf/?keys vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (lib!betree.LinkedBranch_v.Node./Leaf/?msgs vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (lib!betree.LinkedBranch_v.Node./Index (lib!betree.LinkedBranch_v.Node./Index/?pivots vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (lib!betree.LinkedBranch_v.Node./Index/?children vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.))) ((lib!betree.LinkedBranch_v.DiskView./DiskView (lib!betree.LinkedBranch_v.DiskView./DiskView/?entries vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>.))) ((lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/?root lib!spec.AsyncDisk_t.Address.) (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/?disk_view lib!betree.LinkedBranch_v.DiskView.))) ((lib!betree.LinkedBranch_v.Path./Path (lib!betree.LinkedBranch_v.Path./Path/?branch lib!betree.LinkedBranch_v.LinkedBranch.) (lib!betree.LinkedBranch_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.LinkedBranch_v.Path./Path/?depth Int))) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot (lib!betree.LinkedBranch_v.SplitArg.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot_index (lib!betree.LinkedBranch_v.SplitArg.) Int)
(declare-fun lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/pivot (lib!betree.LinkedBranch_v.SplitArg.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.LinkedBranch_v.Node./Leaf/keys (lib!betree.LinkedBranch_v.Node.) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.LinkedBranch_v.Node./Leaf/msgs (lib!betree.LinkedBranch_v.Node.) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.LinkedBranch_v.Node./Index/pivots (lib!betree.LinkedBranch_v.Node.) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.LinkedBranch_v.Node./Index/children (lib!betree.LinkedBranch_v.Node.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBranch_v.DiskView./DiskView/entries (lib!betree.LinkedBranch_v.DiskView.) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>.)
(declare-fun lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root (lib!betree.LinkedBranch_v.LinkedBranch.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view (lib!betree.LinkedBranch_v.LinkedBranch.) lib!betree.LinkedBranch_v.DiskView.)
(declare-fun lib!betree.LinkedBranch_v.Path./Path/branch (lib!betree.LinkedBranch_v.Path.) lib!betree.LinkedBranch_v.LinkedBranch.)
(declare-fun lib!betree.LinkedBranch_v.Path./Path/key (lib!betree.LinkedBranch_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.LinkedBranch_v.Path./Path/depth (lib!betree.LinkedBranch_v.Path.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!betree.LinkedBranch_v.SplitArg. Type)
(declare-const TYPE%lib!betree.LinkedBranch_v.Node. Type)
(declare-const TYPE%lib!betree.LinkedBranch_v.DiskView. Type)
(declare-const TYPE%lib!betree.LinkedBranch_v.LinkedBranch. Type)
(declare-const TYPE%lib!betree.LinkedBranch_v.Path. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq.Seq<lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (Poly) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. (Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%lib!betree.LinkedBranch_v.SplitArg. (lib!betree.LinkedBranch_v.SplitArg.) Poly)
(declare-fun %Poly%lib!betree.LinkedBranch_v.SplitArg. (Poly) lib!betree.LinkedBranch_v.SplitArg.)
(declare-fun Poly%lib!betree.LinkedBranch_v.Node. (lib!betree.LinkedBranch_v.Node.) Poly)
(declare-fun %Poly%lib!betree.LinkedBranch_v.Node. (Poly) lib!betree.LinkedBranch_v.Node.)
(declare-fun Poly%lib!betree.LinkedBranch_v.DiskView. (lib!betree.LinkedBranch_v.DiskView.) Poly)
(declare-fun %Poly%lib!betree.LinkedBranch_v.DiskView. (Poly) lib!betree.LinkedBranch_v.DiskView.)
(declare-fun Poly%lib!betree.LinkedBranch_v.LinkedBranch. (lib!betree.LinkedBranch_v.LinkedBranch.) Poly)
(declare-fun %Poly%lib!betree.LinkedBranch_v.LinkedBranch. (Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(declare-fun Poly%lib!betree.LinkedBranch_v.Path. (lib!betree.LinkedBranch_v.Path.) Poly)
(declare-fun %Poly%lib!betree.LinkedBranch_v.Path. (Poly) lib!betree.LinkedBranch_v.Path.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node.)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= x (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) (= x (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x lib!betree.LinkedBranch_v.SplitArg.)) (! (= x (%Poly%lib!betree.LinkedBranch_v.SplitArg. (Poly%lib!betree.LinkedBranch_v.SplitArg. x))) :pattern ((Poly%lib!betree.LinkedBranch_v.SplitArg. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.SplitArg.) (= x (Poly%lib!betree.LinkedBranch_v.SplitArg. (%Poly%lib!betree.LinkedBranch_v.SplitArg. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBranch_v.SplitArg.)) )))
(assert (forall ((_pivot! lib!spec.KeyType_t.Key.) (_pivot_index! Int)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _pivot!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.LinkedBranch_v.SplitArg. (lib!betree.LinkedBranch_v.SplitArg./SplitIndex _pivot! _pivot_index!)) TYPE%lib!betree.LinkedBranch_v.SplitArg.)) :pattern ((has_type (Poly%lib!betree.LinkedBranch_v.SplitArg. (lib!betree.LinkedBranch_v.SplitArg./SplitIndex _pivot! _pivot_index!)) TYPE%lib!betree.LinkedBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.SplitArg.)) (! (= (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot x) (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/?pivot x)) :pattern ((lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.LinkedBranch_v.SplitArg. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.LinkedBranch_v.SplitArg. x)) (has_type x TYPE%lib!betree.LinkedBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.SplitArg.)) (! (= (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot_index x) (lib!betree.LinkedBranch_v.SplitArg./SplitIndex/?pivot_index x)) :pattern ((lib!betree.LinkedBranch_v.SplitArg./SplitIndex/pivot_index x)) )))
(assert (forall ((_pivot! lib!spec.KeyType_t.Key.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _pivot!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.LinkedBranch_v.SplitArg. (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf _pivot!)) TYPE%lib!betree.LinkedBranch_v.SplitArg.)) :pattern ((has_type (Poly%lib!betree.LinkedBranch_v.SplitArg. (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf _pivot!)) TYPE%lib!betree.LinkedBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.SplitArg.)) (! (= (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/pivot x) (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/?pivot x)) :pattern ((lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/pivot x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.LinkedBranch_v.SplitArg. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.LinkedBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.LinkedBranch_v.SplitArg. x)) (has_type x TYPE%lib!betree.LinkedBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Node.)) (! (= x (%Poly%lib!betree.LinkedBranch_v.Node. (Poly%lib!betree.LinkedBranch_v.Node. x))) :pattern ((Poly%lib!betree.LinkedBranch_v.Node. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.Node.) (= x (Poly%lib!betree.LinkedBranch_v.Node. (%Poly%lib!betree.LinkedBranch_v.Node. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBranch_v.Node.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Node.)) (! (= (lib!betree.LinkedBranch_v.Node./Leaf/keys x) (lib!betree.LinkedBranch_v.Node./Leaf/?keys x)) :pattern ((lib!betree.LinkedBranch_v.Node./Leaf/keys x)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Node.)) (! (= (lib!betree.LinkedBranch_v.Node./Leaf/msgs x) (lib!betree.LinkedBranch_v.Node./Leaf/?msgs x)) :pattern ((lib!betree.LinkedBranch_v.Node./Leaf/msgs x)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Node.)) (! (= (lib!betree.LinkedBranch_v.Node./Index/pivots x) (lib!betree.LinkedBranch_v.Node./Index/?pivots x)) :pattern ((lib!betree.LinkedBranch_v.Node./Index/pivots x)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Node.)) (! (= (lib!betree.LinkedBranch_v.Node./Index/children x) (lib!betree.LinkedBranch_v.Node./Index/?children x)) :pattern ((lib!betree.LinkedBranch_v.Node./Index/children x)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Node.)) (! (has_type (Poly%lib!betree.LinkedBranch_v.Node. x) TYPE%lib!betree.LinkedBranch_v.Node.) :pattern ((has_type (Poly%lib!betree.LinkedBranch_v.Node. x) TYPE%lib!betree.LinkedBranch_v.Node.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.DiskView.)) (! (= x (%Poly%lib!betree.LinkedBranch_v.DiskView. (Poly%lib!betree.LinkedBranch_v.DiskView. x))) :pattern ((Poly%lib!betree.LinkedBranch_v.DiskView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.DiskView.) (= x (Poly%lib!betree.LinkedBranch_v.DiskView. (%Poly%lib!betree.LinkedBranch_v.DiskView. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBranch_v.DiskView.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.DiskView.)) (! (= (lib!betree.LinkedBranch_v.DiskView./DiskView/entries x) (lib!betree.LinkedBranch_v.DiskView./DiskView/?entries x)) :pattern ((lib!betree.LinkedBranch_v.DiskView./DiskView/entries x)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.DiskView.)) (! (has_type (Poly%lib!betree.LinkedBranch_v.DiskView. x) TYPE%lib!betree.LinkedBranch_v.DiskView.) :pattern ((has_type (Poly%lib!betree.LinkedBranch_v.DiskView. x) TYPE%lib!betree.LinkedBranch_v.DiskView.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedBranch_v.DiskView.) (has_type y TYPE%lib!betree.LinkedBranch_v.DiskView.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node.) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. x))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. y))))) (ext_eq deep TYPE%lib!betree.LinkedBranch_v.DiskView. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedBranch_v.DiskView. x y)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.LinkedBranch.)) (! (= x (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. (Poly%lib!betree.LinkedBranch_v.LinkedBranch. x))) :pattern ((Poly%lib!betree.LinkedBranch_v.LinkedBranch. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.LinkedBranch.) (= x (Poly%lib!betree.LinkedBranch_v.LinkedBranch. (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBranch_v.LinkedBranch.)) )))
(assert (forall ((_root! lib!spec.AsyncDisk_t.Address.) (_disk_view! lib!betree.LinkedBranch_v.DiskView.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _root!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!betree.LinkedBranch_v.LinkedBranch. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch _root! _disk_view!)) TYPE%lib!betree.LinkedBranch_v.LinkedBranch.)) :pattern ((has_type (Poly%lib!betree.LinkedBranch_v.LinkedBranch. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch _root! _disk_view!)) TYPE%lib!betree.LinkedBranch_v.LinkedBranch.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.LinkedBranch.)) (! (= (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root x) (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/?root x)) :pattern ((lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.LinkedBranch.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. x)) (has_type x TYPE%lib!betree.LinkedBranch_v.LinkedBranch.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.LinkedBranch.)) (! (= (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view x) (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/?disk_view x)) :pattern ((lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view x)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedBranch_v.LinkedBranch.) (has_type y TYPE%lib!betree.LinkedBranch_v.LinkedBranch.) (= (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. x)) (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. y))) (ext_eq deep TYPE%lib!betree.LinkedBranch_v.DiskView. (Poly%lib!betree.LinkedBranch_v.DiskView. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. x))) (Poly%lib!betree.LinkedBranch_v.DiskView. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. y))))) (ext_eq deep TYPE%lib!betree.LinkedBranch_v.LinkedBranch. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedBranch_v.LinkedBranch. x y)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Path.)) (! (= x (%Poly%lib!betree.LinkedBranch_v.Path. (Poly%lib!betree.LinkedBranch_v.Path. x))) :pattern ((Poly%lib!betree.LinkedBranch_v.Path. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.Path.) (= x (Poly%lib!betree.LinkedBranch_v.Path. (%Poly%lib!betree.LinkedBranch_v.Path. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBranch_v.Path.)) )))
(assert (forall ((_branch! lib!betree.LinkedBranch_v.LinkedBranch.) (_key! lib!spec.KeyType_t.Key.) (_depth! Int)) (! (=> (and (has_type (Poly%lib!betree.LinkedBranch_v.LinkedBranch. _branch!) TYPE%lib!betree.LinkedBranch_v.LinkedBranch.) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (<= 0 _depth!)) (has_type (Poly%lib!betree.LinkedBranch_v.Path. (lib!betree.LinkedBranch_v.Path./Path _branch! _key! _depth!)) TYPE%lib!betree.LinkedBranch_v.Path.)) :pattern ((has_type (Poly%lib!betree.LinkedBranch_v.Path. (lib!betree.LinkedBranch_v.Path./Path _branch! _key! _depth!)) TYPE%lib!betree.LinkedBranch_v.Path.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Path.)) (! (= (lib!betree.LinkedBranch_v.Path./Path/branch x) (lib!betree.LinkedBranch_v.Path./Path/?branch x)) :pattern ((lib!betree.LinkedBranch_v.Path./Path/branch x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.Path.) (has_type (Poly%lib!betree.LinkedBranch_v.LinkedBranch. (lib!betree.LinkedBranch_v.Path./Path/branch (%Poly%lib!betree.LinkedBranch_v.Path. x))) TYPE%lib!betree.LinkedBranch_v.LinkedBranch.)) :pattern ((lib!betree.LinkedBranch_v.Path./Path/branch (%Poly%lib!betree.LinkedBranch_v.Path. x)) (has_type x TYPE%lib!betree.LinkedBranch_v.Path.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Path.)) (! (= (lib!betree.LinkedBranch_v.Path./Path/key x) (lib!betree.LinkedBranch_v.Path./Path/?key x)) :pattern ((lib!betree.LinkedBranch_v.Path./Path/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.Path.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBranch_v.Path./Path/key (%Poly%lib!betree.LinkedBranch_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.LinkedBranch_v.Path./Path/key (%Poly%lib!betree.LinkedBranch_v.Path. x)) (has_type x TYPE%lib!betree.LinkedBranch_v.Path.)) )))
(assert (forall ((x lib!betree.LinkedBranch_v.Path.)) (! (= (lib!betree.LinkedBranch_v.Path./Path/depth x) (lib!betree.LinkedBranch_v.Path./Path/?depth x)) :pattern ((lib!betree.LinkedBranch_v.Path./Path/depth x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBranch_v.Path.) (<= 0 (lib!betree.LinkedBranch_v.Path./Path/depth (%Poly%lib!betree.LinkedBranch_v.Path. x)))) :pattern ((lib!betree.LinkedBranch_v.Path./Path/depth (%Poly%lib!betree.LinkedBranch_v.Path. x)) (has_type x TYPE%lib!betree.LinkedBranch_v.Path.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedBranch_v.Path.) (has_type y TYPE%lib!betree.LinkedBranch_v.Path.) (ext_eq deep TYPE%lib!betree.LinkedBranch_v.LinkedBranch. (Poly%lib!betree.LinkedBranch_v.LinkedBranch. (lib!betree.LinkedBranch_v.Path./Path/branch (%Poly%lib!betree.LinkedBranch_v.Path. x))) (Poly%lib!betree.LinkedBranch_v.LinkedBranch. (lib!betree.LinkedBranch_v.Path./Path/branch (%Poly%lib!betree.LinkedBranch_v.Path. y)))) (= (lib!betree.LinkedBranch_v.Path./Path/key (%Poly%lib!betree.LinkedBranch_v.Path. x)) (lib!betree.LinkedBranch_v.Path./Path/key (%Poly%lib!betree.LinkedBranch_v.Path. y))) (= (lib!betree.LinkedBranch_v.Path./Path/depth (%Poly%lib!betree.LinkedBranch_v.Path. x)) (lib!betree.LinkedBranch_v.Path./Path/depth (%Poly%lib!betree.LinkedBranch_v.Path. y)))) (ext_eq deep TYPE%lib!betree.LinkedBranch_v.Path. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedBranch_v.Path. x y)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::take")
(declare-fun vstd!seq.impl&%0.take.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::spec_le")
(declare-fun vstd!map_lib.impl&%0.spec_le.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::lte")
(declare-fun lib!spec.KeyType_t.impl&%1.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::nop_delta")
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::insert")
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::agrees")
(declare-fun vstd!map_lib.impl&%0.agrees.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::drop_last")
(declare-fun vstd!seq_lib.impl&%0.drop_last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::fold_left")
(declare-fun vstd!seq_lib.impl&%0.fold_left.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::wf")
(declare-fun lib!betree.LinkedBranch_v.impl&%3.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::entries_wf")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.entries_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_children")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_children.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::valid_address")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.valid_address.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::node_has_valid_child_address")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::no_dangling_address")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.no_dangling_address.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::wf")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::has_root")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.has_root.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::wf")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::valid_child_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%3.valid_child_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::node_children_respects_rank")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.node_children_respects_rank.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::valid_ranking")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.valid_ranking.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::valid_ranking")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.valid_ranking.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::acyclic")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.acyclic.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::the_ranking")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.the_ranking.? (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::get_rank")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.get_rank.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::get")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.get.? (Poly Poly) lib!betree.LinkedBranch_v.Node.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::root")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.root.? (Poly) lib!betree.LinkedBranch_v.Node.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::child_at_idx")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.child_at_idx.? (Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::lt")
(declare-fun lib!spec.KeyType_t.impl&%1.lt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::is_strictly_sorted")
(declare-fun lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::largest_lte")
(declare-fun lib!spec.KeyType_t.impl&%1.largest_lte.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%1.rec%largest_lte.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_keys")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_keys.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_pivots")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_pivots.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::route")
(declare-fun lib!betree.LinkedBranch_v.impl&%3.route.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Path::subpath")
(declare-fun lib!betree.LinkedBranch_v.impl&%6.subpath.? (Poly) lib!betree.LinkedBranch_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Path::valid")
(declare-fun lib!betree.LinkedBranch_v.impl&%6.valid.? (Poly) Bool)
(declare-fun lib!betree.LinkedBranch_v.impl&%6.rec%valid.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Path::target")
(declare-fun lib!betree.LinkedBranch_v.impl&%6.target.? (Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(declare-fun lib!betree.LinkedBranch_v.impl&%6.rec%target.? (Poly Fuel) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Path::path_equiv")
(declare-fun lib!betree.LinkedBranch_v.impl&%6.path_equiv.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBranch_v.impl&%6.rec%path_equiv.? (Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Path::substitute")
(declare-fun lib!betree.LinkedBranch_v.impl&%6.substitute.? (Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_msgs")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_msgs.? (Poly) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::modify_disk")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.modify_disk.? (Poly Poly Poly) lib!betree.LinkedBranch_v.DiskView.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::insert_leaf")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.insert_leaf.? (Poly Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::insert")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.insert.? (Poly Poly Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::keys_or_pivots")
(declare-fun lib!betree.LinkedBranch_v.impl&%3.keys_or_pivots.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::keys_strictly_sorted")
(declare-fun lib!betree.LinkedBranch_v.impl&%3.keys_strictly_sorted.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::keys_strictly_sorted_internal")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.keys_strictly_sorted_internal.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%keys_strictly_sorted_internal.? (Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::Utils_v::union_seq_of_sets")
(declare-fun lib!betree.Utils_v.union_seq_of_sets.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::map_all_keys")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.map_all_keys.? (Poly Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%map_all_keys.? (Poly Poly Fuel) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::children_keys")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.children_keys.? (Poly Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%children_keys.? (Poly Poly Fuel) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::all_keys")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.all_keys.? (Poly Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%all_keys.? (Poly Poly Fuel) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::all_keys_below_bound")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.all_keys_below_bound.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::all_keys_above_bound")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.all_keys_above_bound.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::all_keys_in_range_internal")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.all_keys_in_range_internal.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%all_keys_in_range_internal.? (Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::SplitArg::arrow_pivot_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%0.arrow_pivot_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::SplitArg::arrow_SplitIndex_pivot")
(declare-fun lib!betree.LinkedBranch_v.impl&%0.arrow_SplitIndex_pivot.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::SplitArg::arrow_SplitIndex_pivot_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%0.arrow_SplitIndex_pivot_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::SplitArg::arrow_SplitLeaf_pivot")
(declare-fun lib!betree.LinkedBranch_v.impl&%0.arrow_SplitLeaf_pivot.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::largest_lt")
(declare-fun lib!spec.KeyType_t.impl&%1.largest_lt.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%1.rec%largest_lt.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::SplitArg::wf")
(declare-fun lib!betree.LinkedBranch_v.impl&%1.wf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::SplitArg::get_pivot")
(declare-fun lib!betree.LinkedBranch_v.impl&%1.get_pivot.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_Leaf_keys")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_Leaf_keys.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_Leaf_msgs")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_Leaf_msgs.? (Poly) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_Index_pivots")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_Index_pivots.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::Node::arrow_Index_children")
(declare-fun lib!betree.LinkedBranch_v.impl&%2.arrow_Index_children.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::get_keys")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.get_keys.? (Poly Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::representation")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.representation.? (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::agrees_with_disk")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.agrees_with_disk.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::is_subset_of")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.is_subset_of.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::is_fresh")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.is_fresh.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::merge_disk")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.merge_disk.? (Poly Poly) lib!betree.LinkedBranch_v.DiskView.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::remove_disk")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.remove_disk.? (Poly Poly) lib!betree.LinkedBranch_v.DiskView.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::DiskView::same_except")
(declare-fun lib!betree.LinkedBranch_v.impl&%4.same_except.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::empty_disk")
(declare-fun lib!betree.LinkedBranch_v.empty_disk.? (Poly) lib!betree.LinkedBranch_v.DiskView.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::query_internal")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.query_internal.? (Poly Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%query_internal.? (Poly Poly Poly Fuel) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::query")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.query.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::grow")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.grow.? (Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::append_leaf")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.append_leaf.? (Poly Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::append")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.append.? (Poly Poly Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::can_split_child_of_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.can_split_child_of_index.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::split_leaf")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.split_leaf.? (Poly Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::sub_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.sub_index.? (Poly Poly Poly) lib!betree.LinkedBranch_v.Node.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::split_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.split_index.? (Poly Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::split_node")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.split_node.? (Poly Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::split_child_of_index")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.split_child_of_index.? (Poly Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::split")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.split.? (Poly Poly Poly Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::all_keys_in_range")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.all_keys_in_range.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::child_reachable_addrs_using_ranking")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.child_reachable_addrs_using_ranking.? (Poly Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%child_reachable_addrs_using_ranking.? (Poly Poly Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::children_reachable_addrs_using_ranking")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.children_reachable_addrs_using_ranking.? (Poly Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%children_reachable_addrs_using_ranking.? (Poly Poly Fuel) vstd!seq.Seq<vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::reachable_addrs_using_ranking")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.reachable_addrs_using_ranking.? (Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBranch_v.impl&%5.rec%reachable_addrs_using_ranking.? (Poly Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::representation")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.representation.? (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::LinkedBranch::tight_disk_view")
(declare-fun lib!betree.LinkedBranch_v.impl&%5.tight_disk_view.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBranch_v::empty_linked_branch")
(declare-fun lib!betree.LinkedBranch_v.empty_linked_branch.? (Poly) lib!betree.LinkedBranch_v.LinkedBranch.)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::take")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.take.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.take.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.take.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) n!)) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.take.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::remove_keys")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) ))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.spec_le.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!) (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) :pattern ((vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%6 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Key::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lte.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (<= (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. a!)) (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::nop_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::insert")
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::agrees")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.agrees.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.agrees.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.agrees.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))) :pattern ((vstd!map_lib.impl&%0.agrees.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%5 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%5 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::drop_last")
(declare-fun req%vstd!seq_lib.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!) (=> %%global_location_label%%8 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::drop_last")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::fold_left")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (%%apply%%1 (%Poly%fun%2. f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) b! f! fuel%) (vstd!seq.Seq.last.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) )))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::Node::wf")
(set-info :comment ";; betree/LinkedBranch_v.rs:65:5: 65:47 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::Node::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%3.wf.))
(define-fun is-lib!betree.LinkedBranch_v.Node./Leaf_ ((c lib!betree.LinkedBranch_v.Node.)) Bool ((_ is lib!betree.LinkedBranch_v.Node./Leaf) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%3.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%3.wf.? self!) (ite (is-lib!betree.LinkedBranch_v.Node./Leaf_ (%Poly%lib!betree.LinkedBranch_v.Node. self!)) (let ((keys$ (lib!betree.LinkedBranch_v.Node./Leaf/keys (%Poly%lib!betree.LinkedBranch_v.Node. self!)))) (let ((msgs$ (lib!betree.LinkedBranch_v.Node./Leaf/msgs (%Poly%lib!betree.LinkedBranch_v.Node. self!)))) (and (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$)) 0) (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. msgs$)))))) (let ((pivots$ (lib!betree.LinkedBranch_v.Node./Index/pivots (%Poly%lib!betree.LinkedBranch_v.Node. self!)))) (let ((children$ (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. self!)))) (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. pivots$)) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. children$)) 1)))))) :pattern ((lib!betree.LinkedBranch_v.impl&%3.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::DiskView::entries_wf")
(set-info :comment ";; betree/LinkedBranch_v.rs:119:5: 119:55 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::DiskView::entries_wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%4.entries_wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%4.entries_wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%4.entries_wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr$) (lib!betree.LinkedBranch_v.impl&%3.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!))) addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!betree.LinkedBranch_v.impl&%4.entries_wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::Node::arrow_children")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_children.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%2.arrow_children.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%2.arrow_children.? self!) (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. self!))) :pattern ((lib!betree.LinkedBranch_v.impl&%2.arrow_children.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::DiskView::valid_address")
(set-info :comment ";; betree/LinkedBranch_v.rs:124:5: 124:73 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::DiskView::valid_address")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%4.valid_address.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%4.valid_address.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%4.valid_address.? self! addr!) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr!)) :pattern ((lib!betree.LinkedBranch_v.impl&%4.valid_address.? self! addr!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::DiskView::node_has_valid_child_address")
(set-info :comment ";; betree/LinkedBranch_v.rs:129:5: 129:85 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::DiskView::node_has_valid_child_address")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address.))
(define-fun is-lib!betree.LinkedBranch_v.Node./Index_ ((c lib!betree.LinkedBranch_v.Node.)) Bool ((_ is lib!betree.LinkedBranch_v.Node./Index) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address.) (forall ((self! Poly) (node! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address.? self! node!) (=> (is-lib!betree.LinkedBranch_v.Node./Index_ (%Poly%lib!betree.LinkedBranch_v.Node. node!)) (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. node!)))))) (lib!betree.LinkedBranch_v.impl&%4.valid_address.? self! (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. node!))) idx$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. node!))) idx$)) )))) :pattern ((lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address.? self! node!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::DiskView::no_dangling_address")
(set-info :comment ";; betree/LinkedBranch_v.rs:136:5: 136:64 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::DiskView::no_dangling_address")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%4.no_dangling_address.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%4.no_dangling_address.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%4.no_dangling_address.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr$) (lib!betree.LinkedBranch_v.impl&%4.node_has_valid_child_address.? self! (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!))) addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!betree.LinkedBranch_v.impl&%4.no_dangling_address.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::DiskView::wf")
(set-info :comment ";; betree/LinkedBranch_v.rs:112:5: 112:47 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::DiskView::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%4.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%4.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%4.wf.? self!) (and (lib!betree.LinkedBranch_v.impl&%4.entries_wf.? self!) (lib!betree.LinkedBranch_v.impl&%4.no_dangling_address.? self!))) :pattern ((lib!betree.LinkedBranch_v.impl&%4.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::LinkedBranch::has_root")
(set-info :comment ";; betree/LinkedBranch_v.rs:314:5: 314:53 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::LinkedBranch::has_root")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%5.has_root.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%5.has_root.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%5.has_root.? self!) (lib!betree.LinkedBranch_v.impl&%4.valid_address.? (Poly%lib!betree.LinkedBranch_v.DiskView. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/root (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. self!))))) :pattern ((lib!betree.LinkedBranch_v.impl&%5.has_root.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::LinkedBranch::wf")
(set-info :comment ";; betree/LinkedBranch_v.rs:308:5: 308:47 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::LinkedBranch::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%5.wf.? self!) (and (lib!betree.LinkedBranch_v.impl&%4.wf.? (Poly%lib!betree.LinkedBranch_v.DiskView. (lib!betree.LinkedBranch_v.LinkedBranch./LinkedBranch/disk_view (%Poly%lib!betree.LinkedBranch_v.LinkedBranch. self!)))) (lib!betree.LinkedBranch_v.impl&%5.has_root.? self!))) :pattern ((lib!betree.LinkedBranch_v.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::Node::valid_child_index")
(set-info :comment ";; betree/LinkedBranch_v.rs:88:5: 88:70 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::LinkedBranch_v::Node::valid_child_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedBranch_v.impl&%3.valid_child_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBranch_v.impl&%3.valid_child_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.LinkedBranch_v.impl&%3.valid_child_index.? self! i!) (and (is-lib!betree.LinkedBranch_v.Node./Index_ (%Poly%lib!betree.LinkedBranch_v.Node. self!)) (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. self!)))))))) :pattern ((lib!betree.LinkedBranch_v.impl&%3.valid_child_index.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBranch_v::DiskView::node_children_respects_rank")
(declare-fun req%lib!betree.LinkedBranch_v.impl&%4.node_children_respects_rank. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (ranking! Poly) (addr! Poly)) (! (= (req%lib!betree.LinkedBranch_v.impl&%4.node_children_respects_rank. self! ranking! addr!) (and (=> %%global_location_label%%9 (lib!betree.LinkedBranch_v.impl&%4.wf.? self!)) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr!)) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) addr!)))) :pattern ((req%lib!betree.LinkedBranch_v.impl&%4.node_children_respects_rank. self! ranking! addr!)) )))
(set-info :comment ";; Function-Recommends lib::betree::LinkedBranch_v::DiskView::node_children_respects_rank")
(set-info :comment ";; betree/LinkedBranch_v.rs:174:5: 174:105 (#0)")
(declare-const %return! Bool)
(declare-const self! Poly)
(declare-const ranking! Poly)
(declare-const addr! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(declare-const child_idx@ Poly)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Poly)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Poly)
(declare-const tmp%7 Poly)
(declare-const tmp%8 Poly)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const node@ lib!betree.LinkedBranch_v.Node.)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!betree.LinkedBranch_v.DiskView.))
(assert (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)))
(assert (has_type addr! TYPE%lib!spec.AsyncDisk_t.Address.))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%4 Bool)
(assert (not (=> (lib!betree.LinkedBranch_v.impl&%4.wf.? self!) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) addr!) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) addr!) (=> (= tmp%2 (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!)))) (and (=> %%location_label%%0 (req%vstd!map.impl&%0.spec_index. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. tmp%2 addr!)) (=> (= tmp%1 (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBranch_v.Node. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBranch_v.Node.>. (lib!betree.LinkedBranch_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBranch_v.DiskView. self!))) addr!)) (=> (= node@ (%Poly%lib!betree.LinkedBranch_v.Node. tmp%1)) (=> (has_type child_idx@ INT) (or (and (=> (lib!betree.LinkedBranch_v.impl&%3.valid_child_index.? (Poly%lib!betree.LinkedBranch_v.Node. node@) child_idx@) (=> (= tmp%4 (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. (Poly%lib!betree.LinkedBranch_v.Node. node@))))) (and (=> %%location_label%%1 (req%vstd!seq.impl&%0.spec_index. $ TYPE%lib!spec.AsyncDisk_t.Address. tmp%4 child_idx@)) (=> (= tmp%3 (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. (Poly%lib!betree.LinkedBranch_v.Node. node@)))) child_idx@)) (or (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) tmp%3) (=> (= tmp%6 (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. (Poly%lib!betree.LinkedBranch_v.Node. node@))))) (and (=> %%location_label%%2 (req%vstd!seq.impl&%0.spec_index. $ TYPE%lib!spec.AsyncDisk_t.Address. tmp%6 child_idx@)) (=> (= tmp%5 (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBranch_v.Node./Index/children (%Poly%lib!betree.LinkedBranch_v.Node. (Poly%lib!betree.LinkedBranch_v.Node. node@)))) child_idx@)) (and (=> %%location_label%%3 (req%vstd!map.impl&%0.spec_index. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! tmp%5)) (=> (= tmp%7 (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! tmp%5)) (and (=> %%location_label%%4 (req%vstd!map.impl&%0.spec_index. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! addr!)) (=> (= tmp%8 (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! addr!)) (=> (= tmp%9 (< (%I tmp%7) (%I tmp%8))) %%switch_label%%1))))))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) tmp%3)) (=> (= tmp%9 false) %%switch_label%%1))) (and (not %%switch_label%%1) (=> (= tmp%10 tmp%9) %%switch_label%%0))))))) (=> (not (lib!betree.LinkedBranch_v.impl&%3.valid_child_index.? (Poly%lib!betree.LinkedBranch_v.Node. node@) child_idx@)) (=> (= tmp%10 true) %%switch_label%%0))) (not %%switch_label%%0))))))))))))
(check-sat)
(exit)
