(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module betree::FilteredBetree_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.dup. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.update. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.empty. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.query_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.extend. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.query_internal. FuelId)
(declare-const fuel%lib!betree.Buffer_v.total_keys. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%0.arrow_end. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%0.arrow_start. FuelId)
(declare-const fuel%lib!betree.Domain_v.total_domain. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.contains. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.empty_image. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_flushed. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_pivots. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_buffers. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_buffers. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_pivots. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_flushed. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.local_structure. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.valid_child_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.my_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.child_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.linked_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.wf_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.push_memtable. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.is_leaf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.is_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_leaf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.split_leaf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.split_index. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_parent. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.split_parent. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.empty_root. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.grow. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.promote. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_flush. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.flush. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.can_compact. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.compact. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.key_in_domain. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.child. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%1.make_offset_map. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.structure. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.all_lines_wf. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.child_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.result_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.valid. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.result. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%3.valid_for. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.subpath. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.valid. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.target. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.can_substitute. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.replaced_children. FuelId)
(declare-const fuel%lib!betree.FilteredBetree_v.impl&%4.substitute. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.is_total. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.decrement. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.domain_to_pivots. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.update. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.subrange. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.can_insert. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.insert. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.bounded_key. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.route. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.route_lemma. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%0.arrow_e. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_key. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_element. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.min_elem. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.largest_lte. FuelId)
(declare-const fuel%lib!spec.Messages_t.default_value. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.combine_deltas. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.apply_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.merge. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!betree.BufferOffsets_v.impl&%0.len. fuel%lib!betree.BufferOffsets_v.impl&%0.slice. fuel%lib!betree.BufferOffsets_v.impl&%0.dup. fuel%lib!betree.BufferOffsets_v.impl&%0.update. fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte. fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left. fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. fuel%lib!betree.BufferSeq_v.impl&%0.empty. fuel%lib!betree.BufferSeq_v.impl&%0.len. fuel%lib!betree.BufferSeq_v.impl&%0.spec_index. fuel%lib!betree.BufferSeq_v.impl&%0.slice. fuel%lib!betree.BufferSeq_v.impl&%0.query_from. fuel%lib!betree.BufferSeq_v.impl&%0.extend. fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange. fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer. fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. fuel%lib!betree.Buffer_v.impl&%0.query. fuel%lib!betree.Buffer_v.impl&%1.query_internal. fuel%lib!betree.Buffer_v.total_keys. fuel%lib!betree.Domain_v.impl&%0.arrow_end. fuel%lib!betree.Domain_v.impl&%0.arrow_start. fuel%lib!betree.Domain_v.total_domain. fuel%lib!betree.Domain_v.impl&%1.wf. fuel%lib!betree.Domain_v.impl&%1.contains. fuel%lib!betree.FilteredBetree_v.empty_image. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_children. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_flushed. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_pivots. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_buffers. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_buffers. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_pivots. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_children. fuel%lib!betree.FilteredBetree_v.impl&%0.arrow_Node_flushed. fuel%lib!betree.FilteredBetree_v.impl&%1.local_structure. fuel%lib!betree.FilteredBetree_v.impl&%1.valid_child_index. fuel%lib!betree.FilteredBetree_v.impl&%1.my_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.child_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.linked_children. fuel%lib!betree.FilteredBetree_v.impl&%1.wf_children. fuel%lib!betree.FilteredBetree_v.impl&%1.wf. fuel%lib!betree.FilteredBetree_v.impl&%1.push_memtable. fuel%lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq. fuel%lib!betree.FilteredBetree_v.impl&%1.flushed_ofs. fuel%lib!betree.FilteredBetree_v.impl&%1.is_leaf. fuel%lib!betree.FilteredBetree_v.impl&%1.is_index. fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_leaf. fuel%lib!betree.FilteredBetree_v.impl&%1.split_leaf. fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_index. fuel%lib!betree.FilteredBetree_v.impl&%1.split_index. fuel%lib!betree.FilteredBetree_v.impl&%1.can_split_parent. fuel%lib!betree.FilteredBetree_v.impl&%1.split_parent. fuel%lib!betree.FilteredBetree_v.impl&%1.empty_root. fuel%lib!betree.FilteredBetree_v.impl&%1.grow. fuel%lib!betree.FilteredBetree_v.impl&%1.promote. fuel%lib!betree.FilteredBetree_v.impl&%1.can_flush. fuel%lib!betree.FilteredBetree_v.impl&%1.flush. fuel%lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.can_compact. fuel%lib!betree.FilteredBetree_v.impl&%1.compact. fuel%lib!betree.FilteredBetree_v.impl&%1.key_in_domain. fuel%lib!betree.FilteredBetree_v.impl&%1.child. fuel%lib!betree.FilteredBetree_v.impl&%1.make_offset_map. fuel%lib!betree.FilteredBetree_v.impl&%2.wf. fuel%lib!betree.FilteredBetree_v.impl&%3.structure. fuel%lib!betree.FilteredBetree_v.impl&%3.all_lines_wf. fuel%lib!betree.FilteredBetree_v.impl&%3.child_at. fuel%lib!betree.FilteredBetree_v.impl&%3.child_linked_at. fuel%lib!betree.FilteredBetree_v.impl&%3.result_at. fuel%lib!betree.FilteredBetree_v.impl&%3.result_linked_at. fuel%lib!betree.FilteredBetree_v.impl&%3.valid. fuel%lib!betree.FilteredBetree_v.impl&%3.result. fuel%lib!betree.FilteredBetree_v.impl&%3.valid_for. fuel%lib!betree.FilteredBetree_v.impl&%4.subpath. fuel%lib!betree.FilteredBetree_v.impl&%4.valid. fuel%lib!betree.FilteredBetree_v.impl&%4.target. fuel%lib!betree.FilteredBetree_v.impl&%4.can_substitute. fuel%lib!betree.FilteredBetree_v.impl&%4.replaced_children. fuel%lib!betree.FilteredBetree_v.impl&%4.substitute. fuel%lib!betree.OffsetMap_v.impl&%0.is_total. fuel%lib!betree.OffsetMap_v.impl&%0.decrement. fuel%lib!betree.PivotTable_v.domain_to_pivots. fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. fuel%lib!betree.PivotTable_v.impl&%0.wf. fuel%lib!betree.PivotTable_v.impl&%0.len. fuel%lib!betree.PivotTable_v.impl&%0.update. fuel%lib!betree.PivotTable_v.impl&%0.subrange. fuel%lib!betree.PivotTable_v.impl&%0.can_insert. fuel%lib!betree.PivotTable_v.impl&%0.insert. fuel%lib!betree.PivotTable_v.impl&%0.bounded_key. fuel%lib!betree.PivotTable_v.impl&%0.route. fuel%lib!betree.PivotTable_v.impl&%0.route_lemma. fuel%lib!spec.KeyType_t.impl&%0.arrow_e. fuel%lib!spec.KeyType_t.to_key. fuel%lib!spec.KeyType_t.to_element. fuel%lib!spec.KeyType_t.impl&%1.lte. fuel%lib!spec.KeyType_t.impl&%2.lte. fuel%lib!spec.KeyType_t.impl&%2.lt. fuel%lib!spec.KeyType_t.impl&%2.min_elem. fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. fuel%lib!spec.KeyType_t.impl&%2.largest_lte. fuel%lib!spec.Messages_t.default_value. fuel%lib!spec.Messages_t.nop_delta. fuel%lib!spec.Messages_t.impl&%1.combine_deltas. fuel%lib!spec.Messages_t.impl&%1.apply_delta. fuel%lib!spec.Messages_t.impl&%1.merge. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.KeyType_t.Element.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!abstract_system.StampedMap_v.Stamped. 0) (lib!betree.BufferOffsets_v.BufferOffsets. 0) (lib!betree.BufferSeq_v.BufferSeq. 0) (lib!betree.Buffer_v.SimpleBuffer. 0) (lib!betree.Domain_v.Domain. 0) (lib!betree.FilteredBetree_v.BetreeNode. 0) (lib!betree.FilteredBetree_v.QueryReceiptLine. 0) (lib!betree.FilteredBetree_v.QueryReceipt. 0) (lib!betree.FilteredBetree_v.Path. 0) (lib!betree.Memtable_v.Memtable. 0) (lib!betree.OffsetMap_v.OffsetMap. 0) (lib!betree.PivotTable_v.PivotTable. 0) (lib!betree.SplitRequest_v.SplitRequest. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.KeyType_t.Element. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0)) (((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!abstract_system.StampedMap_v.Stamped./Stamped (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value Poly) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end Int))) ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets vstd!seq.Seq<nat.>.))) ((lib!betree.BufferSeq_v.BufferSeq./BufferSeq (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/?buffers vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.))) ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((lib!betree.Domain_v.Domain./EmptyDomain ) (lib!betree.Domain_v.Domain./Domain (lib!betree.Domain_v.Domain./Domain/?start lib!spec.KeyType_t.Element.) (lib!betree.Domain_v.Domain./Domain/?end lib!spec.KeyType_t.Element.))) ((lib!betree.FilteredBetree_v.BetreeNode./Nil ) (lib!betree.FilteredBetree_v.BetreeNode./Node (lib!betree.FilteredBetree_v.BetreeNode./Node/?buffers lib!betree.BufferSeq_v.BufferSeq.) (lib!betree.FilteredBetree_v.BetreeNode./Node/?pivots lib!betree.PivotTable_v.PivotTable.) (lib!betree.FilteredBetree_v.BetreeNode./Node/?children vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.) (lib!betree.FilteredBetree_v.BetreeNode./Node/?flushed lib!betree.BufferOffsets_v.BufferOffsets.))) ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?node lib!betree.FilteredBetree_v.BetreeNode.) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?result lib!spec.Messages_t.Message.))) ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?key lib!spec.KeyType_t.Key.) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?root lib!betree.FilteredBetree_v.BetreeNode.) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?lines vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.))) ((lib!betree.FilteredBetree_v.Path./Path (lib!betree.FilteredBetree_v.Path./Path/?node lib!betree.FilteredBetree_v.BetreeNode.) (lib!betree.FilteredBetree_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.FilteredBetree_v.Path./Path/?depth Int))) ((lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Memtable_v.Memtable./Memtable/?buffer Poly) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end Int))) ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.))) ((lib!betree.PivotTable_v.PivotTable./PivotTable (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots vstd!seq.Seq<lib!spec.KeyType_t.Element.>.))) ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key lib!spec.KeyType_t.Key.)) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.KeyType_t.Element./Max ) (lib!spec.KeyType_t.Element./Elem (lib!spec.KeyType_t.Element./Elem/?e Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/value (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (lib!abstract_system.StampedMap_v.Stamped.) Int)
(declare-fun lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (lib!betree.BufferOffsets_v.BufferOffsets.) vstd!seq.Seq<nat.>.)
(declare-fun lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (lib!betree.BufferSeq_v.BufferSeq.) vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (lib!betree.Buffer_v.SimpleBuffer.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.Domain_v.Domain./Domain/start (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.Domain_v.Domain./Domain/end (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (lib!betree.FilteredBetree_v.BetreeNode.) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (lib!betree.FilteredBetree_v.BetreeNode.) lib!betree.PivotTable_v.PivotTable.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/children (lib!betree.FilteredBetree_v.BetreeNode.) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(declare-fun lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (lib!betree.FilteredBetree_v.BetreeNode.) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (lib!betree.FilteredBetree_v.QueryReceiptLine.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (lib!betree.FilteredBetree_v.QueryReceiptLine.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (lib!betree.FilteredBetree_v.QueryReceipt.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root (lib!betree.FilteredBetree_v.QueryReceipt.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (lib!betree.FilteredBetree_v.QueryReceipt.) vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)
(declare-fun lib!betree.FilteredBetree_v.Path./Path/node (lib!betree.FilteredBetree_v.Path.) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.Path./Path/key (lib!betree.FilteredBetree_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.FilteredBetree_v.Path./Path/depth (lib!betree.FilteredBetree_v.Path.) Int)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/buffer (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/seq_end (lib!betree.Memtable_v.Memtable.) Int)
(declare-fun lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (lib!betree.OffsetMap_v.OffsetMap.) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (lib!betree.PivotTable_v.PivotTable.) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (lib!betree.SplitRequest_v.SplitRequest.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.KeyType_t.Element./Elem/e (lib!spec.KeyType_t.Element.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!abstract_system.StampedMap_v.Stamped. (Dcr Type) Type)
(declare-const TYPE%lib!betree.BufferOffsets_v.BufferOffsets. Type)
(declare-const TYPE%lib!betree.BufferSeq_v.BufferSeq. Type)
(declare-const TYPE%lib!betree.Buffer_v.SimpleBuffer. Type)
(declare-const TYPE%lib!betree.Domain_v.Domain. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.BetreeNode. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.QueryReceipt. Type)
(declare-const TYPE%lib!betree.FilteredBetree_v.Path. Type)
(declare-fun TYPE%lib!betree.Memtable_v.Memtable. (Dcr Type) Type)
(declare-const TYPE%lib!betree.OffsetMap_v.OffsetMap. Type)
(declare-const TYPE%lib!betree.PivotTable_v.PivotTable. Type)
(declare-const TYPE%lib!betree.SplitRequest_v.SplitRequest. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.KeyType_t.Element. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (Poly) vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq<lib!spec.KeyType_t.Element.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun %Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets.) Poly)
(declare-fun %Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.BufferSeq.) Poly)
(declare-fun %Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.SimpleBuffer.) Poly)
(declare-fun %Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain.) Poly)
(declare-fun %Poly%lib!betree.Domain_v.Domain. (Poly) lib!betree.Domain_v.Domain.)
(declare-fun Poly%lib!betree.FilteredBetree_v.BetreeNode. (lib!betree.FilteredBetree_v.BetreeNode.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (lib!betree.FilteredBetree_v.QueryReceiptLine.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly) lib!betree.FilteredBetree_v.QueryReceiptLine.)
(declare-fun Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.QueryReceipt.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.QueryReceipt. (Poly) lib!betree.FilteredBetree_v.QueryReceipt.)
(declare-fun Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.Path.) Poly)
(declare-fun %Poly%lib!betree.FilteredBetree_v.Path. (Poly) lib!betree.FilteredBetree_v.Path.)
(declare-fun Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun %Poly%lib!betree.Memtable_v.Memtable. (Poly) lib!betree.Memtable_v.Memtable.)
(declare-fun Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.OffsetMap_v.OffsetMap.) Poly)
(declare-fun %Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(declare-fun Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.PivotTable.) Poly)
(declare-fun %Poly%lib!betree.PivotTable_v.PivotTable. (Poly) lib!betree.PivotTable_v.PivotTable.)
(declare-fun Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest.) Poly)
(declare-fun %Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Element. (Poly) lib!spec.KeyType_t.Element.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (= x (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) (= x (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) (= x (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (%Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (= x (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= x (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. x))) :pattern ((Poly%lib!abstract_system.StampedMap_v.Stamped. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (= x (Poly%lib!abstract_system.StampedMap_v.Stamped. (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! Poly) (_seq_end! Int)) (! (=> (and (has_type _value! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) :pattern ((has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (has_type (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) T&)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (<= 0 (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(define-fun is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ ((c lib!abstract_system.StampedMap_v.Stamped.)) Bool ((_ is lib!abstract_system.StampedMap_v.Stamped./Stamped) c))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ x) (height_lt (height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) (height (Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x))) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= x (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) :pattern ((Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (= x (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)))) :pattern ((has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets x)) :pattern ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) :pattern ((has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (has_type y TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (ext_eq deep (TYPE%vstd!seq.Seq. $ NAT) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. y))))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (= x (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. x))) :pattern ((Poly%lib!betree.BufferSeq_v.BufferSeq. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.) (= x (Poly%lib!betree.BufferSeq_v.BufferSeq. (%Poly%lib!betree.BufferSeq_v.BufferSeq. x)))) :pattern ((has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (= (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers x) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/?buffers x)) :pattern ((lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers x)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (has_type (Poly%lib!betree.BufferSeq_v.BufferSeq. x) TYPE%lib!betree.BufferSeq_v.BufferSeq.) :pattern ((has_type (Poly%lib!betree.BufferSeq_v.BufferSeq. x) TYPE%lib!betree.BufferSeq_v.BufferSeq.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type y TYPE%lib!betree.BufferSeq_v.BufferSeq.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. x))) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. y))))) (ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. x y)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= x (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. x))) :pattern ((Poly%lib!betree.Buffer_v.SimpleBuffer. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (= x (Poly%lib!betree.Buffer_v.SimpleBuffer. (%Poly%lib!betree.Buffer_v.SimpleBuffer. x)))) :pattern ((has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map x)) :pattern ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.) :pattern ((has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type y TYPE%lib!betree.Buffer_v.SimpleBuffer.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. y))))) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) :pattern ((ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= x (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. x))) :pattern ((Poly%lib!betree.Domain_v.Domain. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (= x (Poly%lib!betree.Domain_v.Domain. (%Poly%lib!betree.Domain_v.Domain. x)))) :pattern ((has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (has_type (Poly%lib!betree.Domain_v.Domain. lib!betree.Domain_v.Domain./EmptyDomain) TYPE%lib!betree.Domain_v.Domain.))
(assert (forall ((_start! lib!spec.KeyType_t.Element.) (_end! lib!spec.KeyType_t.Element.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Element. _start!) TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Element. _end!) TYPE%lib!spec.KeyType_t.Element.)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/start x) (lib!betree.Domain_v.Domain./Domain/?start x)) :pattern ((lib!betree.Domain_v.Domain./Domain/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/end x) (lib!betree.Domain_v.Domain./Domain/?end x)) :pattern ((lib!betree.Domain_v.Domain./Domain/end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.BetreeNode. (Poly%lib!betree.FilteredBetree_v.BetreeNode. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (= x (Poly%lib!betree.FilteredBetree_v.BetreeNode. (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?buffers x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/buffers x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?pivots x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/pivots x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/children x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?children x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/children x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (= (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed x) (lib!betree.FilteredBetree_v.BetreeNode./Node/?flushed x)) :pattern ((lib!betree.FilteredBetree_v.BetreeNode./Node/flushed x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (has_type (Poly%lib!betree.FilteredBetree_v.BetreeNode. x) TYPE%lib!betree.FilteredBetree_v.BetreeNode.) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.BetreeNode. x) TYPE%lib!betree.FilteredBetree_v.BetreeNode.)) )))
(define-fun is-lib!betree.FilteredBetree_v.BetreeNode./Node_ ((c lib!betree.FilteredBetree_v.BetreeNode.)) Bool ((_ is lib!betree.FilteredBetree_v.BetreeNode./Node) c))
(assert (forall ((x lib!betree.FilteredBetree_v.BetreeNode.)) (! (=> (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children x))) (height (Poly%lib!betree.FilteredBetree_v.BetreeNode. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>. (lib!betree.FilteredBetree_v.BetreeNode./Node/children x)))) )))
(define-fun is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ ((c lib!betree.FilteredBetree_v.BetreeNode.)) Bool ((_ is lib!betree.FilteredBetree_v.BetreeNode./Nil) c))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (is-lib!betree.FilteredBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))) (ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.FilteredBetree_v.BetreeNode.) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y)) (ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x))) (Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.FilteredBetree_v.BetreeNode./Node/buffers (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y)))) (= (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (lib!betree.FilteredBetree_v.BetreeNode./Node/pivots (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))) (= (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x)) (lib!betree.FilteredBetree_v.BetreeNode./Node/children (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. x))) (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.FilteredBetree_v.BetreeNode./Node/flushed (%Poly%lib!betree.FilteredBetree_v.BetreeNode. y))))) (ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.FilteredBetree_v.BetreeNode. x y)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceiptLine.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.) (= x (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) )))
(assert (forall ((_node! lib!betree.FilteredBetree_v.BetreeNode.) (_result! lib!spec.Messages_t.Message.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Message. _result!) TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceiptLine.)) (! (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node x) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?node x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceiptLine.)) (! (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result x) (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/?result x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. (Poly%lib!betree.FilteredBetree_v.QueryReceipt. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.QueryReceipt. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (= x (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_root! lib!betree.FilteredBetree_v.BetreeNode.) (_lines! vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.QueryReceipt. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key x) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?key x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root x) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?root x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.QueryReceipt.)) (! (= (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines x) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/?lines x)) :pattern ((lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= x (%Poly%lib!betree.FilteredBetree_v.Path. (Poly%lib!betree.FilteredBetree_v.Path. x))) :pattern ((Poly%lib!betree.FilteredBetree_v.Path. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.Path.) (= x (Poly%lib!betree.FilteredBetree_v.Path. (%Poly%lib!betree.FilteredBetree_v.Path. x)))) :pattern ((has_type x TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((_node! lib!betree.FilteredBetree_v.BetreeNode.) (_key! lib!spec.KeyType_t.Key.) (_depth! Int)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (<= 0 _depth!)) (has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.FilteredBetree_v.Path.)) :pattern ((has_type (Poly%lib!betree.FilteredBetree_v.Path. (lib!betree.FilteredBetree_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= (lib!betree.FilteredBetree_v.Path./Path/node x) (lib!betree.FilteredBetree_v.Path./Path/?node x)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/node x)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= (lib!betree.FilteredBetree_v.Path./Path/key x) (lib!betree.FilteredBetree_v.Path./Path/?key x)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.Path.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/key (%Poly%lib!betree.FilteredBetree_v.Path. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((x lib!betree.FilteredBetree_v.Path.)) (! (= (lib!betree.FilteredBetree_v.Path./Path/depth x) (lib!betree.FilteredBetree_v.Path./Path/?depth x)) :pattern ((lib!betree.FilteredBetree_v.Path./Path/depth x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.FilteredBetree_v.Path.) (<= 0 (lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. x)))) :pattern ((lib!betree.FilteredBetree_v.Path./Path/depth (%Poly%lib!betree.FilteredBetree_v.Path. x)) (has_type x TYPE%lib!betree.FilteredBetree_v.Path.)) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= x (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. x))) :pattern ((Poly%lib!betree.Memtable_v.Memtable. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (= x (Poly%lib!betree.Memtable_v.Memtable. (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_buffer! Poly) (_seq_end! Int)) (! (=> (and (has_type _buffer! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/buffer x) (lib!betree.Memtable_v.Memtable./Memtable/?buffer x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) T&)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end x) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (<= 0 (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(define-fun is-lib!betree.Memtable_v.Memtable./Memtable_ ((c lib!betree.Memtable_v.Memtable.)) Bool ((_ is lib!betree.Memtable_v.Memtable./Memtable) c))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (=> (is-lib!betree.Memtable_v.Memtable./Memtable_ x) (height_lt (height (lib!betree.Memtable_v.Memtable./Memtable/buffer x)) (height (Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((height (lib!betree.Memtable_v.Memtable./Memtable/buffer x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type y (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (ext_eq deep T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. y))) (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. y)))) (ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= x (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. x))) :pattern ((Poly%lib!betree.OffsetMap_v.OffsetMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (= x (Poly%lib!betree.OffsetMap_v.OffsetMap. (%Poly%lib!betree.OffsetMap_v.OffsetMap. x)))) :pattern ((has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets x)) :pattern ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.) :pattern ((has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type y TYPE%lib!betree.OffsetMap_v.OffsetMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. y))))) (ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) :pattern ((ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= x (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. x))) :pattern ((Poly%lib!betree.PivotTable_v.PivotTable. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotTable_v.PivotTable.) (= x (Poly%lib!betree.PivotTable_v.PivotTable. (%Poly%lib!betree.PivotTable_v.PivotTable. x)))) :pattern ((has_type x TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x) (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots x)) :pattern ((lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.) :pattern ((has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= x (%Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly%lib!betree.SplitRequest_v.SplitRequest. x))) :pattern ((Poly%lib!betree.SplitRequest_v.SplitRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (= x (Poly%lib!betree.SplitRequest_v.SplitRequest. (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_split_key! lib!spec.KeyType_t.Key.)) (! (=> (and (<= 0 _child_idx!) (has_type (Poly%lib!spec.KeyType_t.Key. _split_key!) TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_child_pivot_idx! Int)) (! (=> (and (<= 0 _child_idx!) (<= 0 _child_pivot_idx!)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= x (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. x))) :pattern ((Poly%lib!spec.KeyType_t.Element. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (= x (Poly%lib!spec.KeyType_t.Element. (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (has_type (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max) TYPE%lib!spec.KeyType_t.Element.))
(assert (forall ((_e! Int)) (! (=> (uInv 64 _e!) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= (lib!spec.KeyType_t.Element./Elem/e x) (lib!spec.KeyType_t.Element./Elem/?e x)) :pattern ((lib!spec.KeyType_t.Element./Elem/e x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)) (has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%lib!betree.Buffer_v.Buffer. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.Buffer_v.Buffer. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::spec_affirm")
(declare-fun vstd!pervasive.spec_affirm.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::default_value")
(declare-fun lib!spec.Messages_t.default_value.? (Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::num_ranges")
(declare-fun lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::lte")
(declare-fun lib!spec.KeyType_t.impl&%1.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::arrow_e")
(declare-fun lib!spec.KeyType_t.impl&%0.arrow_e.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::to_key")
(declare-fun lib!spec.KeyType_t.to_key.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::lte")
(declare-fun lib!spec.KeyType_t.impl&%2.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::lt")
(declare-fun lib!spec.KeyType_t.impl&%2.lt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::is_strictly_sorted")
(declare-fun lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::wf")
(declare-fun lib!betree.PivotTable_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::to_element")
(declare-fun lib!spec.KeyType_t.to_element.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::bounded_key")
(declare-fun lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::largest_lte")
(declare-fun lib!spec.KeyType_t.impl&%2.largest_lte.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%2.rec%largest_lte.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::route")
(declare-fun lib!betree.PivotTable_v.impl&%0.route.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::query")
(declare-fun lib!betree.Buffer_v.Buffer.query.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::nop_delta")
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::query_internal")
(declare-fun lib!betree.Buffer_v.impl&%1.query_internal.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::combine_deltas")
(declare-fun lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::apply_delta")
(declare-fun lib!spec.Messages_t.impl&%1.apply_delta.? (Poly Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::merge")
(declare-fun lib!spec.Messages_t.impl&%1.merge.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::arrow_start")
(declare-fun lib!betree.Domain_v.impl&%0.arrow_start.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::arrow_end")
(declare-fun lib!betree.Domain_v.impl&%0.arrow_end.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::wf")
(declare-fun lib!betree.Domain_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::domain_to_pivots")
(declare-fun lib!betree.PivotTable_v.domain_to_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::min_elem")
(declare-fun lib!spec.KeyType_t.impl&%2.min_elem.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::total_domain")
(declare-fun lib!betree.Domain_v.total_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::contains")
(declare-fun lib!betree.Domain_v.impl&%1.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::len")
(declare-fun lib!betree.PivotTable_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::update")
(declare-fun lib!betree.PivotTable_v.impl&%0.update.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::can_insert")
(declare-fun lib!betree.PivotTable_v.impl&%0.can_insert.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::insert")
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::insert")
(declare-fun lib!betree.PivotTable_v.impl&%0.insert.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::subrange")
(declare-fun lib!betree.PivotTable_v.impl&%0.subrange.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::total_keys")
(declare-fun lib!betree.Buffer_v.total_keys.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::len")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::all_lte")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::dup")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::slice")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::all_gte")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_gte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::update")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.update.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.shift_left.? (Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::decrement")
(declare-fun lib!betree.OffsetMap_v.impl&%0.decrement.? (Poly Poly) lib!betree.OffsetMap_v.OffsetMap.)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::is_total")
(declare-fun lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::structure")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_pivots")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_children.? (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_flushed")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_flushed.? (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::len")
(declare-fun lib!betree.BufferSeq_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_buffers")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_buffers.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::local_structure")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.local_structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::valid_child_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.valid_child_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::my_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.my_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::child_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.child_domain.? (Poly Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::linked_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.linked_children.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::wf_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.wf_children.? (Poly) Bool)
(declare-fun lib!betree.FilteredBetree_v.impl&%1.rec%wf_children.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::wf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.wf.? (Poly) Bool)
(declare-fun lib!betree.FilteredBetree_v.impl&%1.rec%wf.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceiptLine::wf")
(declare-fun lib!betree.FilteredBetree_v.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::key_in_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.key_in_domain.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::all_lines_wf")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.all_lines_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::child")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.child.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::child_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.child_at.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::child_linked_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.child_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::flushed_ofs")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.flushed_ofs.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::query_from")
(declare-fun lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%query_from.? (Poly Poly Poly Fuel) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::result_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.result_at.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::result_linked_at")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.result_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::valid")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::valid_for")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.valid_for.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::QueryReceipt::result")
(declare-fun lib!betree.FilteredBetree_v.impl&%3.result.? (Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::extend")
(declare-fun lib!betree.BufferSeq_v.impl&%0.extend.? (Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::extend_buffer_seq")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.extend_buffer_seq.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::empty")
(declare-fun lib!betree.BufferSeq_v.impl&%0.empty.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::empty_root")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.empty_root.? (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::promote")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.promote.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::push_memtable")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.push_memtable.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::grow")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.grow.? (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::is_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.is_index.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::subpath")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.subpath.? (Poly) lib!betree.FilteredBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::valid")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.valid.? (Poly) Bool)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%valid.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::is_leaf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.is_leaf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_split_leaf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_split_leaf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_split_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_split_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_split_parent")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_split_parent.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::target")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.target.? (Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%target.? (Poly Fuel) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::can_substitute")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.can_substitute.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::replaced_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.replaced_children.? (Poly Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%replaced_children.? (Poly Poly Fuel) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::Path::substitute")
(declare-fun lib!betree.FilteredBetree_v.impl&%4.substitute.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(declare-fun lib!betree.FilteredBetree_v.impl&%4.rec%substitute.? (Poly Poly Fuel) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_leaf")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.split_leaf.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_index")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.split_index.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::split_parent")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.split_parent.? (Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_flush")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_flush.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::slice")
(declare-fun lib!betree.BufferSeq_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::flush")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.flush.? (Poly Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::spec_index")
(declare-fun lib!betree.BufferSeq_v.impl&%0.spec_index.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::key_in_buffer")
(declare-fun lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::key_in_buffer_filtered")
(declare-fun lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::make_offset_map")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.make_offset_map.? (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::valid_compact_key_domain")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.valid_compact_key_domain.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::can_compact")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.can_compact.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferSeq_v::BufferSeq::update_subrange")
(declare-fun lib!betree.BufferSeq_v.impl&%0.update_subrange.? (Poly Poly Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::compact")
(declare-fun lib!betree.FilteredBetree_v.impl&%1.compact.? (Poly Poly Poly Poly) lib!betree.FilteredBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::empty_image")
(declare-fun lib!betree.FilteredBetree_v.empty_image.? (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_Node_buffers")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_Node_buffers.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_Node_pivots")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_Node_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_Node_children")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_Node_children.? (Poly) vstd!seq.Seq<lib!betree.FilteredBetree_v.BetreeNode.>.)
(set-info :comment ";; Function-Decl lib::betree::FilteredBetree_v::BetreeNode::arrow_Node_flushed")
(declare-fun lib!betree.FilteredBetree_v.impl&%0.arrow_Node_flushed.? (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%1 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::pervasive::spec_affirm")
(declare-fun req%vstd!pervasive.spec_affirm. (Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((b! Poly)) (! (= (req%vstd!pervasive.spec_affirm. b!) (=> %%global_location_label%%6 (%B b!))) :pattern ((req%vstd!pervasive.spec_affirm. b!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::default_value")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.default_value.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.default_value.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.default_value.? no%param) (lib!spec.Messages_t.Value./Value (%I (I 0)))) :pattern ((lib!spec.Messages_t.default_value.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? no%param)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.default_value.? no%param)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%8 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::num_ranges")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) 1)) :pattern ((lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Key::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lte.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (<= (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. a!)) (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::arrow_e")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%0.arrow_e.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%0.arrow_e.) (forall ((self! Poly)) (! (= (lib!spec.KeyType_t.impl&%0.arrow_e.? self!) (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.impl&%0.arrow_e.? self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) )))
(set-info :comment ";; Function-Specs lib::spec::KeyType_t::to_key")
(declare-fun req%lib!spec.KeyType_t.to_key. (Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(define-fun is-lib!spec.KeyType_t.Element./Elem_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Elem) c))
(assert (forall ((elem! Poly)) (! (= (req%lib!spec.KeyType_t.to_key. elem!) (=> %%global_location_label%%9 (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. elem!)))) :pattern ((req%lib!spec.KeyType_t.to_key. elem!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::to_key")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_key.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_key.) (forall ((elem! Poly)) (! (= (lib!spec.KeyType_t.to_key.? elem!) (lib!spec.KeyType_t.Key./Key (%I (I (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. elem!)))))) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) ))))
(assert (forall ((elem! Poly)) (! (=> (has_type elem! TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? elem!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lte.))
(define-fun is-lib!spec.KeyType_t.Element./Max_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Max) c))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (or (is-lib!spec.KeyType_t.Element./Max_ (%Poly%lib!spec.KeyType_t.Element. b!)) (and (and (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. a!)) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. b!))) (lib!spec.KeyType_t.impl&%1.lte.? (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? a!)) (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? b!)))))) :pattern ((lib!spec.KeyType_t.impl&%2.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::lt")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lt.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lt.? a! b!) (and (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (not (= a! b!)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::is_strictly_sorted")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::wf")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.wf.? self!) (and (and (> (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) 0) (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!))) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$)) )))) :pattern ((lib!betree.PivotTable_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::to_element")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_element.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_element.) (forall ((key! Poly)) (! (= (lib!spec.KeyType_t.to_element.? key!) (lib!spec.KeyType_t.Element./Elem (%I (I (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. key!)))))) :pattern ((lib!spec.KeyType_t.to_element.? key!)) ))))
(assert (forall ((key! Poly)) (! (=> (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!spec.KeyType_t.to_element.? key!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::bounded_key")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.bounded_key. (Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.bounded_key. self! key!) (=> %%global_location_label%%10 (lib!betree.PivotTable_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.bounded_key. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::bounded_key")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.bounded_key.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.bounded_key.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!) (and (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I 0)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))))) :pattern ((lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::largest_lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.largest_lte.))
(declare-const fuel_nat%lib!spec.KeyType_t.impl&%2.largest_lte. Fuel)
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (= (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! fuel%) (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! zero)) :pattern ((lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! fuel%)) )))
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (has_type needle! TYPE%lib!spec.KeyType_t.Element.)) (= (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel%)) (ite (or (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!) 0) (lib!spec.KeyType_t.impl&%2.lt.? needle! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! (I 0)))) (Sub 0 1) (Add 1 (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Element. run! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) needle! fuel%))))) :pattern ((lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.largest_lte.) (forall ((run! Poly) (needle! Poly)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (has_type needle! TYPE%lib!spec.KeyType_t.Element.)) (= (lib!spec.KeyType_t.impl&%2.largest_lte.? run! needle!) (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel_nat%lib!spec.KeyType_t.impl&%2.largest_lte.)))) :pattern ((lib!spec.KeyType_t.impl&%2.largest_lte.? run! needle!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::route")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.route. (Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.route. self! key!) (and (=> %%global_location_label%%11 (lib!betree.PivotTable_v.impl&%0.wf.? self!)) (=> %%global_location_label%%12 (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.route. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::route")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.route.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.route.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.route.? self! key!) (lib!spec.KeyType_t.impl&%2.largest_lte.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.route.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::query")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::nop_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query_internal")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.query_internal.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.query_internal.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::combine_deltas")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.combine_deltas.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.combine_deltas.) (forall ((new! Poly) (old! Poly)) (! (= (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!) (%Poly%lib!spec.Messages_t.Delta. (ite (= (%Poly%lib!spec.Messages_t.Delta. new!) (lib!spec.Messages_t.nop_delta.? (I 0))) old! (ite (= (%Poly%lib!spec.Messages_t.Delta. old!) (lib!spec.Messages_t.nop_delta.? (I 0))) new! new!)))) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) ))))
(assert (forall ((new! Poly) (old! Poly)) (! (=> (and (has_type new! TYPE%lib!spec.Messages_t.Delta.) (has_type old! TYPE%lib!spec.Messages_t.Delta.)) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::apply_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.apply_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.apply_delta.) (forall ((delta! Poly) (value! Poly)) (! (= (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!) (%Poly%lib!spec.Messages_t.Value. value!)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) ))))
(assert (forall ((delta! Poly) (value! Poly)) (! (=> (and (has_type delta! TYPE%lib!spec.Messages_t.Delta.) (has_type value! TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::merge")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.merge.))
(define-fun is-lib!spec.Messages_t.Message./Define_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Define) c))
(define-fun is-lib!spec.Messages_t.Message./Update_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Update) c))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.merge.) (forall ((self! Poly) (new! Poly)) (! (= (lib!spec.Messages_t.impl&%1.merge.? self! new!) (let ((tmp%%$ (tuple%2./tuple%2 self! new!))) (ite (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Define_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. new_value$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((new_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly%lib!spec.Messages_t.Delta. new_delta$) (Poly%lib!spec.Messages_t.Delta. old_delta$))))))) (let ((value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? (Poly%lib!spec.Messages_t.Delta. delta$) (Poly%lib!spec.Messages_t.Value. value$))))))))))) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) ))))
(assert (forall ((self! Poly) (new! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type new! TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? self! new!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!betree.Buffer_v.Buffer. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::arrow_start")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%0.arrow_start.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%0.arrow_start.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%0.arrow_start.? self!) (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) :pattern ((lib!betree.Domain_v.impl&%0.arrow_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.impl&%0.arrow_start.? self!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.impl&%0.arrow_start.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::arrow_end")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%0.arrow_end.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%0.arrow_end.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%0.arrow_end.? self!) (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!))) :pattern ((lib!betree.Domain_v.impl&%0.arrow_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.impl&%0.arrow_end.? self!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.impl&%0.arrow_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::wf")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.wf.))
(define-fun is-lib!betree.Domain_v.Domain./Domain_ ((c lib!betree.Domain_v.Domain.)) Bool ((_ is lib!betree.Domain_v.Domain./Domain) c))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%1.wf.? self!) (=> (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (and (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))) (is-lib!spec.KeyType_t.Element./Elem_ (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::domain_to_pivots")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.domain_to_pivots.))
(declare-fun %%array%%0 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1))) (and (= (%%apply%%1 %%x%% 0) %%hole%%0) (= (%%apply%%1 %%x%% 1) %%hole%%1))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1)) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.domain_to_pivots.) (forall ((domain! Poly)) (! (= (lib!betree.PivotTable_v.domain_to_pivots.? domain!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!spec.KeyType_t.Element. $ (CONST_INT 2)) (array_new $ TYPE%lib!spec.KeyType_t.Element. 2 (%%array%%0 (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. domain!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. domain!))))))))) :pattern ((lib!betree.PivotTable_v.domain_to_pivots.? domain!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::min_elem")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.min_elem.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.min_elem.) (forall ((no%param Poly)) (! (= (lib!spec.KeyType_t.impl&%2.min_elem.? no%param) (lib!spec.KeyType_t.Element./Elem (%I (I 0)))) :pattern ((lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::total_domain")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.total_domain.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.total_domain.) (forall ((no%param Poly)) (! (= (lib!betree.Domain_v.total_domain.? no%param) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.impl&%2.min_elem.? (I 0)))) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max)))) :pattern ((lib!betree.Domain_v.total_domain.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? no%param)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.Domain_v.total_domain.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::contains")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.contains.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.contains.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Domain_v.impl&%1.contains.? self! key!) (and (and (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (lib!spec.KeyType_t.impl&%2.lte.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.contains.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::len")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (<= 0 (lib!betree.PivotTable_v.impl&%0.len.? self!))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::update")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.update. self! i! element!) (=> %%global_location_label%%13 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.update. self! i! element!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::update")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.update.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.update.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.update.? self! i! element!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq.update.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i! element!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.update.? self! i! element!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::can_insert")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.can_insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.can_insert.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!) (and (and (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? self!) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. element!))) (and (<= 0 (%I i!)) (<= (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!)))) (=> (= (%I i!) 0) (lib!spec.KeyType_t.impl&%2.lt.? element! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I 0))))) (=> (= (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!)) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) element!))) (=> (and (< 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))) (and (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (Sub (%I i!) 1))) element!) (lib!spec.KeyType_t.impl&%2.lt.? element! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i!)))))) :pattern ((lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::insert")
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%14 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::insert")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.insert. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.insert. self! i! element!) (=> %%global_location_label%%15 (lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.insert. self! i! element!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::insert")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.insert.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.insert.? self! i! element!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i! element!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.insert.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::subrange")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.subrange. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.subrange. self! start! end!) (=> %%global_location_label%%16 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.subrange. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::subrange")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.subrange.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.subrange.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.subrange.? self! start! end!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) start! end!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.subrange.? self! start! end!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::total_keys")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.total_keys.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.total_keys.) (forall ((keys! Poly)) (! (= (lib!betree.Buffer_v.total_keys.? keys!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) ))) :pattern ((lib!betree.Buffer_v.total_keys.? keys!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::len")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (<= 0 (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::all_lte")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (<= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::route_lemma")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.route_lemma. (lib!betree.PivotTable_v.PivotTable. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! lib!betree.PivotTable_v.PivotTable.) (key! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.PivotTable_v.impl&%0.route_lemma. self! key!) (and (=> %%global_location_label%%17 (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. self!))) (=> %%global_location_label%%18 (lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (Poly%lib!spec.KeyType_t.Key. key!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.route_lemma. self! key!)) )))
(declare-fun ens%lib!betree.PivotTable_v.impl&%0.route_lemma. (lib!betree.PivotTable_v.PivotTable. lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((self! lib!betree.PivotTable_v.PivotTable.) (key! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.PivotTable_v.impl&%0.route_lemma. self! key!) (and (let ((tmp%%$ (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (Poly%lib!spec.KeyType_t.Key. key!)))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. self!))))) (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. self!)))) (I (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (Poly%lib!spec.KeyType_t.Key. key!)))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. key!))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. self!)))) (I (Add (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. self!) (Poly%lib!spec.KeyType_t.Key. key!)) 1)))))) :pattern ((ens%lib!betree.PivotTable_v.impl&%0.route_lemma. self! key!)) )))
(set-info :comment ";; Broadcast lib::betree::PivotTable_v::PivotTable::route_lemma")
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.route_lemma.) (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (=> (and (lib!betree.PivotTable_v.impl&%0.wf.? self!) (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) (and (and (let ((tmp%%$ (lib!betree.PivotTable_v.impl&%0.route.? self! key!))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)))) (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (lib!betree.PivotTable_v.impl&%0.route.? self! key!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (Add (lib!betree.PivotTable_v.impl&%0.route.? self! key!) 1))))))) :pattern ((lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::dup")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.dup. (Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.dup. self! idx!) (=> %%global_location_label%%19 (and (<= 0 (%I idx!)) (< (%I idx!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.dup. self! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::dup")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.dup.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.dup.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.dup.? self! idx!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq_lib.impl&%0.insert.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx! (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.dup.? self! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::slice")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.slice. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.slice. self! start! end!) (=> %%global_location_label%%20 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.slice. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::slice")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.slice.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.slice.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.slice.? self! start! end!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.subrange.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) start! end!)))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.slice.? self! start! end!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::all_gte")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (>= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::update")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly) (idx! Poly) (value! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.update. self! idx! value!) (=> %%global_location_label%%21 (and (<= 0 (%I idx!)) (< (%I idx!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.update. self! idx! value!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::update")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.update.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.update.) (forall ((self! Poly) (idx! Poly) (value! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.update.? self! idx! value!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.update.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx! value!)))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.update.? self! idx! value!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.shift_left. (Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly) (target! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.shift_left. self! target!) (=> %%global_location_label%%22 (lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.shift_left. self! target!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left.))
(declare-fun %%lambda%%1 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (I (nClip (Sub (%I (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) %%hole%%3)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.shift_left.? self! target!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.new.? $ NAT $ (TYPE%fun%1. $ INT $ NAT) (I (lib!betree.BufferOffsets_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I target!)))))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.shift_left.? self! target!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::decrement")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.decrement.))
(declare-fun %%lambda%%2 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly Int Dcr Type Dcr Type Poly Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Int) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Int) (%%hole%%12 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (I (ite (<= %%hole%%5 (%I (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$))) (nClip (Sub (%I (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 k$)) %%hole%%11)) %%hole%%12))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.decrement.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.decrement.? self! i!) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%2 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))))))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I i!) $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I i!) 0))))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.decrement.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::is_total")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.is_total.))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.is_total.) (forall ((self! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.is_total.? self!) (lib!betree.Buffer_v.total_keys.? (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!)))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.is_total.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. self! start! end!) (=> %%global_location_label%%23 (and (<= 0 (%I start!)) (< (%I start!) (%I end!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact.))
(declare-fun %%lambda%%4 (Dcr Type Poly Int Dcr Type Poly Dcr Type Poly Int Dcr Type Poly Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Int) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 Int) (%%hole%%15 Int) (%%hole%%16 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) i$) (I (ite (<= (%I (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) %%hole%%3) (%I (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 %%hole%%6 i$)) (ite (< (%I (vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)) %%hole%%10) %%hole%%16 (nClip (Add (Sub (%I (vstd!seq.Seq.index.? %%hole%%11 %%hole%%12 %%hole%%13 i$)) %%hole%%14) %%hole%%15)))))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? self! start! end!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.new.? $ NAT $ (TYPE%fun%1. $ INT $ NAT) (I (lib!betree.BufferOffsets_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%4 $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I start!) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I end!) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (Sub (%I end!) (%I start!)) 1 (nClip (%I start!))))))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? self! start! end!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::FilteredBetree_v::QueryReceipt::structure")
(set-info :comment ";; betree/FilteredBetree_v.rs:458:5: 458:54 (#0)")
(declare-const %return! Bool)
(declare-const self! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(declare-const tmp%3 Bool)
(declare-const i@ Poly)
(declare-const tmp%4 Poly)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Poly)
(declare-const tmp%9 Poly)
(declare-const tmp%10 Bool)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!betree.FilteredBetree_v.QueryReceipt.))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%2 Bool)
(assert (not (or (and (=> (< 0 (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (=> (= tmp%2 (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) (and (=> %%location_label%%0 (req%vstd!seq.impl&%0.spec_index. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. tmp%2 (I 0))) (=> (= tmp%1 (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) (I 0))) (=> (= tmp%3 (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. tmp%1)) (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) %%switch_label%%3))))) (=> (not (< 0 (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))) (=> (= tmp%3 false) %%switch_label%%3))) (and (not %%switch_label%%3) (or (and (=> tmp%3 (=> (has_type i@ NAT) (or (and (=> (< (%I i@) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (=> (= tmp%5 (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) (and (=> %%location_label%%1 (req%vstd!seq.impl&%0.spec_index. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. tmp%5 i@)) (=> (= tmp%4 (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i@)) (=> (= tmp%6 (= (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. tmp%4))) (< (%I i@) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1)))) %%switch_label%%2))))) (=> (not (< (%I i@) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))))) (=> (= tmp%6 true) %%switch_label%%2))) (and (not %%switch_label%%2) (=> (= tmp%7 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (= (is-lib!betree.FilteredBetree_v.BetreeNode./Node_ (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) 1))))) :pattern ((lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))) i$)))) ))) %%switch_label%%1))))) (=> (not tmp%3) (=> (= tmp%7 false) %%switch_label%%1))) (and (not %%switch_label%%1) (or (and (=> tmp%7 (=> (= tmp%9 (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!)))) (and (=> %%location_label%%2 (req%vstd!seq.Seq.last. $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. tmp%9)) (=> (= tmp%8 (vstd!seq.Seq.last.? $ TYPE%lib!betree.FilteredBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.FilteredBetree_v.QueryReceiptLine.>. (lib!betree.FilteredBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.FilteredBetree_v.QueryReceipt. self!))))) (=> (= tmp%10 (= (lib!betree.FilteredBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.FilteredBetree_v.QueryReceiptLine. tmp%8)) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? (I 0))))))) %%switch_label%%0))))) (=> (not tmp%7) (=> (= tmp%10 false) %%switch_label%%0))) (not %%switch_label%%0))))))))
(check-sat)
(exit)
