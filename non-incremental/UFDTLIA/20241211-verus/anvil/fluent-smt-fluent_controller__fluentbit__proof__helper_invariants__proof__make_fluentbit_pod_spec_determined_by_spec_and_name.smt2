(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec. fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env. fuel%fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default. fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default. fuel%fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name. fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.))
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. 0)
(declare-sort vstd!string.String. 0)
(declare-datatypes ((core!option.Option. 0) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. 0) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. 0) (fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. 0) (fluent_controller!kubernetes_api_objects.spec.common.Kind. 0) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView. 0) (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. 0) (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. 0) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. 0) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. 0) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView. 0) (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. 0) (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. 0) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. 0) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. 0) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. 0) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. 0) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. 0) (fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. 0) (fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. 0) (fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. 0) (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. 0) (fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. 0) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/?metadata fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/?spec fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/?status core!option.Option.))) ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?fluentbit_config_name Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?image Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?args core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?command core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?image_pull_policy core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?image_pull_secrets core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?resources core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?tolerations core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?labels Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?annotations Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_account_annotations Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_labels Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_selector core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_annotations Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?affinity core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?disable_log_volumes Bool) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?node_selector Poly) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?runtime_class_name core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?dns_policy core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?priority_class_name core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?volumes core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?volume_mounts core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?scheduler_name core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?metrics_port core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?internal_mount_propagation core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?position_db core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?container_log_real_path core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?security_context core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?container_security_context core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?host_network core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?env_vars core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?liveness_probe core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?readiness_probe core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?init_containers core!option.Option.) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?ports core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView./AffinityView )) ((fluent_controller!kubernetes_api_objects.spec.common.Kind./ConfigMapKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./DaemonSetKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./PersistentVolumeClaimKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./PodKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./RoleKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./RoleBindingKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./StatefulSetKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./ServiceKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./ServiceAccountKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./SecretKind )) ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?env core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?name Poly) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?ports core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?volume_mounts core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?lifecycle core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?resources core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?readiness_probe core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?liveness_probe core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?command core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image_pull_policy core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?args core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?security_context core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/?pre_stop core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/?exec_ core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?container_port Int) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?protocol core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_path Poly) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?name Poly) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?read_only core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?sub_path core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_propagation core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?exec_ core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?failure_threshold core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?initial_delay_seconds core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?period_seconds core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?success_threshold core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?tcp_socket core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?timeout_seconds core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/?command core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?host core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?port Int))) ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?name Poly) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value_from core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/?field_ref core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView./SecurityContextView )) ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind fluent_controller!kubernetes_api_objects.spec.common.Kind.) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name Poly) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid Int))) ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?affinity core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?containers vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?volumes core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?init_containers core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?service_account_name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?tolerations core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?node_selector core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?runtime_class_name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?dns_policy core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?priority_class_name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?scheduler_name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?security_context core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?host_network core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?termination_grace_period_seconds core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?image_pull_secrets core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView./PodSecurityContextView )) ((fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView./LocalObjectReferenceView )) ((fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView./EmptyStatusView )) ((fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView./TolerationView )) ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?host_path core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?config_map core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?name Poly) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?projected core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?secret core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?downward_api core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?empty_dir core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?medium core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?size_limit core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/?path Poly))) ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/?name core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/?secret_name core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/?sources core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?config_map core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?secret core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?items core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?name core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?items core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?name core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?key Poly) (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?path Poly))) ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/?items core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?field_ref core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?path Poly))) ((fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?field_path Poly) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?api_version core!option.Option.))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/status (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/fluentbit_config_name (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/resources (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/tolerations (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/labels (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/annotations (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_account_annotations (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_labels (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_selector (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_annotations (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/affinity (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Bool)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/node_selector (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/runtime_class_name (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/dns_policy (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/priority_class_name (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/scheduler_name (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/security_context (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/host_network (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) Int)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/port (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) Int)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Int)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) core!option.Option.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%vstd!string.String. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>.)
(declare-fun Poly%vstd!string.String. (vstd!string.String.) Poly)
(declare-fun %Poly%vstd!string.String. (Poly) vstd!string.String.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly) fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly) fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. (fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly) fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.common.Kind.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. (fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. (Poly) fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly) fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly) fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (Poly) fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (Poly) fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly) fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly) fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. (fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly) fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (Poly) fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.))) )))
(assert (forall ((x vstd!string.String.)) (! (= x (%Poly%vstd!string.String. (Poly%vstd!string.String. x))) :pattern ((Poly%vstd!string.String. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!string.String.) (= x (Poly%vstd!string.String. (%Poly%vstd!string.String. x)))) :pattern ((has_type x TYPE%vstd!string.String.)) )))
(assert (forall ((x vstd!string.String.)) (! (has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.) :pattern ((has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (= x (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) )))
(assert (forall ((_metadata! fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. _spec!) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) (has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView _metadata! _spec! _status!)) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView _metadata! _spec! _status!)) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/?metadata x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/?spec x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x))) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/status x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/?status x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/status (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/status (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (= x (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((_fluentbit_config_name! Poly) (_image! Poly) (_args! core!option.Option.) (_command! core!option.Option.) (_image_pull_policy! core!option.Option.) (_image_pull_secrets! core!option.Option.) (_resources! core!option.Option.) (_tolerations! core!option.Option.) (_labels! Poly) (_annotations! Poly) (_service_account_annotations! Poly) (_service_labels! Poly) (_service_selector! core!option.Option.) (_service_annotations! Poly) (_affinity! core!option.Option.) (_disable_log_volumes! Bool) (_node_selector! Poly) (_runtime_class_name! core!option.Option.) (_dns_policy! core!option.Option.) (_priority_class_name! core!option.Option.) (_volumes! core!option.Option.) (_volume_mounts! core!option.Option.) (_scheduler_name! core!option.Option.) (_metrics_port! core!option.Option.) (_internal_mount_propagation! core!option.Option.) (_position_db! core!option.Option.) (_container_log_real_path! core!option.Option.) (_security_context! core!option.Option.) (_container_security_context! core!option.Option.) (_host_network! core!option.Option.) (_env_vars! core!option.Option.) (_liveness_probe! core!option.Option.) (_readiness_probe! core!option.Option.) (_init_containers! core!option.Option.) (_ports! core!option.Option.)) (! (=> (and (has_type _fluentbit_config_name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _image! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _args!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _command!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _image_pull_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _image_pull_secrets!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.))) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type (Poly%core!option.Option. _tolerations!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type _labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _service_account_annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _service_labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _service_selector!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type _service_annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _affinity!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type _node_selector! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _runtime_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _dns_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _priority_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _volumes!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.))) (has_type (Poly%core!option.Option. _volume_mounts!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) (has_type (Poly%core!option.Option. _scheduler_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _metrics_port!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _internal_mount_propagation!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _position_db!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (has_type (Poly%core!option.Option. _container_log_real_path!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _security_context!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (has_type (Poly%core!option.Option. _container_security_context!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) (has_type (Poly%core!option.Option. _host_network!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _env_vars!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.))) (has_type (Poly%core!option.Option. _liveness_probe!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%core!option.Option. _readiness_probe!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%core!option.Option. _init_containers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.))) (has_type (Poly%core!option.Option. _ports!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)))) (has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView _fluentbit_config_name! _image! _args! _command! _image_pull_policy! _image_pull_secrets! _resources! _tolerations! _labels! _annotations! _service_account_annotations! _service_labels! _service_selector! _service_annotations! _affinity! _disable_log_volumes! _node_selector! _runtime_class_name! _dns_policy! _priority_class_name! _volumes! _volume_mounts! _scheduler_name! _metrics_port! _internal_mount_propagation! _position_db! _container_log_real_path! _security_context! _container_security_context! _host_network! _env_vars! _liveness_probe! _readiness_probe! _init_containers! _ports!)) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView _fluentbit_config_name! _image! _args! _command! _image_pull_policy! _image_pull_secrets! _resources! _tolerations! _labels! _annotations! _service_account_annotations! _service_labels! _service_selector! _service_annotations! _affinity! _disable_log_volumes! _node_selector! _runtime_class_name! _dns_policy! _priority_class_name! _volumes! _volume_mounts! _scheduler_name! _metrics_port! _internal_mount_propagation! _position_db! _container_log_real_path! _security_context! _container_security_context! _host_network! _env_vars! _liveness_probe! _readiness_probe! _init_containers! _ports!)) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/fluentbit_config_name x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?fluentbit_config_name x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/fluentbit_config_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/fluentbit_config_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/fluentbit_config_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?image x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?args x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?command x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?image_pull_policy x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?image_pull_secrets x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/resources x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?resources x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/resources (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/resources (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/tolerations x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?tolerations x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/tolerations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/tolerations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/tolerations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/labels x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?labels x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/labels (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/labels (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/annotations x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?annotations x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/annotations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/annotations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_account_annotations x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_account_annotations x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_account_annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_account_annotations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_account_annotations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_labels x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_labels x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_labels (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_labels (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_selector x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_selector x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_selector (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_selector (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_annotations x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?service_annotations x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_annotations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/service_annotations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/affinity x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?affinity x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/affinity x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/affinity (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/affinity (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?disable_log_volumes x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes x)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/node_selector x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?node_selector x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/node_selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/node_selector (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/node_selector (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/runtime_class_name x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?runtime_class_name x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/runtime_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/runtime_class_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/runtime_class_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/dns_policy x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?dns_policy x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/dns_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/dns_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/dns_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/priority_class_name x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?priority_class_name x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/priority_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/priority_class_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/priority_class_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?volumes x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?volume_mounts x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/scheduler_name x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?scheduler_name x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/scheduler_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/scheduler_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/scheduler_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?metrics_port x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?internal_mount_propagation x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?position_db x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?container_log_real_path x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/security_context x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?security_context x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/security_context x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?container_security_context x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/host_network x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?host_network x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/host_network x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/host_network (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/host_network (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?env_vars x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?liveness_probe x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?readiness_probe x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?init_containers x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports x) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/?ports x)) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)))) :pattern ((fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. (%Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.Kind.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.Kind.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((_env! core!option.Option.) (_image! core!option.Option.) (_name! Poly) (_ports! core!option.Option.) (_volume_mounts! core!option.Option.) (_lifecycle! core!option.Option.) (_resources! core!option.Option.) (_readiness_probe! core!option.Option.) (_liveness_probe! core!option.Option.) (_command! core!option.Option.) (_image_pull_policy! core!option.Option.) (_args! core!option.Option.) (_security_context! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _env!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.))) (has_type (Poly%core!option.Option. _image!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _ports!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) (has_type (Poly%core!option.Option. _volume_mounts!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) (has_type (Poly%core!option.Option. _lifecycle!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type (Poly%core!option.Option. _readiness_probe!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%core!option.Option. _liveness_probe!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%core!option.Option. _command!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _image_pull_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _args!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _security_context!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView _env! _image! _name! _ports! _volume_mounts! _lifecycle! _resources! _readiness_probe! _liveness_probe! _command! _image_pull_policy! _args! _security_context!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView _env! _image! _name! _ports! _volume_mounts! _lifecycle! _resources! _readiness_probe! _liveness_probe! _command! _image_pull_policy! _args! _security_context!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?env x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?ports x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?volume_mounts x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?lifecycle x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?resources x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?readiness_probe x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?liveness_probe x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?command x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image_pull_policy x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?args x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?security_context x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) )))
(assert (forall ((_pre_stop! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _pre_stop!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView _pre_stop!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView _pre_stop!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop x) (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/?pre_stop x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) )))
(assert (forall ((_exec_! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _exec_!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView _exec_!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView _exec_!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ x) (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/?exec_ x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ (%Poly%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((_container_port! Int) (_name! core!option.Option.) (_protocol! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _protocol!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView _container_port! _name! _protocol!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView _container_port! _name! _protocol!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?container_port x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol x) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?protocol x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((_mount_path! Poly) (_name! Poly) (_read_only! core!option.Option.) (_sub_path! core!option.Option.) (_mount_propagation! core!option.Option.)) (! (=> (and (has_type _mount_path! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _read_only!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _sub_path!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _mount_propagation!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView _mount_path! _name! _read_only! _sub_path! _mount_propagation!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView _mount_path! _name! _read_only! _sub_path! _mount_propagation!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path x) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name x) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only x) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?read_only x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path x) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?sub_path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation x) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_propagation x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((_exec_! core!option.Option.) (_failure_threshold! core!option.Option.) (_initial_delay_seconds! core!option.Option.) (_period_seconds! core!option.Option.) (_success_threshold! core!option.Option.) (_tcp_socket! core!option.Option.) (_timeout_seconds! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _exec_!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (has_type (Poly%core!option.Option. _failure_threshold!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _initial_delay_seconds!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _period_seconds!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _success_threshold!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _tcp_socket!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (has_type (Poly%core!option.Option. _timeout_seconds!) (TYPE%core!option.Option. $ INT))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView _exec_! _failure_threshold! _initial_delay_seconds! _period_seconds! _success_threshold! _tcp_socket! _timeout_seconds!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView _exec_! _failure_threshold! _initial_delay_seconds! _period_seconds! _success_threshold! _tcp_socket! _timeout_seconds!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?exec_ x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?failure_threshold x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?initial_delay_seconds x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?period_seconds x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?success_threshold x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?tcp_socket x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds x) (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?timeout_seconds x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) )))
(assert (forall ((_command! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _command!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView _command!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView _command!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command x) (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/?command x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.ExecActionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) )))
(assert (forall ((_host! core!option.Option.) (_port! Int)) (! (=> (has_type (Poly%core!option.Option. _host!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView _host! _port!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView _host! _port!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host x) (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?host x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (%Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (%Poly%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/port x) (fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?port x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/port x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((_name! Poly) (_value! core!option.Option.) (_value_from! core!option.Option.)) (! (=> (and (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _value_from!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView _name! _value! _value_from!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView _name! _value! _value_from!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name x) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value x) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from x) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value_from x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) )))
(assert (forall ((_field_ref! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _field_ref!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView _field_ref!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView _field_ref!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref x) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/?field_ref x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. (%Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((_name! core!option.Option.) (_namespace! core!option.Option.) (_resource_version! core!option.Option.) (_uid! core!option.Option.) (_labels! core!option.Option.) (_annotations! core!option.Option.) (_owner_references! core!option.Option.) (_finalizers! core!option.Option.) (_deletion_timestamp! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _namespace!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resource_version!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _uid!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _labels!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _annotations!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _owner_references!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%core!option.Option. _finalizers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _deletion_timestamp!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((_block_owner_deletion! core!option.Option.) (_controller! core!option.Option.) (_kind! fluent_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_uid! Int)) (! (=> (and (has_type (Poly%core!option.Option. _block_owner_deletion!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _controller!) (TYPE%core!option.Option. $ BOOL)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((_affinity! core!option.Option.) (_containers! vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>.) (_volumes! core!option.Option.) (_init_containers! core!option.Option.) (_service_account_name! core!option.Option.) (_tolerations! core!option.Option.) (_node_selector! core!option.Option.) (_runtime_class_name! core!option.Option.) (_dns_policy! core!option.Option.) (_priority_class_name! core!option.Option.) (_scheduler_name! core!option.Option.) (_security_context! core!option.Option.) (_host_network! core!option.Option.) (_termination_grace_period_seconds! core!option.Option.) (_image_pull_secrets! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _affinity!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type (Poly%core!option.Option. _volumes!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.))) (has_type (Poly%core!option.Option. _init_containers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.))) (has_type (Poly%core!option.Option. _service_account_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _tolerations!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type (Poly%core!option.Option. _node_selector!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _runtime_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _dns_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _priority_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _scheduler_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _security_context!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (has_type (Poly%core!option.Option. _host_network!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _termination_grace_period_seconds!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _image_pull_secrets!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView _affinity! _containers! _volumes! _init_containers! _service_account_name! _tolerations! _node_selector! _runtime_class_name! _dns_policy! _priority_class_name! _scheduler_name! _security_context! _host_network! _termination_grace_period_seconds! _image_pull_secrets!)) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView _affinity! _containers! _volumes! _init_containers! _service_account_name! _tolerations! _node_selector! _runtime_class_name! _dns_policy! _priority_class_name! _scheduler_name! _security_context! _host_network! _termination_grace_period_seconds! _image_pull_secrets!)) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?affinity x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.affinity.AffinityView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?containers x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?volumes x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?init_containers x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?service_account_name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?tolerations x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?node_selector x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?runtime_class_name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?dns_policy x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?priority_class_name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?scheduler_name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?security_context x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?host_network x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?termination_grace_period_seconds x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets x) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?image_pull_secrets x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (%Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (%Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((_limits! core!option.Option.) (_requests! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _limits!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _requests!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x) (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x) (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. (%Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((_host_path! core!option.Option.) (_config_map! core!option.Option.) (_name! Poly) (_projected! core!option.Option.) (_secret! core!option.Option.) (_downward_api! core!option.Option.) (_empty_dir! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _host_path!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (has_type (Poly%core!option.Option. _config_map!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _projected!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (has_type (Poly%core!option.Option. _secret!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (has_type (Poly%core!option.Option. _downward_api!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (has_type (Poly%core!option.Option. _empty_dir!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView _host_path! _config_map! _name! _projected! _secret! _downward_api! _empty_dir!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView _host_path! _config_map! _name! _projected! _secret! _downward_api! _empty_dir!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?host_path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?config_map x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?projected x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?secret x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?downward_api x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?empty_dir x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((_medium! core!option.Option.) (_size_limit! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _medium!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (has_type (Poly%core!option.Option. _size_limit!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView _medium! _size_limit!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView _medium! _size_limit!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium x) (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?medium x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x))) (TYPE%core!option.Option. $ TYPE%vstd!string.String.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit x) (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?size_limit x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) )))
(assert (forall ((_path! Poly)) (! (=> (has_type _path! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView _path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView _path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path x) (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/?path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) (has_type (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) )))
(assert (forall ((_name! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView _name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView _name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name x) (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) )))
(assert (forall ((_secret_name! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _secret_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView _secret_name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView _secret_name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name x) (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/?secret_name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) )))
(assert (forall ((_sources! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _sources!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView _sources!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView _sources!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources x) (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/?sources x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((_config_map! core!option.Option.) (_secret! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _config_map!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (has_type (Poly%core!option.Option. _secret!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView _config_map! _secret!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView _config_map! _secret!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?config_map x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret x) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?secret x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((_items! core!option.Option.) (_name! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _items!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView _items! _name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView _items! _name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items x) (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?items x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name x) (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((_items! core!option.Option.) (_name! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _items!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView _items! _name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView _items! _name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items x) (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?items x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name x) (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((_key! Poly) (_path! Poly)) (! (=> (and (has_type _key! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView _key! _path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView _key! _path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key x) (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?key x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (has_type (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path x) (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (has_type (fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) )))
(assert (forall ((_items! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _items!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView _items!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView _items!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items x) (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/?items x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((_field_ref! core!option.Option.) (_path! Poly)) (! (=> (and (has_type (Poly%core!option.Option. _field_ref!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (has_type _path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView _field_ref! _path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView _field_ref! _path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref x) (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?field_ref x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path x) (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (has_type (fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((_field_path! Poly) (_api_version! core!option.Option.)) (! (=> (and (has_type _field_path! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _api_version!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView _field_path! _api_version!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView _field_path! _api_version!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path x) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?field_path x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (has_type (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version x) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?api_version x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!string.impl&%0.view.? (Poly) Poly)
(declare-fun vstd!string.impl&%0.is_ascii.? (Poly) Bool)
(declare-fun fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? (Poly) fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(declare-fun fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.? (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)
(declare-fun fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.? (Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%27 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%28 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%29 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%31 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%35 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%37 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%41 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%43 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(assert (forall ((self! Poly)) (! (=> (has_type self! STRSLICE) (has_type (vstd!string.impl&%0.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%0.view.? self!)) )))
(declare-fun ens%vstd!string.axiom_str_literal_is_ascii. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_is_ascii. s!) (= (vstd!string.impl&%0.is_ascii.? (S s!)) (str%strslice_is_ascii s!))) :pattern ((ens%vstd!string.axiom_str_literal_is_ascii. s!)) )))
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!string.impl&%0.is_ascii.? s!) (str%strslice_is_ascii (%S s!)))) :pattern ((vstd!string.impl&%0.is_ascii.? s!)) )))
(declare-fun ens%vstd!string.axiom_str_literal_len. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_len. s!) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? (S s!))) (str%strslice_len s!))) :pattern ((ens%vstd!string.axiom_str_literal_len. s!)) )))
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!)) (str%strslice_len (%S s!)))) :pattern ((vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!))) )))
(declare-fun ens%vstd!string.axiom_str_literal_get_char. (StrSlice Int) Bool)
(assert (forall ((s! StrSlice) (i! Int)) (! (= (ens%vstd!string.axiom_str_literal_get_char. s! i!) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? (S s!)) (I i!))) (str%strslice_get_char s! i!))) :pattern ((ens%vstd!string.axiom_str_literal_get_char. s! i!)) )))
(assert (forall ((s! Poly) (i! Poly)) (! (=> (and (has_type s! STRSLICE) (has_type i! INT)) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) (str%strslice_get_char (%S s!) (%I i!)))) :pattern ((vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (%I (I 0)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.) (forall ((self! Poly) (container_port! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (%I container_port!) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!)) ))))
(assert (forall ((self! Poly) (container_port! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type container_port! INT)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!) (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (%I (I (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (B false)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) name! (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.) (forall ((self! Poly) (host_path! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? self! host_path!) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some host_path!))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? self! host_path!)) ))))
(assert (forall ((self! Poly) (host_path! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type host_path! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? self! host_path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? self! host_path!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.) (forall ((self! Poly) (secret! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some secret!))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!)) ))))
(assert (forall ((self! Poly) (secret! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type secret! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.) (forall ((self! Poly) (path! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? self! path!) (fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView path!)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? self! path!)) ))))
(assert (forall ((self! Poly) (path! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) (has_type path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? self! path!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? self! path!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.) (forall ((self! Poly) (secret_name! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!) (fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some secret_name!))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!)) ))))
(assert (forall ((self! Poly) (secret_name! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) (has_type secret_name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!)) )))
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param)) )))
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.) (forall ((fb! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.? fb!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.? fb!)) ))))
(assert (forall ((fb! Poly)) (! (=> (has_type fb! TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (has_type (fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.? fb!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.? fb!)) )))
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.) (forall ((fluentbit! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.? fluentbit!) (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 9550466510480779651798518457849037047237641748796675704158654176747731341429154373116049408924990895415352019938555218772777122838084397998445529115124565))))) (let ((tmp%%$1 (core!option.Option./Some (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (let ((tmp%%$2 (core!option.Option./Some (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (let ((tmp%%$3 (vstd!string.impl&%0.view.? (S (str%new_strlit 64393076556699018832344577135365479561768770771401520297537358859344473356268027959831425057158022047466927942309151218166757023944512337170110073956888))))) (let ((tmp%%$4 (fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView tmp%%$3 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. tmp%%$4)))))))))))) (let ((tmp%%$5 (fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2))))))))) (let ((tmp%%$6 (fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 4768814570999511162394561399398956999011928061222181226755600835900975716078550342214188204668845402090277929816219234254995916206960342802930184981260636))))) (let ((tmp%%$8 (core!option.Option./Some (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (let ((tmp%%$9 (core!option.Option./Some (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (let ((tmp%%$10 (vstd!string.impl&%0.view.? (S (str%new_strlit 10411321872159765285695605998453805166173003670098616158230252450521803095579307289600573816808438699163715549734699717987061629003941626929420819184189838))))) (let ((tmp%%$11 (fluent_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView tmp%%$10 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (Poly%fluent_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. tmp%%$11)))))))))))) (let ((tmp%%$12 (fluent_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9))))))))) (let ((tmp%%$13 (fluent_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$13))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.? fluentbit!)) ))))
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.) (forall ((fb! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? fb!) (let ((tmp%%$ (core!option.Option./Some (fluent_controller!fluent_controller.fluentbit.model.resource.service_account.make_service_account_name.? fb!)))) (let ((tmp%%$1 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_secrets (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (I 0)))))))) (let ((tmp%%$2 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/init_containers (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (I 0)))))))) (let ((tmp%%$3 (core!option.Option./Some (let ((config_volume$ (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6678607023766901003382792270755106839987488175314763130247827673500039439619877039894095328997409234502992370220758737201180362481988301437861459862146975))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? (I 0))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/fluentbit_config_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (let ((varlibcontainers_volume$ (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2188484148999715820567550310581584205618976198226877163958291952884946948463914907639463823229956356335530263980388391746240019128775406001113048046233606))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? (I 0))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2986636482548710285677028065817660791431940228625394886827414695412603994254767361533053524611833003592685383424625662914703292184544526931544594539404640))))))))) (let ((varlogs_volume$ (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3743801436055201967048338775671880418229201396449657765838821313251633754808912614152114010959701525227612556044070361911264437280130628942373770239894540))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 4793832593508748126062412560919596840999431480869477173681988386390804304583718534059870468177480278076944568094705628720994167287570111633928006306301577)))))))) (let ((systemd_volume$ (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 122212878595673449829719842073427176754837956572540612546561083152789401078824327220238293894759906354761009078812220123180886792052392037942955010988387))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.set_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%2.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6183886151335330243309781750450179173756400907066207114935617997922946899918062452431260614589004314563657773501759077048031969620057795531086325738747973)))))))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (let ((positions_volume$ (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_host_path.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (fluent_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7889039982558046029918101647923170407751467778923610144010826363328663535128275517520283735849640060036239581749328276675338550581679672548617791033057592))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))))) (ite (and (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlibcontainers_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlogs_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. systemd_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. positions_volume$)) (ite (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlibcontainers_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlogs_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. systemd_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. positions_volume$)) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. positions_volume$)) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. positions_volume$)))))) (ite (and (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlibcontainers_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlogs_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. systemd_volume$)) (ite (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlibcontainers_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. varlogs_volume$)) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. systemd_volume$)) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$)) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView.) (Poly%fluent_controller!kubernetes_api_objects.spec.volume.VolumeView. config_volume$))))))))))))) (let ((tmp%%$4 (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (let ((tmp%%$5 (vstd!string.impl&%0.view.? (S (str%new_strlit 7881052882422921235722426700610922165188017386415854660729740325580127329785066396001445078186247073941595726607205695926084835405406421321072071134247673))))) (let ((tmp%%$6 (core!option.Option./Some (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (let ((tmp%%$7 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/image_pull_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))))))) (let ((tmp%%$8 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (core!option.Option./Some (vstd!seq.Seq.add.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.? fb!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/env_vars (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (core!option.Option./Some (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_env.? fb!)))))) (let ((tmp%%$9 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/liveness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))))))) (let ((tmp%%$10 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/readiness_probe (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))))))) (let ((tmp%%$11 (core!option.Option./Some (let ((config_vm$ (let ((tmp%%$12 (vstd!string.impl&%0.view.? (S (str%new_strlit 6678607023766901003382792270755106839987488175314763130247827673500039439619877039894095328997409234502992370220758737201180362481988301437861459862146975))))) (let ((tmp%%$13 (core!option.Option./Some (B true)))) (let ((tmp%%$14 (vstd!string.impl&%0.view.? (S (str%new_strlit 4740988007756251278903355284580602604292836851380638627647227593127321202678737275884742936596140568353736972636041224343058507233621261049226929258853254))))) (let ((tmp%%$15 (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView tmp%%$14 tmp%%$12 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$13)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$15)))))))))))) (let ((varlibcontainers_vm$ (let ((tmp%%$16 (vstd!string.impl&%0.view.? (S (str%new_strlit 2188484148999715820567550310581584205618976198226877163958291952884946948463914907639463823229956356335530263980388391746240019128775406001113048046233606))))) (let ((tmp%%$17 (core!option.Option./Some (B true)))) (let ((tmp%%$18 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_log_real_path (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2986636482548710285677028065817660791431940228625394886827414695412603994254767361533053524611833003592685383424625662914703292184544526931544594539404640)))))) (let ((tmp%%$19 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$20 (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView tmp%%$18 tmp%%$16 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$19)))))))))) (let ((varlogs_vm$ (let ((tmp%%$21 (vstd!string.impl&%0.view.? (S (str%new_strlit 3743801436055201967048338775671880418229201396449657765838821313251633754808912614152114010959701525227612556044070361911264437280130628942373770239894540))))) (let ((tmp%%$22 (core!option.Option./Some (B true)))) (let ((tmp%%$23 (vstd!string.impl&%0.view.? (S (str%new_strlit 6272566318008270777155235636746808270676967237696972794859305908012088134347385737708372067337873385443178143250252868832229381275457591864337640110641362))))) (let ((tmp%%$24 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$25 (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView tmp%%$23 tmp%%$21 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$22)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$25))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$24)))))))))) (let ((systemd_vm$ (let ((tmp%%$26 (vstd!string.impl&%0.view.? (S (str%new_strlit 122212878595673449829719842073427176754837956572540612546561083152789401078824327220238293894759906354761009078812220123180886792052392037942955010988387))))) (let ((tmp%%$27 (core!option.Option./Some (B true)))) (let ((tmp%%$28 (vstd!string.impl&%0.view.? (S (str%new_strlit 6183886151335330243309781750450179173756400907066207114935617997922946899918062452431260614589004314563657773501759077048031969620057795531086325738747973))))) (let ((tmp%%$29 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/internal_mount_propagation (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$30 (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView tmp%%$28 tmp%%$26 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$27)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$30))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$29)))))))))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/position_db (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (let ((positions_vm$ (let ((tmp%%$31 (vstd!string.impl&%0.view.? (S (str%new_strlit 7889039982558046029918101647923170407751467778923610144010826363328663535128275517520283735849640060036239581749328276675338550581679672548617791033057592))))) (let ((tmp%%$32 (vstd!string.impl&%0.view.? (S (str%new_strlit 8409811131834410820989463516710410339829238541791786943037409582883563673891990171794899796341077643301370401044813077132816831776225250446645593331662015))))) (let ((tmp%%$33 (fluent_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView tmp%%$32 tmp%%$31 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. tmp%%$33))))))))))) (ite (and (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlibcontainers_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlogs_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. systemd_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. positions_vm$)) (ite (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlibcontainers_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlogs_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. systemd_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. positions_vm$)) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. positions_vm$)) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. positions_vm$)))))) (ite (and (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlibcontainers_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlogs_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. systemd_vm$)) (ite (not (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/disable_log_volumes (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlibcontainers_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. varlogs_vm$)) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. systemd_vm$)) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/volume_mounts (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$)) (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.VolumeMountView. config_vm$))))))))))))) (let ((tmp%%$34 (let ((metrics_port$ (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 12996891269909683618396389987975855564405211863374334940199411544310622399543574228102322243042075839366557607162402253822598179187328569546822102670603817))))) (I (let ((port$ (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/metrics_port (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))))) 2020))) port$))))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (core!option.Option./Some (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/ports (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. metrics_port$))) (core!option.Option./Some (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerPortView. metrics_port$))))))) (let ((tmp%%$35 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/resources (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$36 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/args (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))))))) (let ((tmp%%$37 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/command (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))))))) (let ((tmp%%$38 (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/container_security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))))))) (let ((tmp%%$39 (fluent_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) tmp%%$5 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$34)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%fluent_controller!kubernetes_api_objects.spec.container.ContainerView. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$35)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$37)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$36)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$38))))))))))))))))))))) (let ((tmp%%$40 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/tolerations (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$41 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/affinity (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$42 (core!option.Option./Some (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/node_selector (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!)))))))) (let ((tmp%%$43 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/runtime_class_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$44 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/dns_policy (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$45 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/priority_class_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$46 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/scheduler_name (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$47 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/security_context (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$48 (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView./FluentBitSpecView/host_network (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitSpecView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb!))))))) (let ((tmp%%$49 (fluent_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (I 0)))) (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$41)) (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.container.ContainerView.>. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$40)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$42)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$43)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$44)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$45)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$46)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$47)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$48)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$49))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1))))))))))))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? fb!)) ))))
(assert (forall ((fb! Poly)) (! (=> (has_type fb! TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView. (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? fb!)) TYPE%fluent_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? fb!)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(declare-fun req%fluent_controller!fluent_controller.fluentbit.proof.helper_invariants.proof.make_fluentbit_pod_spec_determined_by_spec_and_name. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((fb1! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (fb2! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) (! (= (req%fluent_controller!fluent_controller.fluentbit.proof.helper_invariants.proof.make_fluentbit_pod_spec_determined_by_spec_and_name. fb1! fb2!) (and (=> %%global_location_label%%44 (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!))))))))))) (=> %%global_location_label%%45 (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!))))))) :pattern ((req%fluent_controller!fluent_controller.fluentbit.proof.helper_invariants.proof.make_fluentbit_pod_spec_determined_by_spec_and_name. fb1! fb2!)) )))
(declare-fun ens%fluent_controller!fluent_controller.fluentbit.proof.helper_invariants.proof.make_fluentbit_pod_spec_determined_by_spec_and_name. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) Bool)
(assert (forall ((fb1! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.) (fb2! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit.proof.helper_invariants.proof.make_fluentbit_pod_spec_determined_by_spec_and_name. fb1! fb2!) (= (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!)) (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!)))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit.proof.helper_invariants.proof.make_fluentbit_pod_spec_determined_by_spec_and_name. fb1! fb2!)) )))
(declare-const fb1! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)
(declare-const fb2! fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.)
(assert fuel_defaults)
(assert (has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.))
(assert (has_type (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!) TYPE%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView.))
(assert (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!)))))))))))
(assert (= (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!))) (fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView./FluentBitView/spec (%Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!)))))
(declare-const %%location_label%%0 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> %%location_label%%0 (= (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb1!)) (fluent_controller!fluent_controller.fluentbit.model.resource.daemon_set.make_fluentbit_pod_spec.? (Poly%fluent_controller!fluent_controller.fluentbit.trusted.spec_types.FluentBitView. fb2!)))))))
(assert %%query%%)
(check-sat)
(exit)
