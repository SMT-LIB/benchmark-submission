(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map.check_argument_is_map. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.query. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.put. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.noop. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.next_by. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.next. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.request. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.execute. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.reply. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.next. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement. FuelId)
(declare-const fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.ext_equal. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.len. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0._dr. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0._do. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.singleton_at. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history. FuelId)
(declare-const fuel%lib!abstract_system.StampedMap_v.empty. FuelId)
(declare-const fuel%lib!abstract_system.StampedMap_v.impl&%0.ext_equal. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.new. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.len. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.first_active_index. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.is_active. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.get_prefix. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.get_suffix. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.last. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%0.drop_last. FuelId)
(declare-const fuel%lib!spec.FloatingSeq_t.impl&%1.ext_equal. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.impl&%0.arrow_value. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.impl&%1.arrow_value. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.my_init. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.getInput. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.getOutput. FuelId)
(declare-const fuel%lib!spec.MapSpec_t.impl&%2.ext_equal. FuelId)
(declare-const fuel%lib!spec.Messages_t.default_value. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%0.arrow_value. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.combine_deltas. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.apply_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.merge. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.empty. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.total_domain. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.impl&%0.empty. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.impl&%0.insert. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.impl&%0.dom. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.impl&%0.wf. FuelId)
(declare-const fuel%lib!spec.TotalKMMap_t.impl&%0.ext_equal. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map.check_argument_is_map. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.query. fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.put. fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.noop. fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.next_by. fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.next. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.request. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.execute. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.reply. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.next. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state. fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index. fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by. fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by. fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by. fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v. fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf. fuel%lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement. fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.ext_equal. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. fuel%lib!abstract_system.MsgHistory_v.impl&%0.len. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. fuel%lib!abstract_system.MsgHistory_v.impl&%0._dr. fuel%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. fuel%lib!abstract_system.MsgHistory_v.impl&%0._do. fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. fuel%lib!abstract_system.MsgHistory_v.impl&%0.singleton_at. fuel%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history. fuel%lib!abstract_system.StampedMap_v.empty. fuel%lib!abstract_system.StampedMap_v.impl&%0.ext_equal. fuel%lib!spec.FloatingSeq_t.impl&%0.new. fuel%lib!spec.FloatingSeq_t.impl&%0.len. fuel%lib!spec.FloatingSeq_t.impl&%0.first_active_index. fuel%lib!spec.FloatingSeq_t.impl&%0.is_active. fuel%lib!spec.FloatingSeq_t.impl&%0.spec_index. fuel%lib!spec.FloatingSeq_t.impl&%0.get_prefix. fuel%lib!spec.FloatingSeq_t.impl&%0.get_suffix. fuel%lib!spec.FloatingSeq_t.impl&%0.last. fuel%lib!spec.FloatingSeq_t.impl&%0.drop_last. fuel%lib!spec.FloatingSeq_t.impl&%1.ext_equal. fuel%lib!spec.MapSpec_t.impl&%0.arrow_value. fuel%lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key. fuel%lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key. fuel%lib!spec.MapSpec_t.impl&%1.arrow_value. fuel%lib!spec.MapSpec_t.my_init. fuel%lib!spec.MapSpec_t.getInput. fuel%lib!spec.MapSpec_t.getOutput. fuel%lib!spec.MapSpec_t.impl&%2.ext_equal. fuel%lib!spec.Messages_t.default_value. fuel%lib!spec.Messages_t.nop_delta. fuel%lib!spec.Messages_t.impl&%0.arrow_value. fuel%lib!spec.Messages_t.impl&%1.combine_deltas. fuel%lib!spec.Messages_t.impl&%1.apply_delta. fuel%lib!spec.Messages_t.impl&%1.merge. fuel%lib!spec.Messages_t.impl&%1.empty. fuel%lib!spec.TotalKMMap_t.total_domain. fuel%lib!spec.TotalKMMap_t.impl&%0.empty. fuel%lib!spec.TotalKMMap_t.impl&%0.spec_index. fuel%lib!spec.TotalKMMap_t.impl&%0.insert. fuel%lib!spec.TotalKMMap_t.impl&%0.dom. fuel%lib!spec.TotalKMMap_t.impl&%0.wf. fuel%lib!spec.TotalKMMap_t.impl&%0.ext_equal. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-sort vstd!set.Set<lib!spec.MapSpec_t.Reply.>. 0)
(declare-sort vstd!set.Set<lib!spec.MapSpec_t.Request.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!spec.MapSpec_t.MapSpec.State. 0) (lib!spec.MapSpec_t.MapSpec.Step. 0) (lib!spec.MapSpec_t.MapSpec.Label. 0) (lib!spec.MapSpec_t.AsyncMap.State. 0) (lib!spec.MapSpec_t.AsyncMap.Step. 0) (lib!spec.MapSpec_t.AsyncMap.Label. 0) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. 0) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. 0) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. 0) (lib!abstract_system.AbstractMap_v.AbstractMap.State. 0) (lib!abstract_system.AbstractMap_v.AbstractMap.Step. 0) (lib!abstract_system.AbstractMap_v.AbstractMap.Config. 0) (lib!abstract_system.AbstractMap_v.AbstractMap.Label. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. 0) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. 0) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. 0) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. 0) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. 0) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. 0) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. 0) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. 0) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. 0) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. 0) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. 0) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. 0) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. 0) (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. 0) (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. 0) (lib!abstract_system.AbstractCrashAwareSystem_v.Known. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!abstract_system.StampedMap_v.Stamped. 0) (lib!spec.FloatingSeq_t.FloatingSeq. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.MapSpec_t.Input. 0) (lib!spec.MapSpec_t.Output. 0) (lib!spec.MapSpec_t.Request. 0) (lib!spec.MapSpec_t.Reply. 0) (lib!spec.MapSpec_t.PersistentState. 0) (lib!spec.MapSpec_t.EphemeralState. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (lib!spec.TotalKMMap_t.TotalKMMap. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!spec.MapSpec_t.MapSpec.State./State (lib!spec.MapSpec_t.MapSpec.State./State/?kmmap lib!spec.TotalKMMap_t.TotalKMMap.))) ((lib!spec.MapSpec_t.MapSpec.Step./query ) (lib!spec.MapSpec_t.MapSpec.Step./put ) (lib!spec.MapSpec_t.MapSpec.Step./noop ) (lib!spec.MapSpec_t.MapSpec.Step./dummy_to_use_type_params (lib!spec.MapSpec_t.MapSpec.Step./dummy_to_use_type_params/?0 lib!spec.MapSpec_t.MapSpec.State.))) ((lib!spec.MapSpec_t.MapSpec.Label./Query (lib!spec.MapSpec_t.MapSpec.Label./Query/?input lib!spec.MapSpec_t.Input.) (lib!spec.MapSpec_t.MapSpec.Label./Query/?output lib!spec.MapSpec_t.Output.)) (lib!spec.MapSpec_t.MapSpec.Label./Put (lib!spec.MapSpec_t.MapSpec.Label./Put/?input lib!spec.MapSpec_t.Input.) (lib!spec.MapSpec_t.MapSpec.Label./Put/?output lib!spec.MapSpec_t.Output.)) (lib!spec.MapSpec_t.MapSpec.Label./Noop (lib!spec.MapSpec_t.MapSpec.Label./Noop/?input lib!spec.MapSpec_t.Input.) (lib!spec.MapSpec_t.MapSpec.Label./Noop/?output lib!spec.MapSpec_t.Output.))) ((lib!spec.MapSpec_t.AsyncMap.State./State (lib!spec.MapSpec_t.AsyncMap.State./State/?persistent lib!spec.MapSpec_t.PersistentState.) (lib!spec.MapSpec_t.AsyncMap.State./State/?ephemeral lib!spec.MapSpec_t.EphemeralState.))) ((lib!spec.MapSpec_t.AsyncMap.Step./request ) (lib!spec.MapSpec_t.AsyncMap.Step./execute (lib!spec.MapSpec_t.AsyncMap.Step./execute/?0 lib!spec.MapSpec_t.MapSpec.Label.) (lib!spec.MapSpec_t.AsyncMap.Step./execute/?1 lib!spec.MapSpec_t.PersistentState.)) (lib!spec.MapSpec_t.AsyncMap.Step./reply ) (lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params (lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params/?0 lib!spec.MapSpec_t.AsyncMap.State.))) ((lib!spec.MapSpec_t.AsyncMap.Label./RequestOp (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/?req lib!spec.MapSpec_t.Request.)) (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/?req lib!spec.MapSpec_t.Request.) (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/?reply lib!spec.MapSpec_t.Reply.)) (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/?reply lib!spec.MapSpec_t.Reply.))) ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/?versions lib!spec.FloatingSeq_t.FloatingSeq.) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/?async_ephemeral lib!spec.MapSpec_t.EphemeralState.) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/?sync_requests vstd!map.Map<nat./nat.>.))) ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/?0 lib!spec.FloatingSeq_t.FloatingSeq.) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/?1 lib!spec.MapSpec_t.EphemeralState.)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./crash ) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync/?0 Int)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./req_sync ) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./reply_sync ) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./noop ) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/?0 lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.))) ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/?base_op lib!spec.MapSpec_t.AsyncMap.Label.)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./CrashOp ) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./SyncOp ) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/?sync_req_id Int)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/?sync_req_id Int)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop )) ((lib!abstract_system.AbstractMap_v.AbstractMap.State./State (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/?stamped_map lib!abstract_system.StampedMap_v.Stamped.))) ((lib!abstract_system.AbstractMap_v.AbstractMap.Step./query ) (lib!abstract_system.AbstractMap_v.AbstractMap.Step./put ) (lib!abstract_system.AbstractMap_v.AbstractMap.Step./freeze_as ) (lib!abstract_system.AbstractMap_v.AbstractMap.Step./internal ) (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractMap_v.AbstractMap.State.))) ((lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/?0 lib!abstract_system.StampedMap_v.Stamped.)) (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/?0 lib!abstract_system.AbstractMap_v.AbstractMap.State.))) ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/?end_lsn Int) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/?value lib!spec.Messages_t.Value.)) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/?puts lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/?stamped_map lib!abstract_system.StampedMap_v.Stamped.)) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./InternalLabel )) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/?journal lib!abstract_system.MsgHistory_v.MsgHistory.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/?0 lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/?frozen_journal lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/?end_lsn Int)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?start_lsn Int) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?require_end Int)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel )) ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?journal lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?mapadt lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?ephemeral core!option.Option.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?superblock_in_flight Bool))) ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/?1 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/?2 Int)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/?1 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/?2 lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./accept_request ) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/?1 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/?1 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./deliver_reply ) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/?0 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/?0 Int)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./superblock_write_lands ) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/?0 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/?1 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/?1 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.))) ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/?0 lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/?0 lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.))) ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/?ctam_label lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.))) ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/?persistent lib!abstract_system.StampedMap_v.Stamped.) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/?ephemeral lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/?in_flight core!option.Option.))) ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./load_ephemeral_from_persistent ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/?0 lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/?0 lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/?0 lib!abstract_system.StampedMap_v.Stamped.) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/?1 lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/?0 lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_start ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_complete ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./crash ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.))) ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./initialize ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/?0 lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.))) ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/?end_lsn Int)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/?records lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/?end_lsn Int) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/?value lib!spec.Messages_t.Value.)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/?new_boundary_lsn Int)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitCompleteLabel ) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/?keep_in_flight Bool))) ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/?persistent lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/?ephemeral lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/?in_flight core!option.Option.))) ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./read_for_recovery ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_end_lsn ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_lsn_persistence ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/?0 lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./crash ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.))) ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./initialize ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/?0 lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.))) ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./LoadEphemeralFromPersistentLabel ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/?records lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/?end_lsn Int)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/?records lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./InternalLabel ) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/?sync_lsn Int)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/?new_boundary_lsn Int) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/?max_lsn Int)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/?require_end Int)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/?keep_in_flight Bool))) ((lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown ) (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/?v lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))) ((lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown ) (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/?v lib!abstract_system.AbstractMap_v.AbstractMap.State.))) ((lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/?progress lib!spec.MapSpec_t.EphemeralState.) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/?sync_reqs vstd!map.Map<nat./nat.>.) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/?map_lsn Int))) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!abstract_system.StampedMap_v.Stamped./Stamped (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value Poly) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end Int))) ((lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/?start Int) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/?entries Poly))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.MapSpec_t.Input./QueryInput (lib!spec.MapSpec_t.Input./QueryInput/?key lib!spec.KeyType_t.Key.)) (lib!spec.MapSpec_t.Input./PutInput (lib!spec.MapSpec_t.Input./PutInput/?key lib!spec.KeyType_t.Key.) (lib!spec.MapSpec_t.Input./PutInput/?value lib!spec.Messages_t.Value.)) (lib!spec.MapSpec_t.Input./NoopInput )) ((lib!spec.MapSpec_t.Output./QueryOutput (lib!spec.MapSpec_t.Output./QueryOutput/?value lib!spec.Messages_t.Value.)) (lib!spec.MapSpec_t.Output./PutOutput ) (lib!spec.MapSpec_t.Output./NoopOutput )) ((lib!spec.MapSpec_t.Request./Request (lib!spec.MapSpec_t.Request./Request/?input lib!spec.MapSpec_t.Input.) (lib!spec.MapSpec_t.Request./Request/?id Int))) ((lib!spec.MapSpec_t.Reply./Reply (lib!spec.MapSpec_t.Reply./Reply/?output lib!spec.MapSpec_t.Output.) (lib!spec.MapSpec_t.Reply./Reply/?id Int))) ((lib!spec.MapSpec_t.PersistentState./PersistentState (lib!spec.MapSpec_t.PersistentState./PersistentState/?appv lib!spec.MapSpec_t.MapSpec.State.))) ((lib!spec.MapSpec_t.EphemeralState./EphemeralState (lib!spec.MapSpec_t.EphemeralState./EphemeralState/?requests vstd!set.Set<lib!spec.MapSpec_t.Request.>.) (lib!spec.MapSpec_t.EphemeralState./EphemeralState/?replies vstd!set.Set<lib!spec.MapSpec_t.Reply.>.))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/?0 vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!spec.MapSpec_t.MapSpec.State./State/kmmap (lib!spec.MapSpec_t.MapSpec.State.) lib!spec.TotalKMMap_t.TotalKMMap.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Step./dummy_to_use_type_params/0 (lib!spec.MapSpec_t.MapSpec.Step.) lib!spec.MapSpec_t.MapSpec.State.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Label./Query/input (lib!spec.MapSpec_t.MapSpec.Label.) lib!spec.MapSpec_t.Input.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Label./Query/output (lib!spec.MapSpec_t.MapSpec.Label.) lib!spec.MapSpec_t.Output.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Label./Put/input (lib!spec.MapSpec_t.MapSpec.Label.) lib!spec.MapSpec_t.Input.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Label./Put/output (lib!spec.MapSpec_t.MapSpec.Label.) lib!spec.MapSpec_t.Output.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Label./Noop/input (lib!spec.MapSpec_t.MapSpec.Label.) lib!spec.MapSpec_t.Input.)
(declare-fun lib!spec.MapSpec_t.MapSpec.Label./Noop/output (lib!spec.MapSpec_t.MapSpec.Label.) lib!spec.MapSpec_t.Output.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.State./State/persistent (lib!spec.MapSpec_t.AsyncMap.State.) lib!spec.MapSpec_t.PersistentState.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (lib!spec.MapSpec_t.AsyncMap.State.) lib!spec.MapSpec_t.EphemeralState.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Step./execute/0 (lib!spec.MapSpec_t.AsyncMap.Step.) lib!spec.MapSpec_t.MapSpec.Label.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Step./execute/1 (lib!spec.MapSpec_t.AsyncMap.Step.) lib!spec.MapSpec_t.PersistentState.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params/0 (lib!spec.MapSpec_t.AsyncMap.Step.) lib!spec.MapSpec_t.AsyncMap.State.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (lib!spec.MapSpec_t.AsyncMap.Label.) lib!spec.MapSpec_t.Request.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (lib!spec.MapSpec_t.AsyncMap.Label.) lib!spec.MapSpec_t.Request.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (lib!spec.MapSpec_t.AsyncMap.Label.) lib!spec.MapSpec_t.Reply.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (lib!spec.MapSpec_t.AsyncMap.Label.) lib!spec.MapSpec_t.Reply.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) lib!spec.MapSpec_t.EphemeralState.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/1 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) lib!spec.MapSpec_t.EphemeralState.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync/0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) Int)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) lib!spec.MapSpec_t.AsyncMap.Label.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Int)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Int)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (lib!abstract_system.AbstractMap_v.AbstractMap.State.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractMap_v.AbstractMap.Step.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/0 (lib!abstract_system.AbstractMap_v.AbstractMap.Config.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/0 (lib!abstract_system.AbstractMap_v.AbstractMap.Config.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn (lib!abstract_system.AbstractMap_v.AbstractMap.Label.) Int)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key (lib!abstract_system.AbstractMap_v.AbstractMap.Label.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value (lib!abstract_system.AbstractMap_v.AbstractMap.Label.) lib!spec.Messages_t.Value.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts (lib!abstract_system.AbstractMap_v.AbstractMap.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map (lib!abstract_system.AbstractMap_v.AbstractMap.Label.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) core!option.Option.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/1 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/2 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/1 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/2 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/1 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/1 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/1 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/1 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.) lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) core!option.Option.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/1 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) lib!spec.Messages_t.Value.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/keep_in_flight (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) core!option.Option.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/keep_in_flight (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (lib!abstract_system.AbstractCrashAwareSystem_v.Known.) lib!spec.MapSpec_t.EphemeralState.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (lib!abstract_system.AbstractCrashAwareSystem_v.Known.) vstd!map.Map<nat./nat.>.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (lib!abstract_system.AbstractCrashAwareSystem_v.Known.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/value (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (lib!abstract_system.StampedMap_v.Stamped.) Int)
(declare-fun lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (lib!spec.FloatingSeq_t.FloatingSeq.) Int)
(declare-fun lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (lib!spec.FloatingSeq_t.FloatingSeq.) Poly)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.MapSpec_t.Input./QueryInput/key (lib!spec.MapSpec_t.Input.) lib!spec.KeyType_t.Key.)
(declare-fun lib!spec.MapSpec_t.Input./PutInput/key (lib!spec.MapSpec_t.Input.) lib!spec.KeyType_t.Key.)
(declare-fun lib!spec.MapSpec_t.Input./PutInput/value (lib!spec.MapSpec_t.Input.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.MapSpec_t.Output./QueryOutput/value (lib!spec.MapSpec_t.Output.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.MapSpec_t.Request./Request/input (lib!spec.MapSpec_t.Request.) lib!spec.MapSpec_t.Input.)
(declare-fun lib!spec.MapSpec_t.Request./Request/id (lib!spec.MapSpec_t.Request.) Int)
(declare-fun lib!spec.MapSpec_t.Reply./Reply/output (lib!spec.MapSpec_t.Reply.) lib!spec.MapSpec_t.Output.)
(declare-fun lib!spec.MapSpec_t.Reply./Reply/id (lib!spec.MapSpec_t.Reply.) Int)
(declare-fun lib!spec.MapSpec_t.PersistentState./PersistentState/appv (lib!spec.MapSpec_t.PersistentState.) lib!spec.MapSpec_t.MapSpec.State.)
(declare-fun lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (lib!spec.MapSpec_t.EphemeralState.) vstd!set.Set<lib!spec.MapSpec_t.Request.>.)
(declare-fun lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (lib!spec.MapSpec_t.EphemeralState.) vstd!set.Set<lib!spec.MapSpec_t.Reply.>.)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (lib!spec.TotalKMMap_t.TotalKMMap.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!spec.MapSpec_t.MapSpec.State. Type)
(declare-const TYPE%lib!spec.MapSpec_t.MapSpec.Step. Type)
(declare-const TYPE%lib!spec.MapSpec_t.MapSpec.Label. Type)
(declare-const TYPE%lib!spec.MapSpec_t.AsyncMap.State. Type)
(declare-const TYPE%lib!spec.MapSpec_t.AsyncMap.Step. Type)
(declare-const TYPE%lib!spec.MapSpec_t.AsyncMap.Label. Type)
(declare-const TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. Type)
(declare-const TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. Type)
(declare-const TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config. Type)
(declare-const TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. Type)
(declare-const TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-fun TYPE%lib!abstract_system.StampedMap_v.Stamped. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.FloatingSeq_t.FloatingSeq. (Dcr Type) Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Input. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Output. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Request. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Reply. Type)
(declare-const TYPE%lib!spec.MapSpec_t.PersistentState. Type)
(declare-const TYPE%lib!spec.MapSpec_t.EphemeralState. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%lib!spec.TotalKMMap_t.TotalKMMap. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.Set<lib!spec.MapSpec_t.Reply.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (Poly) vstd!set.Set<lib!spec.MapSpec_t.Reply.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.Set<lib!spec.MapSpec_t.Request.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (Poly) vstd!set.Set<lib!spec.MapSpec_t.Request.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.MapSpec.State.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.MapSpec.State. (Poly) lib!spec.MapSpec_t.MapSpec.State.)
(declare-fun Poly%lib!spec.MapSpec_t.MapSpec.Step. (lib!spec.MapSpec_t.MapSpec.Step.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.MapSpec.Step. (Poly) lib!spec.MapSpec_t.MapSpec.Step.)
(declare-fun Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly) lib!spec.MapSpec_t.MapSpec.Label.)
(declare-fun Poly%lib!spec.MapSpec_t.AsyncMap.State. (lib!spec.MapSpec_t.AsyncMap.State.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.AsyncMap.State. (Poly) lib!spec.MapSpec_t.AsyncMap.State.)
(declare-fun Poly%lib!spec.MapSpec_t.AsyncMap.Step. (lib!spec.MapSpec_t.AsyncMap.Step.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.AsyncMap.Step. (Poly) lib!spec.MapSpec_t.AsyncMap.Step.)
(declare-fun Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly) lib!spec.MapSpec_t.AsyncMap.Label.)
(declare-fun Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (Poly) lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)
(declare-fun Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (Poly) lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)
(declare-fun Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly) lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)
(declare-fun Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractMap_v.AbstractMap.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (Poly) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. (lib!abstract_system.AbstractMap_v.AbstractMap.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. (Poly) lib!abstract_system.AbstractMap_v.AbstractMap.Step.)
(declare-fun Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (lib!abstract_system.AbstractMap_v.AbstractMap.Config.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (Poly) lib!abstract_system.AbstractMap_v.AbstractMap.Config.)
(declare-fun Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (Poly) lib!abstract_system.AbstractMap_v.AbstractMap.Label.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (Poly) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (Poly) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly) lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (Poly) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. (Poly) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (Poly) lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (Poly) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. (Poly) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (Poly) lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly) lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly) lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)
(declare-fun Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly) lib!abstract_system.AbstractCrashAwareSystem_v.Known.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun %Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.FloatingSeq.) Poly)
(declare-fun %Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Input. (Poly) lib!spec.MapSpec_t.Input.)
(declare-fun Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Output.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Output. (Poly) lib!spec.MapSpec_t.Output.)
(declare-fun Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.Request.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Request. (Poly) lib!spec.MapSpec_t.Request.)
(declare-fun Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.Reply.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Reply. (Poly) lib!spec.MapSpec_t.Reply.)
(declare-fun Poly%lib!spec.MapSpec_t.PersistentState. (lib!spec.MapSpec_t.PersistentState.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.PersistentState. (Poly) lib!spec.MapSpec_t.PersistentState.)
(declare-fun Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.EphemeralState.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.EphemeralState. (Poly) lib!spec.MapSpec_t.EphemeralState.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.TotalKMMap_t.TotalKMMap.) Poly)
(declare-fun %Poly%lib!spec.TotalKMMap_t.TotalKMMap. (Poly) lib!spec.TotalKMMap_t.TotalKMMap.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))) )))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.MapSpec_t.Reply.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Reply.)) (= x (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Reply.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.MapSpec_t.Reply.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Reply.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.MapSpec_t.Request.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Request.)) (= x (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Request.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.MapSpec_t.Request.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Request.))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.State.)) (! (= x (%Poly%lib!spec.MapSpec_t.MapSpec.State. (Poly%lib!spec.MapSpec_t.MapSpec.State. x))) :pattern ((Poly%lib!spec.MapSpec_t.MapSpec.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.State.) (= x (Poly%lib!spec.MapSpec_t.MapSpec.State. (%Poly%lib!spec.MapSpec_t.MapSpec.State. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.MapSpec.State.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.State.)) (! (= (lib!spec.MapSpec_t.MapSpec.State./State/kmmap x) (lib!spec.MapSpec_t.MapSpec.State./State/?kmmap x)) :pattern ((lib!spec.MapSpec_t.MapSpec.State./State/kmmap x)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.State.)) (! (has_type (Poly%lib!spec.MapSpec_t.MapSpec.State. x) TYPE%lib!spec.MapSpec_t.MapSpec.State.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.MapSpec.State. x) TYPE%lib!spec.MapSpec_t.MapSpec.State.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Step.)) (! (= x (%Poly%lib!spec.MapSpec_t.MapSpec.Step. (Poly%lib!spec.MapSpec_t.MapSpec.Step. x))) :pattern ((Poly%lib!spec.MapSpec_t.MapSpec.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Step.) (= x (Poly%lib!spec.MapSpec_t.MapSpec.Step. (%Poly%lib!spec.MapSpec_t.MapSpec.Step. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Step.)) (! (= (lib!spec.MapSpec_t.MapSpec.Step./dummy_to_use_type_params/0 x) (lib!spec.MapSpec_t.MapSpec.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Step.)) (! (has_type (Poly%lib!spec.MapSpec_t.MapSpec.Step. x) TYPE%lib!spec.MapSpec_t.MapSpec.Step.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.MapSpec.Step. x) TYPE%lib!spec.MapSpec_t.MapSpec.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= x (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) :pattern ((Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (= x (Poly%lib!spec.MapSpec_t.MapSpec.Label. (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((_input! lib!spec.MapSpec_t.Input.) (_output! lib!spec.MapSpec_t.Output.)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Input. _input!) TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.MapSpec_t.Output. _output!) TYPE%lib!spec.MapSpec_t.Output.)) (has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label./Query _input! _output!)) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label./Query _input! _output!)) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (lib!spec.MapSpec_t.MapSpec.Label./Query/input x) (lib!spec.MapSpec_t.MapSpec.Label./Query/?input x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Query/input x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.MapSpec.Label./Query/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Query/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (lib!spec.MapSpec_t.MapSpec.Label./Query/output x) (lib!spec.MapSpec_t.MapSpec.Label./Query/?output x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Query/output x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.MapSpec.Label./Query/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Query/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((_input! lib!spec.MapSpec_t.Input.) (_output! lib!spec.MapSpec_t.Output.)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Input. _input!) TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.MapSpec_t.Output. _output!) TYPE%lib!spec.MapSpec_t.Output.)) (has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label./Put _input! _output!)) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label./Put _input! _output!)) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (lib!spec.MapSpec_t.MapSpec.Label./Put/input x) (lib!spec.MapSpec_t.MapSpec.Label./Put/?input x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Put/input x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.MapSpec.Label./Put/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Put/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (lib!spec.MapSpec_t.MapSpec.Label./Put/output x) (lib!spec.MapSpec_t.MapSpec.Label./Put/?output x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Put/output x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.MapSpec.Label./Put/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Put/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((_input! lib!spec.MapSpec_t.Input.) (_output! lib!spec.MapSpec_t.Output.)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Input. _input!) TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.MapSpec_t.Output. _output!) TYPE%lib!spec.MapSpec_t.Output.)) (has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label./Noop _input! _output!)) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.MapSpec.Label./Noop _input! _output!)) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (lib!spec.MapSpec_t.MapSpec.Label./Noop/input x) (lib!spec.MapSpec_t.MapSpec.Label./Noop/?input x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Noop/input x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.MapSpec.Label./Noop/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Noop/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (lib!spec.MapSpec_t.MapSpec.Label./Noop/output x) (lib!spec.MapSpec_t.MapSpec.Label./Noop/?output x)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Noop/output x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.MapSpec.Label./Noop/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x))) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((lib!spec.MapSpec_t.MapSpec.Label./Noop/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.State.)) (! (= x (%Poly%lib!spec.MapSpec_t.AsyncMap.State. (Poly%lib!spec.MapSpec_t.AsyncMap.State. x))) :pattern ((Poly%lib!spec.MapSpec_t.AsyncMap.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.State.) (= x (Poly%lib!spec.MapSpec_t.AsyncMap.State. (%Poly%lib!spec.MapSpec_t.AsyncMap.State. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.State.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.State.)) (! (= (lib!spec.MapSpec_t.AsyncMap.State./State/persistent x) (lib!spec.MapSpec_t.AsyncMap.State./State/?persistent x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.State./State/persistent x)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.State.)) (! (= (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral x) (lib!spec.MapSpec_t.AsyncMap.State./State/?ephemeral x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral x)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.State.)) (! (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.State. x) TYPE%lib!spec.MapSpec_t.AsyncMap.State.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.AsyncMap.State. x) TYPE%lib!spec.MapSpec_t.AsyncMap.State.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Step.)) (! (= x (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. (Poly%lib!spec.MapSpec_t.AsyncMap.Step. x))) :pattern ((Poly%lib!spec.MapSpec_t.AsyncMap.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Step.) (= x (Poly%lib!spec.MapSpec_t.AsyncMap.Step. (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Step.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Step. lib!spec.MapSpec_t.AsyncMap.Step./request) TYPE%lib!spec.MapSpec_t.AsyncMap.Step.))
(assert (forall ((_0! lib!spec.MapSpec_t.MapSpec.Label.) (_1! lib!spec.MapSpec_t.PersistentState.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. _0!) TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Step. (lib!spec.MapSpec_t.AsyncMap.Step./execute _0! _1!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Step.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Step. (lib!spec.MapSpec_t.AsyncMap.Step./execute _0! _1!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Step./execute/0 x) (lib!spec.MapSpec_t.AsyncMap.Step./execute/?0 x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Step./execute/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Step.) (has_type (Poly%lib!spec.MapSpec_t.MapSpec.Label. (lib!spec.MapSpec_t.AsyncMap.Step./execute/0 (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. x))) TYPE%lib!spec.MapSpec_t.MapSpec.Label.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Step./execute/0 (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. x)) (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Step./execute/1 x) (lib!spec.MapSpec_t.AsyncMap.Step./execute/?1 x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Step./execute/1 x)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Step. lib!spec.MapSpec_t.AsyncMap.Step./reply) TYPE%lib!spec.MapSpec_t.AsyncMap.Step.))
(assert (forall ((_0! lib!spec.MapSpec_t.AsyncMap.State.)) (! (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Step. (lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Step.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Step. (lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params/0 x) (lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= x (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. x))) :pattern ((Poly%lib!spec.MapSpec_t.AsyncMap.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (= x (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((_req! lib!spec.MapSpec_t.Request.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.Request. _req!) TYPE%lib!spec.MapSpec_t.Request.) (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp _req!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp _req!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req x) (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/?req x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x))) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((_req! lib!spec.MapSpec_t.Request.) (_reply! lib!spec.MapSpec_t.Reply.)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Request. _req!) TYPE%lib!spec.MapSpec_t.Request.) (has_type (Poly%lib!spec.MapSpec_t.Reply. _reply!) TYPE%lib!spec.MapSpec_t.Reply.)) (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp _req! _reply!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp _req! _reply!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req x) (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/?req x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x))) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply x) (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/?reply x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x))) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((_reply! lib!spec.MapSpec_t.Reply.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.Reply. _reply!) TYPE%lib!spec.MapSpec_t.Reply.) (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp _reply!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp _reply!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply x) (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/?reply x)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x))) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (= x (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. x))) :pattern ((Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (= x (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) )))
(assert (forall ((_versions! lib!spec.FloatingSeq_t.FloatingSeq.) (_async_ephemeral! lib!spec.MapSpec_t.EphemeralState.) (_sync_requests! vstd!map.Map<nat./nat.>.)) (! (=> (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. _versions!) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.)) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State _versions! _async_ephemeral! _sync_requests!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State _versions! _async_ephemeral! _sync_requests!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/?versions x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. x))) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. x)) (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/?async_ephemeral x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral x)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/?sync_requests x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests x)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) (! (= x (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x))) :pattern ((Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) (= x (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) )))
(assert (forall ((_0! lib!spec.FloatingSeq_t.FloatingSeq.) (_1! lib!spec.MapSpec_t.EphemeralState.)) (! (=> (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. _0!) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.)) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate _0! _1!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate _0! _1!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/0 x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/?0 x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/0 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x))) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/0 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x)) (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/1 x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/?1 x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/1 x)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./crash) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.))
(assert (forall ((_0! Int)) (! (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync _0!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync _0!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync/0 x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync/?0 x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync/0 x)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./req_sync) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./reply_sync) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./noop) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.))
(assert (forall ((_0! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. _0!) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/0 x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x))) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. x)) (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= x (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x))) :pattern ((Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (= x (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (forall ((_base_op! lib!spec.MapSpec_t.AsyncMap.Label.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. _base_op!) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp _base_op!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp _base_op!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/?base_op x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x))) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./CrashOp) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./SyncOp) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.))
(assert (forall ((_sync_req_id! Int)) (! (=> (<= 0 _sync_req_id!) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp _sync_req_id!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp _sync_req_id!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/?sync_req_id x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (<= 0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (forall ((_sync_req_id! Int)) (! (=> (<= 0 _sync_req_id!) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp _sync_req_id!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp _sync_req_id!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (forall ((x lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id x) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/?sync_req_id x)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (<= 0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. x)) (has_type x TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (= x (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. x))) :pattern ((Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (= x (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) )))
(assert (forall ((_stamped_map! lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _stamped_map!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State _stamped_map!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State _stamped_map!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map x) (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/?stamped_map x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.) (= x (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. lib!abstract_system.AbstractMap_v.AbstractMap.Step./query) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. lib!abstract_system.AbstractMap_v.AbstractMap.Step./put) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. lib!abstract_system.AbstractMap_v.AbstractMap.Step./freeze_as) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. lib!abstract_system.AbstractMap_v.AbstractMap.Step./internal) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _0!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) (! (= x (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x))) :pattern ((Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.) (= x (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) )))
(assert (forall ((_0! lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _0!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/0 x) (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/?0 x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/0 (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize/0 (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _0!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (= x (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((_end_lsn! Int) (_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (<= 0 _end_lsn!) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel _end_lsn! _key! _value!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel _end_lsn! _key! _value!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn x) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (<= 0 (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key x) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/?key x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value x) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/?value x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((_puts! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _puts!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel _puts!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel _puts!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts x) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/?puts x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((_stamped_map! lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _stamped_map!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel _stamped_map!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel _stamped_map!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map x) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/?stamped_map x)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lib!abstract_system.AbstractMap_v.AbstractMap.Label./InternalLabel) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((_journal! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _journal!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State _journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State _journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/?journal x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((_0! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _0!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/?messages x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_frozen_journal! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _frozen_journal!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel _frozen_journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel _frozen_journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/?frozen_journal x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/?messages x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_start_lsn! Int) (_require_end! Int)) (! (=> (and (<= 0 _start_lsn!) (<= 0 _require_end!)) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel _start_lsn! _require_end!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel _start_lsn! _require_end!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?start_lsn x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?require_end x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (= x (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) )))
(assert (forall ((_journal! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (_mapadt! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (_ephemeral! core!option.Option.) (_superblock_in_flight! Bool)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _journal!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _mapadt!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%core!option.Option. _ephemeral!) (TYPE%core!option.Option. $ TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.))) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State _journal! _mapadt! _ephemeral! _superblock_in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State _journal! _mapadt! _ephemeral! _superblock_in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?journal x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?mapadt x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?ephemeral x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x))) (TYPE%core!option.Option. $ TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/?superblock_in_flight x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight x)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (= x (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (_1! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (_2! Int)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _1!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (<= 0 _2!)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent _0! _1! _2!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent _0! _1! _2!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/1 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/2 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/?2 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (<= 0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/2 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/2 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (_1! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (_2! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _1!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _2!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover _0! _1! _2!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover _0! _1! _2!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/1 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/2 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/?2 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/2 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/2 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./accept_request) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (_1! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _1!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/1 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (_1! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _1!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/1 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./deliver_reply) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (<= 0 (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./superblock_write_lands) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (_1! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _1!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/1 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (_1! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (=> (and (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _1!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/1 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) (= x (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x))) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x))) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.) (= x (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) )))
(assert (forall ((_ctam_label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. _ctam_label!) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label _ctam_label!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label _ctam_label!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label x) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/?ctam_label x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. x))) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (= x (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) )))
(assert (forall ((_persistent! lib!abstract_system.StampedMap_v.Stamped.) (_ephemeral! lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) (_in_flight! core!option.Option.)) (! (=> (and (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _persistent!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. _ephemeral!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) (has_type (Poly%core!option.Option. _in_flight!) (TYPE%core!option.Option. $ (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)))) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State _persistent! _ephemeral! _in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State _persistent! _ephemeral! _in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/?persistent x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/?ephemeral x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/?in_flight x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x))) (TYPE%core!option.Option. $ (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (= x (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./load_ephemeral_from_persistent) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _0!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/0 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _0!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/0 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((_0! lib!abstract_system.StampedMap_v.Stamped.) (_1! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (and (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _0!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _1!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal _0! _1!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/0 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/1 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/?1 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/1 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/1 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _0!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/0 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_start) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_complete) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./crash) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.) (= x (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./initialize) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. x))) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (= x (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((_records! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _records!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel _records!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel _records!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/?records x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((_end_lsn! Int) (_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (<= 0 _end_lsn!) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel _end_lsn! _key! _value!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel _end_lsn! _key! _value!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/?key x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/?value x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.))
(assert (forall ((_new_boundary_lsn! Int)) (! (=> (<= 0 _new_boundary_lsn!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel _new_boundary_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel _new_boundary_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/?new_boundary_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitCompleteLabel) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.))
(assert (forall ((_keep_in_flight! Bool)) (! (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel _keep_in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel _keep_in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/keep_in_flight x) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/?keep_in_flight x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/keep_in_flight x)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (= x (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) )))
(assert (forall ((_persistent! lib!abstract_system.MsgHistory_v.MsgHistory.) (_ephemeral! lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) (_in_flight! core!option.Option.)) (! (=> (and (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _persistent!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. _ephemeral!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) (has_type (Poly%core!option.Option. _in_flight!) (TYPE%core!option.Option. $ TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.))) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State _persistent! _ephemeral! _in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State _persistent! _ephemeral! _in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/?persistent x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/?ephemeral x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/?in_flight x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x))) (TYPE%core!option.Option. $ TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (= x (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./read_for_recovery) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_end_lsn) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_lsn_persistence) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.))
(assert (forall ((_0! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _0!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./crash) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.) (= x (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./initialize) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.))
(assert (forall ((_0! lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. _0!) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. x))) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (= x (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./LoadEphemeralFromPersistentLabel) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.))
(assert (forall ((_records! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _records!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel _records!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel _records!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/?records x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((_records! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _records!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel _records!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel _records!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/?records x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./InternalLabel) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.))
(assert (forall ((_sync_lsn! Int)) (! (=> (<= 0 _sync_lsn!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel _sync_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel _sync_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/?sync_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((_new_boundary_lsn! Int) (_max_lsn! Int)) (! (=> (and (<= 0 _new_boundary_lsn!) (<= 0 _max_lsn!)) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel _new_boundary_lsn! _max_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel _new_boundary_lsn! _max_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/?new_boundary_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/?max_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((_require_end! Int)) (! (=> (<= 0 _require_end!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel _require_end!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel _require_end!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/?require_end x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((_keep_in_flight! Bool)) (! (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel _keep_in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel _keep_in_flight!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/keep_in_flight x) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/?keep_in_flight x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/keep_in_flight x)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) (= x (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.))
(assert (forall ((_v! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _v!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known _v!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known _v!)) TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v x) (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/?v x)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) (= x (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.))
(assert (forall ((_v! lib!abstract_system.AbstractMap_v.AbstractMap.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. _v!) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.) (has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known _v!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known _v!)) TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v x) (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/?v x)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. x))) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) (! (= x (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. x))) :pattern ((Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.) (= x (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) )))
(assert (forall ((_progress! lib!spec.MapSpec_t.EphemeralState.) (_sync_reqs! vstd!map.Map<nat./nat.>.) (_map_lsn! Int)) (! (=> (<= 0 _map_lsn!) (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known _progress! _sync_reqs! _map_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known _progress! _sync_reqs! _map_lsn!)) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress x) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/?progress x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress x)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs x) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/?sync_reqs x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs x)) )))
(assert (forall ((x lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn x) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/?map_lsn x)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.) (<= 0 (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. x)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. x)) (has_type x TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= x (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. x))) :pattern ((Poly%lib!abstract_system.StampedMap_v.Stamped. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (= x (Poly%lib!abstract_system.StampedMap_v.Stamped. (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! Poly) (_seq_end! Int)) (! (=> (and (has_type _value! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) :pattern ((has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (has_type (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) T&)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (<= 0 (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(define-fun is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ ((c lib!abstract_system.StampedMap_v.Stamped.)) Bool ((_ is lib!abstract_system.StampedMap_v.Stamped./Stamped) c))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ x) (height_lt (height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) (height (Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x))) )))
(assert (forall ((x lib!spec.FloatingSeq_t.FloatingSeq.)) (! (= x (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. x))) :pattern ((Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (= x (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)))) :pattern ((has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_start! Int) (_entries! Poly)) (! (=> (and (<= 0 _start!) (has_type _entries! (TYPE%vstd!seq.Seq. T&. T&))) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq _start! _entries!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) :pattern ((has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq _start! _entries!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) )))
(assert (forall ((x lib!spec.FloatingSeq_t.FloatingSeq.)) (! (= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start x) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/?start x)) :pattern ((lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (<= 0 (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)))) :pattern ((lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)) (has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) )))
(assert (forall ((x lib!spec.FloatingSeq_t.FloatingSeq.)) (! (= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries x) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/?entries x)) :pattern ((lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)) (has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) )))
(define-fun is-lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq_ ((c lib!spec.FloatingSeq_t.FloatingSeq.)) Bool ((_ is lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq) c))
(assert (forall ((x lib!spec.FloatingSeq_t.FloatingSeq.)) (! (=> (is-lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq_ x) (height_lt (height (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries x)) (height (Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)))) :pattern ((height (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type y (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. y))) (ext_eq deep (TYPE%vstd!seq.Seq. T&. T&) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. x)) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. y)))) (ext_eq deep (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&) x y)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= x (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. x))) :pattern ((Poly%lib!spec.MapSpec_t.Input. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (= x (Poly%lib!spec.MapSpec_t.Input. (%Poly%lib!spec.MapSpec_t.Input. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./QueryInput _key!)) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./QueryInput _key!)) TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= (lib!spec.MapSpec_t.Input./QueryInput/key x) (lib!spec.MapSpec_t.Input./QueryInput/?key x)) :pattern ((lib!spec.MapSpec_t.Input./QueryInput/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. x)) (has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./PutInput _key! _value!)) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./PutInput _key! _value!)) TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= (lib!spec.MapSpec_t.Input./PutInput/key x) (lib!spec.MapSpec_t.Input./PutInput/?key x)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. x)) (has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= (lib!spec.MapSpec_t.Input./PutInput/value x) (lib!spec.MapSpec_t.Input./PutInput/?value x)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. x)) (has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.Input. lib!spec.MapSpec_t.Input./NoopInput) TYPE%lib!spec.MapSpec_t.Input.))
(assert (forall ((x lib!spec.MapSpec_t.Output.)) (! (= x (%Poly%lib!spec.MapSpec_t.Output. (Poly%lib!spec.MapSpec_t.Output. x))) :pattern ((Poly%lib!spec.MapSpec_t.Output. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Output.) (= x (Poly%lib!spec.MapSpec_t.Output. (%Poly%lib!spec.MapSpec_t.Output. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Output.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Output./QueryOutput _value!)) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Output./QueryOutput _value!)) TYPE%lib!spec.MapSpec_t.Output.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Output.)) (! (= (lib!spec.MapSpec_t.Output./QueryOutput/value x) (lib!spec.MapSpec_t.Output./QueryOutput/?value x)) :pattern ((lib!spec.MapSpec_t.Output./QueryOutput/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Output.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. x)) (has_type x TYPE%lib!spec.MapSpec_t.Output.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.Output. lib!spec.MapSpec_t.Output./PutOutput) TYPE%lib!spec.MapSpec_t.Output.))
(assert (has_type (Poly%lib!spec.MapSpec_t.Output. lib!spec.MapSpec_t.Output./NoopOutput) TYPE%lib!spec.MapSpec_t.Output.))
(assert (forall ((x lib!spec.MapSpec_t.Request.)) (! (= x (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. x))) :pattern ((Poly%lib!spec.MapSpec_t.Request. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Request.) (= x (Poly%lib!spec.MapSpec_t.Request. (%Poly%lib!spec.MapSpec_t.Request. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((_input! lib!spec.MapSpec_t.Input.) (_id! Int)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Input. _input!) TYPE%lib!spec.MapSpec_t.Input.) (uInv 64 _id!)) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.Request./Request _input! _id!)) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.Request./Request _input! _id!)) TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Request.)) (! (= (lib!spec.MapSpec_t.Request./Request/input x) (lib!spec.MapSpec_t.Request./Request/?input x)) :pattern ((lib!spec.MapSpec_t.Request./Request/input x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Request.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. x))) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. x)) (has_type x TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Request.)) (! (= (lib!spec.MapSpec_t.Request./Request/id x) (lib!spec.MapSpec_t.Request./Request/?id x)) :pattern ((lib!spec.MapSpec_t.Request./Request/id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Request.) (uInv 64 (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. x)))) :pattern ((lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. x)) (has_type x TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Reply.)) (! (= x (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. x))) :pattern ((Poly%lib!spec.MapSpec_t.Reply. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Reply.) (= x (Poly%lib!spec.MapSpec_t.Reply. (%Poly%lib!spec.MapSpec_t.Reply. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((_output! lib!spec.MapSpec_t.Output.) (_id! Int)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Output. _output!) TYPE%lib!spec.MapSpec_t.Output.) (uInv 64 _id!)) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.Reply./Reply _output! _id!)) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.Reply./Reply _output! _id!)) TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Reply.)) (! (= (lib!spec.MapSpec_t.Reply./Reply/output x) (lib!spec.MapSpec_t.Reply./Reply/?output x)) :pattern ((lib!spec.MapSpec_t.Reply./Reply/output x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Reply.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. x))) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. x)) (has_type x TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Reply.)) (! (= (lib!spec.MapSpec_t.Reply./Reply/id x) (lib!spec.MapSpec_t.Reply./Reply/?id x)) :pattern ((lib!spec.MapSpec_t.Reply./Reply/id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Reply.) (uInv 64 (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. x)))) :pattern ((lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. x)) (has_type x TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((x lib!spec.MapSpec_t.PersistentState.)) (! (= x (%Poly%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.MapSpec_t.PersistentState. x))) :pattern ((Poly%lib!spec.MapSpec_t.PersistentState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.PersistentState.) (= x (Poly%lib!spec.MapSpec_t.PersistentState. (%Poly%lib!spec.MapSpec_t.PersistentState. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.PersistentState.)) )))
(assert (forall ((x lib!spec.MapSpec_t.PersistentState.)) (! (= (lib!spec.MapSpec_t.PersistentState./PersistentState/appv x) (lib!spec.MapSpec_t.PersistentState./PersistentState/?appv x)) :pattern ((lib!spec.MapSpec_t.PersistentState./PersistentState/appv x)) )))
(assert (forall ((x lib!spec.MapSpec_t.PersistentState.)) (! (has_type (Poly%lib!spec.MapSpec_t.PersistentState. x) TYPE%lib!spec.MapSpec_t.PersistentState.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.PersistentState. x) TYPE%lib!spec.MapSpec_t.PersistentState.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!spec.MapSpec_t.PersistentState.) (has_type y TYPE%lib!spec.MapSpec_t.PersistentState.) (= (lib!spec.MapSpec_t.PersistentState./PersistentState/appv (%Poly%lib!spec.MapSpec_t.PersistentState. x)) (lib!spec.MapSpec_t.PersistentState./PersistentState/appv (%Poly%lib!spec.MapSpec_t.PersistentState. y)))) (ext_eq deep TYPE%lib!spec.MapSpec_t.PersistentState. x y)) :pattern ((ext_eq deep TYPE%lib!spec.MapSpec_t.PersistentState. x y)) )))
(assert (forall ((x lib!spec.MapSpec_t.EphemeralState.)) (! (= x (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. x))) :pattern ((Poly%lib!spec.MapSpec_t.EphemeralState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.EphemeralState.) (= x (Poly%lib!spec.MapSpec_t.EphemeralState. (%Poly%lib!spec.MapSpec_t.EphemeralState. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.EphemeralState.)) )))
(assert (forall ((x lib!spec.MapSpec_t.EphemeralState.)) (! (= (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests x) (lib!spec.MapSpec_t.EphemeralState./EphemeralState/?requests x)) :pattern ((lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests x)) )))
(assert (forall ((x lib!spec.MapSpec_t.EphemeralState.)) (! (= (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies x) (lib!spec.MapSpec_t.EphemeralState./EphemeralState/?replies x)) :pattern ((lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies x)) )))
(assert (forall ((x lib!spec.MapSpec_t.EphemeralState.)) (! (has_type (Poly%lib!spec.MapSpec_t.EphemeralState. x) TYPE%lib!spec.MapSpec_t.EphemeralState.) :pattern ((has_type (Poly%lib!spec.MapSpec_t.EphemeralState. x) TYPE%lib!spec.MapSpec_t.EphemeralState.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!spec.MapSpec_t.EphemeralState.) (has_type y TYPE%lib!spec.MapSpec_t.EphemeralState.) (ext_eq deep (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Request.) (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. x))) (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. y)))) (ext_eq deep (TYPE%vstd!set.Set. $ TYPE%lib!spec.MapSpec_t.Reply.) (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. x))) (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. y))))) (ext_eq deep TYPE%lib!spec.MapSpec_t.EphemeralState. x y)) :pattern ((ext_eq deep TYPE%lib!spec.MapSpec_t.EphemeralState. x y)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.TotalKMMap_t.TotalKMMap.)) (! (= x (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. (Poly%lib!spec.TotalKMMap_t.TotalKMMap. x))) :pattern ((Poly%lib!spec.TotalKMMap_t.TotalKMMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.TotalKMMap_t.TotalKMMap.) (= x (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. x)))) :pattern ((has_type x TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) )))
(assert (forall ((x lib!spec.TotalKMMap_t.TotalKMMap.)) (! (= (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 x) (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/?0 x)) :pattern ((lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 x)) )))
(assert (forall ((x lib!spec.TotalKMMap_t.TotalKMMap.)) (! (has_type (Poly%lib!spec.TotalKMMap_t.TotalKMMap. x) TYPE%lib!spec.TotalKMMap_t.TotalKMMap.) :pattern ((has_type (Poly%lib!spec.TotalKMMap_t.TotalKMMap. x) TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!spec.TotalKMMap_t.TotalKMMap.) (has_type y TYPE%lib!spec.TotalKMMap_t.TotalKMMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. y))))) (ext_eq deep TYPE%lib!spec.TotalKMMap_t.TotalKMMap. x y)) :pattern ((ext_eq deep TYPE%lib!spec.TotalKMMap_t.TotalKMMap. x y)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.spec_affirm.? (Poly) Bool)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.Messages_t.impl&%0.arrow_value.? (Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.TotalKMMap_t.impl&%0.dom.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!spec.TotalKMMap_t.total_domain.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!spec.TotalKMMap_t.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!spec.TotalKMMap_t.impl&%0.spec_index.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!spec.MapSpec_t.MapSpec.impl&%5.query.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.TotalKMMap_t.impl&%0.insert.? (Poly Poly Poly) lib!spec.TotalKMMap_t.TotalKMMap.)
(declare-fun lib!spec.MapSpec_t.MapSpec.impl&%5.put.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.MapSpec.impl&%5.noop.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.MapSpec.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.MapSpec.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.Messages_t.default_value.? (Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.impl&%1.empty.? (Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!spec.TotalKMMap_t.impl&%0.empty.? (Poly) lib!spec.TotalKMMap_t.TotalKMMap.)
(declare-fun lib!spec.MapSpec_t.my_init.? (Poly) lib!spec.MapSpec_t.MapSpec.State.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.request.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.getInput.? (Poly) lib!spec.MapSpec_t.Input.)
(declare-fun lib!spec.MapSpec_t.getOutput.? (Poly) lib!spec.MapSpec_t.Output.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.get_prefix.? (Dcr Type Poly Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.drop_last.? (Dcr Type Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version.? (Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.is_active.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.last.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.first_active_index.? (Dcr Type Poly) Int)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.? (Poly) Int)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? (Poly) lib!spec.MapSpec_t.EphemeralState.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.get_suffix.? (Dcr Type Poly Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%0.new.? (Dcr Type Poly Poly Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state.? (Poly) lib!spec.MapSpec_t.PersistentState.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize.? (Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.init.? (Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly) Bool)
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(declare-fun lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly Poly) lib!spec.Messages_t.Delta.)
(declare-fun lib!spec.Messages_t.impl&%1.apply_delta.? (Poly Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.impl&%1.merge.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.? (Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.len.? (Poly) Int)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.? (Poly Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? (Poly Poly Fuel) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.? (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.init_by.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.? (Poly) lib!abstract_system.AbstractMap_v.AbstractMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.? (Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent.? (Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover.? (Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.? (Poly) lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.? (Poly) lib!spec.MapSpec_t.AsyncMap.Label.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.? (Poly) lib!spec.MapSpec_t.Request.)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.? (Poly) lib!spec.MapSpec_t.Reply.)
(declare-fun lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!spec.MapSpec_t.impl&%1.arrow_value.? (Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.? (Poly) lib!spec.MapSpec_t.Reply.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init.? (Poly) Bool)
(declare-fun lib!abstract_system.StampedMap_v.empty.? (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init.? (Poly) Bool)
(declare-fun vstd!map.check_argument_is_map.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.? (Poly) lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)
(declare-fun lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? (Poly) Int)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? (Poly) Bool)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version.? (Poly) lib!spec.MapSpec_t.PersistentState.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? (Poly Poly Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.? (Poly) lib!spec.FloatingSeq_t.FloatingSeq.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.? (Poly) lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)
(declare-fun lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal.? (Poly Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.ext_equal.? (Poly Poly) Bool)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0._dr.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0._do.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.StampedMap_v.impl&%0.ext_equal.? (Poly Poly) Bool)
(declare-fun lib!spec.TotalKMMap_t.impl&%0.ext_equal.? (Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.impl&%2.ext_equal.? (Poly Poly) Bool)
(declare-fun lib!spec.FloatingSeq_t.impl&%1.ext_equal.? (Poly Poly) Bool)
(declare-fun lib!spec.MapSpec_t.impl&%0.arrow_value.? (Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.? (Poly) lib!spec.KeyType_t.Key.)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(declare-fun req%vstd!pervasive.spec_affirm. (Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((b! Poly)) (! (= (req%vstd!pervasive.spec_affirm. b!) (=> %%global_location_label%%6 (%B b!))) :pattern ((req%vstd!pervasive.spec_affirm. b!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%0.arrow_value.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%0.arrow_value.) (forall ((self! Poly)) (! (= (lib!spec.Messages_t.impl&%0.arrow_value.? self!) (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. self!))) :pattern ((lib!spec.Messages_t.impl&%0.arrow_value.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%0.arrow_value.? self!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%0.arrow_value.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.impl&%0.dom.))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.impl&%0.dom.) (forall ((self! Poly)) (! (= (lib!spec.TotalKMMap_t.impl&%0.dom.? self!) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. self!)))))) :pattern ((lib!spec.TotalKMMap_t.impl&%0.dom.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.total_domain.))
(declare-fun %%lambda%%2 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0) k$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0) k$)))))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.total_domain.) (forall ((no%param Poly)) (! (= (lib!spec.TotalKMMap_t.total_domain.? no%param) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 (B true))))))) :pattern ((lib!spec.TotalKMMap_t.total_domain.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!spec.TotalKMMap_t.impl&%0.wf.? self!) (= (lib!spec.TotalKMMap_t.impl&%0.dom.? self!) (lib!spec.TotalKMMap_t.total_domain.? (I 0)))) :pattern ((lib!spec.TotalKMMap_t.impl&%0.wf.? self!)) ))))
(declare-fun req%lib!spec.TotalKMMap_t.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!spec.TotalKMMap_t.impl&%0.spec_index. self! idx!) (=> %%global_location_label%%7 (lib!spec.TotalKMMap_t.impl&%0.wf.? self!))) :pattern ((req%lib!spec.TotalKMMap_t.impl&%0.spec_index. self! idx!)) )))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.impl&%0.spec_index.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!spec.TotalKMMap_t.impl&%0.spec_index.? self! idx!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. self!))) idx!))) :pattern ((lib!spec.TotalKMMap_t.impl&%0.spec_index.? self! idx!)) ))))
(assert (forall ((self! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.TotalKMMap_t.TotalKMMap.) (has_type idx! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.TotalKMMap_t.impl&%0.spec_index.? self! idx!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.TotalKMMap_t.impl&%0.spec_index.? self! idx!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.query.))
(define-fun is-lib!spec.MapSpec_t.MapSpec.Label./Query_ ((c lib!spec.MapSpec_t.MapSpec.Label.)) Bool ((_ is lib!spec.MapSpec_t.MapSpec.Label./Query) c))
(define-fun is-lib!spec.MapSpec_t.Input./QueryInput_ ((c lib!spec.MapSpec_t.Input.)) Bool ((_ is lib!spec.MapSpec_t.Input./QueryInput) c))
(define-fun is-lib!spec.MapSpec_t.Output./QueryOutput_ ((c lib!spec.MapSpec_t.Output.)) Bool ((_ is lib!spec.MapSpec_t.Output./QueryOutput) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.query.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.MapSpec.impl&%5.query.? pre! post! label!) (let ((update_tmp_kmmap$ (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!))) (and (and (is-lib!spec.MapSpec_t.MapSpec.Label./Query_ tmp_for_match_0$) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Query/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Query/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Query_ tmp_for_match_0$) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Query/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Query/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!spec.MapSpec_t.Input. input$) (Poly%lib!spec.MapSpec_t.Output. output$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!spec.MapSpec_t.Input. $ TYPE%lib!spec.MapSpec_t.Output.)))))) (let ((input$ (%Poly%lib!spec.MapSpec_t.Input. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output$ (%Poly%lib!spec.MapSpec_t.Output. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_for_match_1$ input$)) (and (and (is-lib!spec.MapSpec_t.Input./QueryInput_ tmp_for_match_1$) (let ((key$ (lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. tmp_for_match_1$))))) true)) (let ((key$ (ite (is-lib!spec.MapSpec_t.Input./QueryInput_ tmp_for_match_1$) (let ((key$2 (lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. tmp_for_match_1$))))) key$2) (%Poly%lib!spec.KeyType_t.Key. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.KeyType_t.Key.))))) (let ((tmp_for_match_2$ output$)) (and (and (is-lib!spec.MapSpec_t.Output./QueryOutput_ tmp_for_match_2$) (let ((value$ (lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. (Poly%lib!spec.MapSpec_t.Output. tmp_for_match_2$))))) true)) (let ((value$ (ite (is-lib!spec.MapSpec_t.Output./QueryOutput_ tmp_for_match_2$) (let ((value$2 (lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. (Poly%lib!spec.MapSpec_t.Output. tmp_for_match_2$))))) value$2) (%Poly%lib!spec.Messages_t.Value. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.Messages_t.Value.))))) (= (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. (lib!spec.TotalKMMap_t.impl&%0.spec_index.? (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$))))) value$)))))))))))) (= (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. post!)) update_tmp_kmmap$)))) :pattern ((lib!spec.MapSpec_t.MapSpec.impl&%5.query.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.impl&%0.insert.))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.impl&%0.insert.) (forall ((self! Poly) (key! Poly) (value! Poly)) (! (= (lib!spec.TotalKMMap_t.impl&%0.insert.? self! key! value!) (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. self!))) key! value!)))) :pattern ((lib!spec.TotalKMMap_t.impl&%0.insert.? self! key! value!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.put.))
(define-fun is-lib!spec.MapSpec_t.MapSpec.Label./Put_ ((c lib!spec.MapSpec_t.MapSpec.Label.)) Bool ((_ is lib!spec.MapSpec_t.MapSpec.Label./Put) c))
(define-fun is-lib!spec.MapSpec_t.Input./PutInput_ ((c lib!spec.MapSpec_t.Input.)) Bool ((_ is lib!spec.MapSpec_t.Input./PutInput) c))
(define-fun is-lib!spec.MapSpec_t.Output./PutOutput_ ((c lib!spec.MapSpec_t.Output.)) Bool ((_ is lib!spec.MapSpec_t.Output./PutOutput) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.MapSpec.impl&%5.put.? pre! post! label!) (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!))) (and (and (is-lib!spec.MapSpec_t.MapSpec.Label./Put_ tmp_for_match_0$) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Put/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Put/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Put_ tmp_for_match_0$) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Put/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Put/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!spec.MapSpec_t.Input. input$) (Poly%lib!spec.MapSpec_t.Output. output$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!spec.MapSpec_t.Input. $ TYPE%lib!spec.MapSpec_t.Output.)))))) (let ((input$ (%Poly%lib!spec.MapSpec_t.Input. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output$ (%Poly%lib!spec.MapSpec_t.Output. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_for_match_1$ input$)) (and (and (is-lib!spec.MapSpec_t.Input./PutInput_ tmp_for_match_1$) (let ((key$ (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. tmp_for_match_1$))))) (let ((value$ (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. tmp_for_match_1$))))) true))) (let ((tmp%%$1 (ite (is-lib!spec.MapSpec_t.Input./PutInput_ tmp_for_match_1$) (let ((key$ (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. tmp_for_match_1$))))) (let ((value$ (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. tmp_for_match_1$))))) (tuple%2./tuple%2 (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Value. value$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Value.)))))) (let ((key$ (%Poly%lib!spec.KeyType_t.Key. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1)))))) (let ((value$ (%Poly%lib!spec.Messages_t.Value. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1)))))) (let ((tmp_for_match_2$ output$)) (and (is-lib!spec.MapSpec_t.Output./PutOutput_ tmp_for_match_2$) (let ((update_tmp_kmmap$ (lib!spec.TotalKMMap_t.impl&%0.insert.? (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$))))))) (= (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. post!)) update_tmp_kmmap$))))))))))))))) :pattern ((lib!spec.MapSpec_t.MapSpec.impl&%5.put.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.noop.))
(define-fun is-lib!spec.MapSpec_t.MapSpec.Label./Noop_ ((c lib!spec.MapSpec_t.MapSpec.Label.)) Bool ((_ is lib!spec.MapSpec_t.MapSpec.Label./Noop) c))
(define-fun is-lib!spec.MapSpec_t.Input./NoopInput_ ((c lib!spec.MapSpec_t.Input.)) Bool ((_ is lib!spec.MapSpec_t.Input./NoopInput) c))
(define-fun is-lib!spec.MapSpec_t.Output./NoopOutput_ ((c lib!spec.MapSpec_t.Output.)) Bool ((_ is lib!spec.MapSpec_t.Output./NoopOutput) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.noop.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.MapSpec.impl&%5.noop.? pre! post! label!) (let ((update_tmp_kmmap$ (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!))) (and (and (is-lib!spec.MapSpec_t.MapSpec.Label./Noop_ tmp_for_match_0$) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Noop_ tmp_for_match_0$) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. (Poly%lib!spec.MapSpec_t.MapSpec.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!spec.MapSpec_t.Input. input$) (Poly%lib!spec.MapSpec_t.Output. output$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!spec.MapSpec_t.Input. $ TYPE%lib!spec.MapSpec_t.Output.)))))) (let ((input$ (%Poly%lib!spec.MapSpec_t.Input. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output$ (%Poly%lib!spec.MapSpec_t.Output. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_for_match_1$ input$)) (and (is-lib!spec.MapSpec_t.Input./NoopInput_ tmp_for_match_1$) (let ((tmp_for_match_2$ output$)) (is-lib!spec.MapSpec_t.Output./NoopOutput_ tmp_for_match_2$))))))))) (= (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. post!)) update_tmp_kmmap$)))) :pattern ((lib!spec.MapSpec_t.MapSpec.impl&%5.noop.? pre! post! label!)) ))))
(define-fun is-lib!spec.MapSpec_t.MapSpec.Step./query_ ((c lib!spec.MapSpec_t.MapSpec.Step.)) Bool ((_ is lib!spec.MapSpec_t.MapSpec.Step./query) c))
(define-fun is-lib!spec.MapSpec_t.MapSpec.Step./put_ ((c lib!spec.MapSpec_t.MapSpec.Step.)) Bool ((_ is lib!spec.MapSpec_t.MapSpec.Step./put) c))
(define-fun is-lib!spec.MapSpec_t.MapSpec.Step./noop_ ((c lib!spec.MapSpec_t.MapSpec.Step.)) Bool ((_ is lib!spec.MapSpec_t.MapSpec.Step./noop) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!spec.MapSpec_t.MapSpec.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!spec.MapSpec_t.MapSpec.Step./query_ (%Poly%lib!spec.MapSpec_t.MapSpec.Step. step!)) (lib!spec.MapSpec_t.MapSpec.impl&%5.query.? pre! post! label!) (ite (is-lib!spec.MapSpec_t.MapSpec.Step./put_ (%Poly%lib!spec.MapSpec_t.MapSpec.Step. step!)) (lib!spec.MapSpec_t.MapSpec.impl&%5.put.? pre! post! label!) (and (is-lib!spec.MapSpec_t.MapSpec.Step./noop_ (%Poly%lib!spec.MapSpec_t.MapSpec.Step. step!)) (lib!spec.MapSpec_t.MapSpec.impl&%5.noop.? pre! post! label!))))) :pattern ((lib!spec.MapSpec_t.MapSpec.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.MapSpec.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.MapSpec.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec.MapSpec_t.MapSpec.Step.) (lib!spec.MapSpec_t.MapSpec.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!spec.MapSpec_t.MapSpec.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!spec.MapSpec_t.MapSpec.impl&%5.next.? pre! post! label!)) ))))
(declare-fun req%lib!spec.MapSpec_t.MapSpec.show.query. (lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.Label.) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.MapSpec.State.) (post! lib!spec.MapSpec_t.MapSpec.State.) (label! lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (req%lib!spec.MapSpec_t.MapSpec.show.query. pre! post! label!) (=> %%global_location_label%%8 (lib!spec.MapSpec_t.MapSpec.impl&%5.query.? (Poly%lib!spec.MapSpec_t.MapSpec.State. pre!) (Poly%lib!spec.MapSpec_t.MapSpec.State. post!) (Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.MapSpec.show.query. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.MapSpec.show.query. (lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.MapSpec.State.) (post! lib!spec.MapSpec_t.MapSpec.State.) (label! lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (ens%lib!spec.MapSpec_t.MapSpec.show.query. pre! post! label!) (lib!spec.MapSpec_t.MapSpec.impl&%5.next.? (Poly%lib!spec.MapSpec_t.MapSpec.State. pre!) (Poly%lib!spec.MapSpec_t.MapSpec.State. post!) (Poly%lib!spec.MapSpec_t.MapSpec.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.MapSpec.show.query. pre! post! label!)) )))
(declare-fun req%lib!spec.MapSpec_t.MapSpec.show.put. (lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.Label.) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.MapSpec.State.) (post! lib!spec.MapSpec_t.MapSpec.State.) (label! lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (req%lib!spec.MapSpec_t.MapSpec.show.put. pre! post! label!) (=> %%global_location_label%%9 (lib!spec.MapSpec_t.MapSpec.impl&%5.put.? (Poly%lib!spec.MapSpec_t.MapSpec.State. pre!) (Poly%lib!spec.MapSpec_t.MapSpec.State. post!) (Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.MapSpec.show.put. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.MapSpec.show.put. (lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.State. lib!spec.MapSpec_t.MapSpec.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.MapSpec.State.) (post! lib!spec.MapSpec_t.MapSpec.State.) (label! lib!spec.MapSpec_t.MapSpec.Label.)) (! (= (ens%lib!spec.MapSpec_t.MapSpec.show.put. pre! post! label!) (lib!spec.MapSpec_t.MapSpec.impl&%5.next.? (Poly%lib!spec.MapSpec_t.MapSpec.State. pre!) (Poly%lib!spec.MapSpec_t.MapSpec.State. post!) (Poly%lib!spec.MapSpec_t.MapSpec.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.MapSpec.show.put. pre! post! label!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.default_value.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.default_value.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.default_value.? no%param) (lib!spec.Messages_t.Value./Value (%I (I 0)))) :pattern ((lib!spec.Messages_t.default_value.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? no%param)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.default_value.? no%param)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.impl&%1.empty.? no%param) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? (I 0)))))) :pattern ((lib!spec.Messages_t.impl&%1.empty.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.empty.? no%param)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.empty.? no%param)) )))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.impl&%0.empty.))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.impl&%0.empty.) (forall ((no%param Poly)) (! (= (lib!spec.TotalKMMap_t.impl&%0.empty.? no%param) (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%2 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%2 (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.empty.? (I 0)))))))))) :pattern ((lib!spec.TotalKMMap_t.impl&%0.empty.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.my_init.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.my_init.) (forall ((no%param Poly)) (! (= (lib!spec.MapSpec_t.my_init.? no%param) (lib!spec.MapSpec_t.MapSpec.State./State (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.TotalKMMap_t.impl&%0.empty.? (I 0)))))) :pattern ((lib!spec.MapSpec_t.my_init.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.request.))
(define-fun is-lib!spec.MapSpec_t.AsyncMap.Label./RequestOp_ ((c lib!spec.MapSpec_t.AsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.AsyncMap.Label./RequestOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.request.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.request.? pre! post! label!) (let ((update_tmp_persistent$ (lib!spec.MapSpec_t.AsyncMap.State./State/persistent (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!))) (and (and (is-lib!spec.MapSpec_t.AsyncMap.Label./RequestOp_ tmp_for_match_0$) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) true)) (let ((req$ (ite (is-lib!spec.MapSpec_t.AsyncMap.Label./RequestOp_ tmp_for_match_0$) (let ((req$2 (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) req$2) (%Poly%lib!spec.MapSpec_t.Request. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.MapSpec_t.Request.))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Request. req$))) (let ((update_tmp_ephemeral$ (let ((tmp%%$ (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Request. req$))))) (let ((tmp%%$1 (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))) (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. tmp%%$)) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. tmp%%$1)))))))))) (= (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. post!)) update_tmp_ephemeral$)))))) (= (lib!spec.MapSpec_t.AsyncMap.State./State/persistent (%Poly%lib!spec.MapSpec_t.AsyncMap.State. post!)) update_tmp_persistent$)))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.request.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.getInput.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.getInput.) (forall ((label! Poly)) (! (= (lib!spec.MapSpec_t.getInput.? label!) (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Query_ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Query/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Query/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) input$)) (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Put_ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Put/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Put/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) input$)) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) input$))))) :pattern ((lib!spec.MapSpec_t.getInput.? label!)) ))))
(assert (forall ((label! Poly)) (! (=> (has_type label! TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.getInput.? label!)) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((lib!spec.MapSpec_t.getInput.? label!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.getOutput.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.getOutput.) (forall ((label! Poly)) (! (= (lib!spec.MapSpec_t.getOutput.? label!) (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Query_ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Query/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Query/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) output$)) (ite (is-lib!spec.MapSpec_t.MapSpec.Label./Put_ (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Put/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Put/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) output$)) (let ((input$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/input (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) (let ((output$ (lib!spec.MapSpec_t.MapSpec.Label./Noop/output (%Poly%lib!spec.MapSpec_t.MapSpec.Label. label!)))) output$))))) :pattern ((lib!spec.MapSpec_t.getOutput.? label!)) ))))
(assert (forall ((label! Poly)) (! (=> (has_type label! TYPE%lib!spec.MapSpec_t.MapSpec.Label.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.getOutput.? label!)) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((lib!spec.MapSpec_t.getOutput.? label!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.))
(define-fun is-lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp_ ((c lib!spec.MapSpec_t.AsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.) (forall ((pre! Poly) (post! Poly) (label! Poly) (map_label! Poly) (post_persistent! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.? pre! post! label! map_label! post_persistent!) (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!))) (and (and (is-lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp_ tmp_for_match_0$) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp_ tmp_for_match_0$) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!spec.MapSpec_t.Request. req$) (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!spec.MapSpec_t.Request. $ TYPE%lib!spec.MapSpec_t.Reply.)))))) (let ((req$ (%Poly%lib!spec.MapSpec_t.Request. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((reply$ (%Poly%lib!spec.MapSpec_t.Reply. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req$))) (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Request. req$)) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Reply. reply$))) (and (= (lib!spec.MapSpec_t.getInput.? map_label!) (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req$)))) (and (= (lib!spec.MapSpec_t.getOutput.? map_label!) (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (and (lib!spec.MapSpec_t.MapSpec.impl&%5.next.? (Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.PersistentState./PersistentState/appv (%Poly%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.MapSpec_t.PersistentState. (lib!spec.MapSpec_t.AsyncMap.State./State/persistent (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.PersistentState./PersistentState/appv (%Poly%lib!spec.MapSpec_t.PersistentState. post_persistent!))) map_label!) (let ((update_tmp_persistent$ (%Poly%lib!spec.MapSpec_t.PersistentState. post_persistent!))) (let ((update_tmp_ephemeral$ (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Request. req$))) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Reply. reply$)))))) (and (= (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. post!)) update_tmp_ephemeral$) (= (lib!spec.MapSpec_t.AsyncMap.State./State/persistent (%Poly%lib!spec.MapSpec_t.AsyncMap.State. post!)) update_tmp_persistent$)))))))))))))))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.? pre! post! label! map_label! post_persistent!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.))
(define-fun is-lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp_ ((c lib!spec.MapSpec_t.AsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.? pre! post! label!) (let ((update_tmp_persistent$ (lib!spec.MapSpec_t.AsyncMap.State./State/persistent (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!))) (and (and (is-lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp_ tmp_for_match_0$) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) true)) (let ((reply$ (ite (is-lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp_ tmp_for_match_0$) (let ((reply$2 (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. tmp_for_match_0$))))) reply$2) (%Poly%lib!spec.MapSpec_t.Reply. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.MapSpec_t.Reply.))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Reply. reply$)) (let ((update_tmp_ephemeral$ (let ((tmp%%$ (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.Reply. reply$))))) (let ((tmp%%$1 (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!)))) (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. tmp%%$1))))) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. tmp%%$))))))) (= (lib!spec.MapSpec_t.AsyncMap.State./State/ephemeral (%Poly%lib!spec.MapSpec_t.AsyncMap.State. post!)) update_tmp_ephemeral$)))))) (= (lib!spec.MapSpec_t.AsyncMap.State./State/persistent (%Poly%lib!spec.MapSpec_t.AsyncMap.State. post!)) update_tmp_persistent$)))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.? pre! post! label!)) ))))
(define-fun is-lib!spec.MapSpec_t.AsyncMap.Step./request_ ((c lib!spec.MapSpec_t.AsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.AsyncMap.Step./request) c))
(define-fun is-lib!spec.MapSpec_t.AsyncMap.Step./execute_ ((c lib!spec.MapSpec_t.AsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.AsyncMap.Step./execute) c))
(define-fun is-lib!spec.MapSpec_t.AsyncMap.Step./reply_ ((c lib!spec.MapSpec_t.AsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.AsyncMap.Step./reply) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!spec.MapSpec_t.AsyncMap.Step./request_ (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. step!)) (lib!spec.MapSpec_t.AsyncMap.impl&%5.request.? pre! post! label!) (ite (is-lib!spec.MapSpec_t.AsyncMap.Step./execute_ (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. step!)) (let ((map_label$ (lib!spec.MapSpec_t.AsyncMap.Step./execute/0 (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. step!)))) (let ((post_persistent$ (lib!spec.MapSpec_t.AsyncMap.Step./execute/1 (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. step!)))) (lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.? pre! post! label! (Poly%lib!spec.MapSpec_t.MapSpec.Label. map_label$) (Poly%lib!spec.MapSpec_t.PersistentState. post_persistent$)))) (and (is-lib!spec.MapSpec_t.AsyncMap.Step./reply_ (%Poly%lib!spec.MapSpec_t.AsyncMap.Step. step!)) (lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.? pre! post! label!))))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec.MapSpec_t.AsyncMap.Step.) (lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? pre! post! label!)) ))))
(declare-fun req%lib!spec.MapSpec_t.AsyncMap.show.request. (lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.Label.) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.AsyncMap.State.) (post! lib!spec.MapSpec_t.AsyncMap.State.) (label! lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (req%lib!spec.MapSpec_t.AsyncMap.show.request. pre! post! label!) (=> %%global_location_label%%10 (lib!spec.MapSpec_t.AsyncMap.impl&%5.request.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.AsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.AsyncMap.show.request. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.AsyncMap.show.request. (lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.AsyncMap.State.) (post! lib!spec.MapSpec_t.AsyncMap.State.) (label! lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (ens%lib!spec.MapSpec_t.AsyncMap.show.request. pre! post! label!) (lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.AsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.AsyncMap.show.request. pre! post! label!)) )))
(declare-fun req%lib!spec.MapSpec_t.AsyncMap.show.execute. (lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.Label. lib!spec.MapSpec_t.MapSpec.Label. lib!spec.MapSpec_t.PersistentState.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.AsyncMap.State.) (post! lib!spec.MapSpec_t.AsyncMap.State.) (label! lib!spec.MapSpec_t.AsyncMap.Label.) (map_label! lib!spec.MapSpec_t.MapSpec.Label.) (post_persistent! lib!spec.MapSpec_t.PersistentState.)) (! (= (req%lib!spec.MapSpec_t.AsyncMap.show.execute. pre! post! label! map_label! post_persistent!) (=> %%global_location_label%%11 (lib!spec.MapSpec_t.AsyncMap.impl&%5.execute.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.AsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!) (Poly%lib!spec.MapSpec_t.MapSpec.Label. map_label!) (Poly%lib!spec.MapSpec_t.PersistentState. post_persistent!)))) :pattern ((req%lib!spec.MapSpec_t.AsyncMap.show.execute. pre! post! label! map_label! post_persistent!)) )))
(declare-fun ens%lib!spec.MapSpec_t.AsyncMap.show.execute. (lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.Label. lib!spec.MapSpec_t.MapSpec.Label. lib!spec.MapSpec_t.PersistentState.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.AsyncMap.State.) (post! lib!spec.MapSpec_t.AsyncMap.State.) (label! lib!spec.MapSpec_t.AsyncMap.Label.) (map_label! lib!spec.MapSpec_t.MapSpec.Label.) (post_persistent! lib!spec.MapSpec_t.PersistentState.)) (! (= (ens%lib!spec.MapSpec_t.AsyncMap.show.execute. pre! post! label! map_label! post_persistent!) (lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.AsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.AsyncMap.show.execute. pre! post! label! map_label! post_persistent!)) )))
(declare-fun req%lib!spec.MapSpec_t.AsyncMap.show.reply. (lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.Label.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.AsyncMap.State.) (post! lib!spec.MapSpec_t.AsyncMap.State.) (label! lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (req%lib!spec.MapSpec_t.AsyncMap.show.reply. pre! post! label!) (=> %%global_location_label%%12 (lib!spec.MapSpec_t.AsyncMap.impl&%5.reply.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.AsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.AsyncMap.show.reply. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.AsyncMap.show.reply. (lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.State. lib!spec.MapSpec_t.AsyncMap.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.AsyncMap.State.) (post! lib!spec.MapSpec_t.AsyncMap.State.) (label! lib!spec.MapSpec_t.AsyncMap.Label.)) (! (= (ens%lib!spec.MapSpec_t.AsyncMap.show.reply. pre! post! label!) (lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.AsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.AsyncMap.show.reply. pre! post! label!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.len.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!) (Add (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)) (vstd!seq.Seq.len.? T&. T& (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!))))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!)) ))))
(declare-fun req%lib!spec.FloatingSeq_t.impl&%0.get_prefix. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (end_idx! Poly)) (! (= (req%lib!spec.FloatingSeq_t.impl&%0.get_prefix. T&. T& self! end_idx!) (=> %%global_location_label%%13 (and (<= 0 (%I end_idx!)) (<= (%I end_idx!) (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!))))) :pattern ((req%lib!spec.FloatingSeq_t.impl&%0.get_prefix. T&. T& self! end_idx!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.get_prefix.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.get_prefix.) (forall ((T&. Dcr) (T& Type) (self! Poly) (end_idx! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.get_prefix.? T&. T& self! end_idx!) (ite (<= (%I end_idx!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!))) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq (%I (I (nClip (%I end_idx!)))) (vstd!seq.Seq.empty.? T&. T&)) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq (%I (I (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)))) (vstd!seq.Seq.subrange.? T&. T& (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)) (I 0) (I (Sub (%I end_idx!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)))))))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.get_prefix.? T&. T& self! end_idx!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (end_idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type end_idx! INT)) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.impl&%0.get_prefix.? T&. T& self! end_idx!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.get_prefix.? T&. T& self! end_idx!)) )))
(declare-fun req%lib!spec.FloatingSeq_t.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!spec.FloatingSeq_t.impl&%0.drop_last. T&. T& self!) (=> %%global_location_label%%14 (> (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!) 0))) :pattern ((req%lib!spec.FloatingSeq_t.impl&%0.drop_last. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.drop_last.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.drop_last.? T&. T& self!) (lib!spec.FloatingSeq_t.impl&%0.get_prefix.? T&. T& self! (I (Sub (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!) 1)))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.drop_last.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.impl&%0.drop_last.? T&. T& self!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.drop_last.? T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version.) (forall ((versions! Poly) (versions_prime! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version.? versions! versions_prime!) (or (and (< 0 (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. versions_prime!)) (= (lib!spec.FloatingSeq_t.impl&%0.drop_last.? $ TYPE%lib!spec.MapSpec_t.PersistentState. versions_prime!) (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. versions!))) (= versions_prime! versions!))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version.? versions! versions_prime!)) ))))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.is_active.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.is_active.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.is_active.? T&. T& self! i!) (and (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)) (%I i!)) (< (%I i!) (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!)))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.is_active.? T&. T& self! i!)) ))))
(declare-fun req%lib!spec.FloatingSeq_t.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%lib!spec.FloatingSeq_t.impl&%0.spec_index. T&. T& self! i!) (=> %%global_location_label%%15 (lib!spec.FloatingSeq_t.impl&%0.is_active.? T&. T& self! i!))) :pattern ((req%lib!spec.FloatingSeq_t.impl&%0.spec_index. T&. T& self! i!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.spec_index.? T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)) (I (Sub (%I i!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)))))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? T&. T& self! i!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type i! INT)) (has_type (lib!spec.FloatingSeq_t.impl&%0.spec_index.? T&. T& self! i!) T&)) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? T&. T& self! i!)) )))
(declare-fun req%lib!spec.FloatingSeq_t.impl&%0.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!spec.FloatingSeq_t.impl&%0.last. T&. T& self!) (and (=> %%global_location_label%%16 (> (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!) 0)) (=> %%global_location_label%%17 (lib!spec.FloatingSeq_t.impl&%0.is_active.? T&. T& self! (I (Sub (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!) 1)))))) :pattern ((req%lib!spec.FloatingSeq_t.impl&%0.last. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.last.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.last.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.last.? T&. T& self!) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? T&. T& self! (I (Sub (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!) 1)))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.last.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type (lib!spec.FloatingSeq_t.impl&%0.last.? T&. T& self!) T&)) :pattern ((lib!spec.FloatingSeq_t.impl&%0.last.? T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_versions! Poly) (new_async_ephemeral! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.? pre! post! label! new_versions! new_async_ephemeral!) (let ((update_tmp_sync_requests$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) (and (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ tmp_for_match_0$) (let ((base_op$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. tmp_for_match_0$))))) true)) (let ((base_op$ (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ tmp_for_match_0$) (let ((base_op$2 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. tmp_for_match_0$))))) base_op$2) (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.MapSpec_t.AsyncMap.Label.))))) (and (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.optionally_append_version.? (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))) new_versions!) (and (lib!spec.MapSpec_t.AsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.AsyncMap.State. (lib!spec.MapSpec_t.AsyncMap.State./State (%Poly%lib!spec.MapSpec_t.PersistentState. (lib!spec.FloatingSeq_t.impl&%0.last.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))))) (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))))) (Poly%lib!spec.MapSpec_t.AsyncMap.State. (lib!spec.MapSpec_t.AsyncMap.State./State (%Poly%lib!spec.MapSpec_t.PersistentState. (lib!spec.FloatingSeq_t.impl&%0.last.? $ TYPE%lib!spec.MapSpec_t.PersistentState. new_versions!)) (%Poly%lib!spec.MapSpec_t.EphemeralState. new_async_ephemeral!))) (Poly%lib!spec.MapSpec_t.AsyncMap.Label. base_op$)) (let ((update_tmp_versions$ (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. new_versions!))) (let ((update_tmp_async_ephemeral$ (%Poly%lib!spec.MapSpec_t.EphemeralState. new_async_ephemeral!))) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$))))))))) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$)))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.? pre! post! label! new_versions! new_async_ephemeral!)) ))))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.first_active_index.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.first_active_index.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.first_active_index.? T&. T& self!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.first_active_index.? T&. T& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.? self!) (lib!spec.FloatingSeq_t.impl&%0.first_active_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. self!))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.) (forall ((no%param Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? no%param) (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.MapSpec_t.Request.)) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.MapSpec_t.Reply.)))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./CrashOp_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./CrashOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.? pre! post! label!) (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./CrashOp_ tmp_for_match_0$) (let ((update_tmp_versions$ (lib!spec.FloatingSeq_t.impl&%0.get_prefix.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))) (I (Add (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.? pre!) 1))))) (let ((update_tmp_async_ephemeral$ (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? (I 0)))) (let ((update_tmp_sync_requests$ (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.empty.? $ NAT $ NAT)))) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$))))))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.? pre! post! label!)) ))))
(declare-fun req%lib!spec.FloatingSeq_t.impl&%0.get_suffix. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (newStart! Poly)) (! (= (req%lib!spec.FloatingSeq_t.impl&%0.get_suffix. T&. T& self! newStart!) (=> %%global_location_label%%18 (or (lib!spec.FloatingSeq_t.impl&%0.is_active.? T&. T& self! newStart!) (= (%I newStart!) (lib!spec.FloatingSeq_t.impl&%0.len.? T&. T& self!))))) :pattern ((req%lib!spec.FloatingSeq_t.impl&%0.get_suffix. T&. T& self! newStart!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.get_suffix.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.get_suffix.) (forall ((T&. Dcr) (T& Type) (self! Poly) (newStart! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.get_suffix.? T&. T& self! newStart!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq (%I (I (nClip (%I newStart!)))) (vstd!seq.Seq.subrange.? T&. T& (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)) (I (Sub (%I newStart!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)))) (I (vstd!seq.Seq.len.? T&. T& (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/entries (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!))))))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.get_suffix.? T&. T& self! newStart!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (newStart! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&)) (has_type newStart! INT)) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.impl&%0.get_suffix.? T&. T& self! newStart!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.get_suffix.? T&. T& self! newStart!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./SyncOp_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./SyncOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_stable_index! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.? pre! post! label! new_stable_index!) (let ((update_tmp_async_ephemeral$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (let ((update_tmp_sync_requests$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./SyncOp_ tmp_for_match_0$) (and (and (<= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.? pre!) (%I new_stable_index!)) (< (%I new_stable_index!) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))))) (let ((update_tmp_versions$ (lib!spec.FloatingSeq_t.impl&%0.get_suffix.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))) new_stable_index!))) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$))))) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$)))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.? pre! post! label! new_stable_index!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.? pre! post! label!) (let ((update_tmp_versions$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (let ((update_tmp_async_ephemeral$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) (and (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp_ tmp_for_match_0$) (let ((sync_req_id$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. tmp_for_match_0$))))) true)) (let ((sync_req_id$ (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp_ tmp_for_match_0$) (let ((sync_req_id$2 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. tmp_for_match_0$))))) sync_req_id$2) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (I sync_req_id$))) (let ((update_tmp_sync_requests$ (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))) (I sync_req_id$) (I (nClip (Sub (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) 1))))))) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$)))))) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$)))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.? pre! post! label!) (let ((update_tmp_versions$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (let ((update_tmp_async_ephemeral$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) (and (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp_ tmp_for_match_0$) (let ((sync_req_id$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. tmp_for_match_0$))))) true)) (let ((sync_req_id$ (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp_ tmp_for_match_0$) (let ((sync_req_id$2 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. tmp_for_match_0$))))) sync_req_id$2) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (I sync_req_id$)) (and (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))) (I sync_req_id$))) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.stable_index.? pre!)) (let ((update_tmp_sync_requests$ (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!))) (I sync_req_id$))))) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$))))))) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$)))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.? pre! post! label!) (let ((update_tmp_versions$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (let ((update_tmp_async_ephemeral$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (let ((update_tmp_sync_requests$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ tmp_for_match_0$)) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$)))))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.? pre! post! label!)) ))))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate) c))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./crash_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./crash) c))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync) c))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./req_sync_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./req_sync) c))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./reply_sync_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./reply_sync) c))
(define-fun is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./noop_ ((c lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.)) Bool ((_ is lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./noop) c))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate_ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)) (let ((new_versions$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/0 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)))) (let ((new_async_ephemeral$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./operate/1 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)))) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.? pre! post! label! (Poly%lib!spec.FloatingSeq_t.FloatingSeq. new_versions$) (Poly%lib!spec.MapSpec_t.EphemeralState. new_async_ephemeral$)))) (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./crash_ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.? pre! post! label!) (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync_ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)) (let ((new_stable_index$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./sync/0 (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)))) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.? pre! post! label! (I new_stable_index$))) (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./req_sync_ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.? pre! post! label!) (ite (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./reply_sync_ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.? pre! post! label!) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step./noop_ (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step. step!)) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.? pre! post! label!)))))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Step.) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? pre! post! label!)) ))))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.operate. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. lib!spec.FloatingSeq_t.FloatingSeq. lib!spec.MapSpec_t.EphemeralState.) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (new_versions! lib!spec.FloatingSeq_t.FloatingSeq.) (new_async_ephemeral! lib!spec.MapSpec_t.EphemeralState.)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.operate. pre! post! label! new_versions! new_async_ephemeral!) (=> %%global_location_label%%19 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.operate.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!) (Poly%lib!spec.FloatingSeq_t.FloatingSeq. new_versions!) (Poly%lib!spec.MapSpec_t.EphemeralState. new_async_ephemeral!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.operate. pre! post! label! new_versions! new_async_ephemeral!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.operate. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. lib!spec.FloatingSeq_t.FloatingSeq. lib!spec.MapSpec_t.EphemeralState.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (new_versions! lib!spec.FloatingSeq_t.FloatingSeq.) (new_async_ephemeral! lib!spec.MapSpec_t.EphemeralState.)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.operate. pre! post! label! new_versions! new_async_ephemeral!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.operate. pre! post! label! new_versions! new_async_ephemeral!)) )))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.crash. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.crash. pre! post! label!) (=> %%global_location_label%%20 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.crash.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.crash. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.crash. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.crash. pre! post! label!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.crash. pre! post! label!)) )))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.sync. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (new_stable_index! Int)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.sync. pre! post! label! new_stable_index!) (=> %%global_location_label%%21 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.sync.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!) (I new_stable_index!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.sync. pre! post! label! new_stable_index!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.sync. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. Int) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (new_stable_index! Int)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.sync. pre! post! label! new_stable_index!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.sync. pre! post! label! new_stable_index!)) )))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.req_sync. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.req_sync. pre! post! label!) (=> %%global_location_label%%22 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.req_sync.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.req_sync. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.req_sync. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.req_sync. pre! post! label!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.req_sync. pre! post! label!)) )))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.reply_sync. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.reply_sync. pre! post! label!) (=> %%global_location_label%%23 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.reply_sync.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.reply_sync. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.reply_sync. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.reply_sync. pre! post! label!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.reply_sync. pre! post! label!)) )))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.noop. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.noop. pre! post! label!) (=> %%global_location_label%%24 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.noop.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.noop. pre! post! label!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.noop. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) Bool)
(assert (forall ((pre! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) (label! lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.noop. pre! post! label!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.next.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. pre!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!) (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. label!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.noop. pre! post! label!)) )))
(declare-fun req%lib!spec.FloatingSeq_t.impl&%0.new. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((T&. Dcr) (T& Type) (start! Poly) (length! Poly) (f! Poly)) (! (= (req%lib!spec.FloatingSeq_t.impl&%0.new. T&. T& start! length! f!) (=> %%global_location_label%%25 (<= (%I start!) (%I length!)))) :pattern ((req%lib!spec.FloatingSeq_t.impl&%0.new. T&. T& start! length! f!)) )))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%0.new.))
(declare-fun %%lambda%%3 (Int %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1) i$) (%%apply%%0 %%hole%%1 (I (Add (%I i$) %%hole%%0)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1) i$)))))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%0.new.) (forall ((T&. Dcr) (T& Type) (start! Poly) (length! Poly) (f! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%0.new.? T&. T& start! length! f!) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq (%I start!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (nClip (Sub (%I length!) (%I start!)))) (Poly%fun%1. (mk_fun (%%lambda%%3 (%I start!) (%Poly%fun%1. f!))))))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.new.? T&. T& start! length! f!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (start! Poly) (length! Poly) (f! Poly)) (! (=> (and (has_type start! NAT) (has_type length! NAT) (has_type f! (TYPE%fun%1. $ INT T&. T&))) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!spec.FloatingSeq_t.impl&%0.new.? T&. T& start! length! f!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. T&. T&))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.new.? T&. T& start! length! f!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state.) (forall ((no%param Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state.? no%param) (lib!spec.MapSpec_t.PersistentState./PersistentState (%Poly%lib!spec.MapSpec_t.MapSpec.State. (Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.my_init.? (I 0)))))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize.) (forall ((post! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize.? post!) (let ((update_tmp_versions$ (lib!spec.FloatingSeq_t.impl&%0.new.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (I 0) (I 1) (Poly%fun%1. (mk_fun (%%lambda%%2 (Poly%lib!spec.MapSpec_t.PersistentState. (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_persistent_state.? (I 0))))))))) (let ((update_tmp_async_ephemeral$ (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? (I 0)))) (let ((update_tmp_sync_requests$ (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.empty.? $ NAT $ NAT)))) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/sync_requests (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_sync_requests$) (and (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/async_ephemeral (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_async_ephemeral$) (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State/versions (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)) update_tmp_versions$))))))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize.? post!)) ))))
(declare-fun req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.initialize. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (= (req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.initialize. post!) (=> %%global_location_label%%26 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.initialize.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!)))) :pattern ((req%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.initialize. post!)) )))
(declare-fun ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.initialize. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.) Bool)
(assert (forall ((post! lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) (! (= (ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.initialize. post!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%5.init.? (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. post!))) :pattern ((ens%lib!spec.MapSpec_t.CrashTolerantAsyncMap.show.initialize. post!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? other! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!) (=> %%global_location_label%%27 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.))
(declare-fun %%lambda%%4 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1) k$)))))
(declare-fun %%lambda%%5 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%4 (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I lsn!) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.concat. (Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! Poly) (other! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!) (=> %%global_location_label%%28 (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) ))))
(assert (forall ((self! Poly) (other! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type other! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. (Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!) (=> %%global_location_label%%29 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%4 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I lsn!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.combine_deltas.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.combine_deltas.) (forall ((new! Poly) (old! Poly)) (! (= (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!) (%Poly%lib!spec.Messages_t.Delta. (ite (= (%Poly%lib!spec.Messages_t.Delta. new!) (lib!spec.Messages_t.nop_delta.? (I 0))) old! (ite (= (%Poly%lib!spec.Messages_t.Delta. old!) (lib!spec.Messages_t.nop_delta.? (I 0))) new! new!)))) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) ))))
(assert (forall ((new! Poly) (old! Poly)) (! (=> (and (has_type new! TYPE%lib!spec.Messages_t.Delta.) (has_type old! TYPE%lib!spec.Messages_t.Delta.)) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.apply_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.apply_delta.) (forall ((delta! Poly) (value! Poly)) (! (= (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!) (%Poly%lib!spec.Messages_t.Value. value!)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) ))))
(assert (forall ((delta! Poly) (value! Poly)) (! (=> (and (has_type delta! TYPE%lib!spec.Messages_t.Delta.) (has_type value! TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.merge.))
(define-fun is-lib!spec.Messages_t.Message./Define_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Define) c))
(define-fun is-lib!spec.Messages_t.Message./Update_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Update) c))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.merge.) (forall ((self! Poly) (new! Poly)) (! (= (lib!spec.Messages_t.impl&%1.merge.? self! new!) (let ((tmp%%$ (tuple%2./tuple%2 self! new!))) (ite (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Define_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. new_value$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((new_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly%lib!spec.Messages_t.Delta. new_delta$) (Poly%lib!spec.Messages_t.Delta. old_delta$))))))) (let ((value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? (Poly%lib!spec.Messages_t.Delta. delta$) (Poly%lib!spec.Messages_t.Value. value$))))))))))) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) ))))
(assert (forall ((self! Poly) (new! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type new! TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? self! new!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.? self!) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. self!))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (<= 0 (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_end_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.? self!) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. self!))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.? self!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_value.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.? self!) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. self!))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_key.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query.))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query.? pre! post! lbl!) (let ((update_tmp_stamped_map$ (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!)))) (and (is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (and (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!)))))) (and (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. (lib!spec.TotalKMMap_t.impl&%0.spec_index.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!))))) (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)))))))) (= (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. post!)) update_tmp_stamped_map$)))))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.? self!) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. self!))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_puts.? self!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.len. (Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.len. self!) (=> %%global_location_label%%30 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.len. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.len.? self!) (nClip (Sub (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.impl&%0.len.? self!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.len.? self!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map. (Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! Poly) (orig! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map. self! orig!) (and (=> %%global_location_label%%31 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. orig!))))) (=> %%global_location_label%%32 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map. self! orig!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.))
(declare-const fuel_nat%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map. Fuel)
(assert (forall ((self! Poly) (orig! Poly) (fuel% Fuel)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? self! orig! fuel%) (lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? self! orig! zero)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? self! orig! fuel%)) )))
(assert (forall ((self! Poly) (orig! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type orig! (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (= (lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? self! orig! (succ fuel%)) (ite (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (%Poly%lib!abstract_system.StampedMap_v.Stamped. orig!) (let ((last_lsn$ (nClip (Sub (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) 1)))) (let ((sub_map$ (lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! (I last_lsn$))) orig! fuel%))) (let ((key$ (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (I last_lsn$)))))) (let ((new_message$ (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (I last_lsn$)))))) (let ((old_message$ (lib!spec.TotalKMMap_t.impl&%0.spec_index.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. sub_map$))) (Poly%lib!spec.KeyType_t.Key. key$)))) (let ((new_value$ (lib!spec.TotalKMMap_t.impl&%0.insert.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. sub_map$))) (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. old_message$) (Poly%lib!spec.Messages_t.Message. new_message$)))))) (lib!abstract_system.StampedMap_v.Stamped./Stamped (Poly%lib!spec.TotalKMMap_t.TotalKMMap. new_value$) (%I (I (nClip (Add (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. sub_map$))) 1)))))))))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? self! orig! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.) (forall ((self! Poly) (orig! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type orig! (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (= (lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.? self! orig!) (lib!abstract_system.MsgHistory_v.impl&%0.rec%apply_to_stamped_map.? self! orig! (succ fuel_nat%lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.? self! orig!)) ))))
(assert (forall ((self! Poly) (orig! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type orig! (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.? self! orig!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.? self! orig!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history. (Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((stamped_map! Poly) (history! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history. stamped_map! history!) (and (=> %%global_location_label%%33 (lib!spec.TotalKMMap_t.impl&%0.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_map!)))) (=> %%global_location_label%%34 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? history!)) (=> %%global_location_label%%35 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? history! (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_map!))))))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history. stamped_map! history!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.) (forall ((stamped_map! Poly) (history! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? stamped_map! history!) (lib!abstract_system.MsgHistory_v.impl&%0.apply_to_stamped_map.? history! stamped_map!)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? stamped_map! history!)) ))))
(assert (forall ((stamped_map! Poly) (history! Poly)) (! (=> (and (has_type stamped_map! (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type history! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? stamped_map! history!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? stamped_map! history!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put.))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put.? pre! post! lbl!) (and (is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!))))))) (let ((update_tmp_stamped_map$ (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel/puts (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)))))) (= (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. post!)) update_tmp_stamped_map$))))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.? self!) (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. self!))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Label.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.? self!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%4.arrow_stamped_map.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as.))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as.? pre! post! lbl!) (let ((update_tmp_stamped_map$ (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!)))) (and (is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (and (= (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!))) (= (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. post!)) update_tmp_stamped_map$))))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal.))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./InternalLabel_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Label.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Label./InternalLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal.? pre! post! lbl!) (let ((update_tmp_stamped_map$ (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. pre!)))) (and (is-lib!abstract_system.AbstractMap_v.AbstractMap.Label./InternalLabel_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lbl!)) (= (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. post!)) update_tmp_stamped_map$)))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal.? pre! post! lbl!)) ))))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./query_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Step./query) c))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./put_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Step./put) c))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./freeze_as_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Step./freeze_as) c))
(define-fun is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./internal_ ((c lib!abstract_system.AbstractMap_v.AbstractMap.Step.)) Bool ((_ is lib!abstract_system.AbstractMap_v.AbstractMap.Step./internal) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./query_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. step!)) (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.query.? pre! post! label!) (ite (is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./put_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. step!)) (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.put.? pre! post! label!) (ite (is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./freeze_as_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. step!)) (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.freeze_as.? pre! post! label!) (and (is-lib!abstract_system.AbstractMap_v.AbstractMap.Step./internal_ (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Step. step!)) (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.internal.? pre! post! label!)))))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.Step.) (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? self!) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. self!))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? self!)) ))))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. (Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! Poly) (subseq! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. self! subseq!) (and (=> %%global_location_label%%36 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (=> %%global_location_label%%37 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? subseq!)))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. self! subseq!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.) (forall ((self! Poly) (subseq! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? self! subseq!) (and (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!))) (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (=> (lib!abstract_system.MsgHistory_v.impl&%0.contains.? subseq! lsn$) (and (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$) (= (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) lsn$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!))) lsn$))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? subseq! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) )))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? self! subseq!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (and (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. self!))))) (%I lsn!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? self! lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? pre! (I (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? pre! post! lbl!) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))))) (let ((update_tmp_journal$ (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? pre! post! lbl!) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!))) (and (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (I (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (let ((update_tmp_journal$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (I (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? pre! post! lbl!)) ))))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? pre! post! label!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? pre! post! label!)))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.) (forall ((post! Poly) (persistent_journal! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? post! persistent_journal!) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? persistent_journal!) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. persistent_journal!))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? post! persistent_journal!)) ))))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Config.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by.? post! step!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. step!)) (let ((persistent_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. step!)))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? post! (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. persistent_journal$))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by.? post! step!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./LoadEphemeralFromPersistentLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./LoadEphemeralFromPersistentLabel) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent.? pre! post! lbl! new_journal!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./LoadEphemeralFromPersistentLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.init_by.? new_journal! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Config. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Config./initialize (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))))))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal!)))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent.? pre! post! lbl! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.? self!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.impl&%0.arrow_v.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_ReadForRecoveryLabel_records.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery.? pre! post! lbl!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!))))))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_end_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn.? pre! post! lbl!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel (%I (I (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!))))))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_PutLabel_records.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put.? pre! post! lbl! new_journal!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) new_journal! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!))))))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal!)))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put.? pre! post! lbl! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./InternalLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./InternalLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal.? pre! post! lbl! new_journal!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./InternalLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) new_journal! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel)) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal!)))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal.? pre! post! lbl! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_sync_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence.? pre! post! lbl!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (<= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel/sync_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_new_boundary_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_max_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (frozen_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start.? pre! post! lbl! frozen_journal!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (is-core!option.Option./None_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? frozen_journal!) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. frozen_journal!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!))) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. frozen_journal!))) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. frozen_journal!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel/max_lsn (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. frozen_journal!)))) (let ((update_tmp_in_flight$ (core!option.Option./Some frozen_journal!))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$))))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start.? pre! post! lbl! frozen_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_require_end.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete.? pre! post! lbl! new_journal!) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) new_journal! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))))))))) (%I (I (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel/require_end (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!))))))) (let ((update_tmp_persistent$ (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal!)))) (let ((update_tmp_in_flight$ core!option.Option./None)) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete.? pre! post! lbl! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight.? self!) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/keep_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%4.arrow_keep_in_flight.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash.))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash.? pre! post! lbl!) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (let ((update_tmp_ephemeral$ lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown)) (let ((update_tmp_in_flight$ core!option.Option./None)) (let ((update_tmp_persistent$ (ite (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel/keep_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lbl!)) (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!)))))) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. pre!))))) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash.? pre! post! lbl!)) ))))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./read_for_recovery_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./read_for_recovery) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_end_lsn_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_end_lsn) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_lsn_persistence_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_lsn_persistence) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./crash_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./crash) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./load_ephemeral_from_persistent/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)))) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.load_ephemeral_from_persistent.? pre! post! label! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./read_for_recovery_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.read_for_recovery.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_end_lsn_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_end_lsn.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./put/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)))) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.put.? pre! post! label! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)))) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.internal.? pre! post! label! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./query_lsn_persistence_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.query_lsn_persistence.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (let ((frozen_journal$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_start/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)))) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_start.? pre! post! label! (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. frozen_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./commit_complete/0 (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)))) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.commit_complete.? pre! post! label! (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. new_journal$))) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step./crash_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step. step!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.crash.? pre! post! label!))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Step.) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_LoadEphemeralFromPersistentLabel_end_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown_ ((c lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent.? pre! post! lbl!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))) (and (let ((new_abstract_map$ (lib!abstract_system.AbstractMap_v.AbstractMap.State./State (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))))))) (and (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.init_by.? (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_abstract_map$) (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Config. (lib!abstract_system.AbstractMap_v.AbstractMap.Config./initialize (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))))))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_abstract_map$))))) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$)))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.) (has_type (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.? self!)) TYPE%lib!abstract_system.AbstractMap_v.AbstractMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.impl&%0.arrow_v.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_PutRecordsLabel_records.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ ((c lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_map! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records.? pre! post! lbl! new_map!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))) new_map! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./PutLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel/records (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!))))))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map!)))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records.? pre! post! lbl! new_map!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_QueryLabel_end_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_key.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.? self!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_value.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_map! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query.? pre! post! lbl! new_map!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))) new_map! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./QueryLabel (%I (I (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/end_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/key (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)))) (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel/value (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!))))))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query.? pre! post! lbl! new_map!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (frozen_map! Poly) (new_map! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal.? pre! post! lbl! frozen_map! new_map!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (is-core!option.Option./None_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))) new_map! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. (lib!abstract_system.AbstractMap_v.AbstractMap.Label./FreezeAsLabel (%Poly%lib!abstract_system.StampedMap_v.Stamped. frozen_map!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map!)))) (let ((update_tmp_in_flight$ (core!option.Option./Some frozen_map!))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal.? pre! post! lbl! frozen_map! new_map!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_map! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal.? pre! post! lbl! new_map!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (lib!abstract_system.AbstractMap_v.AbstractMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))) new_map! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.Label. lib!abstract_system.AbstractMap_v.AbstractMap.Label./InternalLabel)) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map!)))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal.? pre! post! lbl! new_map!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.) (<= 0 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_new_boundary_lsn.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start.? pre! post! lbl!) (let ((update_tmp_persistent$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (let ((update_tmp_in_flight$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (and (<= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))))) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel/new_boundary_lsn (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$)))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitCompleteLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitCompleteLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete.? pre! post! lbl!) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitCompleteLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))) (let ((update_tmp_persistent$ (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))))) (let ((update_tmp_in_flight$ core!option.Option./None)) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete.? pre! post! lbl!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight.? self!) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/keep_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%4.arrow_keep_in_flight.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash.))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash.? pre! post! lbl!) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (let ((update_tmp_ephemeral$ lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown)) (let ((update_tmp_in_flight$ core!option.Option./None)) (let ((update_tmp_persistent$ (ite (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel/keep_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lbl!)) (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!)))))) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. pre!))))) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash.? pre! post! lbl!)) ))))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./load_ephemeral_from_persistent_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./load_ephemeral_from_persistent) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_start_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_start) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_complete_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_complete) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./crash_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./crash) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./load_ephemeral_from_persistent_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.load_ephemeral_from_persistent.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (let ((new_map$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./put_records/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)))) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.put_records.? pre! post! label! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map$))) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (let ((new_map$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./query/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)))) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.query.? pre! post! label! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map$))) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (let ((frozen_map$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)))) (let ((new_map$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./freeze_map_internal/1 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)))) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.freeze_map_internal.? pre! post! label! (Poly%lib!abstract_system.StampedMap_v.Stamped. frozen_map$) (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map$)))) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (let ((new_map$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./ephemeral_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)))) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.ephemeral_internal.? pre! post! label! (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. new_map$))) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_start_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_start.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./commit_complete_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.commit_complete.? pre! post! label!) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step./crash_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step. step!)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.crash.? pre! post! label!)))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Step.) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent.))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly) (new_mapadt! Poly) (map_lsn! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent.? pre! post! label! new_journal! new_mapadt! map_lsn!) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!))) (and (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./LoadEphemeralFromPersistentLabel)) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./LoadEphemeralFromPersistentLabel (%I map_lsn!)))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? (I 0)))) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.empty.? $ NAT $ NAT)) (%I map_lsn!)))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$)))))))))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent.? pre! post! label! new_journal! new_mapadt! map_lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly) (new_mapadt! Poly) (records! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover.? pre! post! label! new_journal! new_mapadt! records!) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!))) (and (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? records!) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./ReadForRecoveryLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. records!)))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. records!)))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (let ((tmp%%$ (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. records!)))) (let ((tmp%%$1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. tmp%%$1))))) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. tmp%%$1))))) (%I (I tmp%%$))))))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$)))))))))))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover.? pre! post! label! new_journal! new_mapadt! records!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request.? pre! post! label!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((tmp_for_match_0$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!))) (and (and (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$)))) (is-lib!spec.MapSpec_t.AsyncMap.Label./RequestOp_ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))))) true)) (let ((req$ (ite (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$)))) (is-lib!spec.MapSpec_t.AsyncMap.Label./RequestOp_ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))) (let ((req$2 (lib!spec.MapSpec_t.AsyncMap.Label./RequestOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))))) req$2) (%Poly%lib!spec.MapSpec_t.Request. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.MapSpec_t.Request.))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))))))))))) (Poly%lib!spec.MapSpec_t.Request. req$))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (let ((tmp%%$ (let ((tmp%%$1 (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))))))))))) (Poly%lib!spec.MapSpec_t.Request. req$))))) (let ((tmp%%$2 (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))))))))) (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. tmp%%$1)) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. tmp%%$2)))))))))) (let ((tmp%%$3 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. tmp%%$)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. tmp%%$3))))) (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. tmp%%$3)))))))))))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.? self!) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.? self!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_ctam_label.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.? self!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. self!))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.? self!)) TYPE%lib!spec.MapSpec_t.AsyncMap.Label.)) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_base_op.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.? self!) (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. self!))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.? self!)) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_req.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.? self!) (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. self!))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.? self!)) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ExecuteOp_reply.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.? self!) (lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. self!))) :pattern ((lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.MapSpec_t.impl&%0.arrow_QueryInput_key.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.impl&%1.arrow_value.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.impl&%1.arrow_value.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.impl&%1.arrow_value.? self!) (lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. self!))) :pattern ((lib!spec.MapSpec_t.impl&%1.arrow_value.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.Output.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.MapSpec_t.impl&%1.arrow_value.? self!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.MapSpec_t.impl&%1.arrow_value.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly) (new_mapadt! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query.? pre! post! label! new_journal! new_mapadt!) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ ctam_label$) (let ((base_op$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. ctam_label$))))) (and (is-lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp_ base_op$) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. base_op$))))) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. base_op$))))) (and (is-lib!spec.MapSpec_t.Input./QueryInput_ (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req$)))) (and (is-lib!spec.MapSpec_t.Output./QueryOutput_ (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (let ((key$ (lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req$)))))))) (let ((value$ (lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply$)))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Request. req$)) (and (= (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req$))) (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Reply. reply$))) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./QueryLabel (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. key$)) (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$))))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Request. req$))) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Reply. reply$)))))) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$)))))))))))))))))))))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query.? pre! post! label! new_journal! new_mapadt!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.) (forall ((lsn! Poly) (msg! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.? lsn! msg!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) lsn! msg!)) (%I lsn!) (%I (I (nClip (Add (%I lsn!) 1)))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.? lsn! msg!)) ))))
(assert (forall ((lsn! Poly) (msg! Poly)) (! (=> (and (has_type lsn! NAT) (has_type msg! TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.? lsn! msg!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.? lsn! msg!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put.))
(define-fun is-lib!spec.MapSpec_t.Request./Request_ ((c lib!spec.MapSpec_t.Request.)) Bool ((_ is lib!spec.MapSpec_t.Request./Request) c))
(define-fun is-lib!spec.MapSpec_t.Reply./Reply_ ((c lib!spec.MapSpec_t.Reply.)) Bool ((_ is lib!spec.MapSpec_t.Reply./Reply) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly) (new_mapadt! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put.? pre! post! label! new_journal! new_mapadt!) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((tmp_for_match_0$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!))) (and (and (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$)))) (is-lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp_ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))))) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))))) true))) (let ((tmp%%$ (ite (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$)))) (is-lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp_ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))) (let ((req$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/req (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))))) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ExecuteOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))))))))) (tuple%2./tuple%2 (Poly%lib!spec.MapSpec_t.Request. req$) (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!spec.MapSpec_t.Request. $ TYPE%lib!spec.MapSpec_t.Reply.)))))) (let ((req$ (%Poly%lib!spec.MapSpec_t.Request. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((reply$ (%Poly%lib!spec.MapSpec_t.Reply. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_for_match_1$ req$)) (and (and (and (is-lib!spec.MapSpec_t.Request./Request_ tmp_for_match_1$) (is-lib!spec.MapSpec_t.Input./PutInput_ (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$))))) (let ((key$ (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$)))))))) (let ((value$ (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$)))))))) (let ((request_id$ (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$))))) true)))) (let ((tmp%%$1 (ite (and (is-lib!spec.MapSpec_t.Request./Request_ tmp_for_match_1$) (is-lib!spec.MapSpec_t.Input./PutInput_ (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$))))) (let ((key$ (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$)))))))) (let ((value$ (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$)))))))) (let ((request_id$ (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. tmp_for_match_1$))))) (tuple%3./tuple%3 (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Value. value$) (I request_id$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Value. $ (UINT 64))))))) (let ((key$ (%Poly%lib!spec.KeyType_t.Key. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((value$ (%Poly%lib!spec.Messages_t.Value. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((request_id$ (%I (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$1)))))) (let ((tmp_for_match_2$ reply$)) (and (and (and (is-lib!spec.MapSpec_t.Reply./Reply_ tmp_for_match_2$) (is-lib!spec.MapSpec_t.Output./PutOutput_ (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. tmp_for_match_2$))))) (let ((reply_id$ (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. tmp_for_match_2$))))) true)) (let ((reply_id$ (ite (and (is-lib!spec.MapSpec_t.Reply./Reply_ tmp_for_match_2$) (is-lib!spec.MapSpec_t.Output./PutOutput_ (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. tmp_for_match_2$))))) (let ((reply_id$2 (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. tmp_for_match_2$))))) reply_id$2) (%I (vstd!pervasive.arbitrary.? $ (UINT 64)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Request. req$)) (and (= (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req$))) (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply$)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Reply. reply$))) (let ((keyed_message$ (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. key$)) (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$)))))))) (let ((singleton$ (lib!abstract_system.MsgHistory_v.impl&%0.singleton_at.? (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))) (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. keyed_message$)))) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./PutLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. singleton$))))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./PutRecordsLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. singleton$))))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!spec.MapSpec_t.Request. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Request. req$))) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Reply. reply$)))))) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (%I (I (nClip (Add (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))) 1))))))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$)))))))))))))))))))))))))))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put.? pre! post! label! new_journal! new_mapadt!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.? self!) (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. self!))) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.AsyncMap.Label.) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.? self!)) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((lib!spec.MapSpec_t.AsyncMap.impl&%4.arrow_ReplyOp_reply.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply.? pre! post! label!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp_ ctam_label$) (let ((base_op$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./OperateOp/base_op (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. ctam_label$))))) (and (is-lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp_ base_op$) (let ((reply$ (lib!spec.MapSpec_t.AsyncMap.Label./ReplyOp/reply (%Poly%lib!spec.MapSpec_t.AsyncMap.Label. (Poly%lib!spec.MapSpec_t.AsyncMap.Label. base_op$))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Reply. reply$)) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (let ((tmp%%$ (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!spec.MapSpec_t.Reply. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/replies (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))))) (Poly%lib!spec.MapSpec_t.Reply. reply$))))) (let ((tmp%%$1 (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (lib!spec.MapSpec_t.EphemeralState./EphemeralState (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Request.>. (lib!spec.MapSpec_t.EphemeralState./EphemeralState/requests (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. tmp%%$1))))) (%Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. (Poly%vstd!set.Set<lib!spec.MapSpec_t.Reply.>. tmp%%$))))))) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$))))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal.? pre! post! label! new_journal!) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ ctam_label$) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./InternalLabel)) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$)))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal.? pre! post! label! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_mapadt! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal.? pre! post! label! new_mapadt!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ ctam_label$) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./InternalLabel)) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$)))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal.? pre! post! label! new_mapadt!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.? self!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. self!))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (<= 0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.? self!))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReqSyncOp_sync_req_id.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync.? pre! post! label! new_journal!) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp_ ctam_label$) (let ((sync_req_id$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReqSyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. ctam_label$))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (I sync_req_id$))) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryEndLsnLabel (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))) (I sync_req_id$) (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))) (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$)))))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync.? pre! post! label! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.? self!) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. self!))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.) (<= 0 (lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.? self!))) :pattern ((lib!spec.MapSpec_t.CrashTolerantAsyncMap.impl&%4.arrow_ReplySyncOp_sync_req_id.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync.? pre! post! label! new_journal!) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp_ ctam_label$) (let ((sync_req_id$ (lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./ReplySyncOp/sync_req_id (%Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. ctam_label$))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (I sync_req_id$)) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./QueryLsnPersistenceLabel (%I (vstd!map.impl&%0.index.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))) (I sync_req_id$)))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_ephemeral$ (core!option.Option./Some (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$))))) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))) (I sync_req_id$))) (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$)))))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync.? pre! post! label! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_boundary_lsn! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start.? pre! post! label! new_boundary_lsn!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ ctam_label$) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitStartLabel (%I new_boundary_lsn!) (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitStartLabel (%I new_boundary_lsn!)))) (let ((update_tmp_superblock_in_flight$ true)) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start.? pre! post! label! new_boundary_lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands.? pre! post! label!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./SyncOp_ ctam_label$) (and (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)) (let ((update_tmp_superblock_in_flight$ false)) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_mapadt! Poly) (new_journal! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete.? pre! post! label! new_mapadt! new_journal!) (let ((update_tmp_ephemeral$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (let ((update_tmp_superblock_in_flight$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))) (and (not (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) (and (let ((pre_ephemeral$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))))) (let ((ctam_label$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!)))) (and (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./Noop_ ctam_label$) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CommitCompleteLabel (%I (I (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. pre_ephemeral$)))))))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CommitCompleteLabel)) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$))))))))) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete.? pre! post! label! new_mapadt! new_journal!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash.) (forall ((pre! Poly) (post! Poly) (label! Poly) (new_journal! Poly) (new_mapadt! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash.? pre! post! label! new_journal! new_mapadt!) (let ((tmp_for_match_0$ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. label!))) (and (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label_ tmp_for_match_0$) (is-lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label./CrashOp_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. tmp_for_match_0$))))) (let ((keep_in_flight$ (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))) (not (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!)))))) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_journal! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Label./CrashLabel (%B (B keep_in_flight$))))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.next.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. pre!))) new_mapadt! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Label./CrashLabel (%B (B keep_in_flight$))))) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal!))) (let ((update_tmp_mapadt$ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt!))) (let ((update_tmp_ephemeral$ core!option.Option./None)) (let ((update_tmp_superblock_in_flight$ false)) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$)))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash.? pre! post! label! new_journal! new_mapadt!)) ))))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./accept_request_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./accept_request) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./deliver_reply_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./deliver_reply) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./superblock_write_lands_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./superblock_write_lands) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete) c))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((map_lsn$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./load_ephemeral_from_persistent/2 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.load_ephemeral_from_persistent.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$) (I map_lsn$))))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((records$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./recover/2 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.recover.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. records$))))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./accept_request_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.accept_request.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./query/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.query.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$)))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./put/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.put.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$)))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./deliver_reply_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.deliver_reply.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./journal_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.journal_internal.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./map_internal/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.map_internal.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./req_sync/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.req_sync.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./reply_sync/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.reply_sync.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_boundary_lsn$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_start/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_start.? pre! post! label! (I new_boundary_lsn$))) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./superblock_write_lands_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.superblock_write_lands.? pre! post! label!) (ite (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./commit_complete/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.commit_complete.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$) (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$)))) (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)) (let ((new_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (let ((new_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step./crash/1 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.crash.? pre! post! label! (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. new_journal$) (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. new_mapadt$))))))))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by.? pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Step.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.next.? pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize.) (forall ((post! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize.? post!) (let ((update_tmp_persistent$ (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (%I (I 0)) (%I (I 0))))) (let ((update_tmp_ephemeral$ lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Unknown)) (let ((update_tmp_in_flight$ core!option.Option./None)) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. post!)) update_tmp_persistent$))))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize.? post!)) ))))
(define-fun is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./initialize_ ((c lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by.? post! step!) (and (is-lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config./initialize_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config. step!)) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.initialize.? post!))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by.? post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init.) (forall ((post! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.Config.) (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by.? post! step$)) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init_by.? post! step$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init.? post!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.StampedMap_v.empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.StampedMap_v.empty.) (forall ((no%param Poly)) (! (= (lib!abstract_system.StampedMap_v.empty.? no%param) (lib!abstract_system.StampedMap_v.Stamped./Stamped (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.TotalKMMap_t.impl&%0.empty.? (I 0))) (%I (I 0)))) :pattern ((lib!abstract_system.StampedMap_v.empty.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.empty.? no%param)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.StampedMap_v.empty.? no%param)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize.) (forall ((post! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize.? post!) (let ((update_tmp_persistent$ (lib!abstract_system.StampedMap_v.empty.? (I 0)))) (let ((update_tmp_ephemeral$ lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Unknown)) (let ((update_tmp_in_flight$ core!option.Option./None)) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_ephemeral$) (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. post!)) update_tmp_persistent$))))))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize.? post!)) ))))
(define-fun is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./initialize_ ((c lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by.? post! step!) (and (is-lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config./initialize_ (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config. step!)) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.initialize.? post!))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by.? post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init.) (forall ((post! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.Config.) (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by.? post! step$)) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init_by.? post! step$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init.? post!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize.) (forall ((post! Poly) (state! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize.? post! state!) (and (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.impl&%5.init.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. state!)))) (and (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.impl&%5.init.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. state!)))) (let ((update_tmp_journal$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. state!)))) (let ((update_tmp_mapadt$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. state!)))) (let ((update_tmp_ephemeral$ core!option.Option./None)) (let ((update_tmp_superblock_in_flight$ false)) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_superblock_in_flight$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_ephemeral$) (and (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_mapadt$) (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. post!)) update_tmp_journal$))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize.? post! state!)) ))))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by.? post! step!) (and (is-lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. step!)) (let ((state$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config./initialize/0 (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config. step!)))) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.initialize.? post! (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. state$))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by.? post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init.) (forall ((post! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Config.) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by.? post! step$)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init_by.? post! step$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%5.init.? post!)) ))))
(assert (fuel_bool_default fuel%vstd!map.check_argument_is_map.))
(assert (=> (fuel_bool fuel%vstd!map.check_argument_is_map.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly)) (! (= (vstd!map.check_argument_is_map.? K&. K& V&. V& m!) m!) :pattern ((vstd!map.check_argument_is_map.? K&. K& V&. V& m!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.check_argument_is_map.? K&. K& V&. V& m!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.check_argument_is_map.? K&. K& V&. V& m!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.? self!) (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label./Label/ctam_label (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label. self!))) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.Label.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.? self!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.Label.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.impl&%4.arrow_Label_ctam_label.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf.? self!) (=> (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. self!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. self!)))))) :pattern ((lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i. (Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i. self!) (=> %%global_location_label%%38 (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. self!))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. self!))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf.? self!) (and (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. self!)))) (lib!abstract_system.AbstractCrashAwareJournal_v.impl&%1.wf.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. self!))))) (=> (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. self!))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i. (Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i. self!) (=> %%global_location_label%%39 (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. self!))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? self!) (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. self!))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? self!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf.? self!) (and (and (lib!spec.TotalKMMap_t.impl&%0.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. self!)))))) (let ((tmp%%$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. self!)))) (=> (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ tmp%%$) (let ((v$ (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. tmp%%$))))) (lib!spec.TotalKMMap_t.impl&%0.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. v$))))))))))) (let ((tmp%%$ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. self!)))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((v$ (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (lib!spec.TotalKMMap_t.impl&%0.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. v$))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end. (Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end. self!) (and (=> %%global_location_label%%40 (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (=> %%global_location_label%%41 (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (<= 0 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.))
(define-fun is-lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known_ ((c lib!abstract_system.AbstractCrashAwareSystem_v.Known.)) Bool ((_ is lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? self!) (let ((tmp%%$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (and (and (is-core!option.Option./Some_ tmp%%$) (is-lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (not (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!) (and (and (and (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.wf.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.wf.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (= (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (= (is-lib!abstract_system.AbstractCrashAwareJournal_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (is-lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (=> (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry.? self!) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!) (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!) (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry. (Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry. self!) (and (=> %%global_location_label%%42 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!)) (=> %%global_location_label%%43 (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? self!) (and (and (and (and (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))) (<= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))) (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))) (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!))) (= (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/map_lsn (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractMap_v.AbstractMap.State./State/stamped_map (%Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (Poly%lib!abstract_system.AbstractMap_v.AbstractMap.State. (lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral./Known/v (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.Ephemeral. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree. (Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((j0! Poly) (j1! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree. j0! j1!) (and (=> %%global_location_label%%44 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? j0!)) (=> %%global_location_label%%45 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? j1!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree. j0! j1!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.) (forall ((j0! Poly) (j1! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.? j0! j1!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (=> (and (lib!abstract_system.MsgHistory_v.impl&%0.contains.? j0! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? j1! lsn$)) (= (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. j0!))) lsn$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. j1!))) lsn$)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? j0! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? j1! lsn$)) ))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.? j0! j1!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement. (Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement. self!) (and (=> %%global_location_label%%46 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!)) (=> %%global_location_label%%47 (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (=> %%global_location_label%%48 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? self!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement.? self!) (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%1.i.? (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry. (Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry. self!) (and (=> %%global_location_label%%49 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!)) (=> %%global_location_label%%50 (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (=> %%global_location_label%%51 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.? self!) (and (<= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!)) (<= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement. (Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement. self!) (and (=> %%global_location_label%%52 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!)) (=> %%global_location_label%%53 (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (=> %%global_location_label%%54 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? self!)) (=> %%global_location_label%%55 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!)) (=> %%global_location_label%%56 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.? self!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement.? self!) (= (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))) (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry. (Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry. self!) (=> %%global_location_label%%57 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.? self!) (let ((if_map$ (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) (let ((if_journal$ (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) (and (and (and (and (and (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!) (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? self!)) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. if_journal$) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. if_map$)))))) (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. if_journal$))))) (<= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. if_map$))))) (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. if_journal$))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.ephemeral_seq_end.? self!)))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement. (Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement. self!) (and (=> %%global_location_label%%58 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!)) (=> %%global_location_label%%59 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.? self!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement.? self!) (let ((if_map$ (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) (let ((if_journal$ (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) (and (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. if_journal$) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_overlaps_agree.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. if_journal$) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) (= if_map$ (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. if_map$)))))))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? self!) (and (and (and (and (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.wf.? self!) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_persistent_journal_geometry.? self!)) (=> (is-core!option.Option./None_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) (and (not (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!)) (not (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!))))) (=> (is-core!option.Option./Some_ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) (and (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_geometry.? self!) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_ephemeral_value_agreement.? self!)) (=> (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!) (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_geometry.? self!) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_frozen_map_value_agreement.? self!)))))) (=> (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/superblock_in_flight (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!))) (=> (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.commit_started.? self!) (and (and (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.map_is_frozen.? self!) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_geometry.? self!)) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv_commit_started_value_agreement.? self!))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? self!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version.? self!) (lib!spec.MapSpec_t.PersistentState./PersistentState (%Poly%lib!spec.MapSpec_t.MapSpec.State. (Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.MapSpec.State./State (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. self!)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version.? self!)) ))))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((base! Poly) (msg_history! Poly) (stable_lsn! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions. base! msg_history! stable_lsn!) (and (=> %%global_location_label%%60 (lib!spec.TotalKMMap_t.impl&%0.wf.? (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. base!)))) (=> %%global_location_label%%61 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? msg_history!)) (=> %%global_location_label%%62 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? msg_history! (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. base!))))) (=> %%global_location_label%%63 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? msg_history! stable_lsn!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions. base! msg_history! stable_lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.))
(declare-fun %%lambda%%7 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (lsn$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1) lsn$) (Poly%lib!spec.MapSpec_t.PersistentState. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%3.to_version.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? %%hole%%1 (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? %%hole%%0 (I (nClip (%I lsn$)))))))))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1) lsn$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.) (forall ((base! Poly) (msg_history! Poly) (stable_lsn! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? base! msg_history! stable_lsn!) (lib!spec.FloatingSeq_t.impl&%0.new.? $ TYPE%lib!spec.MapSpec_t.PersistentState. stable_lsn! (I (nClip (Add (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msg_history!)) 1))) (Poly%fun%1. (mk_fun (%%lambda%%7 msg_history! base!))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? base! msg_history! stable_lsn!)) ))))
(assert (forall ((base! Poly) (msg_history! Poly) (stable_lsn! Poly)) (! (=> (and (has_type base! (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!spec.TotalKMMap_t.TotalKMMap.)) (has_type msg_history! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type stable_lsn! NAT)) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? base! msg_history! stable_lsn!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? base! msg_history! stable_lsn!)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight. (Poly) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight. self!) (and (=> %%global_location_label%%64 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? self!)) (=> %%global_location_label%%65 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? self!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? self!) (let ((in_flight_map$ (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) (let ((remaining_journal$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. in_flight_map$))))))) (let ((stable_lsn$ (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))))) (let ((tmp%%$ (vstd!pervasive.spec_affirm.? (B (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. remaining_journal$)))))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? (Poly%lib!abstract_system.StampedMap_v.Stamped. in_flight_map$) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. remaining_journal$) (I stable_lsn$))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? self!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? self!)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed. (Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed. self!) (=> %%global_location_label%%66 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? self!))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? self!) (let ((stable_lsn$ (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (I stable_lsn$)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? self!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? self!)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known. (Poly) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known. self!) (and (=> %%global_location_label%%67 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? self!)) (=> %%global_location_label%%68 (let ((tmp%%$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (and (is-core!option.Option./Some_ tmp%%$) (is-lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.? self!) (ite (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? self!) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? self!) (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? self!))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.? self!)) (TYPE%lib!spec.FloatingSeq_t.FloatingSeq. $ TYPE%lib!spec.MapSpec_t.PersistentState.))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.? self!)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i. (Poly) Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i. self!) (=> %%global_location_label%%69 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? self!))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i. self!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.? self!) (let ((stable_lsn$ (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))) (let ((tmp%%$ (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/ephemeral (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (ite (and (is-core!option.Option./Some_ tmp%%$) (is-lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known_ (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (let ((progress$ (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/progress (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (let ((sync_reqs$ (lib!abstract_system.AbstractCrashAwareSystem_v.Known./Known/sync_reqs (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.Known. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known.? self!))) (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. progress$)) (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. sync_reqs$))))) (let ((tmp%%$1 (vstd!pervasive.spec_affirm.? (B (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))))))) (lib!spec.MapSpec_t.CrashTolerantAsyncMap.State./State (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.floating_versions.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (I stable_lsn$)))) (%Poly%lib!spec.MapSpec_t.EphemeralState. (Poly%lib!spec.MapSpec_t.EphemeralState. (lib!spec.MapSpec_t.AsyncMap.impl&%5.init_ephemeral_state.? (I 0)))) (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.empty.? $ NAT $ NAT)))))))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) (has_type (Poly%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.? self!)) TYPE%lib!spec.MapSpec_t.CrashTolerantAsyncMap.State.)) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.i.? self!)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((jlong! Poly) (jshort! Poly) (start_lsn! Poly)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal. jlong! jshort! start_lsn!) (and (=> %%global_location_label%%70 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? jlong! start_lsn!)) (=> %%global_location_label%%71 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? jshort! start_lsn!)))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal. jlong! jshort! start_lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal.) (forall ((jlong! Poly) (jshort! Poly) (start_lsn! Poly)) (! (= (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal.? jlong! jshort! start_lsn!) (and (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? jlong! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. jshort!)))) (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? jlong! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. jshort!)))) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. jshort!)))) :pattern ((lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_extends_journal.? jlong! jshort! start_lsn!)) ))))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.ext_equal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.ext_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.ext_equal.? self! other!) (and (and (ext_eq false (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.ext_equal.? self! other!)) ))))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0._dr. (Poly Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0._dr. self! lsn!) (=> %%global_location_label%%72 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0._dr. self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0._dr.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0._dr.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0._dr.? self! lsn!) (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0._dr.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0._dr.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0._dr.? self! lsn!)) )))
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0._do. (Poly Poly) Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0._do. self! lsn!) (=> %%global_location_label%%73 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0._do. self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0._do.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0._do.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0._do.? self! lsn!) (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0._do.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0._do.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0._do.? self! lsn!)) )))
(assert (fuel_bool_default fuel%lib!abstract_system.StampedMap_v.impl&%0.ext_equal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.StampedMap_v.impl&%0.ext_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.StampedMap_v.impl&%0.ext_equal.? self! other!) (and (ext_eq false (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. self!))))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. other!)))))) (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. self!)) (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. other!))))) :pattern ((lib!abstract_system.StampedMap_v.impl&%0.ext_equal.? self! other!)) ))))
(assert (fuel_bool_default fuel%lib!spec.TotalKMMap_t.impl&%0.ext_equal.))
(assert (=> (fuel_bool fuel%lib!spec.TotalKMMap_t.impl&%0.ext_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!spec.TotalKMMap_t.impl&%0.ext_equal.? self! other!) (ext_eq false (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. self!))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!spec.TotalKMMap_t.TotalKMMap./TotalKMMap/0 (%Poly%lib!spec.TotalKMMap_t.TotalKMMap. other!))))) :pattern ((lib!spec.TotalKMMap_t.impl&%0.ext_equal.? self! other!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.impl&%2.ext_equal.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.impl&%2.ext_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!spec.MapSpec_t.impl&%2.ext_equal.? self! other!) (lib!spec.TotalKMMap_t.impl&%0.ext_equal.? (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. (Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.PersistentState./PersistentState/appv (%Poly%lib!spec.MapSpec_t.PersistentState. self!)))))) (Poly%lib!spec.TotalKMMap_t.TotalKMMap. (lib!spec.MapSpec_t.MapSpec.State./State/kmmap (%Poly%lib!spec.MapSpec_t.MapSpec.State. (Poly%lib!spec.MapSpec_t.MapSpec.State. (lib!spec.MapSpec_t.PersistentState./PersistentState/appv (%Poly%lib!spec.MapSpec_t.PersistentState. other!)))))))) :pattern ((lib!spec.MapSpec_t.impl&%2.ext_equal.? self! other!)) ))))
(assert (fuel_bool_default fuel%lib!spec.FloatingSeq_t.impl&%1.ext_equal.))
(assert (=> (fuel_bool fuel%lib!spec.FloatingSeq_t.impl&%1.ext_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!spec.FloatingSeq_t.impl&%1.ext_equal.? self! other!) (and (and (= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. self!)) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. other!))) (= (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. self!) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. other!))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (lib!spec.FloatingSeq_t.impl&%0.is_active.? $ TYPE%lib!spec.MapSpec_t.PersistentState. self! i$) (lib!spec.MapSpec_t.impl&%2.ext_equal.? (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. self! i$) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. other! i$)))) :pattern ((lib!spec.MapSpec_t.impl&%2.ext_equal.? (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. self! i$) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. other! i$))) )))) :pattern ((lib!spec.FloatingSeq_t.impl&%1.ext_equal.? self! other!)) ))))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.impl&%0.arrow_value.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.impl&%0.arrow_value.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.impl&%0.arrow_value.? self!) (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. self!))) :pattern ((lib!spec.MapSpec_t.impl&%0.arrow_value.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.MapSpec_t.impl&%0.arrow_value.? self!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.MapSpec_t.impl&%0.arrow_value.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.))
(assert (=> (fuel_bool fuel%lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.) (forall ((self! Poly)) (! (= (lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.? self!) (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. self!))) :pattern ((lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.MapSpec_t.impl&%0.arrow_PutInput_key.? self!)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. (lib!abstract_system.StampedMap_v.Stamped. lib!abstract_system.MsgHistory_v.MsgHistory. lib!abstract_system.MsgHistory_v.MsgHistory.) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((x! lib!abstract_system.StampedMap_v.Stamped.) (y! lib!abstract_system.MsgHistory_v.MsgHistory.) (z! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. x! y! z!) (and (=> %%global_location_label%%74 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y!))) (=> %%global_location_label%%75 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. z!))) (=> %%global_location_label%%76 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y!) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. x!)))))) (=> %%global_location_label%%77 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. z!) (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y!)))))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. x! y! z!)) )))
(declare-fun ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. (lib!abstract_system.StampedMap_v.Stamped. lib!abstract_system.MsgHistory_v.MsgHistory. lib!abstract_system.MsgHistory_v.MsgHistory.) Bool)
(assert (forall ((x! lib!abstract_system.StampedMap_v.Stamped.) (y! lib!abstract_system.MsgHistory_v.MsgHistory.) (z! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. x! y! z!) (= (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. x!) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. z!)) (lib!abstract_system.MsgHistory_v.impl&%0.map_plus_history.? (Poly%lib!abstract_system.StampedMap_v.Stamped. x!) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y!) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. z!)))))) :pattern ((ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. x! y! z!)) )))
(declare-fun req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.lemma_iversions_known_inflight_landed_relation. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((self! lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.lemma_iversions_known_inflight_landed_relation. self!) (and (=> %%global_location_label%%78 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) (=> %%global_location_label%%79 (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) :pattern ((req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.lemma_iversions_known_inflight_landed_relation. self!)) )))
(declare-fun ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.lemma_iversions_known_inflight_landed_relation. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.) Bool)
(assert (forall ((self! lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)) (! (= (ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.lemma_iversions_known_inflight_landed_relation. self!) (and (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (= (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ INT) (=> (and (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (%I lsn$)) (< (%I lsn$) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (= (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)) )))) :pattern ((ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.lemma_iversions_known_inflight_landed_relation. self!)) )))
(declare-const self! lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.)
(declare-const lsn@ Poly)
(declare-const tmp%1 lib!abstract_system.StampedMap_v.Stamped.)
(declare-const tmp%2 Bool)
(declare-const in_flight_map@ lib!abstract_system.StampedMap_v.Stamped.)
(declare-const remaining_journal@ lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-const in_flight_journal@ lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-const remaining_journal_discarded@ lib!abstract_system.MsgHistory_v.MsgHistory.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!) TYPE%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State.))
(assert (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%5.inv.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))
(assert (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.inflight_is_on_disk.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(assert (not (and (=> (has_type lsn@ INT) (=> (and (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (%I lsn@)) (< (%I lsn@) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (=> (= in_flight_map@ (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))))))) (=> (= remaining_journal@ (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. in_flight_map@)))))) (=> (= in_flight_journal@ (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (I (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/in_flight (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))))))))))) (=> (= remaining_journal_discarded@ (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. remaining_journal@) (I (nClip (%I lsn@))))) (=> (= tmp%1 (lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State./State/persistent (%Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (Poly%lib!abstract_system.AbstractCrashAwareMap_v.CrashTolerantMap.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/mapadt (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) (and (=> %%location_label%%0 (req%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. tmp%1 in_flight_journal@ remaining_journal_discarded@)) (=> (ens%lib!abstract_system.AbstractCrashAwareSystemRefinement_v.journal_associativity. tmp%1 in_flight_journal@ remaining_journal_discarded@) (=> (= tmp%2 (ext_eq false TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. in_flight_journal@) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. remaining_journal_discarded@))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%0.i.? (Poly%lib!abstract_system.AbstractCrashAwareJournal_v.CrashTolerantJournal.State. (lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State./State/journal (%Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (I (nClip (%I lsn@))))))) (and (=> %%location_label%%1 tmp%2) (=> tmp%2 (=> %%location_label%%2 (= (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn@) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn@))))))))))))))) (=> (forall ((lsn$ Poly)) (! (=> (has_type lsn$ INT) (=> (and (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (%I lsn$)) (< (%I lsn$) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (= (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)) )) (and (=> %%location_label%%3 (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))))) (and (=> %%location_label%%4 (= (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (=> %%location_label%%5 (forall ((lsn$ Poly)) (! (=> (has_type lsn$ INT) (=> (and (<= (lib!spec.FloatingSeq_t.FloatingSeq./FloatingSeq/start (%Poly%lib!spec.FloatingSeq_t.FloatingSeq. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))))) (%I lsn$)) (< (%I lsn$) (lib!spec.FloatingSeq_t.impl&%0.len.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!)))))) (= (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$) (lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)))) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_landed.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)) :pattern ((lib!spec.FloatingSeq_t.impl&%0.spec_index.? $ TYPE%lib!spec.MapSpec_t.PersistentState. (Poly%lib!spec.FloatingSeq_t.FloatingSeq. (lib!abstract_system.AbstractCrashAwareSystemRefinement_v.impl&%2.iversions_known_inflight.? (Poly%lib!abstract_system.AbstractCrashAwareSystem_v.CoordinationSystem.State. self!))) lsn$)) )))))))))
(check-sat)
(exit)
