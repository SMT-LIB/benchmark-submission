(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module zookeeper_controller::exec::resource::common'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map_values. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.check_argument_is_seq. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%1.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%3.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%5.view. FuelId)
(declare-const fuel%vstd!view.impl&%11.view. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_labels. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_service. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.default. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.kind. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports. FuelId)
(declare-const fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.default. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.kind. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.map_values. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.check_argument_is_seq. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%1.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%3.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%5.view. fuel%vstd!view.impl&%11.view. fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels. fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_labels. fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references. fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_service. fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name. fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels. fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations. fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.default. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.kind. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports. fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector. fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed. fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref. fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.default. fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.kind.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. 0)
(declare-sort vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. 0)
(declare-sort vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. 0)
(declare-sort vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. 0)
(declare-sort vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. 0)
(declare-sort vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. 0)
(declare-sort vstd!string.String. 0)
(declare-sort zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. 0)
(declare-sort zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. 0)
(declare-sort zookeeper_controller!kubernetes_api_objects.exec.service.Service. 0)
(declare-sort zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. 0)
(declare-sort zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. 0)
(declare-sort zookeeper_controller!vstd_ext.string_map.StringMap. 0)
(declare-sort zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. 0)
(declare-sort zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. 0)
(declare-datatypes ((core!option.Option. 0) (zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. 0) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind. 0) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. 0) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. 0) (zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. 0) (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. 0) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. 0) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. 0) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. 0) (zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. 0) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. 0) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. 0) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. 0) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. 0) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. 0) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView./AffinityView )) ((zookeeper_controller!kubernetes_api_objects.spec.common.Kind./ConfigMapKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./DaemonSetKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./PersistentVolumeClaimKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./PodKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./RoleKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./RoleBindingKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./StatefulSetKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./ServiceKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./ServiceAccountKind ) (zookeeper_controller!kubernetes_api_objects.spec.common.Kind./SecretKind )) ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp core!option.Option.))) ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind zookeeper_controller!kubernetes_api_objects.spec.common.Kind.) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name Poly) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid Int))) ((zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView./EmptyStatusView )) ((zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests core!option.Option.))) ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/?metadata zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/?spec core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/?status core!option.Option.))) ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?cluster_ip core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?ports core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?selector core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?publish_not_ready_addresses core!option.Option.))) ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?name core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?port Int) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?app_protocol core!option.Option.) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?protocol core!option.Option.))) ((zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView./TolerationView )) ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/?metadata zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/?spec zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/?status core!option.Option.))) ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?replicas Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?image Poly) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?ports zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?conf zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?persistence zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?resources core!option.Option.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?affinity core!option.Option.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?tolerations core!option.Option.) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?node_selector Poly) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?labels Poly) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?annotations Poly))) ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?client Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?quorum Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?leader_election Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?metrics Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?admin_server Int))) ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?init_limit Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?tick_time Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?sync_limit Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?global_outstanding_limit Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?pre_alloc_size Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?snap_count Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?commit_log_count Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?snap_size_limit_in_kb Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?max_cnxns Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?max_client_cnxns Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?min_session_timeout Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?max_session_timeout Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?auto_purge_snap_retain_count Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?auto_purge_purge_interval Int) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?quorum_listen_on_all_ips Bool))) ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/?enabled Bool) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/?storage_size Poly) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/?storage_class_name Poly))) ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView./ZookeeperClusterStatusView (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView./ZookeeperClusterStatusView/?ready_replicas Int))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) zookeeper_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Int)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/metadata (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/spec (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/name (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/port (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) Int)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/app_protocol (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) core!option.Option.)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/protocol (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) core!option.Option.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/status (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) core!option.Option.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/replicas (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/image (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) Poly)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/ports (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/conf (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/persistence (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/resources (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/affinity (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/tolerations (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) core!option.Option.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/node_selector (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) Poly)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) Poly)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) Poly)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/client (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/quorum (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/leader_election (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/metrics (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/admin_server (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/init_limit (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/tick_time (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/sync_limit (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/global_outstanding_limit (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/pre_alloc_size (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/snap_count (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/commit_log_count (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/snap_size_limit_in_kb (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_cnxns (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_client_cnxns (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/min_session_timeout (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_session_timeout (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/auto_purge_snap_retain_count (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/auto_purge_purge_interval (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Int)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/quorum_listen_on_all_ips (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Bool)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/enabled (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) Bool)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_size (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) Poly)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_class_name (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) Poly)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView./ZookeeperClusterStatusView/ready_replicas (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.) Int)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%vstd!string.String. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. Type)
(declare-const TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. Type)
(declare-const TYPE%zookeeper_controller!vstd_ext.string_map.StringMap. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. (alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>.)
(declare-fun Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (Poly) vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)
(declare-fun Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. (vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. (Poly) vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>.)
(declare-fun Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly) vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-fun Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. (vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. (Poly) vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>.)
(declare-fun Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly) vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)
(declare-fun Poly%vstd!string.String. (vstd!string.String.) Poly)
(declare-fun %Poly%vstd!string.String. (Poly) vstd!string.String.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (Poly) zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (Poly) zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (zookeeper_controller!kubernetes_api_objects.exec.service.Service.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly) zookeeper_controller!kubernetes_api_objects.exec.service.Service.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. (zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. (Poly) zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. (zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. (Poly) zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)
(declare-fun Poly%zookeeper_controller!vstd_ext.string_map.StringMap. (zookeeper_controller!vstd_ext.string_map.StringMap.) Poly)
(declare-fun %Poly%zookeeper_controller!vstd_ext.string_map.StringMap. (Poly) zookeeper_controller!vstd_ext.string_map.StringMap.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly) zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. (Poly) zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. (zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. (zookeeper_controller!kubernetes_api_objects.spec.common.Kind.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. (Poly) zookeeper_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)
(declare-fun Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. (zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.) Poly)
(declare-fun %Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly) zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)) (! (= x (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x))) :pattern ((Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (= x (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)) (! (has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) :pattern ((has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>.)) (! (= x (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. x))) :pattern ((Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)) (= x (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>.)) (! (has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)) :pattern ((has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (= x (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>.)) (! (= x (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. x))) :pattern ((Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (= x (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>.)) (! (has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) :pattern ((has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (= x (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x))) :pattern ((Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (= x (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) :pattern ((has_type (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!string.String.)) (! (= x (%Poly%vstd!string.String. (Poly%vstd!string.String. x))) :pattern ((Poly%vstd!string.String. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!string.String.) (= x (Poly%vstd!string.String. (%Poly%vstd!string.String. x)))) :pattern ((has_type x TYPE%vstd!string.String.)) )))
(assert (forall ((x vstd!string.String.)) (! (has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.) :pattern ((has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (%Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (%Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.service.Service.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (%Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.service.Service.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. (%Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. (%Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. x) TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)) )))
(assert (forall ((x zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= x (%Poly%zookeeper_controller!vstd_ext.string_map.StringMap. (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. x))) :pattern ((Poly%zookeeper_controller!vstd_ext.string_map.StringMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!vstd_ext.string_map.StringMap.) (= x (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. (%Poly%zookeeper_controller!vstd_ext.string_map.StringMap. x)))) :pattern ((has_type x TYPE%zookeeper_controller!vstd_ext.string_map.StringMap.)) )))
(assert (forall ((x zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (has_type (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. x) TYPE%zookeeper_controller!vstd_ext.string_map.StringMap.) :pattern ((has_type (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. x) TYPE%zookeeper_controller!vstd_ext.string_map.StringMap.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (%Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. (%Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.common.Kind.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. (Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.common.Kind.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.common.Kind.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((_name! core!option.Option.) (_namespace! core!option.Option.) (_resource_version! core!option.Option.) (_uid! core!option.Option.) (_labels! core!option.Option.) (_annotations! core!option.Option.) (_owner_references! core!option.Option.) (_finalizers! core!option.Option.) (_deletion_timestamp! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _namespace!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resource_version!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _uid!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _labels!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _annotations!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _owner_references!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%core!option.Option. _finalizers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _deletion_timestamp!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((_block_owner_deletion! core!option.Option.) (_controller! core!option.Option.) (_kind! zookeeper_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_uid! Int)) (! (=> (and (has_type (Poly%core!option.Option. _block_owner_deletion!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _controller!) (TYPE%core!option.Option. $ BOOL)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((_limits! core!option.Option.) (_requests! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _limits!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _requests!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x) (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x) (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) )))
(assert (forall ((_metadata! zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! core!option.Option.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. _spec!) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView _metadata! _spec! _status!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView _metadata! _spec! _status!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/metadata x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/?metadata x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/metadata (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x))) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/metadata (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/spec x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/?spec x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/spec (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x))) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/spec (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/?status x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x))) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) )))
(assert (forall ((_cluster_ip! core!option.Option.) (_ports! core!option.Option.) (_selector! core!option.Option.) (_publish_not_ready_addresses! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _cluster_ip!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _ports!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.))) (has_type (Poly%core!option.Option. _selector!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _publish_not_ready_addresses!) (TYPE%core!option.Option. $ BOOL))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView _cluster_ip! _ports! _selector! _publish_not_ready_addresses!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView _cluster_ip! _ports! _selector! _publish_not_ready_addresses!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?cluster_ip x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?ports x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?selector x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/?publish_not_ready_addresses x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) )))
(assert (forall ((_name! core!option.Option.) (_port! Int) (_app_protocol! core!option.Option.) (_protocol! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _app_protocol!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _protocol!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView _name! _port! _app_protocol! _protocol!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView _name! _port! _app_protocol! _protocol!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/name x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?name x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/port x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?port x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/port x)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/app_protocol x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?app_protocol x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/app_protocol x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/app_protocol (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/app_protocol (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/protocol x) (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/?protocol x)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/protocol x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.) (has_type (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/protocol (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView./ServicePortView/protocol (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. x)) (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (= x (%Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. x))) :pattern ((Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.) (= x (Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. (%Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.) :pattern ((has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) )))
(assert (forall ((_metadata! zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. _spec!) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.))) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView _metadata! _spec! _status!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView _metadata! _spec! _status!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/?metadata x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x))) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/?spec x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x))) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/status x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/?status x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type (Poly%core!option.Option. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/status (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x))) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/status (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((_replicas! Int) (_image! Poly) (_ports! zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) (_conf! zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) (_persistence! zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) (_resources! core!option.Option.) (_affinity! core!option.Option.) (_tolerations! core!option.Option.) (_node_selector! Poly) (_labels! Poly) (_annotations! Poly)) (! (=> (and (has_type _image! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. _persistence!) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type (Poly%core!option.Option. _affinity!) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type (Poly%core!option.Option. _tolerations!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type _node_selector! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView _replicas! _image! _ports! _conf! _persistence! _resources! _affinity! _tolerations! _node_selector! _labels! _annotations!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView _replicas! _image! _ports! _conf! _persistence! _resources! _affinity! _tolerations! _node_selector! _labels! _annotations!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/replicas x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?replicas x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/replicas x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/image x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?image x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/image x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/image (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/image (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/ports x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?ports x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/ports x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/conf x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?conf x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/conf x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/persistence x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?persistence x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/persistence x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/persistence (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x))) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/persistence (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/resources x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?resources x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/resources (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/resources (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/affinity x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?affinity x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/affinity x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/affinity (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.affinity.AffinityView.))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/affinity (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/tolerations x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?tolerations x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/tolerations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (Poly%core!option.Option. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/tolerations (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.toleration.TolerationView.)))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/tolerations (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/node_selector x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?node_selector x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/node_selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/node_selector (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/node_selector (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?labels x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/?annotations x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.) (has_type (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/client x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?client x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/client x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/quorum x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?quorum x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/quorum x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/leader_election x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?leader_election x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/leader_election x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/metrics x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?metrics x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/metrics x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/admin_server x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/?admin_server x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView./ZookeeperPortsView/admin_server x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPortsView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/init_limit x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?init_limit x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/init_limit x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/tick_time x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?tick_time x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/tick_time x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/sync_limit x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?sync_limit x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/sync_limit x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/global_outstanding_limit x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?global_outstanding_limit x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/global_outstanding_limit x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/pre_alloc_size x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?pre_alloc_size x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/pre_alloc_size x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/snap_count x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?snap_count x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/snap_count x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/commit_log_count x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?commit_log_count x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/commit_log_count x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/snap_size_limit_in_kb x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?snap_size_limit_in_kb x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/snap_size_limit_in_kb x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_cnxns x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?max_cnxns x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_cnxns x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_client_cnxns x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?max_client_cnxns x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_client_cnxns x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/min_session_timeout x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?min_session_timeout x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/min_session_timeout x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_session_timeout x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?max_session_timeout x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/max_session_timeout x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/auto_purge_snap_retain_count x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?auto_purge_snap_retain_count x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/auto_purge_snap_retain_count x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/auto_purge_purge_interval x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?auto_purge_purge_interval x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/auto_purge_purge_interval x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/quorum_listen_on_all_ips x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/?quorum_listen_on_all_ips x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView./ZookeeperConfigView/quorum_listen_on_all_ips x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperConfigView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) )))
(assert (forall ((_enabled! Bool) (_storage_size! Poly) (_storage_class_name! Poly)) (! (=> (and (has_type _storage_size! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _storage_class_name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView _enabled! _storage_size! _storage_class_name!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView _enabled! _storage_size! _storage_class_name!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/enabled x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/?enabled x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/enabled x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_size x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/?storage_size x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_size x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) (has_type (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_size (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_size (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_class_name x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/?storage_class_name x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.) (has_type (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_class_name (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView./ZookeeperPersistenceView/storage_class_name (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView. x)) (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperPersistenceView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView./ZookeeperClusterStatusView/ready_replicas x) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView./ZookeeperClusterStatusView/?ready_replicas x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView./ZookeeperClusterStatusView/ready_replicas x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterStatusView.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView. (Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.))
(assert (= (proj%%vstd!view.View./V $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map_values")
(declare-fun vstd!seq_lib.impl&%0.map_values.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::check_argument_is_seq")
(declare-fun vstd!seq_lib.check_argument_is_seq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%0::view")
(declare-fun vstd!string.impl&%0.view.? (Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%0::is_ascii")
(declare-fun vstd!string.impl&%0.is_ascii.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::string::impl&%1::view")
(declare-fun vstd!string.impl&%1.view.? (Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%1::is_ascii")
(declare-fun vstd!string.impl&%1.is_ascii.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::model::resource::common::make_base_labels")
(declare-fun zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? (Poly) Poly)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::model::resource::common::make_labels")
(declare-fun zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? (Poly) Poly)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::model::resource::common::make_owner_references")
(declare-fun zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? (Poly) vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::model::resource::common::make_service")
(declare-fun zookeeper_controller!zookeeper_controller.model.resource.common.make_service.? (Poly Poly Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::view")
(declare-fun zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::exec::owner_reference::OwnerReference::view")
(declare-fun zookeeper_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::exec::service::ServiceSpec::view")
(declare-fun zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::exec::service::ServicePort::view")
(declare-fun zookeeper_controller!kubernetes_api_objects.exec.service.impl&%3.view.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_name")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_labels")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_annotations")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_owner_references")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? (Dcr Type) Poly)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? (Dcr Type) Poly)
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::service::ServiceView::set_metadata")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::service::ServiceView::set_spec")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::default")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::set_cluster_ip")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::set_ports")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)
(set-info :comment ";; Function-Decl zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::set_selector")
(declare-fun zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.? (Poly Poly) zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperClusterSpec::view")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.view.? (Poly) zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::spec_types::ZookeeperClusterView::well_formed")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::spec_types::ZookeeperClusterView::controller_owner_ref")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? (Poly) zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl zookeeper_controller::vstd_ext::string_map::StringMap::view")
(declare-fun zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&) Self%&) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&) TYPE%zookeeper_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::string::impl&%1::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!string.String.) (has_type (vstd!string.impl&%1.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%1 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%8 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%13 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%14 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%15 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%17 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%19 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%20 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%21 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%22 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%23 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%24 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%25 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%26 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%27 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%28 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))) )) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$))) ))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%2 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::seq_to_set_is_finite_broadcast")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%29 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%31 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%32 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%37 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%39 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%43 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%44 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%45 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms vstd::string::impl&%0::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! STRSLICE) (has_type (vstd!string.impl&%0.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_is_ascii")
(declare-fun ens%vstd!string.axiom_str_literal_is_ascii. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_is_ascii. s!) (= (vstd!string.impl&%0.is_ascii.? (S s!)) (str%strslice_is_ascii s!))) :pattern ((ens%vstd!string.axiom_str_literal_is_ascii. s!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_is_ascii")
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!string.impl&%0.is_ascii.? s!) (str%strslice_is_ascii (%S s!)))) :pattern ((vstd!string.impl&%0.is_ascii.? s!)) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_len")
(declare-fun ens%vstd!string.axiom_str_literal_len. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_len. s!) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? (S s!))) (str%strslice_len s!))) :pattern ((ens%vstd!string.axiom_str_literal_len. s!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_len")
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!)) (str%strslice_len (%S s!)))) :pattern ((vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!))) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_get_char")
(declare-fun ens%vstd!string.axiom_str_literal_get_char. (StrSlice Int) Bool)
(assert (forall ((s! StrSlice) (i! Int)) (! (= (ens%vstd!string.axiom_str_literal_get_char. s! i!) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? (S s!)) (I i!))) (str%strslice_get_char s! i!))) :pattern ((ens%vstd!string.axiom_str_literal_get_char. s! i!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_get_char")
(assert (forall ((s! Poly) (i! Poly)) (! (=> (and (has_type s! STRSLICE) (has_type i! INT)) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) (str%strslice_get_char (%S s!) (%I i!)))) :pattern ((vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.) (forall ((no%param Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? self!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::vstd_ext::string_map::StringMap::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!vstd_ext.string_map.StringMap.) (has_type (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? self!) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!vstd_ext.string_map.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map_values")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map_values.))
(declare-fun %%lambda%%3 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%0 %%hole%%3 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map_values.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%3 A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::default")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. (Int zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((no%param Int) (object_meta! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. no%param object_meta!) (= (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. object_meta!)) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. no%param object_meta!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::name")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (name! core!option.Option.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. self! name!) (and (has_type (Poly%core!option.Option. name!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. name!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. name!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. name!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. self! name!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::exec::owner_reference::OwnerReference::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? self!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_name")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_name")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. vstd!string.String.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (name! vstd!string.String.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. pre%self! self! name!) (= (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_labels")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.) (forall ((self! Poly) (labels! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some labels!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!)) ))))
(assert (forall ((self! Poly) (labels! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_labels")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (labels! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. pre%self! self! labels!) (= (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. labels!))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. pre%self! self! labels!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_annotations")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.) (forall ((self! Poly) (annotations! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some annotations!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!)) ))))
(assert (forall ((self! Poly) (annotations! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_annotations")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (annotations! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. pre%self! self! annotations!) (= (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. annotations!))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. pre%self! self! annotations!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_owner_references")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.) (forall ((self! Poly) (owner_references! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some owner_references!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) ))))
(assert (forall ((self! Poly) (owner_references! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type owner_references! (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_owner_references")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%4 () %%Function%%)
(assert (forall ((o$ Poly)) (! (= (%%apply%%0 %%lambda%%4 o$) (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? o$))) :pattern ((%%apply%%0 %%lambda%%4 o$)))))
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (owner_references! alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. pre%self! self! owner_references!) (= (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%4)))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. pre%self! self! owner_references!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceView::default")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.default.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.default.) (= (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::Service::default")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.default. (Int zookeeper_controller!kubernetes_api_objects.exec.service.Service.) Bool)
(assert (forall ((no%param Int) (service! zookeeper_controller!kubernetes_api_objects.exec.service.Service.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.default. no%param service!) (= (vstd!view.View.view.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. service!)) (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.default. no%param service!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::exec::service::ServiceSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? self!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? self!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceView::set_metadata")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.) (forall ((self! Poly) (metadata! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.? self! metadata!) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. metadata!) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/spec (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.? self! metadata!)) ))))
(assert (forall ((self! Poly) (metadata! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (has_type metadata! TYPE%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.? self! metadata!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.? self! metadata!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::Service::set_metadata")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.set_metadata. (zookeeper_controller!kubernetes_api_objects.exec.service.Service. zookeeper_controller!kubernetes_api_objects.exec.service.Service. zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.service.Service.) (self! zookeeper_controller!kubernetes_api_objects.exec.service.Service.) (metadata! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.set_metadata. pre%self! self! metadata!) (= (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (vstd!view.View.view.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. self!))) (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_metadata.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. pre%self!)) (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.set_metadata. pre%self! self! metadata!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceView::set_spec")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.) (forall ((self! Poly) (spec! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.? self! spec!) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/metadata (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some spec!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.? self! spec!)) ))))
(assert (forall ((self! Poly) (spec! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (has_type spec! TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.? self! spec!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.? self! spec!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::Service::set_spec")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.set_spec. (zookeeper_controller!kubernetes_api_objects.exec.service.Service. zookeeper_controller!kubernetes_api_objects.exec.service.Service. zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.service.Service.) (self! zookeeper_controller!kubernetes_api_objects.exec.service.Service.) (spec! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.set_spec. pre%self! self! spec!) (= (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (vstd!view.View.view.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. self!))) (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%0.set_spec.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service. (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.Service. pre%self!)) (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. spec!)))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%1.set_spec. pre%self! self! spec!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceView::kind")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.kind.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%1.kind.) (= (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.) (Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. zookeeper_controller!kubernetes_api_objects.spec.common.Kind./ServiceKind))))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::default")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.) (forall ((no%param Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? no%param) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? no%param)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? no%param)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::ServiceSpec::default")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.default. (Int zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) Bool)
(assert (forall ((no%param Int) (service_spec! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.default. no%param service_spec!) (= (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. service_spec!)) (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? (I 0)))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.default. no%param service_spec!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::set_cluster_ip")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.) (forall ((self! Poly) (cluster_ip! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.? self! cluster_ip!) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some cluster_ip!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.? self! cluster_ip!)) ))))
(assert (forall ((self! Poly) (cluster_ip! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type cluster_ip! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.? self! cluster_ip!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.? self! cluster_ip!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::ServiceSpec::set_cluster_ip")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_cluster_ip. (zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. vstd!string.String.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (self! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (cluster_ip! vstd!string.String.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_cluster_ip. pre%self! self! cluster_ip!) (= (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. self!)) (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_cluster_ip.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. cluster_ip!))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_cluster_ip. pre%self! self! cluster_ip!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::exec::service::ServicePort::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%3.view.? self!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.exec.service.impl&%3.view.? self!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::set_ports")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.) (forall ((self! Poly) (ports! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.? self! ports!) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some ports!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/selector (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.? self! ports!)) ))))
(assert (forall ((self! Poly) (ports! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type ports! (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.? self! ports!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.? self! ports!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::ServiceSpec::set_ports")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_ports. (zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%5 () %%Function%%)
(assert (forall ((port$ Poly)) (! (= (%%apply%%0 %%lambda%%5 port$) (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%3.view.? port$))) :pattern ((%%apply%%0 %%lambda%%5 port$)))))
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (self! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (ports! alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_ports. pre%self! self! ports!) (= (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. self!)) (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_ports.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.service.ServicePort./alloc!alloc.Global.>. ports!)) (Poly%fun%1. (mk_fun %%lambda%%5)))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_ports. pre%self! self! ports!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::kubernetes_api_objects::spec::service::ServiceSpecView::set_selector")
(assert (fuel_bool_default fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.))
(assert (=> (fuel_bool fuel%zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.) (forall ((self! Poly) (selector! Poly)) (! (= (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.? self! selector!) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/cluster_ip (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/ports (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some selector!))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. self!)))))) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.? self! selector!)) ))))
(assert (forall ((self! Poly) (selector! Poly)) (! (=> (and (has_type self! TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.) (has_type selector! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.? self! selector!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView.)) :pattern ((zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.? self! selector!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::kubernetes_api_objects::exec::service::ServiceSpec::set_selector")
(declare-fun ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_selector. (zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (self! zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec.) (selector! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_selector. pre%self! self! selector!) (= (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. self!)) (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.set_selector.? (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.service.ServiceSpec. pre%self!))) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. selector!))))) :pattern ((ens%zookeeper_controller!kubernetes_api_objects.exec.service.impl&%2.set_selector. pre%self! self! selector!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperCluster::metadata")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.metadata. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((self! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (metadata! zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.metadata. self! metadata!) (= (zookeeper_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. self!)))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.metadata. self! metadata!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperClusterSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.view.? self!)) TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperCluster::spec")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.spec. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) Bool)
(assert (forall ((self! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (spec! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.spec. self! spec!) (= (zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.view.? (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. spec!)) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. self!)))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.spec. self! spec!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::spec_types::ZookeeperClusterView::kind")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.kind.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.kind.) (= (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. zookeeper_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::spec_types::ZookeeperClusterView::controller_owner_ref")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!) (zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (B true)))) (%Poly%zookeeper_controller!kubernetes_api_objects.spec.common.Kind. (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. self!)))))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. self!))))))))))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperCluster::controller_owner_ref")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.controller_owner_ref. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) Bool)
(assert (forall ((self! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (owner_reference! zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.controller_owner_ref. self! owner_reference!) (= (zookeeper_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? (Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. owner_reference!)) (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. self!))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.controller_owner_ref. self! owner_reference!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperClusterSpec::labels")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.labels. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((self! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) (labels! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.labels. self! labels!) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. labels!)) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.view.? (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. self!))))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.labels. self! labels!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::exec_types::ZookeeperClusterSpec::annotations")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.annotations. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((self! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec.) (annotations! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.annotations. self! annotations!) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. annotations!)) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.view.? (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperClusterSpec. self!))))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%5.annotations. self! annotations!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs zookeeper_controller::vstd_ext::string_map::StringMap::insert")
(declare-fun ens%zookeeper_controller!vstd_ext.string_map.impl&%0.insert. (zookeeper_controller!vstd_ext.string_map.StringMap. zookeeper_controller!vstd_ext.string_map.StringMap. vstd!string.String. vstd!string.String. core!option.Option.) Bool)
(assert (forall ((pre%self! zookeeper_controller!vstd_ext.string_map.StringMap.) (self! zookeeper_controller!vstd_ext.string_map.StringMap.) (key! vstd!string.String.) (value! vstd!string.String.) (old_v! core!option.Option.)) (! (= (ens%zookeeper_controller!vstd_ext.string_map.impl&%0.insert. pre%self! self! key! value! old_v!) (and (has_type (Poly%core!option.Option. old_v!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. self!)) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. pre%self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. value!)))) (= (vstd!set.impl&%0.contains.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.dom.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_v!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_v!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. old_v!)))) (vstd!map.impl&%0.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. pre%self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))))))) :pattern ((ens%zookeeper_controller!vstd_ext.string_map.impl&%0.insert. pre%self! self! key! value! old_v!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::vstd_ext::string_map::StringMap::extend")
(declare-fun ens%zookeeper_controller!vstd_ext.string_map.impl&%0.extend. (zookeeper_controller!vstd_ext.string_map.StringMap. zookeeper_controller!vstd_ext.string_map.StringMap. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! zookeeper_controller!vstd_ext.string_map.StringMap.) (self! zookeeper_controller!vstd_ext.string_map.StringMap.) (m2! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!vstd_ext.string_map.impl&%0.extend. pre%self! self! m2!) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. self!)) (vstd!map_lib.impl&%0.union_prefer_right.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. pre%self!)) (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. m2!))))) :pattern ((ens%zookeeper_controller!vstd_ext.string_map.impl&%0.extend. pre%self! self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::check_argument_is_seq")
(assert (fuel_bool_default fuel%vstd!seq_lib.check_argument_is_seq.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.check_argument_is_seq.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) s!) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%1::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%1.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%1.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%3::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%3.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%3.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%5::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%5.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%5.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%11::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%11.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%11.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::spec_types::ZookeeperClusterView::well_formed")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? self!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. self!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. self!))))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. self!)))))))))))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::model::resource::common::make_base_labels")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.) (forall ((zk! Poly)) (! (= (zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? zk!) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 1588539530315223847722953298287299374188107919534831743833089341130026030232599932513390495630937258371487356320380652074008820394790478717851686026166260))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/metadata (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. zk!)))))))))) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? zk!)) ))))
(assert (forall ((zk! Poly)) (! (=> (has_type zk! TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type (zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? zk!) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? zk!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::model::resource::common::make_labels")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.) (forall ((zk! Poly)) (! (= (zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? zk!) (vstd!map_lib.impl&%0.union_prefer_right.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/labels (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. zk!))))) (zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? zk!))) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? zk!)) ))))
(assert (forall ((zk! Poly)) (! (=> (has_type zk! TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type (zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? zk!) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? zk!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::model::resource::common::make_owner_references")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.) (forall ((zk! Poly)) (! (= (zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? zk!) (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq.push.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!seq.Seq.empty.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (Poly%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.controller_owner_ref.? zk!))))) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? zk!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::model::resource::common::make_service")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_service.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.model.resource.common.make_service.) (forall ((zk! Poly) (name! Poly) (ports! Poly) (cluster_ip! Poly)) (! (= (zookeeper_controller!zookeeper_controller.model.resource.common.make_service.? zk! name! ports! cluster_ip!) (let ((tmp%%$ (let ((tmp%%$1 (core!option.Option./Some name!))) (let ((tmp%%$2 (core!option.Option./Some (zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? zk!)))) (let ((tmp%%$3 (core!option.Option./Some (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView./ZookeeperClusterSpecView/annotations (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView/spec (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. zk!)))))))) (let ((tmp%%$4 (core!option.Option./Some (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? zk!))))) (let ((tmp%%$5 (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$5))))))))))))) (let ((tmp%%$6 (core!option.Option./Some (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (let ((tmp%%$7 (core!option.Option./Some ports!))) (let ((tmp%%$8 (core!option.Option./Some (zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? zk!)))) (let ((tmp%%$9 (ite (not (%B cluster_ip!)) (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 555675259155678246274393943557213268459993556611902854963198325445743235225804363654546370963179834195925213368792226256436111516250825591900677647736291)))) core!option.Option./None))) (let ((tmp%%$10 (zookeeper_controller!kubernetes_api_objects.spec.service.impl&%2.default.? (I 0)))) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView./ServiceSpecView/publish_not_ready_addresses (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceSpecView. tmp%%$10)))))))))))))) (let ((tmp%%$11 (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)))) (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView./ServiceView/status (%Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. tmp%%$11)))))))))) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_service.? zk! name! ports! cluster_ip!)) ))))
(assert (forall ((zk! Poly) (name! Poly) (ports! Poly) (cluster_ip! Poly)) (! (=> (and (has_type zk! TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type ports! (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServicePortView.)) (has_type cluster_ip! BOOL)) (has_type (Poly%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView. (zookeeper_controller!zookeeper_controller.model.resource.common.make_service.? zk! name! ports! cluster_ip!)) TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.)) :pattern ((zookeeper_controller!zookeeper_controller.model.resource.common.make_service.? zk! name! ports! cluster_ip!)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::spec_types::ZookeeperClusterView::default")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.default.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%1.default.) (= (zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.) (Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView. (zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView./ZookeeperClusterView (%Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%zookeeper_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (zookeeper_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView. (vstd!pervasive.arbitrary.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterSpecView.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.spec_types.ZookeeperClusterView.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.service.Service.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%zookeeper_controller!kubernetes_api_objects.spec.resource.ResourceView. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.service.ServiceView.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.))
(set-info :comment ";; Function-Specs vstd::string::impl&%0::to_string")
(declare-fun ens%vstd!string.impl&%0.to_string. (StrSlice vstd!string.String.) Bool)
(assert (forall ((self! StrSlice) (ret! vstd!string.String.)) (! (= (ens%vstd!string.impl&%0.to_string. self! ret!) (and (= (vstd!string.impl&%0.view.? (S self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. ret!))) (= (vstd!string.impl&%0.is_ascii.? (S self!)) (vstd!string.impl&%1.is_ascii.? (Poly%vstd!string.String. ret!))))) :pattern ((ens%vstd!string.impl&%0.to_string. self! ret!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::vstd_ext::string_map::StringMap::empty")
(declare-fun ens%zookeeper_controller!vstd_ext.string_map.impl&%0.empty. (Int zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((no%param Int) (m! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!vstd_ext.string_map.impl&%0.empty. no%param m!) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. m!)) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((ens%zookeeper_controller!vstd_ext.string_map.impl&%0.empty. no%param m!)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::exec::resource::common::make_base_labels")
(declare-fun req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_base_labels. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) (! (= (req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_base_labels. zk!) (=> %%global_location_label%%46 (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))) :pattern ((req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_base_labels. zk!)) )))
(declare-fun ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_base_labels. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (labels! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_base_labels. zk! labels!) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. labels!)) (zookeeper_controller!zookeeper_controller.model.resource.common.make_base_labels.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_base_labels. zk! labels!)) )))
(set-info :comment ";; Function-Def zookeeper_controller::zookeeper_controller::exec::resource::common::make_base_labels")
(set-info :comment ";; controller_examples/zookeeper_controller/exec/resource/common.rs:21:1: 21:69 (#0)")
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::exec::resource::common::make_labels")
(declare-fun req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_labels. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) (! (= (req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_labels. zk!) (=> %%global_location_label%%47 (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))) :pattern ((req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_labels. zk!)) )))
(declare-fun ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_labels. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zookeeper_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (labels! zookeeper_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_labels. zk! labels!) (= (zookeeper_controller!vstd_ext.string_map.impl&%0.view.? (Poly%zookeeper_controller!vstd_ext.string_map.StringMap. labels!)) (zookeeper_controller!zookeeper_controller.model.resource.common.make_labels.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_labels. zk! labels!)) )))
(set-info :comment ";; Function-Def zookeeper_controller::zookeeper_controller::exec::resource::common::make_labels")
(set-info :comment ";; controller_examples/zookeeper_controller/exec/resource/common.rs:30:1: 30:64 (#0)")
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::exec::resource::common::make_owner_references")
(declare-fun req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_owner_references. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)) (! (= (req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_owner_references. zk!) (=> %%global_location_label%%48 (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))) :pattern ((req%zookeeper_controller!zookeeper_controller.exec.resource.common.make_owner_references. zk!)) )))
(declare-fun ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_owner_references. (zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Bool)
(assert (forall ((zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.) (owner_references! alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= (ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_owner_references. zk! owner_references!) (= (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%4)))) (zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.exec.resource.common.make_owner_references. zk! owner_references!)) )))
(set-info :comment ";; Function-Def zookeeper_controller::zookeeper_controller::exec::resource::common::make_owner_references")
(set-info :comment ";; controller_examples/zookeeper_controller/exec/resource/common.rs:39:1: 39:94 (#0)")
(declare-const owner_references! alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(declare-const zk! zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster.)
(declare-const tmp%1 Poly)
(declare-const tmp%2 zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)
(declare-const tmp%3 Bool)
(declare-const idx@ Poly)
(declare-const tmp%4 Bool)
(declare-const s1@ vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-const s2@ vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-const owner_references@0 alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(assert fuel_defaults)
(assert (zookeeper_controller!zookeeper_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!))))
(declare-const owner_references@1 alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%4 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> (ens%alloc!vec.impl&%0.new. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. tmp%1) (=> (= owner_references@0 (%Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. tmp%1)) (=> (ens%zookeeper_controller!zookeeper_controller.trusted.exec_types.impl&%3.controller_owner_ref. zk! tmp%2) (=> (ens%alloc!vec.impl&%1.push. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references@0) (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references@1) (Poly%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. tmp%2)) (=> (= s1@ (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references@1)) (Poly%fun%1. (mk_fun %%lambda%%4))))) (=> (= s2@ (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!)))))) (and (=> (= tmp%3 (= (vstd!seq.Seq.len.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@)) (vstd!seq.Seq.len.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s2@)))) (and (=> %%location_label%%0 tmp%3) (=> tmp%3 (and (=> (has_type idx@ INT) (=> (and (<= 0 (%I idx@)) (< (%I idx@) (vstd!seq.Seq.len.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@)))) (=> %%location_label%%1 (= (vstd!seq.Seq.index.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@) idx@) (vstd!seq.Seq.index.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s2@) idx@))))) (=> (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@)))) (= (vstd!seq.Seq.index.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@) idx$) (vstd!seq.Seq.index.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s2@) idx$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@) idx$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s2@) idx$)) )) (=> (= tmp%4 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s1@) (Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. s2@))) (and (=> %%location_label%%2 tmp%4) (=> tmp%4 (=> %%location_label%%3 (= s1@ s2@)))))))))) (=> (= s1@ s2@) (=> (= owner_references! owner_references@1) (=> %%location_label%%4 (= (%Poly%vstd!seq.Seq<zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%zookeeper_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<zookeeper_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%4)))) (zookeeper_controller!zookeeper_controller.model.resource.common.make_owner_references.? (vstd!view.View.view.? $ TYPE%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. (Poly%zookeeper_controller!zookeeper_controller.trusted.exec_types.ZookeeperCluster. zk!)))))))))))))))))
(assert %%query%%)
(check-sat)
(exit)
