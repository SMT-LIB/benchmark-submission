(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.agrees. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.insert. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.remove. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.choose. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.contains. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.dom. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_empty. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_singleton. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_singleton_different. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_add. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_sub. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_ext_equal. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_ext_equal_deep. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_empty. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_singleton. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_add. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_sub. FuelId)
(declare-const fuel%vstd!multiset.axiom_count_le_len. FuelId)
(declare-const fuel%vstd!multiset.axiom_choose_count. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_always_finite. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%lib!allocation_layer.Likes_v.no_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.repr. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.get. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.has_root. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.root. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.child_count. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%0.arrow_e. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_key. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.spec_le. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!map_lib.impl&%0.agrees. fuel%vstd!multiset.impl&%0.insert. fuel%vstd!multiset.impl&%0.remove. fuel%vstd!multiset.impl&%0.subset_of. fuel%vstd!multiset.impl&%0.spec_le. fuel%vstd!multiset.impl&%0.choose. fuel%vstd!multiset.impl&%0.contains. fuel%vstd!multiset.impl&%0.dom. fuel%vstd!multiset.axiom_multiset_empty. fuel%vstd!multiset.axiom_multiset_singleton. fuel%vstd!multiset.axiom_multiset_singleton_different. fuel%vstd!multiset.axiom_multiset_add. fuel%vstd!multiset.axiom_multiset_sub. fuel%vstd!multiset.axiom_multiset_ext_equal. fuel%vstd!multiset.axiom_multiset_ext_equal_deep. fuel%vstd!multiset.axiom_len_empty. fuel%vstd!multiset.axiom_len_singleton. fuel%vstd!multiset.axiom_len_add. fuel%vstd!multiset.axiom_len_sub. fuel%vstd!multiset.axiom_count_le_len. fuel%vstd!multiset.axiom_choose_count. fuel%vstd!multiset.axiom_multiset_always_finite. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_union_finite. fuel%lib!allocation_layer.Likes_v.no_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. fuel%lib!betree.BufferDisk_v.impl&%0.repr. fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with. fuel%lib!betree.BufferOffsets_v.impl&%0.len. fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. fuel%lib!betree.LinkedBetree_v.impl&%0.wf. fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index. fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain. fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain. fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf. fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr. fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked. fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. fuel%lib!betree.LinkedBetree_v.impl&%1.wf. fuel%lib!betree.LinkedBetree_v.impl&%1.get. fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk. fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.wf. fuel%lib!betree.LinkedBetree_v.impl&%5.has_root. fuel%lib!betree.LinkedBetree_v.impl&%5.root. fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic. fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank. fuel%lib!betree.LinkedBetree_v.impl&%5.child_count. fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view. fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. fuel%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. fuel%lib!betree.LinkedSeq_v.impl&%0.len. fuel%lib!betree.LinkedSeq_v.impl&%0.contains. fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. fuel%lib!betree.PivotTable_v.impl&%0.wf. fuel%lib!betree.PivotTable_v.impl&%0.len. fuel%lib!betree.PivotTable_v.impl&%0.spec_index. fuel%lib!spec.KeyType_t.impl&%0.arrow_e. fuel%lib!spec.KeyType_t.to_key. fuel%lib!spec.KeyType_t.impl&%1.lte. fuel%lib!spec.KeyType_t.impl&%2.lte. fuel%lib!spec.KeyType_t.impl&%2.lt. fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (and (fuel_bool_default fuel%vstd!multiset.axiom_multiset_empty.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_singleton.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_singleton_different.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_add.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_sub.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_ext_equal.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_ext_equal_deep.) (fuel_bool_default fuel%vstd!multiset.axiom_len_empty.) (fuel_bool_default fuel%vstd!multiset.axiom_len_singleton.) (fuel_bool_default fuel%vstd!multiset.axiom_len_add.) (fuel_bool_default fuel%vstd!multiset.axiom_len_sub.) (fuel_bool_default fuel%vstd!multiset.axiom_count_le_len.) (fuel_bool_default fuel%vstd!multiset.axiom_choose_count.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_always_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. 0)
(declare-sort vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.KeyType_t.Element.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!betree.BufferDisk_v.BufferDisk. 0) (lib!betree.BufferOffsets_v.BufferOffsets. 0) (lib!betree.Domain_v.Domain. 0) (lib!betree.LinkedBetree_v.BetreeNode. 0) (lib!betree.LinkedBetree_v.DiskView. 0) (lib!betree.LinkedBetree_v.LinkedBetree. 0) (lib!betree.LinkedSeq_v.LinkedSeq. 0) (lib!betree.PivotTable_v.PivotTable. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.KeyType_t.Element. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!betree.BufferDisk_v.BufferDisk./BufferDisk (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/?entries Poly))) ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets vstd!seq.Seq<nat.>.))) ((lib!betree.Domain_v.Domain./EmptyDomain ) (lib!betree.Domain_v.Domain./Domain (lib!betree.Domain_v.Domain./Domain/?start lib!spec.KeyType_t.Element.) (lib!betree.Domain_v.Domain./Domain/?end lib!spec.KeyType_t.Element.))) ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?buffers lib!betree.LinkedSeq_v.LinkedSeq.) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?pivots lib!betree.PivotTable_v.PivotTable.) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?children vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?flushed lib!betree.BufferOffsets_v.BufferOffsets.))) ((lib!betree.LinkedBetree_v.DiskView./DiskView (lib!betree.LinkedBetree_v.DiskView./DiskView/?entries vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.))) ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?root core!option.Option.) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?dv lib!betree.LinkedBetree_v.DiskView.) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?buffer_dv lib!betree.BufferDisk_v.BufferDisk.))) ((lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/?addrs vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.))) ((lib!betree.PivotTable_v.PivotTable./PivotTable (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots vstd!seq.Seq<lib!spec.KeyType_t.Element.>.))) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.KeyType_t.Element./Max ) (lib!spec.KeyType_t.Element./Elem (lib!spec.KeyType_t.Element./Elem/?e Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (lib!betree.BufferDisk_v.BufferDisk.) Poly)
(declare-fun lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (lib!betree.BufferOffsets_v.BufferOffsets.) vstd!seq.Seq<nat.>.)
(declare-fun lib!betree.Domain_v.Domain./Domain/start (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.Domain_v.Domain./Domain/end (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (lib!betree.LinkedBetree_v.BetreeNode.) lib!betree.LinkedSeq_v.LinkedSeq.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (lib!betree.LinkedBetree_v.BetreeNode.) lib!betree.PivotTable_v.PivotTable.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (lib!betree.LinkedBetree_v.BetreeNode.) vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (lib!betree.LinkedBetree_v.BetreeNode.) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun lib!betree.LinkedBetree_v.DiskView./DiskView/entries (lib!betree.LinkedBetree_v.DiskView.) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (lib!betree.LinkedBetree_v.LinkedBetree.) core!option.Option.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (lib!betree.LinkedBetree_v.LinkedBetree.) lib!betree.LinkedBetree_v.DiskView.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (lib!betree.LinkedBetree_v.LinkedBetree.) lib!betree.BufferDisk_v.BufferDisk.)
(declare-fun lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (lib!betree.LinkedSeq_v.LinkedSeq.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (lib!betree.PivotTable_v.PivotTable.) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.KeyType_t.Element./Elem/e (lib!spec.KeyType_t.Element.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!multiset.Multiset. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.BufferDisk_v.BufferDisk. (Dcr Type) Type)
(declare-const TYPE%lib!betree.BufferOffsets_v.BufferOffsets. Type)
(declare-const TYPE%lib!betree.Domain_v.Domain. Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.BetreeNode. Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.DiskView. Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.LinkedBetree. (Dcr Type) Type)
(declare-const TYPE%lib!betree.LinkedSeq_v.LinkedSeq. Type)
(declare-const TYPE%lib!betree.PivotTable_v.PivotTable. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.KeyType_t.Element. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)
(declare-fun Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly) vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq<lib!spec.KeyType_t.Element.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.BufferDisk.) Poly)
(declare-fun %Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly) lib!betree.BufferDisk_v.BufferDisk.)
(declare-fun Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets.) Poly)
(declare-fun %Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain.) Poly)
(declare-fun %Poly%lib!betree.Domain_v.Domain. (Poly) lib!betree.Domain_v.Domain.)
(declare-fun Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.BetreeNode.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(declare-fun Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.DiskView.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.DiskView. (Poly) lib!betree.LinkedBetree_v.DiskView.)
(declare-fun Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetree.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.LinkedSeq.) Poly)
(declare-fun %Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(declare-fun Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.PivotTable.) Poly)
(declare-fun %Poly%lib!betree.PivotTable_v.PivotTable. (Poly) lib!betree.PivotTable_v.PivotTable.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Element. (Poly) lib!spec.KeyType_t.Element.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= x (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (= x (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!betree.BufferDisk_v.BufferDisk.)) (! (= x (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. x))) :pattern ((Poly%lib!betree.BufferDisk_v.BufferDisk. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (= x (Poly%lib!betree.BufferDisk_v.BufferDisk. (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)))) :pattern ((has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_entries! Poly)) (! (=> (has_type _entries! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T&)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.BufferDisk./BufferDisk _entries!)) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) :pattern ((has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.BufferDisk./BufferDisk _entries!)) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) )))
(assert (forall ((x lib!betree.BufferDisk_v.BufferDisk.)) (! (= (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/?entries x)) :pattern ((lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T&))) :pattern ((lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)) (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) )))
(define-fun is-lib!betree.BufferDisk_v.BufferDisk./BufferDisk_ ((c lib!betree.BufferDisk_v.BufferDisk.)) Bool ((_ is lib!betree.BufferDisk_v.BufferDisk./BufferDisk) c))
(assert (forall ((x lib!betree.BufferDisk_v.BufferDisk.)) (! (=> (is-lib!betree.BufferDisk_v.BufferDisk./BufferDisk_ x) (height_lt (height (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x)) (height (Poly%lib!betree.BufferDisk_v.BufferDisk. x)))) :pattern ((height (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type y (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T&) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. y)))) (ext_eq deep (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&) x y)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= x (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) :pattern ((Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (= x (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)))) :pattern ((has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets x)) :pattern ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) :pattern ((has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (has_type y TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (ext_eq deep (TYPE%vstd!seq.Seq. $ NAT) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. y))))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= x (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. x))) :pattern ((Poly%lib!betree.Domain_v.Domain. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (= x (Poly%lib!betree.Domain_v.Domain. (%Poly%lib!betree.Domain_v.Domain. x)))) :pattern ((has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (has_type (Poly%lib!betree.Domain_v.Domain. lib!betree.Domain_v.Domain./EmptyDomain) TYPE%lib!betree.Domain_v.Domain.))
(assert (forall ((_start! lib!spec.KeyType_t.Element.) (_end! lib!spec.KeyType_t.Element.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Element. _start!) TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Element. _end!) TYPE%lib!spec.KeyType_t.Element.)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/start x) (lib!betree.Domain_v.Domain./Domain/?start x)) :pattern ((lib!betree.Domain_v.Domain./Domain/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/end x) (lib!betree.Domain_v.Domain./Domain/?end x)) :pattern ((lib!betree.Domain_v.Domain./Domain/end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.BetreeNode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (= x (Poly%lib!betree.LinkedBetree_v.BetreeNode. (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?buffers x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?pivots x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?children x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?flushed x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (has_type (Poly%lib!betree.LinkedBetree_v.BetreeNode. x) TYPE%lib!betree.LinkedBetree_v.BetreeNode.) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.BetreeNode. x) TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (ext_eq deep TYPE%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y)))) (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x)) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y)))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y))))) (ext_eq deep TYPE%lib!betree.LinkedBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedBetree_v.BetreeNode. x y)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.DiskView.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.DiskView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.DiskView.) (= x (Poly%lib!betree.LinkedBetree_v.DiskView. (%Poly%lib!betree.LinkedBetree_v.DiskView. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.DiskView.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.DiskView.)) (! (= (lib!betree.LinkedBetree_v.DiskView./DiskView/entries x) (lib!betree.LinkedBetree_v.DiskView./DiskView/?entries x)) :pattern ((lib!betree.LinkedBetree_v.DiskView./DiskView/entries x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.DiskView.)) (! (has_type (Poly%lib!betree.LinkedBetree_v.DiskView. x) TYPE%lib!betree.LinkedBetree_v.DiskView.) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.DiskView. x) TYPE%lib!betree.LinkedBetree_v.DiskView.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_root! core!option.Option.) (_dv! lib!betree.LinkedBetree_v.DiskView.) (_buffer_dv! lib!betree.BufferDisk_v.BufferDisk.)) (! (=> (and (has_type (Poly%core!option.Option. _root!) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. _buffer_dv!) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree _root! _dv! _buffer_dv!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree _root! _dv! _buffer_dv!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root x) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?root x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x))) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv x) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?dv x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?buffer_dv x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x))) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree_ ((c lib!betree.LinkedBetree_v.LinkedBetree.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree_ x) (height_lt (height (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)))) :pattern ((height (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x)))) )))
(assert (forall ((x lib!betree.LinkedSeq_v.LinkedSeq.)) (! (= x (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. x))) :pattern ((Poly%lib!betree.LinkedSeq_v.LinkedSeq. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (= x (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedSeq_v.LinkedSeq.)) )))
(assert (forall ((x lib!betree.LinkedSeq_v.LinkedSeq.)) (! (= (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs x) (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/?addrs x)) :pattern ((lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs x)) )))
(assert (forall ((x lib!betree.LinkedSeq_v.LinkedSeq.)) (! (has_type (Poly%lib!betree.LinkedSeq_v.LinkedSeq. x) TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) :pattern ((has_type (Poly%lib!betree.LinkedSeq_v.LinkedSeq. x) TYPE%lib!betree.LinkedSeq_v.LinkedSeq.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (has_type y TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. x))) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. y))))) (ext_eq deep TYPE%lib!betree.LinkedSeq_v.LinkedSeq. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedSeq_v.LinkedSeq. x y)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= x (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. x))) :pattern ((Poly%lib!betree.PivotTable_v.PivotTable. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotTable_v.PivotTable.) (= x (Poly%lib!betree.PivotTable_v.PivotTable. (%Poly%lib!betree.PivotTable_v.PivotTable. x)))) :pattern ((has_type x TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x) (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots x)) :pattern ((lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.) :pattern ((has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= x (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. x))) :pattern ((Poly%lib!spec.KeyType_t.Element. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (= x (Poly%lib!spec.KeyType_t.Element. (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (has_type (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max) TYPE%lib!spec.KeyType_t.Element.))
(assert (forall ((_e! Int)) (! (=> (uInv 64 _e!) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= (lib!spec.KeyType_t.Element./Elem/e x) (lib!spec.KeyType_t.Element./Elem/?e x)) :pattern ((lib!spec.KeyType_t.Element./Elem/e x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)) (has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!multiset.impl&%0.count.? (Dcr Type Poly Poly) Int)
(declare-fun vstd!multiset.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!multiset.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!multiset.impl&%0.singleton.? (Dcr Type Poly) Poly)
(declare-fun vstd!multiset.impl&%0.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!multiset.impl&%0.sub.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!multiset.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!multiset.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!multiset.impl&%0.dom.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.to_multiset.? (Dcr Type Poly) Poly)
(declare-fun vstd!multiset.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!multiset.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.spec_le.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(declare-fun lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%1.lte.? (Poly Poly) Bool)
(declare-fun lib!spec.KeyType_t.impl&%0.arrow_e.? (Poly) Int)
(declare-fun lib!spec.KeyType_t.to_key.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!spec.KeyType_t.impl&%2.lte.? (Poly Poly) Bool)
(declare-fun lib!spec.KeyType_t.impl&%2.lt.? (Poly Poly) Bool)
(declare-fun lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly) Bool)
(declare-fun lib!betree.PivotTable_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!betree.PivotTable_v.impl&%0.len.? (Poly) Int)
(declare-fun lib!betree.BufferOffsets_v.impl&%0.len.? (Poly) Int)
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedSeq_v.impl&%0.len.? (Poly) Int)
(declare-fun lib!betree.LinkedBetree_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.entries_wf.? (Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? (Poly Poly) Bool)
(declare-fun lib!betree.PivotTable_v.impl&%0.spec_index.? (Poly Poly) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.LinkedBetree_v.impl&%0.my_domain.? (Poly) lib!betree.Domain_v.Domain.)
(declare-fun lib!betree.LinkedBetree_v.impl&%0.child_domain.? (Poly Poly) lib!betree.Domain_v.Domain.)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.child_linked.? (Poly Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? (Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.wf.? (Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.has_root.? (Dcr Type Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? (Poly Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.acyclic.? (Dcr Type Poly) Bool)
(declare-fun lib!betree.BufferDisk_v.impl&%0.repr.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.get.? (Poly Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.root.? (Dcr Type Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(declare-fun lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.agrees.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun lib!betree.BufferDisk_v.impl&%0.agrees_with.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.valid_view.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? (Dcr Type Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.get_rank.? (Dcr Type Poly Poly) Int)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.child_count.? (Dcr Type Poly) Int)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? (Dcr Type Poly Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? (Dcr Type Poly Poly Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? (Dcr Type Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? (Dcr Type Poly Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.the_ranking.? (Dcr Type Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedSeq_v.impl&%0.contains.? (Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.Likes_v.no_likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? (Dcr Type Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? (Dcr Type Poly Poly Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? (Dcr Type Poly Poly Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? (Dcr Type Poly Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? (Dcr Type Poly Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%0.likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? (Dcr Type Poly Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? (Dcr Type Poly Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? (Dcr Type Poly) tuple%2.)
(declare-fun vstd!multiset.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!multiset.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? (Dcr Type Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type value! V&)) (<= 0 (vstd!multiset.impl&%0.count.? V&. V& self! value!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! value!)) )))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (<= 0 (vstd!multiset.impl&%0.len.? V&. V& self!))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& self!)) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (vstd!multiset.impl&%0.empty.? V&. V&) (TYPE%vstd!multiset.Multiset. V&. V&)) :pattern ((vstd!multiset.impl&%0.empty.? V&. V&)) )))
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (has_type (vstd!multiset.impl&%0.singleton.? V&. V& v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.add.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.add.? V&. V& self! m2!)) )))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.sub.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.sub.? V&. V& self! m2!)) )))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_empty.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_singleton.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_singleton_different.) (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (=> (and (has_type v! V&) (has_type w! V&)) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_add.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_sub.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!) (ite (>= (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) (Sub (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_ext_equal.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_ext_equal_deep.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_empty.) (forall ((V&. Dcr) (V& Type)) (! (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&)) 0) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&))) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_singleton.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!)) 1)) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!))) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_add.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!)) (nClip (Add (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!))) ))))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.subset_of.) (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (<= (vstd!multiset.impl&%0.count.? V&. V& self! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) ))) :pattern ((vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_sub.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (=> (vstd!multiset.impl&%0.subset_of.? V&. V& m2! m1!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!)) (Sub (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!))) ))))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_count_le_len.) (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (<= (vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!)) ))))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Int Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Int) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$)) )) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.choose.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.choose.? V&. V& self!) (as_type (%%choose%%0 V& V&. V& self! 0 V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.choose.? V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) )))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_choose_count.) (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (=> (not (= (vstd!multiset.impl&%0.len.? V&. V& m!) 0)) (> (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!)) 0))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& m!) (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!))) ))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.dom.))
(declare-fun %%lambda%%0 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (B (> (vstd!multiset.impl&%0.count.? %%hole%%0 %%hole%%1 %%hole%%2 v$) %%hole%%3))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.dom.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.dom.? V&. V& self!) (vstd!set.impl&%0.new.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 V&. V& self! 0))))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.dom.? V&. V& self!) (TYPE%vstd!set.Set. V&. V&))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) )))
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_always_finite.) (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) :pattern ((vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) (TYPE%vstd!multiset.Multiset. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.insert.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (vstd!multiset.impl&%0.add.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) )))
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.remove.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.remove.? V&. V& self! v!) (vstd!multiset.impl&%0.sub.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.remove.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.remove.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.remove.? V&. V& self! v!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(declare-fun ens%vstd!seq_lib.impl&%0.to_multiset_ensures. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (ens%vstd!seq_lib.impl&%0.to_multiset_ensures. A&. A& self!) (and (forall ((a$ Poly)) (! (=> (has_type a$ A&) (ext_eq false (TYPE%vstd!multiset.Multiset. A&. A&) (vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq.Seq.push.? A&. A& self! a$)) (vstd!multiset.impl&%0.insert.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) a$))) :pattern ((vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq.Seq.push.? A&. A& self! a$))) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (ext_eq false (TYPE%vstd!multiset.Multiset. A&. A&) (vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq_lib.impl&%0.remove.? A&. A& self! i$)) (vstd!multiset.impl&%0.remove.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq_lib.impl&%0.remove.? A&. A& self! i$))) )) (= (vstd!seq.Seq.len.? A&. A& self!) (vstd!multiset.impl&%0.len.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!))) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! a$) (> (vstd!multiset.impl&%0.count.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) a$) 0))) :pattern ((vstd!multiset.impl&%0.count.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) a$)) )))) :pattern ((ens%vstd!seq_lib.impl&%0.to_multiset_ensures. A&. A& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!)) ))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) ))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) ))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.spec_le.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!) (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) :pattern ((vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!)) ))))
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%7 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) 1)) :pattern ((lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lte.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (<= (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. a!)) (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? a! b!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%0.arrow_e.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%0.arrow_e.) (forall ((self! Poly)) (! (= (lib!spec.KeyType_t.impl&%0.arrow_e.? self!) (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.impl&%0.arrow_e.? self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) )))
(declare-fun req%lib!spec.KeyType_t.to_key. (Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(define-fun is-lib!spec.KeyType_t.Element./Elem_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Elem) c))
(assert (forall ((elem! Poly)) (! (= (req%lib!spec.KeyType_t.to_key. elem!) (=> %%global_location_label%%8 (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. elem!)))) :pattern ((req%lib!spec.KeyType_t.to_key. elem!)) )))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_key.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_key.) (forall ((elem! Poly)) (! (= (lib!spec.KeyType_t.to_key.? elem!) (lib!spec.KeyType_t.Key./Key (%I (I (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. elem!)))))) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) ))))
(assert (forall ((elem! Poly)) (! (=> (has_type elem! TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? elem!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) )))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lte.))
(define-fun is-lib!spec.KeyType_t.Element./Max_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Max) c))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (or (is-lib!spec.KeyType_t.Element./Max_ (%Poly%lib!spec.KeyType_t.Element. b!)) (and (and (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. a!)) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. b!))) (lib!spec.KeyType_t.impl&%1.lte.? (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? a!)) (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? b!)))))) :pattern ((lib!spec.KeyType_t.impl&%2.lte.? a! b!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lt.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lt.? a! b!) (and (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (not (= a! b!)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? a! b!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.wf.? self!) (and (and (> (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) 0) (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!))) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$)) )))) :pattern ((lib!betree.PivotTable_v.impl&%0.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (<= 0 (lib!betree.PivotTable_v.impl&%0.len.? self!))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (<= 0 (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (<= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (<= 0 (lib!betree.LinkedSeq_v.impl&%0.len.? self!))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.len.? self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.wf.? self!) (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (lib!betree.BufferOffsets_v.impl&%0.len.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$) (lib!betree.LinkedBetree_v.impl&%0.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!) (< (%I child_idx!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! ptr!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! ptr!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (node! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. self! node!) (and (=> %%global_location_label%%9 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%10 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. self! node!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.) (forall ((self! Poly) (node! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$) (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))) i$)))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!)) ))))
(declare-fun req%lib!betree.PivotTable_v.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.spec_index. self! i!) (=> %%global_location_label%%11 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.spec_index. self! i!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i!))) :pattern ((lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!)) ))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (has_type i! INT)) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.my_domain. (Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.my_domain. self!) (=> %%global_location_label%%12 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.my_domain. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (I 0))) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.child_domain. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (child_idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.child_domain. self! child_idx!) (and (=> %%global_location_label%%13 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!)) (=> %%global_location_label%%14 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.child_domain. self! child_idx!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) child_idx!)) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (I (Add (%I child_idx!) 1)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!)) ))))
(assert (forall ((self! Poly) (child_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type child_idx! NAT)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.child_linked. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly) (node! Poly) (idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.child_linked. self! node! idx!) (and (=> %%global_location_label%%15 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%16 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)) (=> %%global_location_label%%17 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! idx!)) (=> %%global_location_label%%18 (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.child_linked. self! node! idx!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked.) (forall ((self! Poly) (node! Poly) (idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.child_linked.? self! node! idx!) (let ((child_ptr$ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))) idx!)))) (=> (is-core!option.Option./Some_ child_ptr$) (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. child_ptr$))))) (lib!betree.LinkedBetree_v.impl&%0.child_domain.? node! idx!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.child_linked.? self! node! idx!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. (Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly) (node! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. self! node!) (and (=> %%global_location_label%%19 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%20 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)) (=> %%global_location_label%%21 (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. self! node!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.) (forall ((self! Poly) (node! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? self! node!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$) (lib!betree.LinkedBetree_v.impl&%1.child_linked.? self! node! i$))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? self! node!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. (Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. self!) (=> %%global_location_label%%22 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$) (and (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr$)) (lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? self! (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.wf.? self!) (and (and (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!) (lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? self!)) (vstd!set.impl&%0.finite.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (and (lib!betree.LinkedBetree_v.impl&%1.wf.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.has_root.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.has_root.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (and (is-core!option.Option./Some_ (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly) (ranking! Poly) (addr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. self! ranking! addr!) (and (=> %%global_location_label%%23 (lib!betree.LinkedBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%24 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr!)) (=> %%global_location_label%%25 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) addr!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. self! ranking! addr!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.) (forall ((self! Poly) (ranking! Poly) (addr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? self! ranking! addr!) (let ((node$ (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr!)))) (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (and (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$) idx$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))) idx$)))) (let ((child_addr$ (%Poly%lib!spec.AsyncDisk_t.Address. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))) idx$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) (Poly%lib!spec.AsyncDisk_t.Address. child_addr$)) (< (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! (Poly%lib!spec.AsyncDisk_t.Address. child_addr$))) (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! addr!))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$) idx$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? self! ranking! addr!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking.) (forall ((self! Poly) (ranking! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? self! ranking!) (and (lib!betree.LinkedBetree_v.impl&%1.wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) addr$)) (lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? self! ranking! addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? self! ranking!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!) (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) ranking!)) (=> (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!) (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (exists ((ranking$ Poly)) (! (and (has_type ranking$ (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking$)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.repr.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.repr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& self!) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!))))) :pattern ((lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& self!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.get. (Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! Poly) (ptr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.get. self! ptr!) (and (=> %%global_location_label%%26 (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! ptr!)) (=> %%global_location_label%%27 (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.get. self! ptr!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.get.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.get.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.get.? self! ptr!) (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.get.? self! ptr!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.root. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.root. T&. T& self!) (=> %%global_location_label%%28 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.root. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.root.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.root.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%1.get.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.) (forall ((self! Poly) (big! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? self! big!) (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. big!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? self! big!)) ))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.agrees.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.agrees.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.agrees.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))) :pattern ((vstd!map_lib.impl&%0.agrees.? K&. K& V&. V& self! m2!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with.) (forall ((T&. Dcr) (T& Type) (self! Poly) (bigger! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.agrees_with.? T&. T& self! bigger!) (vstd!map_lib.impl&%0.agrees.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. bigger!)))) :pattern ((lib!betree.BufferDisk_v.impl&%0.agrees_with.? T&. T& self! bigger!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& self! other!) (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& other!) (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))) (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) (lib!betree.BufferDisk_v.impl&%0.agrees_with.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& self! other!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. T&. T& self! idx!) (and (=> %%global_location_label%%29 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%30 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%31 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. T&. T& self! idx!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx.) (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) idx!)) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type idx! NAT)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.get_rank. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.get_rank. T&. T& self! ranking!) (=> %%global_location_label%%32 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.get_rank. T&. T& self! ranking!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!) (ite (and (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) (nClip (Add (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) 1)) 0)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (<= 0 (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.child_count. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.child_count. T&. T& self!) (=> %%global_location_label%%33 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.child_count. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.child_count.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.child_count.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!) (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)))))) 0)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!) (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) (<= (%I child_idx!) (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. T&. T& self! ranking! child_idx!) (and (=> %%global_location_label%%34 (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) (=> %%global_location_label%%35 (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. T&. T& self! ranking! child_idx!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. T&. T& self! ranking!) (and (=> %%global_location_label%%36 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%37 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) (=> %%global_location_label%%38 (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. T&. T& self! ranking!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! fuel%) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type child_idx! NAT) (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (ite (= (%I child_idx!) (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)) (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (let ((child_addrs$ (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! child_idx!)) ranking! fuel%))) (let ((right_subtree_addrs$ (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! (I (nClip (Add (%I child_idx!) 1))) fuel%))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. child_addrs$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. right_subtree_addrs$)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type child_idx! NAT) (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx!) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! fuel%) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))) (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (let ((sub_tree_addrs$ (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! (I 0) fuel%))) (let ((root_addr$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. root_addr$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. sub_tree_addrs$)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! ranking!) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! (succ (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! ranking!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.the_ranking. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.the_ranking. T&. T& self!) (=> %%global_location_label%%39 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.the_ranking. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking.))
(declare-fun %%choose%%1 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((ranking$1 Poly)) (! (and (has_type ranking$1 %%hole%%0) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%1 %%hole%%2 %%hole%%3 ranking$1)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%4 %%hole%%5 %%hole%%6 ranking$1)) )) (exists ((ranking$1 Poly)) (! (and (and (has_type ranking$1 %%hole%%0) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%1 %%hole%%2 %%hole%%3 ranking$1)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) ranking$1)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%4 %%hole%%5 %%hole%%6 ranking$1))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!) (let ((ranking$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (as_type (%%choose%%1 (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT) T&. T& self! T&. T& self!) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))))) ranking$)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. T&. T& self!) (=> %%global_location_label%%40 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.contains.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.contains.? self! addr!) (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) addr!)) :pattern ((lib!betree.LinkedSeq_v.impl&%0.contains.? self! addr!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (buffer_addr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. T&. T& self! addr! buffer_addr!) (=> %%global_location_label%%41 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. T&. T& self! addr! buffer_addr!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.) (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (buffer_addr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? T&. T& self! addr! buffer_addr!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!)) addr!) (lib!betree.LinkedSeq_v.impl&%0.contains.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%1.get.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (core!option.Option./Some addr!))))))) buffer_addr!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? T&. T& self! addr! buffer_addr!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. T&. T& self!) (=> %%global_location_label%%42 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.))
(declare-fun %%lambda%%3 (Dcr Type Poly Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (buffer_addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) buffer_addr$) (B (exists ((addr$ Poly)) (! (and (has_type addr$ %%hole%%3) (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? %%hole%%4 %%hole%%5 %%hole%%6 addr$ buffer_addr$)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? %%hole%%0 %%hole%%1 %%hole%%2 addr$ buffer_addr$)) )))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) buffer_addr$)))))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ TYPE%lib!spec.AsyncDisk_t.Address. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%3 T&. T& self! TYPE%lib!spec.AsyncDisk_t.Address. T&. T& self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!)) ))))
(assert (fuel_bool_default fuel%lib!allocation_layer.Likes_v.no_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.Likes_v.no_likes.) (forall ((no%param Poly)) (! (= (lib!allocation_layer.Likes_v.no_likes.? no%param) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!allocation_layer.Likes_v.no_likes.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? T&. T& self!) (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) (lib!allocation_layer.Likes_v.no_likes.? (I 0)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? T&. T& self!)) ))))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. T&. T& self! ranking! start!) (and (=> %%global_location_label%%43 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%44 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) (=> %%global_location_label%%45 (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)))))))) (=> %%global_location_label%%46 (and (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start!) (< (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking!) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. T&. T& self! ranking! start!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. T&. T& self! ranking!) (=> %%global_location_label%%47 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. T&. T& self! ranking!)) )))
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! fuel%) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! zero)) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type start! NAT) (and (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start!) (< (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking!) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! (succ fuel%)) (ite (= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (lib!allocation_layer.Likes_v.no_likes.? (I 0)) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((child_betree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking! fuel%))) (let ((other_betree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! (I (nClip (Add (%I start!) 1))) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. child_betree_likes$) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. other_betree_likes$)))))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type start! NAT) (and (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start!) (< (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking!) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! ranking! start!) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! (succ fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! ranking! start!)) ))))
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! fuel%) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! zero)) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! (succ fuel%)) (ite (not (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (lib!allocation_layer.Likes_v.no_likes.? (I 0)) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((children_betree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! (I 0) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? T&. T& self!)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. children_betree_likes$))))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! ranking!) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! (succ (succ fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! ranking!)) ))))
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%0.likes.? self!) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!)))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%0.likes.? self!)) ))))
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (betree_likes! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! fuel%) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! zero)) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (betree_likes! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type betree_likes! (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! (succ fuel%)) (ite (> (vstd!multiset.impl&%0.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. betree_likes!) 0) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((addr$ (%Poly%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.choose.? $ TYPE%lib!spec.AsyncDisk_t.Address. betree_likes!)))) (let ((sub_buffer_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! (vstd!multiset.impl&%0.remove.? $ TYPE%lib!spec.AsyncDisk_t.Address. betree_likes! (Poly%lib!spec.AsyncDisk_t.Address. addr$)) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%0.likes.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) (Poly%lib!spec.AsyncDisk_t.Address. addr$))))))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. sub_buffer_likes$))))) (lib!allocation_layer.Likes_v.no_likes.? (I 0))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly) (betree_likes! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type betree_likes! (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& self! betree_likes!) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! (succ fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& self! betree_likes!)) ))))
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!) (ite (not (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!)) (tuple%2./tuple%2 (vstd!pervasive.arbitrary.? $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (vstd!pervasive.arbitrary.? $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (let ((tree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!))))) (tuple%2./tuple%2 (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. tree_likes$) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& self! (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. tree_likes$))))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%tuple%2. (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!)) (TYPE%tuple%2. $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.spec_le.) (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!multiset.impl&%0.spec_le.? V&. V& self! m2!) (vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!)) :pattern ((vstd!multiset.impl&%0.spec_le.? V&. V& self! m2!)) ))))
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.contains.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.contains.? V&. V& self! v!) (> (vstd!multiset.impl&%0.count.? V&. V& self! v!) 0)) :pattern ((vstd!multiset.impl&%0.contains.? V&. V& self! v!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. T&. T& self! other!) (=> %%global_location_label%%48 (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& self! other!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. T&. T& self! other!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& self! other!) (and (and (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))))))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& self! other!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. T&. T& self!) (=> %%global_location_label%%49 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. T&. T& self!)) )))
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? T&. T& self!) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? T&. T& self!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (addr! Poly) (start! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr. T&. T& self! ranking! addr! start!) (and (=> %%global_location_label%%50 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%51 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr. T&. T& self! ranking! addr! start!)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!) (and (=> %%global_location_label%%52 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%53 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (=> %%global_location_label%%54 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!)) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!)))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!)) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (r1! Poly) (r2! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type r1! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type r2! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (=> (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) ))))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_recur_lemma. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (child_idx! Int)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_recur_lemma. T&. T& self! ranking! child_idx!) (=> %%global_location_label%%55 (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I child_idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_recur_lemma. T&. T& self! ranking! child_idx!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_recur_lemma. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (child_idx! Int)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_recur_lemma. T&. T& self! ranking! child_idx!) (let ((reachable_addrs$ (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I child_idx!)))) (and (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) addr$) (lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) addr$ (I child_idx!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) addr$ (I child_idx!))) ))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= child_idx! (%I i$)) (< (%I i$) (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) i$)) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) i$)) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) ))))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_recur_lemma. T&. T& self! ranking! child_idx!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!) (and (=> %%global_location_label%%56 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%57 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!) (let ((reachable_addrs$ (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (and (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (=> (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) addr$) (not (= (core!option.Option./Some addr$) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) (lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) addr$ (I 0)))) :pattern ((lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) addr$ (I 0))) ))))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!)) )))
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.child_at_idx_reachable_addrs_ensures. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. Int) Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (child_idx! Int)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.child_at_idx_reachable_addrs_ensures. T&. T& self! child_idx!) (and (=> %%global_location_label%%58 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%59 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%60 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (I child_idx!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.child_at_idx_reachable_addrs_ensures. T&. T& self! child_idx!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.child_at_idx_reachable_addrs_ensures. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (child_idx! Int)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.child_at_idx_reachable_addrs_ensures. T&. T& self! child_idx!) (and (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (I child_idx!)))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (I child_idx!))))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (I child_idx!))))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.child_at_idx_reachable_addrs_ensures. T&. T& self! child_idx!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!) (and (=> %%global_location_label%%61 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (=> %%global_location_label%%62 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!) (and (=> %%global_location_label%%63 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%64 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (=> %%global_location_label%%65 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))) (=> %%global_location_label%%66 (<= start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!) (I start!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!) (I start!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!)) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (r1! Poly) (r2! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type r1! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type r2! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (=> (and (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! r1!)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! r2!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) ))))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (r1! Poly) (r2! Poly) (start! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type r1! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type r2! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type start! NAT)) (=> (and (and (and (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)))))))) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r1! start!)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r2! start!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r2! start!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r2! start!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r1! start!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r1! start!)) ))))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_domain. T&. T& self! ranking! start!) (and (=> %%global_location_label%%67 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%68 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%69 (<= start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_domain. T&. T& self! ranking! start!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_domain. T&. T& self! ranking! start!) (let ((reachable_betree_addrs$ (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!)))) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!)))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_betree_addrs$)))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_domain. T&. T& self! ranking! start!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%70 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!) (=> %%global_location_label%%70 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.addr_for_buffer. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. lib!spec.AsyncDisk_t.Address.) Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (buffer! lib!spec.AsyncDisk_t.Address.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.addr_for_buffer. T&. T& self! betree_likes! buffer!) (and (=> %%global_location_label%%71 (vstd!multiset.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))) (Poly%lib!spec.AsyncDisk_t.Address. buffer!))) (=> %%global_location_label%%72 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.addr_for_buffer. T&. T& self! betree_likes! buffer!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.addr_for_buffer. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. lib!spec.AsyncDisk_t.Address. lib!spec.AsyncDisk_t.Address.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (buffer! lib!spec.AsyncDisk_t.Address.) (addr! lib!spec.AsyncDisk_t.Address.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.addr_for_buffer. T&. T& self! betree_likes! buffer! addr!) (and (has_type (Poly%lib!spec.AsyncDisk_t.Address. addr!) TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!multiset.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!) (Poly%lib!spec.AsyncDisk_t.Address. addr!)) (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) (Poly%lib!spec.AsyncDisk_t.Address. addr!)))))))) (Poly%lib!spec.AsyncDisk_t.Address. buffer!)))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.addr_for_buffer. T&. T& self! betree_likes! buffer! addr!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (delta! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!) (and (=> %%global_location_label%%73 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))) (=> %%global_location_label%%74 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. delta!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (delta! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. delta!)))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. delta!)))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!) (and (=> %%global_location_label%%75 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%76 (= (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!) (and (=> %%global_location_label%%77 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%78 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (=> %%global_location_label%%79 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%80 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%81 (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))) (=> %%global_location_label%%82 (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))))) (=> %%global_location_label%%83 (<= start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!)) )))
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!) (and (=> %%global_location_label%%84 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%85 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%86 (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))) (=> %%global_location_label%%87 (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!)) )))
(declare-const T&. Dcr)
(declare-const T& Type)
(declare-const self! lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const other! lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-const start! Int)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Int)
(declare-const child@ lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const other_child@ lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const decrease%init0 Int)
(declare-const decrease%init1 Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)))
(assert (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)))
(assert (<= 0 start!))
(assert (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))
(assert (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))
(assert (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))
(assert (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))
(assert (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))))
(assert (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))))
(assert (<= start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(assert (not (=> (= decrease%init0 (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> (= decrease%init1 (Sub (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) start!)) (or (and (=> (< start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))) (=> (= child@ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (I start!))) (=> (= other_child@ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (I start!))) (=> (= tmp%1 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (I start!))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (and (=> %%location_label%%1 (check_decrease_int (let ((self!$0 child@) (other!$1 other_child@) (ranking!$2 ranking!)) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!$0) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!$2))) decrease%init0 false)) (and (=> %%location_label%%2 (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& child@ other_child@ ranking!)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& child@ other_child@ ranking!) (=> (= tmp%2 (nClip (Add start! 1))) (and (=> %%location_label%%3 (check_decrease_int (let ((self!$0 self!) (other!$1 other!) (ranking!$2 ranking!) (start!$3 tmp%2)) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!$0) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!$2))) decrease%init0 (check_decrease_int (let ((self!$0 self!) (other!$1 other!) (ranking!$2 ranking!) (start!$3 tmp%2)) (Sub (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!$0))))))) start!$3)) decrease%init1 false))) (and (=> %%location_label%%4 (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! tmp%2)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! tmp%2) %%switch_label%%0))))))))))))) (=> (not (< start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%5 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!)))))))))))
(check-sat)
(exit)
