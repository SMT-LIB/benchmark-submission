(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module zookeeper_controller::trusted::step'")
(set-info :comment ";; Fuel")
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed. FuelId)
(declare-const fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed. FuelId)
(assert (distinct fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed. fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed.))
(set-info :comment ";; Datatypes")
(declare-datatypes ((zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. 0) (zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. 0) (zookeeper_controller!zookeeper_controller.trusted.step.SubResource. 0) (zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. 0) (tuple%1. 0)) (((zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Init ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/?0 zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/?1 zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsStatefulSet ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsZKNode ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKParentNode ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKNode ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateZKNode ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateStatus ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Done ) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Error )) ((zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Get ) (zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Update ) (zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Create )) ((zookeeper_controller!zookeeper_controller.trusted.step.SubResource./HeadlessService ) (zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ClientService ) (zookeeper_controller!zookeeper_controller.trusted.step.SubResource./AdminServerService ) (zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ConfigMap ) (zookeeper_controller!zookeeper_controller.trusted.step.SubResource./StatefulSet )) ((zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeExistsFailed ) (zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists ) (zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateFailed ) (zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeSetDataFailed )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly)))))
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/0 (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/1 (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. Type)
(declare-const TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. (Poly) zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. (zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. (Poly) zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. (zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. (Poly) zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)
(declare-fun Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. (zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.) Poly)
(declare-fun %Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. (Poly) zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/0 x) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/?0 x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/0 x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/1 x) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/?1 x)) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/1 x)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. (Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) (! (= x (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. x))) :pattern ((Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.) (= x (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. x)))) :pattern ((has_type x TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) )))
(assert (forall ((x zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) (! (has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.) :pattern ((has_type (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. x) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) )))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) )))
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_Init")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterKRequestStep")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::get_AfterKRequestStep_0")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0.? (Poly) zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::get_AfterKRequestStep_1")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1.? (Poly) zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterExistsStatefulSet")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterExistsZKNode")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterCreateZKParentNode")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterCreateZKNode")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterUpdateZKNode")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterUpdateStatus")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_Done")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_Error")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_1")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1.? (Poly) zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_0")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0.? (Poly) zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_AfterKRequestStep_0")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0.? (Poly) zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_AfterKRequestStep_1")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1.? (Poly) zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::is_Get")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::is_Update")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::is_Create")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_HeadlessService")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_ClientService")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_AdminServerService")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_ConfigMap")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_StatefulSet")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeExistsFailed")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeCreateAlreadyExists")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeCreateFailed")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed.? (Poly) Bool)
(set-info :comment ";; Function-Decl zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeSetDataFailed")
(declare-fun zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed.? (Poly) Bool)
(set-info :comment ";; Function-Specs core::clone::Clone::clone")
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (a! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& a! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& a! %return!)) )))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((a$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)) )))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%19::clone")
(declare-fun ens%core!clone.impls.impl&%19.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%19.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%19.clone. b! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::clone")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%3.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (result! Poly)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%3.clone. self! result!) (and (ens%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self! result!) (= result! self!))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%3.clone. self! result!)) )))
(assert (forall ((tmp%%$ Poly) (result$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) (has_type result$ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) $ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) (F fndef_singleton) tmp%%$ result$) (let ((self$ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. result$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) $ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.) (F fndef_singleton) tmp%%$ result$)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::step::SubResource::clone")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%10.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (result! Poly)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%10.clone. self! result!) (and (ens%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. self! result!) (= result! self!))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%10.clone. self! result!)) )))
(assert (forall ((tmp%%$ Poly) (result$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) (has_type result$ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) $ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) (F fndef_singleton) tmp%%$ result$) (let ((self$ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. result$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) $ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.SubResource.) (F fndef_singleton) tmp%%$ result$)) )))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::clone")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%12.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (result! Poly)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%12.clone. self! result!) (and (ens%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. self! result!) (= result! self!))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%12.clone. self! result!)) )))
(assert (forall ((tmp%%$ Poly) (result$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) (has_type result$ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) $ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) (F fndef_singleton) tmp%%$ result$) (let ((self$ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. result$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) $ (TYPE%tuple%1. (REF $) TYPE%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.) (F fndef_singleton) tmp%%$ result$)) )))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeCreateAlreadyExists")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateAlreadyExists.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterKRequestStep")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterKRequestStep.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::get_AfterKRequestStep_1")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1.? self!) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/1 (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_1.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_Init")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Init_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Init) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Init_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Init.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::get_AfterKRequestStep_0")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0.? self!) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/0 (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.get_AfterKRequestStep_0.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterExistsStatefulSet")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsStatefulSet_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsStatefulSet) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsStatefulSet_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsStatefulSet.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterExistsZKNode")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsZKNode_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsZKNode) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterExistsZKNode_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterExistsZKNode.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterCreateZKParentNode")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKParentNode_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKParentNode) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKParentNode_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKParentNode.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterCreateZKNode")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKNode_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKNode) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterCreateZKNode_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterCreateZKNode.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterUpdateZKNode")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateZKNode_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateZKNode) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateZKNode_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateZKNode.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_AfterUpdateStatus")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateStatus_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateStatus) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterUpdateStatus_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_AfterUpdateStatus.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_Done")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Done_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Done) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Done_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Done.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::is_Error")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Error_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Error) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./Error_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%0.is_Error.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_1")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1.? self!) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/1 (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_1.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_0")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0.? self!) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/0 (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_0.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_AfterKRequestStep_0")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0.? self!) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/0 (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_0.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZookeeperReconcileStep::arrow_AfterKRequestStep_1")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1.))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1.? self!) (zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep./AfterKRequestStep/1 (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZookeeperReconcileStep. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%1.arrow_AfterKRequestStep_1.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::is_Get")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Get_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Get) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Get_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Get.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::is_Update")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Update_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Update) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Update_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Update.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ActionKind::is_Create")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Create_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ActionKind.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Create) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ActionKind./Create_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ActionKind. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%4.is_Create.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_HeadlessService")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./HeadlessService_ ((c zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.SubResource./HeadlessService) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./HeadlessService_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_HeadlessService.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_ClientService")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ClientService_ ((c zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ClientService) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ClientService_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ClientService.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_AdminServerService")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./AdminServerService_ ((c zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.SubResource./AdminServerService) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./AdminServerService_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_AdminServerService.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_ConfigMap")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ConfigMap_ ((c zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ConfigMap) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./ConfigMap_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_ConfigMap.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::SubResource::is_StatefulSet")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./StatefulSet_ ((c zookeeper_controller!zookeeper_controller.trusted.step.SubResource.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.SubResource./StatefulSet) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.SubResource./StatefulSet_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.SubResource. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%5.is_StatefulSet.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeExistsFailed")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeExistsFailed_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeExistsFailed) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeExistsFailed_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeExistsFailed.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeCreateFailed")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateFailed_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateFailed) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateFailed_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeCreateFailed.? self!)) ))))
(set-info :comment ";; Function-Axioms zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_ZKNodeSetDataFailed")
(assert (fuel_bool_default fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed.))
(define-fun is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeSetDataFailed_ ((c zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)) Bool ((_ is zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeSetDataFailed) c))
(assert (=> (fuel_bool fuel%zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed.) (forall ((self! Poly)) (! (= (zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed.? self!) (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeSetDataFailed_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. self!))) :pattern ((zookeeper_controller!zookeeper_controller.trusted.step.impl&%6.is_ZKNodeSetDataFailed.? self!)) ))))
(set-info :comment ";; Function-Specs zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_create_already_exists")
(declare-fun ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%7.is_create_already_exists. (zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. Bool) Bool)
(assert (forall ((self! zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.) (res! Bool)) (! (= (ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%7.is_create_already_exists. self! res!) (= res! (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. self!))))) :pattern ((ens%zookeeper_controller!zookeeper_controller.trusted.step.impl&%7.is_create_already_exists. self! res!)) )))
(set-info :comment ";; Function-Def zookeeper_controller::zookeeper_controller::trusted::step::ZKAPIError::is_create_already_exists")
(set-info :comment ";; controller_examples/zookeeper_controller/trusted/step.rs:56:5: 56:57 (#0)")
(declare-const res! Bool)
(declare-const self! zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError.)
(assert fuel_defaults)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> (= res! (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists_ self!)) (=> %%location_label%%0 (= res! (is-zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError./ZKNodeCreateAlreadyExists_ (%Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. (Poly%zookeeper_controller!zookeeper_controller.trusted.step.ZKAPIError. self!)))))))))
(assert %%query%%)
(check-sat)
(exit)
