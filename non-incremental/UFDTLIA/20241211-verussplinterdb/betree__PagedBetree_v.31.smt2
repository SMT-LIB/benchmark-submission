(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module betree::PagedBetree_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_difference_finite. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.query_internal. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.apply_filter. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.merge. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.all_keys. FuelId)
(declare-const fuel%lib!betree.Buffer_v.total_keys. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.empty_image. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.constant_child_map. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.empty_child_map. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%1.arrow_buffer. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%1.arrow_children. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%1.arrow_Node_buffer. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%1.arrow_Node_children. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.child. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.empty_root. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.promote. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.merge_buffer. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.push_memtable. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.split. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%2.flush. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%3.wf. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.structure. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.all_lines_wf. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.child_at. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.child_linked_at. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.result_at. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.result_linked_at. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.valid. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.result. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%4.valid_for. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%5.subpath. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%5.common_children. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%5.valid. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%5.target. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%5.replaced_children. FuelId)
(declare-const fuel%lib!betree.PagedBetree_v.impl&%5.substitute. FuelId)
(declare-const fuel%lib!spec.Messages_t.default_value. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.combine_deltas. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.apply_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.merge. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.empty. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_difference. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_difference_finite. fuel%lib!betree.Buffer_v.impl&%0.query. fuel%lib!betree.Buffer_v.impl&%1.query_internal. fuel%lib!betree.Buffer_v.impl&%1.apply_filter. fuel%lib!betree.Buffer_v.impl&%1.merge. fuel%lib!betree.Buffer_v.impl&%1.empty. fuel%lib!betree.Buffer_v.all_keys. fuel%lib!betree.Buffer_v.total_keys. fuel%lib!betree.PagedBetree_v.empty_image. fuel%lib!betree.PagedBetree_v.constant_child_map. fuel%lib!betree.PagedBetree_v.impl&%0.wf. fuel%lib!betree.PagedBetree_v.empty_child_map. fuel%lib!betree.PagedBetree_v.impl&%1.arrow_buffer. fuel%lib!betree.PagedBetree_v.impl&%1.arrow_children. fuel%lib!betree.PagedBetree_v.impl&%1.arrow_Node_buffer. fuel%lib!betree.PagedBetree_v.impl&%1.arrow_Node_children. fuel%lib!betree.PagedBetree_v.impl&%2.wf. fuel%lib!betree.PagedBetree_v.impl&%2.child. fuel%lib!betree.PagedBetree_v.impl&%2.empty_root. fuel%lib!betree.PagedBetree_v.impl&%2.promote. fuel%lib!betree.PagedBetree_v.impl&%2.merge_buffer. fuel%lib!betree.PagedBetree_v.impl&%2.push_memtable. fuel%lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children. fuel%lib!betree.PagedBetree_v.impl&%2.split. fuel%lib!betree.PagedBetree_v.impl&%2.flush. fuel%lib!betree.PagedBetree_v.impl&%3.wf. fuel%lib!betree.PagedBetree_v.impl&%4.structure. fuel%lib!betree.PagedBetree_v.impl&%4.all_lines_wf. fuel%lib!betree.PagedBetree_v.impl&%4.child_at. fuel%lib!betree.PagedBetree_v.impl&%4.child_linked_at. fuel%lib!betree.PagedBetree_v.impl&%4.result_at. fuel%lib!betree.PagedBetree_v.impl&%4.result_linked_at. fuel%lib!betree.PagedBetree_v.impl&%4.valid. fuel%lib!betree.PagedBetree_v.impl&%4.result. fuel%lib!betree.PagedBetree_v.impl&%4.valid_for. fuel%lib!betree.PagedBetree_v.impl&%5.subpath. fuel%lib!betree.PagedBetree_v.impl&%5.common_children. fuel%lib!betree.PagedBetree_v.impl&%5.valid. fuel%lib!betree.PagedBetree_v.impl&%5.target. fuel%lib!betree.PagedBetree_v.impl&%5.replaced_children. fuel%lib!betree.PagedBetree_v.impl&%5.substitute. fuel%lib!spec.Messages_t.default_value. fuel%lib!spec.Messages_t.nop_delta. fuel%lib!spec.Messages_t.impl&%1.combine_deltas. fuel%lib!spec.Messages_t.impl&%1.apply_delta. fuel%lib!spec.Messages_t.impl&%1.merge. fuel%lib!spec.Messages_t.impl&%1.empty. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_difference.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_difference_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. 0)
(declare-sort vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-datatypes ((lib!abstract_system.StampedMap_v.Stamped. 0) (lib!betree.Buffer_v.SimpleBuffer. 0) (lib!betree.Memtable_v.Memtable. 0) (lib!betree.PagedBetree_v.ChildMap. 0) (lib!betree.PagedBetree_v.BetreeNode. 0) (lib!betree.PagedBetree_v.QueryReceiptLine. 0) (lib!betree.PagedBetree_v.QueryReceipt. 0) (lib!betree.PagedBetree_v.Path. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!abstract_system.StampedMap_v.Stamped./Stamped (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value Poly) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end Int))) ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Memtable_v.Memtable./Memtable/?buffer Poly) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end Int))) ((lib!betree.PagedBetree_v.ChildMap./ChildMap (lib!betree.PagedBetree_v.ChildMap./ChildMap/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.))) ((lib!betree.PagedBetree_v.BetreeNode./Nil ) (lib!betree.PagedBetree_v.BetreeNode./Node (lib!betree.PagedBetree_v.BetreeNode./Node/?buffer lib!betree.Buffer_v.SimpleBuffer.) (lib!betree.PagedBetree_v.BetreeNode./Node/?children lib!betree.PagedBetree_v.ChildMap.))) ((lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/?node lib!betree.PagedBetree_v.BetreeNode.) (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/?result lib!spec.Messages_t.Message.))) ((lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/?key lib!spec.KeyType_t.Key.) (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/?root lib!betree.PagedBetree_v.BetreeNode.) (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/?lines vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.))) ((lib!betree.PagedBetree_v.Path./Path (lib!betree.PagedBetree_v.Path./Path/?node lib!betree.PagedBetree_v.BetreeNode.) (lib!betree.PagedBetree_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.PagedBetree_v.Path./Path/?routing vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/value (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (lib!abstract_system.StampedMap_v.Stamped.) Int)
(declare-fun lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (lib!betree.Buffer_v.SimpleBuffer.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/buffer (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/seq_end (lib!betree.Memtable_v.Memtable.) Int)
(declare-fun lib!betree.PagedBetree_v.ChildMap./ChildMap/map (lib!betree.PagedBetree_v.ChildMap.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.)
(declare-fun lib!betree.PagedBetree_v.BetreeNode./Node/buffer (lib!betree.PagedBetree_v.BetreeNode.) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.PagedBetree_v.BetreeNode./Node/children (lib!betree.PagedBetree_v.BetreeNode.) lib!betree.PagedBetree_v.ChildMap.)
(declare-fun lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (lib!betree.PagedBetree_v.QueryReceiptLine.) lib!betree.PagedBetree_v.BetreeNode.)
(declare-fun lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result (lib!betree.PagedBetree_v.QueryReceiptLine.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key (lib!betree.PagedBetree_v.QueryReceipt.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/root (lib!betree.PagedBetree_v.QueryReceipt.) lib!betree.PagedBetree_v.BetreeNode.)
(declare-fun lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (lib!betree.PagedBetree_v.QueryReceipt.) vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.)
(declare-fun lib!betree.PagedBetree_v.Path./Path/node (lib!betree.PagedBetree_v.Path.) lib!betree.PagedBetree_v.BetreeNode.)
(declare-fun lib!betree.PagedBetree_v.Path./Path/key (lib!betree.PagedBetree_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PagedBetree_v.Path./Path/routing (lib!betree.PagedBetree_v.Path.) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!abstract_system.StampedMap_v.Stamped. (Dcr Type) Type)
(declare-const TYPE%lib!betree.Buffer_v.SimpleBuffer. Type)
(declare-fun TYPE%lib!betree.Memtable_v.Memtable. (Dcr Type) Type)
(declare-const TYPE%lib!betree.PagedBetree_v.ChildMap. Type)
(declare-const TYPE%lib!betree.PagedBetree_v.BetreeNode. Type)
(declare-const TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. Type)
(declare-const TYPE%lib!betree.PagedBetree_v.QueryReceipt. Type)
(declare-const TYPE%lib!betree.PagedBetree_v.Path. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (Poly) vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun %Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.SimpleBuffer.) Poly)
(declare-fun %Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun %Poly%lib!betree.Memtable_v.Memtable. (Poly) lib!betree.Memtable_v.Memtable.)
(declare-fun Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.ChildMap.) Poly)
(declare-fun %Poly%lib!betree.PagedBetree_v.ChildMap. (Poly) lib!betree.PagedBetree_v.ChildMap.)
(declare-fun Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.BetreeNode.) Poly)
(declare-fun %Poly%lib!betree.PagedBetree_v.BetreeNode. (Poly) lib!betree.PagedBetree_v.BetreeNode.)
(declare-fun Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (lib!betree.PagedBetree_v.QueryReceiptLine.) Poly)
(declare-fun %Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly) lib!betree.PagedBetree_v.QueryReceiptLine.)
(declare-fun Poly%lib!betree.PagedBetree_v.QueryReceipt. (lib!betree.PagedBetree_v.QueryReceipt.) Poly)
(declare-fun %Poly%lib!betree.PagedBetree_v.QueryReceipt. (Poly) lib!betree.PagedBetree_v.QueryReceipt.)
(declare-fun Poly%lib!betree.PagedBetree_v.Path. (lib!betree.PagedBetree_v.Path.) Poly)
(declare-fun %Poly%lib!betree.PagedBetree_v.Path. (Poly) lib!betree.PagedBetree_v.Path.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.)) (= x (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (%Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) (= x (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= x (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. x))) :pattern ((Poly%lib!abstract_system.StampedMap_v.Stamped. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (= x (Poly%lib!abstract_system.StampedMap_v.Stamped. (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! Poly) (_seq_end! Int)) (! (=> (and (has_type _value! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) :pattern ((has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (has_type (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) T&)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (<= 0 (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(define-fun is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ ((c lib!abstract_system.StampedMap_v.Stamped.)) Bool ((_ is lib!abstract_system.StampedMap_v.Stamped./Stamped) c))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ x) (height_lt (height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) (height (Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x))) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= x (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. x))) :pattern ((Poly%lib!betree.Buffer_v.SimpleBuffer. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (= x (Poly%lib!betree.Buffer_v.SimpleBuffer. (%Poly%lib!betree.Buffer_v.SimpleBuffer. x)))) :pattern ((has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map x)) :pattern ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.) :pattern ((has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type y TYPE%lib!betree.Buffer_v.SimpleBuffer.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. y))))) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) :pattern ((ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= x (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. x))) :pattern ((Poly%lib!betree.Memtable_v.Memtable. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (= x (Poly%lib!betree.Memtable_v.Memtable. (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_buffer! Poly) (_seq_end! Int)) (! (=> (and (has_type _buffer! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/buffer x) (lib!betree.Memtable_v.Memtable./Memtable/?buffer x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) T&)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end x) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (<= 0 (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(define-fun is-lib!betree.Memtable_v.Memtable./Memtable_ ((c lib!betree.Memtable_v.Memtable.)) Bool ((_ is lib!betree.Memtable_v.Memtable./Memtable) c))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (=> (is-lib!betree.Memtable_v.Memtable./Memtable_ x) (height_lt (height (lib!betree.Memtable_v.Memtable./Memtable/buffer x)) (height (Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((height (lib!betree.Memtable_v.Memtable./Memtable/buffer x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type y (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (ext_eq deep T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. y))) (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. y)))) (ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) )))
(assert (forall ((x lib!betree.PagedBetree_v.ChildMap.)) (! (= x (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. x))) :pattern ((Poly%lib!betree.PagedBetree_v.ChildMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.ChildMap.) (= x (Poly%lib!betree.PagedBetree_v.ChildMap. (%Poly%lib!betree.PagedBetree_v.ChildMap. x)))) :pattern ((has_type x TYPE%lib!betree.PagedBetree_v.ChildMap.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.ChildMap.)) (! (= (lib!betree.PagedBetree_v.ChildMap./ChildMap/map x) (lib!betree.PagedBetree_v.ChildMap./ChildMap/?map x)) :pattern ((lib!betree.PagedBetree_v.ChildMap./ChildMap/map x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.ChildMap.)) (! (has_type (Poly%lib!betree.PagedBetree_v.ChildMap. x) TYPE%lib!betree.PagedBetree_v.ChildMap.) :pattern ((has_type (Poly%lib!betree.PagedBetree_v.ChildMap. x) TYPE%lib!betree.PagedBetree_v.ChildMap.)) )))
(define-fun is-lib!betree.PagedBetree_v.ChildMap./ChildMap_ ((c lib!betree.PagedBetree_v.ChildMap.)) Bool ((_ is lib!betree.PagedBetree_v.ChildMap./ChildMap) c))
(assert (forall ((x lib!betree.PagedBetree_v.ChildMap.)) (! (=> (is-lib!betree.PagedBetree_v.ChildMap./ChildMap_ x) (height_lt (height (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map x))) (height (Poly%lib!betree.PagedBetree_v.ChildMap. x)))) :pattern ((height (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map x)))) )))
(assert (forall ((x lib!betree.PagedBetree_v.ChildMap.)) (! (=> (is-lib!betree.PagedBetree_v.ChildMap./ChildMap_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map x)))) (height (Poly%lib!betree.PagedBetree_v.ChildMap. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map x))))) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PagedBetree_v.ChildMap.) (has_type y TYPE%lib!betree.PagedBetree_v.ChildMap.) (= (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. x)) (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. y)))) (ext_eq deep TYPE%lib!betree.PagedBetree_v.ChildMap. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PagedBetree_v.ChildMap. x y)) )))
(assert (forall ((x lib!betree.PagedBetree_v.BetreeNode.)) (! (= x (%Poly%lib!betree.PagedBetree_v.BetreeNode. (Poly%lib!betree.PagedBetree_v.BetreeNode. x))) :pattern ((Poly%lib!betree.PagedBetree_v.BetreeNode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.BetreeNode.) (= x (Poly%lib!betree.PagedBetree_v.BetreeNode. (%Poly%lib!betree.PagedBetree_v.BetreeNode. x)))) :pattern ((has_type x TYPE%lib!betree.PagedBetree_v.BetreeNode.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.BetreeNode.)) (! (= (lib!betree.PagedBetree_v.BetreeNode./Node/buffer x) (lib!betree.PagedBetree_v.BetreeNode./Node/?buffer x)) :pattern ((lib!betree.PagedBetree_v.BetreeNode./Node/buffer x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.BetreeNode.)) (! (= (lib!betree.PagedBetree_v.BetreeNode./Node/children x) (lib!betree.PagedBetree_v.BetreeNode./Node/?children x)) :pattern ((lib!betree.PagedBetree_v.BetreeNode./Node/children x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.BetreeNode.)) (! (has_type (Poly%lib!betree.PagedBetree_v.BetreeNode. x) TYPE%lib!betree.PagedBetree_v.BetreeNode.) :pattern ((has_type (Poly%lib!betree.PagedBetree_v.BetreeNode. x) TYPE%lib!betree.PagedBetree_v.BetreeNode.)) )))
(define-fun is-lib!betree.PagedBetree_v.BetreeNode./Node_ ((c lib!betree.PagedBetree_v.BetreeNode.)) Bool ((_ is lib!betree.PagedBetree_v.BetreeNode./Node) c))
(assert (forall ((x lib!betree.PagedBetree_v.BetreeNode.)) (! (=> (is-lib!betree.PagedBetree_v.BetreeNode./Node_ x) (height_lt (height (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.BetreeNode./Node/children x))) (height (Poly%lib!betree.PagedBetree_v.BetreeNode. x)))) :pattern ((height (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.BetreeNode./Node/children x)))) )))
(define-fun is-lib!betree.PagedBetree_v.BetreeNode./Nil_ ((c lib!betree.PagedBetree_v.BetreeNode.)) Bool ((_ is lib!betree.PagedBetree_v.BetreeNode./Nil) c))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PagedBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.PagedBetree_v.BetreeNode.) (is-lib!betree.PagedBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. x)) (is-lib!betree.PagedBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. y))) (ext_eq deep TYPE%lib!betree.PagedBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PagedBetree_v.BetreeNode. x y)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PagedBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.PagedBetree_v.BetreeNode.) (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. x)) (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. y)) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. x))) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. y)))) (= (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. x)) (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. y)))) (ext_eq deep TYPE%lib!betree.PagedBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PagedBetree_v.BetreeNode. x y)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceiptLine.)) (! (= x (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%lib!betree.PagedBetree_v.QueryReceiptLine. x))) :pattern ((Poly%lib!betree.PagedBetree_v.QueryReceiptLine. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.) (= x (Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. x)))) :pattern ((has_type x TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.)) )))
(assert (forall ((_node! lib!betree.PagedBetree_v.BetreeNode.) (_result! lib!spec.Messages_t.Message.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Message. _result!) TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.)) :pattern ((has_type (Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine _node! _result!)) TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceiptLine.)) (! (= (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node x) (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/?node x)) :pattern ((lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceiptLine.)) (! (= (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result x) (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/?result x)) :pattern ((lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. x)) (has_type x TYPE%lib!betree.PagedBetree_v.QueryReceiptLine.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceipt.)) (! (= x (%Poly%lib!betree.PagedBetree_v.QueryReceipt. (Poly%lib!betree.PagedBetree_v.QueryReceipt. x))) :pattern ((Poly%lib!betree.PagedBetree_v.QueryReceipt. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.QueryReceipt.) (= x (Poly%lib!betree.PagedBetree_v.QueryReceipt. (%Poly%lib!betree.PagedBetree_v.QueryReceipt. x)))) :pattern ((has_type x TYPE%lib!betree.PagedBetree_v.QueryReceipt.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_root! lib!betree.PagedBetree_v.BetreeNode.) (_lines! vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.PagedBetree_v.QueryReceipt. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.PagedBetree_v.QueryReceipt.)) :pattern ((has_type (Poly%lib!betree.PagedBetree_v.QueryReceipt. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt _key! _root! _lines!)) TYPE%lib!betree.PagedBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceipt.)) (! (= (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key x) (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/?key x)) :pattern ((lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PagedBetree_v.QueryReceipt. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PagedBetree_v.QueryReceipt. x)) (has_type x TYPE%lib!betree.PagedBetree_v.QueryReceipt.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceipt.)) (! (= (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/root x) (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/?root x)) :pattern ((lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/root x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.QueryReceipt.)) (! (= (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines x) (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/?lines x)) :pattern ((lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.Path.)) (! (= x (%Poly%lib!betree.PagedBetree_v.Path. (Poly%lib!betree.PagedBetree_v.Path. x))) :pattern ((Poly%lib!betree.PagedBetree_v.Path. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.Path.) (= x (Poly%lib!betree.PagedBetree_v.Path. (%Poly%lib!betree.PagedBetree_v.Path. x)))) :pattern ((has_type x TYPE%lib!betree.PagedBetree_v.Path.)) )))
(assert (forall ((_node! lib!betree.PagedBetree_v.BetreeNode.) (_key! lib!spec.KeyType_t.Key.) (_routing! vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.PagedBetree_v.Path. (lib!betree.PagedBetree_v.Path./Path _node! _key! _routing!)) TYPE%lib!betree.PagedBetree_v.Path.)) :pattern ((has_type (Poly%lib!betree.PagedBetree_v.Path. (lib!betree.PagedBetree_v.Path./Path _node! _key! _routing!)) TYPE%lib!betree.PagedBetree_v.Path.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.Path.)) (! (= (lib!betree.PagedBetree_v.Path./Path/node x) (lib!betree.PagedBetree_v.Path./Path/?node x)) :pattern ((lib!betree.PagedBetree_v.Path./Path/node x)) )))
(assert (forall ((x lib!betree.PagedBetree_v.Path.)) (! (= (lib!betree.PagedBetree_v.Path./Path/key x) (lib!betree.PagedBetree_v.Path./Path/?key x)) :pattern ((lib!betree.PagedBetree_v.Path./Path/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PagedBetree_v.Path.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.Path./Path/key (%Poly%lib!betree.PagedBetree_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PagedBetree_v.Path./Path/key (%Poly%lib!betree.PagedBetree_v.Path. x)) (has_type x TYPE%lib!betree.PagedBetree_v.Path.)) )))
(assert (forall ((x lib!betree.PagedBetree_v.Path.)) (! (= (lib!betree.PagedBetree_v.Path./Path/routing x) (lib!betree.PagedBetree_v.Path./Path/?routing x)) :pattern ((lib!betree.PagedBetree_v.Path./Path/routing x)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%lib!betree.Buffer_v.Buffer. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.Buffer_v.Buffer. Self%&. Self%&)) )))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::default_value")
(declare-fun lib!spec.Messages_t.default_value.? (Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::empty")
(declare-fun lib!spec.Messages_t.impl&%1.empty.? (Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::query")
(declare-fun lib!betree.Buffer_v.Buffer.query.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::nop_delta")
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::query_internal")
(declare-fun lib!betree.Buffer_v.impl&%1.query_internal.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::empty")
(declare-fun lib!betree.Buffer_v.impl&%1.empty.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::combine_deltas")
(declare-fun lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::apply_delta")
(declare-fun lib!spec.Messages_t.impl&%1.apply_delta.? (Poly Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::merge")
(declare-fun lib!spec.Messages_t.impl&%1.merge.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::merge")
(declare-fun lib!betree.Buffer_v.impl&%1.merge.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::apply_filter")
(declare-fun lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::all_keys")
(declare-fun lib!betree.Buffer_v.all_keys.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::structure")
(declare-fun lib!betree.PagedBetree_v.impl&%4.structure.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::total_keys")
(declare-fun lib!betree.Buffer_v.total_keys.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::arrow_children")
(declare-fun lib!betree.PagedBetree_v.impl&%1.arrow_children.? (Poly) lib!betree.PagedBetree_v.ChildMap.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::ChildMap::wf")
(declare-fun lib!betree.PagedBetree_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!betree.PagedBetree_v.impl&%0.rec%wf.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::wf")
(declare-fun lib!betree.PagedBetree_v.impl&%2.wf.? (Poly) Bool)
(declare-fun lib!betree.PagedBetree_v.impl&%2.rec%wf.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceiptLine::wf")
(declare-fun lib!betree.PagedBetree_v.impl&%3.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::all_lines_wf")
(declare-fun lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::child")
(declare-fun lib!betree.PagedBetree_v.impl&%2.child.? (Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::child_at")
(declare-fun lib!betree.PagedBetree_v.impl&%4.child_at.? (Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::child_linked_at")
(declare-fun lib!betree.PagedBetree_v.impl&%4.child_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::arrow_buffer")
(declare-fun lib!betree.PagedBetree_v.impl&%1.arrow_buffer.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::result_at")
(declare-fun lib!betree.PagedBetree_v.impl&%4.result_at.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::result_linked_at")
(declare-fun lib!betree.PagedBetree_v.impl&%4.result_linked_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::valid")
(declare-fun lib!betree.PagedBetree_v.impl&%4.valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::valid_for")
(declare-fun lib!betree.PagedBetree_v.impl&%4.valid_for.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::QueryReceipt::result")
(declare-fun lib!betree.PagedBetree_v.impl&%4.result.? (Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::merge_buffer")
(declare-fun lib!betree.PagedBetree_v.impl&%2.merge_buffer.? (Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::constant_child_map")
(declare-fun lib!betree.PagedBetree_v.constant_child_map.? (Poly) lib!betree.PagedBetree_v.ChildMap.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::empty_child_map")
(declare-fun lib!betree.PagedBetree_v.empty_child_map.? (Poly) lib!betree.PagedBetree_v.ChildMap.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::empty_root")
(declare-fun lib!betree.PagedBetree_v.impl&%2.empty_root.? (Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::promote")
(declare-fun lib!betree.PagedBetree_v.impl&%2.promote.? (Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::push_memtable")
(declare-fun lib!betree.PagedBetree_v.impl&%2.push_memtable.? (Poly Poly) lib!abstract_system.StampedMap_v.Stamped.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::Path::subpath")
(declare-fun lib!betree.PagedBetree_v.impl&%5.subpath.? (Poly) lib!betree.PagedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::Path::common_children")
(declare-fun lib!betree.PagedBetree_v.impl&%5.common_children.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::Path::valid")
(declare-fun lib!betree.PagedBetree_v.impl&%5.valid.? (Poly) Bool)
(declare-fun lib!betree.PagedBetree_v.impl&%5.rec%valid.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::Path::replaced_children")
(declare-fun lib!betree.PagedBetree_v.impl&%5.replaced_children.? (Poly Poly) lib!betree.PagedBetree_v.ChildMap.)
(declare-fun lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? (Poly Poly Fuel) lib!betree.PagedBetree_v.ChildMap.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::Path::substitute")
(declare-fun lib!betree.PagedBetree_v.impl&%5.substitute.? (Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(declare-fun lib!betree.PagedBetree_v.impl&%5.rec%substitute.? (Poly Poly Fuel) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::filter_buffer_and_children")
(declare-fun lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.? (Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::split")
(declare-fun lib!betree.PagedBetree_v.impl&%2.split.? (Poly Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::Path::target")
(declare-fun lib!betree.PagedBetree_v.impl&%5.target.? (Poly) lib!betree.PagedBetree_v.BetreeNode.)
(declare-fun lib!betree.PagedBetree_v.impl&%5.rec%target.? (Poly Fuel) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::flush")
(declare-fun lib!betree.PagedBetree_v.impl&%2.flush.? (Poly Poly) lib!betree.PagedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::empty_image")
(declare-fun lib!betree.PagedBetree_v.empty_image.? (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::arrow_Node_buffer")
(declare-fun lib!betree.PagedBetree_v.impl&%1.arrow_Node_buffer.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::PagedBetree_v::BetreeNode::arrow_Node_children")
(declare-fun lib!betree.PagedBetree_v.impl&%1.arrow_Node_children.? (Poly) lib!betree.PagedBetree_v.ChildMap.)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_difference_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::default_value")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.default_value.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.default_value.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.default_value.? no%param) (lib!spec.Messages_t.Value./Value (%I (I 0)))) :pattern ((lib!spec.Messages_t.default_value.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? no%param)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.default_value.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::empty")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.impl&%1.empty.? no%param) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? (I 0)))))) :pattern ((lib!spec.Messages_t.impl&%1.empty.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.empty.? no%param)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.empty.? no%param)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%5 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::query")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::nop_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query_internal")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.query_internal.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.query_internal.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::empty")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!betree.Buffer_v.impl&%1.empty.? no%param) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)))) :pattern ((lib!betree.Buffer_v.impl&%1.empty.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::combine_deltas")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.combine_deltas.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.combine_deltas.) (forall ((new! Poly) (old! Poly)) (! (= (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!) (%Poly%lib!spec.Messages_t.Delta. (ite (= (%Poly%lib!spec.Messages_t.Delta. new!) (lib!spec.Messages_t.nop_delta.? (I 0))) old! (ite (= (%Poly%lib!spec.Messages_t.Delta. old!) (lib!spec.Messages_t.nop_delta.? (I 0))) new! new!)))) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) ))))
(assert (forall ((new! Poly) (old! Poly)) (! (=> (and (has_type new! TYPE%lib!spec.Messages_t.Delta.) (has_type old! TYPE%lib!spec.Messages_t.Delta.)) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::apply_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.apply_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.apply_delta.) (forall ((delta! Poly) (value! Poly)) (! (= (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!) (%Poly%lib!spec.Messages_t.Value. value!)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) ))))
(assert (forall ((delta! Poly) (value! Poly)) (! (=> (and (has_type delta! TYPE%lib!spec.Messages_t.Delta.) (has_type value! TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::merge")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.merge.))
(define-fun is-lib!spec.Messages_t.Message./Define_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Define) c))
(define-fun is-lib!spec.Messages_t.Message./Update_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Update) c))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.merge.) (forall ((self! Poly) (new! Poly)) (! (= (lib!spec.Messages_t.impl&%1.merge.? self! new!) (let ((tmp%%$ (tuple%2./tuple%2 self! new!))) (ite (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Define_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. new_value$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((new_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly%lib!spec.Messages_t.Delta. new_delta$) (Poly%lib!spec.Messages_t.Delta. old_delta$))))))) (let ((value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? (Poly%lib!spec.Messages_t.Delta. delta$) (Poly%lib!spec.Messages_t.Value. value$))))))))))) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) ))))
(assert (forall ((self! Poly) (new! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type new! TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? self! new!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!betree.Buffer_v.Buffer. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::merge")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.merge.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Dcr) (%%hole%%14 Type) (%%hole%%15 Poly) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Poly) (%%hole%%19 Dcr) (%%hole%%20 Type) (%%hole%%21 Dcr) (%%hole%%22 Type) (%%hole%%23 Poly) (%%hole%%24 Dcr) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28) k$) (Poly%lib!spec.Messages_t.Message. (ite (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)) (lib!spec.Messages_t.impl&%1.merge.? (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 k$) (vstd!map.impl&%0.index.? %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 k$)) (%Poly%lib!spec.Messages_t.Message. (ite (vstd!set.impl&%0.contains.? %%hole%%16 %%hole%%17 %%hole%%18 k$) (vstd!map.impl&%0.index.? %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 k$) (vstd!map.impl&%0.index.? %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 k$)))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.merge.) (forall ((self! Poly) (new_Buffer! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.merge.? self! new_Buffer!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%0 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!)))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!)))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))))))))) :pattern ((lib!betree.Buffer_v.impl&%1.merge.? self! new_Buffer!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::apply_filter")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.apply_filter.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.apply_filter.) (forall ((self! Poly) (accept! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.apply_filter.? self! accept!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%2 $ TYPE%lib!spec.KeyType_t.Key. accept! $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))))))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))))))))) :pattern ((lib!betree.Buffer_v.impl&%1.apply_filter.? self! accept!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::all_keys")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.all_keys.))
(declare-fun %%lambda%%4 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0) k$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.all_keys.) (forall ((no%param Poly)) (! (= (lib!betree.Buffer_v.all_keys.? no%param) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%4 (B true))))))) :pattern ((lib!betree.Buffer_v.all_keys.? no%param)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::structure")
(set-info :comment ";; betree/PagedBetree_v.rs:179:5: 179:54 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::structure")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.structure.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.structure.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.structure.? self!) (and (and (and (< 0 (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))))) (= (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) (I 0)))) (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))))) (= (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i$)))) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) 1))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i$)) ))) (= (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.last.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))))) (lib!spec.Messages_t.impl&%1.empty.? (I 0))))) :pattern ((lib!betree.PagedBetree_v.impl&%4.structure.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::total_keys")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.total_keys.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.total_keys.) (forall ((keys! Poly)) (! (= (lib!betree.Buffer_v.total_keys.? keys!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) ))) :pattern ((lib!betree.Buffer_v.total_keys.? keys!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::arrow_children")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%1.arrow_children.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%1.arrow_children.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%1.arrow_children.? self!) (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PagedBetree_v.impl&%1.arrow_children.? self!)) ))))
(set-info :comment ";; Spec-Termination lib::betree::PagedBetree_v::ChildMap::wf")
(set-info :comment ";; betree/PagedBetree_v.rs:48:5: 48:47 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::ChildMap::wf")
(set-info :comment ";; betree/PagedBetree_v.rs:48:5: 48:47 (#0)")
(set-info :comment ";; Spec-Termination lib::betree::PagedBetree_v::BetreeNode::wf")
(set-info :comment ";; betree/PagedBetree_v.rs:70:5: 70:47 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::wf")
(set-info :comment ";; betree/PagedBetree_v.rs:70:5: 70:47 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::ChildMap::wf")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%0.wf.))
(declare-const fuel_nat%lib!betree.PagedBetree_v.impl&%0.wf. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PagedBetree_v.impl&%0.rec%wf.? self! fuel%) (lib!betree.PagedBetree_v.impl&%0.rec%wf.? self! zero)) :pattern ((lib!betree.PagedBetree_v.impl&%0.rec%wf.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.ChildMap.) (= (lib!betree.PagedBetree_v.impl&%0.rec%wf.? self! (succ fuel%)) (and (lib!betree.Buffer_v.total_keys.? (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. self!))))) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (lib!betree.PagedBetree_v.impl&%2.rec%wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. self!))) k$) fuel%)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. self!))) k$)) ))))) :pattern ((lib!betree.PagedBetree_v.impl&%0.rec%wf.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%0.wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.ChildMap.) (= (lib!betree.PagedBetree_v.impl&%0.wf.? self!) (lib!betree.PagedBetree_v.impl&%0.rec%wf.? self! (succ (succ fuel_nat%lib!betree.PagedBetree_v.impl&%0.wf.))))) :pattern ((lib!betree.PagedBetree_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::wf")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.wf.))
(declare-const fuel_nat%lib!betree.PagedBetree_v.impl&%2.wf. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PagedBetree_v.impl&%2.rec%wf.? self! fuel%) (lib!betree.PagedBetree_v.impl&%2.rec%wf.? self! zero)) :pattern ((lib!betree.PagedBetree_v.impl&%2.rec%wf.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.BetreeNode.) (= (lib!betree.PagedBetree_v.impl&%2.rec%wf.? self! (succ fuel%)) (=> (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!)) (lib!betree.PagedBetree_v.impl&%0.rec%wf.? (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))) fuel%)))) :pattern ((lib!betree.PagedBetree_v.impl&%2.rec%wf.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.BetreeNode.) (= (lib!betree.PagedBetree_v.impl&%2.wf.? self!) (lib!betree.PagedBetree_v.impl&%2.rec%wf.? self! (succ (succ fuel_nat%lib!betree.PagedBetree_v.impl&%2.wf.))))) :pattern ((lib!betree.PagedBetree_v.impl&%2.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceiptLine::wf")
(set-info :comment ";; betree/PagedBetree_v.rs:163:5: 163:47 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceiptLine::wf")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%3.wf.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%3.wf.? self!) (and (lib!betree.PagedBetree_v.impl&%2.wf.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. self!)))) (is-lib!spec.Messages_t.Message./Define_ (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. self!))))) :pattern ((lib!betree.PagedBetree_v.impl&%3.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::all_lines_wf")
(set-info :comment ";; betree/PagedBetree_v.rs:188:5: 188:57 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::all_lines_wf")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.all_lines_wf.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.all_lines_wf.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))))) (lib!betree.PagedBetree_v.impl&%3.wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i$)) ))) :pattern ((lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::BetreeNode::child")
(declare-fun req%lib!betree.PagedBetree_v.impl&%2.child. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%2.child. self! key!) (and (=> %%global_location_label%%6 (lib!betree.PagedBetree_v.impl&%2.wf.? self!)) (=> %%global_location_label%%7 (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%2.child. self! key!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::child")
(set-info :comment ";; betree/PagedBetree_v.rs:76:5: 76:66 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::child")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.child.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.child.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%2.child.? self! key!) (%Poly%lib!betree.PagedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!)))))) key!))) :pattern ((lib!betree.PagedBetree_v.impl&%2.child.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::QueryReceipt::child_at")
(declare-fun req%lib!betree.PagedBetree_v.impl&%4.child_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%4.child_at. self! i!) (and (=> %%global_location_label%%8 (lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? self!)) (=> %%global_location_label%%9 (lib!betree.PagedBetree_v.impl&%4.structure.? self!)) (=> %%global_location_label%%10 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%4.child_at. self! i!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::child_at")
(set-info :comment ";; betree/PagedBetree_v.rs:192:5: 192:67 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::child_at")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.child_at.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.child_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.child_at.? self! i!) (lib!betree.PagedBetree_v.impl&%2.child.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i!)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))))) :pattern ((lib!betree.PagedBetree_v.impl&%4.child_at.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::QueryReceipt::child_linked_at")
(declare-fun req%lib!betree.PagedBetree_v.impl&%4.child_linked_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%4.child_linked_at. self! i!) (and (=> %%global_location_label%%11 (lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? self!)) (=> %%global_location_label%%12 (lib!betree.PagedBetree_v.impl&%4.structure.? self!)) (=> %%global_location_label%%13 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%4.child_linked_at. self! i!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::child_linked_at")
(set-info :comment ";; betree/PagedBetree_v.rs:201:5: 201:68 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::child_linked_at")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.child_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.child_linked_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.child_linked_at.? self! i!) (= (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) (I (Add (%I i!) 1))))) (lib!betree.PagedBetree_v.impl&%4.child_at.? self! i!))) :pattern ((lib!betree.PagedBetree_v.impl&%4.child_linked_at.? self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::arrow_buffer")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%1.arrow_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%1.arrow_buffer.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%1.arrow_buffer.? self!) (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PagedBetree_v.impl&%1.arrow_buffer.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::QueryReceipt::result_at")
(declare-fun req%lib!betree.PagedBetree_v.impl&%4.result_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%4.result_at. self! i!) (=> %%global_location_label%%14 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%4.result_at. self! i!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::result_at")
(set-info :comment ";; betree/PagedBetree_v.rs:210:5: 210:65 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::result_at")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.result_at.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.result_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.result_at.? self! i!) (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i!)))) :pattern ((lib!betree.PagedBetree_v.impl&%4.result_at.? self! i!)) ))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PagedBetree_v.QueryReceipt.) (has_type i! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PagedBetree_v.impl&%4.result_at.? self! i!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PagedBetree_v.impl&%4.result_at.? self! i!)) )))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::QueryReceipt::result_linked_at")
(declare-fun req%lib!betree.PagedBetree_v.impl&%4.result_linked_at. (Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%4.result_linked_at. self! i!) (and (=> %%global_location_label%%15 (lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? self!)) (=> %%global_location_label%%16 (lib!betree.PagedBetree_v.impl&%4.structure.? self!)) (=> %%global_location_label%%17 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) 1)))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%4.result_linked_at. self! i!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::result_linked_at")
(set-info :comment ";; betree/PagedBetree_v.rs:216:5: 216:69 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::result_linked_at")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.result_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.result_linked_at.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.result_linked_at.? self! i!) (let ((msg$ (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.QueryReceiptLine./QueryReceiptLine/node (%Poly%lib!betree.PagedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))) i!))))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!))))))) (= (lib!betree.PagedBetree_v.impl&%4.result_at.? self! i!) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.PagedBetree_v.impl&%4.result_at.? self! (I (Add (%I i!) 1)))) (Poly%lib!spec.Messages_t.Message. msg$))))) :pattern ((lib!betree.PagedBetree_v.impl&%4.result_linked_at.? self! i!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::valid")
(set-info :comment ";; betree/PagedBetree_v.rs:226:5: 226:50 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::valid")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.valid.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.valid.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.valid.? self!) (and (and (and (lib!betree.PagedBetree_v.impl&%4.structure.? self!) (lib!betree.PagedBetree_v.impl&%4.all_lines_wf.? self!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.PagedBetree_v.impl&%4.child_linked_at.? self! i$))) :pattern ((lib!betree.PagedBetree_v.impl&%4.child_linked_at.? self! i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PagedBetree_v.QueryReceiptLine. (Poly%vstd!seq.Seq<lib!betree.PagedBetree_v.QueryReceiptLine.>. (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)))) 1))) (lib!betree.PagedBetree_v.impl&%4.result_linked_at.? self! i$))) :pattern ((lib!betree.PagedBetree_v.impl&%4.result_linked_at.? self! i$)) )))) :pattern ((lib!betree.PagedBetree_v.impl&%4.valid.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::valid_for")
(set-info :comment ";; betree/PagedBetree_v.rs:239:5: 239:82 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::valid_for")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.valid_for.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.valid_for.) (forall ((self! Poly) (root! Poly) (key! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.valid_for.? self! root! key!) (and (and (lib!betree.PagedBetree_v.impl&%4.valid.? self!) (= (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/root (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)) (%Poly%lib!betree.PagedBetree_v.BetreeNode. root!))) (= (lib!betree.PagedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.PagedBetree_v.QueryReceipt. self!)) (%Poly%lib!spec.KeyType_t.Key. key!)))) :pattern ((lib!betree.PagedBetree_v.impl&%4.valid_for.? self! root! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::QueryReceipt::result")
(declare-fun req%lib!betree.PagedBetree_v.impl&%4.result. (Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%4.result. self!) (=> %%global_location_label%%18 (lib!betree.PagedBetree_v.impl&%4.structure.? self!))) :pattern ((req%lib!betree.PagedBetree_v.impl&%4.result. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::QueryReceipt::result")
(set-info :comment ";; betree/PagedBetree_v.rs:233:5: 233:54 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::QueryReceipt::result")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%4.result.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%4.result.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%4.result.? self!) (lib!betree.PagedBetree_v.impl&%4.result_at.? self! (I 0))) :pattern ((lib!betree.PagedBetree_v.impl&%4.result.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.QueryReceipt.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PagedBetree_v.impl&%4.result.? self!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PagedBetree_v.impl&%4.result.? self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::merge_buffer")
(set-info :comment ";; betree/PagedBetree_v.rs:99:5: 99:89 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::merge_buffer")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.merge_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.merge_buffer.) (forall ((self! Poly) (new_buffer! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%2.merge_buffer.? self! new_buffer!) (lib!betree.PagedBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.merge.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))) new_buffer!))) (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!)))))) :pattern ((lib!betree.PagedBetree_v.impl&%2.merge_buffer.? self! new_buffer!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::constant_child_map")
(set-info :comment ";; betree/PagedBetree_v.rs:43:1: 43:77 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::constant_child_map")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.constant_child_map.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.constant_child_map.) (forall ((target! Poly)) (! (= (lib!betree.PagedBetree_v.constant_child_map.? target!) (lib!betree.PagedBetree_v.ChildMap./ChildMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.) (Poly%fun%1. (mk_fun (%%lambda%%4 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%4 target!))))))) :pattern ((lib!betree.PagedBetree_v.constant_child_map.? target!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::empty_child_map")
(set-info :comment ";; betree/PagedBetree_v.rs:57:1: 57:56 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::empty_child_map")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.empty_child_map.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.empty_child_map.) (forall ((no%param Poly)) (! (= (lib!betree.PagedBetree_v.empty_child_map.? no%param) (lib!betree.PagedBetree_v.constant_child_map.? (Poly%lib!betree.PagedBetree_v.BetreeNode. lib!betree.PagedBetree_v.BetreeNode./Nil))) :pattern ((lib!betree.PagedBetree_v.empty_child_map.? no%param)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::empty_root")
(set-info :comment ";; betree/PagedBetree_v.rs:84:5: 84:57 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::empty_root")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.empty_root.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.empty_root.) (forall ((no%param Poly)) (! (= (lib!betree.PagedBetree_v.impl&%2.empty_root.? no%param) (lib!betree.PagedBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.empty.? (I 0)))) (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.empty_child_map.? (I 0)))))) :pattern ((lib!betree.PagedBetree_v.impl&%2.empty_root.? no%param)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::promote")
(set-info :comment ";; betree/PagedBetree_v.rs:91:5: 91:58 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::promote")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.promote.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.promote.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%2.promote.? self!) (ite (is-lib!betree.PagedBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!)) (lib!betree.PagedBetree_v.impl&%2.empty_root.? (I 0)) (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))) :pattern ((lib!betree.PagedBetree_v.impl&%2.promote.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::push_memtable")
(set-info :comment ";; betree/PagedBetree_v.rs:106:5: 106:101 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::push_memtable")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.push_memtable.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.push_memtable.) (forall ((self! Poly) (memtable! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%2.push_memtable.? self! memtable!) (lib!abstract_system.StampedMap_v.Stamped./Stamped (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.impl&%2.merge_buffer.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.impl&%2.promote.? self!)) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. memtable!)))) (%I (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. memtable!)))))) :pattern ((lib!betree.PagedBetree_v.impl&%2.push_memtable.? self! memtable!)) ))))
(assert (forall ((self! Poly) (memtable! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PagedBetree_v.BetreeNode.) (has_type memtable! (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!betree.PagedBetree_v.impl&%2.push_memtable.? self! memtable!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.))) :pattern ((lib!betree.PagedBetree_v.impl&%2.push_memtable.? self! memtable!)) )))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::Path::subpath")
(declare-fun req%lib!betree.PagedBetree_v.impl&%5.subpath. (Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%5.subpath. self!) (and (=> %%global_location_label%%19 (< 0 (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!)))))) (=> %%global_location_label%%20 (lib!betree.PagedBetree_v.impl&%2.wf.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))))) (=> %%global_location_label%%21 (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!)))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%5.subpath. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::Path::subpath")
(set-info :comment ";; betree/PagedBetree_v.rs:254:5: 254:52 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::Path::subpath")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%5.subpath.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%5.subpath.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%5.subpath.? self!) (lib!betree.PagedBetree_v.Path./Path (%Poly%lib!betree.PagedBetree_v.BetreeNode. (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.impl&%2.child.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.Path./Path/key (%Poly%lib!betree.PagedBetree_v.Path. self!)))))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.Path./Path/key (%Poly%lib!betree.PagedBetree_v.Path. self!)))) (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (vstd!seq.Seq.subrange.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!))) (I 1) (I (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!))))))))) :pattern ((lib!betree.PagedBetree_v.impl&%5.subpath.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (has_type (Poly%lib!betree.PagedBetree_v.Path. (lib!betree.PagedBetree_v.impl&%5.subpath.? self!)) TYPE%lib!betree.PagedBetree_v.Path.)) :pattern ((lib!betree.PagedBetree_v.impl&%5.subpath.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::Path::common_children")
(declare-fun req%lib!betree.PagedBetree_v.impl&%5.common_children. (Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%5.common_children. self!) (and (=> %%global_location_label%%22 (lib!betree.PagedBetree_v.impl&%2.wf.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))))) (=> %%global_location_label%%23 (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!)))) (=> %%global_location_label%%24 (< 0 (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!)))))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%5.common_children. self!)) )))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::Path::common_children")
(set-info :comment ";; betree/PagedBetree_v.rs:263:5: 263:60 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::Path::common_children")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%5.common_children.))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%5.common_children.) (forall ((self! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%5.common_children.? self!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!))) (I 0)) k$) (= (lib!betree.PagedBetree_v.impl&%2.child.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))) k$) (lib!betree.PagedBetree_v.impl&%2.child.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PagedBetree_v.Path./Path/key (%Poly%lib!betree.PagedBetree_v.Path. self!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!))) (I 0)) k$)) ))) :pattern ((lib!betree.PagedBetree_v.impl&%5.common_children.? self!)) ))))
(set-info :comment ";; Spec-Termination lib::betree::PagedBetree_v::Path::valid")
(set-info :comment ";; betree/PagedBetree_v.rs:272:5: 272:50 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::Path::valid")
(set-info :comment ";; betree/PagedBetree_v.rs:272:5: 272:50 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::Path::valid")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%5.valid.))
(declare-const fuel_nat%lib!betree.PagedBetree_v.impl&%5.valid. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PagedBetree_v.impl&%5.rec%valid.? self! fuel%) (lib!betree.PagedBetree_v.impl&%5.rec%valid.? self! zero)) :pattern ((lib!betree.PagedBetree_v.impl&%5.rec%valid.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (= (lib!betree.PagedBetree_v.impl&%5.rec%valid.? self! (succ fuel%)) (and (and (lib!betree.PagedBetree_v.impl&%2.wf.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!)))) (is-lib!betree.PagedBetree_v.BetreeNode./Node_ (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!)))) (=> (< 0 (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!))))) (and (lib!betree.PagedBetree_v.impl&%5.rec%valid.? (Poly%lib!betree.PagedBetree_v.Path. (lib!betree.PagedBetree_v.impl&%5.subpath.? self!)) fuel%) (lib!betree.PagedBetree_v.impl&%5.common_children.? self!)))))) :pattern ((lib!betree.PagedBetree_v.impl&%5.rec%valid.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%5.valid.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (= (lib!betree.PagedBetree_v.impl&%5.valid.? self!) (lib!betree.PagedBetree_v.impl&%5.rec%valid.? self! (succ fuel_nat%lib!betree.PagedBetree_v.impl&%5.valid.)))) :pattern ((lib!betree.PagedBetree_v.impl&%5.valid.? self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::Path::replaced_children")
(declare-fun req%lib!betree.PagedBetree_v.impl&%5.replaced_children. (Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%5.replaced_children. self! replacement!) (and (=> %%global_location_label%%25 (lib!betree.PagedBetree_v.impl&%5.valid.? self!)) (=> %%global_location_label%%26 (lib!betree.PagedBetree_v.impl&%2.wf.? replacement!)) (=> %%global_location_label%%27 (< 0 (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!)))))))) :pattern ((req%lib!betree.PagedBetree_v.impl&%5.replaced_children. self! replacement!)) )))
(set-info :comment ";; Function-Specs lib::betree::PagedBetree_v::Path::substitute")
(declare-fun req%lib!betree.PagedBetree_v.impl&%5.substitute. (Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.PagedBetree_v.impl&%5.substitute. self! replacement!) (and (=> %%global_location_label%%28 (lib!betree.PagedBetree_v.impl&%5.valid.? self!)) (=> %%global_location_label%%29 (lib!betree.PagedBetree_v.impl&%2.wf.? replacement!)))) :pattern ((req%lib!betree.PagedBetree_v.impl&%5.substitute. self! replacement!)) )))
(set-info :comment ";; Spec-Termination lib::betree::PagedBetree_v::Path::replaced_children")
(set-info :comment ";; betree/PagedBetree_v.rs:294:5: 294:91 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::Path::replaced_children")
(set-info :comment ";; betree/PagedBetree_v.rs:294:5: 294:91 (#0)")
(set-info :comment ";; Spec-Termination lib::betree::PagedBetree_v::Path::substitute")
(set-info :comment ";; betree/PagedBetree_v.rs:308:5: 308:86 (#0)")
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::Path::substitute")
(set-info :comment ";; betree/PagedBetree_v.rs:308:5: 308:86 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::Path::replaced_children")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%5.replaced_children.))
(declare-const fuel_nat%lib!betree.PagedBetree_v.impl&%5.replaced_children. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! fuel%) (lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! zero)) :pattern ((lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! fuel%)) )))
(declare-fun %%lambda%%5 (Dcr Type Poly Poly lib!betree.PagedBetree_v.BetreeNode.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 lib!betree.PagedBetree_v.BetreeNode.) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (Poly%lib!betree.PagedBetree_v.BetreeNode. (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) %%hole%%4 (lib!betree.PagedBetree_v.impl&%2.child.? %%hole%%3 k$)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PagedBetree_v.BetreeNode.)) (= (lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! (succ fuel%)) (let ((replaced_child$ (lib!betree.PagedBetree_v.impl&%5.rec%substitute.? (Poly%lib!betree.PagedBetree_v.Path. (lib!betree.PagedBetree_v.impl&%5.subpath.? self!)) replacement! fuel%))) (lib!betree.PagedBetree_v.ChildMap./ChildMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.) (Poly%fun%1. (mk_fun (%%lambda%%4 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ TYPE%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!))) (I 0)) (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))) replaced_child$))))))))) :pattern ((lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%5.replaced_children.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PagedBetree_v.BetreeNode.)) (= (lib!betree.PagedBetree_v.impl&%5.replaced_children.? self! replacement!) (lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! (succ (succ fuel_nat%lib!betree.PagedBetree_v.impl&%5.replaced_children.))))) :pattern ((lib!betree.PagedBetree_v.impl&%5.replaced_children.? self! replacement!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::Path::substitute")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%5.substitute.))
(declare-const fuel_nat%lib!betree.PagedBetree_v.impl&%5.substitute. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.PagedBetree_v.impl&%5.rec%substitute.? self! replacement! fuel%) (lib!betree.PagedBetree_v.impl&%5.rec%substitute.? self! replacement! zero)) :pattern ((lib!betree.PagedBetree_v.impl&%5.rec%substitute.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PagedBetree_v.BetreeNode.)) (= (lib!betree.PagedBetree_v.impl&%5.rec%substitute.? self! replacement! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PagedBetree_v.Path./Path/routing (%Poly%lib!betree.PagedBetree_v.Path. self!)))) 0) (%Poly%lib!betree.PagedBetree_v.BetreeNode. replacement!) (lib!betree.PagedBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.Path./Path/node (%Poly%lib!betree.PagedBetree_v.Path. self!))))))) (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.impl&%5.rec%replaced_children.? self! replacement! fuel%))))))) :pattern ((lib!betree.PagedBetree_v.impl&%5.rec%substitute.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%5.substitute.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PagedBetree_v.Path.) (has_type replacement! TYPE%lib!betree.PagedBetree_v.BetreeNode.)) (= (lib!betree.PagedBetree_v.impl&%5.substitute.? self! replacement!) (lib!betree.PagedBetree_v.impl&%5.rec%substitute.? self! replacement! (succ (succ fuel_nat%lib!betree.PagedBetree_v.impl&%5.substitute.))))) :pattern ((lib!betree.PagedBetree_v.impl&%5.substitute.? self! replacement!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::filter_buffer_and_children")
(set-info :comment ";; betree/PagedBetree_v.rs:113:5: 113:95 (#0)")
(set-info :comment ";; Function-Axioms lib::betree::PagedBetree_v::BetreeNode::filter_buffer_and_children")
(assert (fuel_bool_default fuel%lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.))
(declare-fun %%lambda%%7 (Dcr Type Poly Dcr Type Dcr Type Poly lib!betree.PagedBetree_v.BetreeNode.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 lib!betree.PagedBetree_v.BetreeNode.) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) k$) (Poly%lib!betree.PagedBetree_v.BetreeNode. (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (%Poly%lib!betree.PagedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$)) %%hole%%8))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.) (forall ((self! Poly) (filter! Poly)) (! (= (lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.? self! filter!) (ite (is-lib!betree.PagedBetree_v.BetreeNode./Nil_ (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!)) (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!) (let ((filtered_children$ (lib!betree.PagedBetree_v.ChildMap./ChildMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode.) (Poly%fun%1. (mk_fun (%%lambda%%4 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!spec.KeyType_t.Key. filter! $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!betree.PagedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>. (lib!betree.PagedBetree_v.ChildMap./ChildMap/map (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. (lib!betree.PagedBetree_v.BetreeNode./Node/children (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!)))))) lib!betree.PagedBetree_v.BetreeNode./Nil)))))))) (lib!betree.PagedBetree_v.BetreeNode./Node (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PagedBetree_v.BetreeNode./Node/buffer (%Poly%lib!betree.PagedBetree_v.BetreeNode. self!))) filter!))) (%Poly%lib!betree.PagedBetree_v.ChildMap. (Poly%lib!betree.PagedBetree_v.ChildMap. filtered_children$)))))) :pattern ((lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.? self! filter!)) ))))
(set-info :comment ";; Function-Recommends lib::betree::PagedBetree_v::BetreeNode::split")
(set-info :comment ";; betree/PagedBetree_v.rs:127:5: 127:99 (#0)")
(declare-const %return! lib!betree.PagedBetree_v.BetreeNode.)
(declare-const self! Poly)
(declare-const left_keys! Poly)
(declare-const right_keys! Poly)
(declare-const k@ Poly)
(declare-const k$1@ Poly)
(declare-const map@ vstd!map.Map<lib!spec.KeyType_t.Key./lib!betree.PagedBetree_v.BetreeNode.>.)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!betree.PagedBetree_v.BetreeNode.))
(assert (has_type left_keys! (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))
(assert (has_type right_keys! (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))
(declare-fun %%lambda%%8 (Dcr Type Poly Poly Poly Dcr Type Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Poly) (%%hole%%9 Poly) (%%hole%%10 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) k$) (Poly%lib!betree.PagedBetree_v.BetreeNode. (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.impl&%2.child.? %%hole%%3 k$)) %%hole%%4) (ite (vstd!set.impl&%0.contains.? %%hole%%5 %%hole%%6 %%hole%%7 k$) (lib!betree.PagedBetree_v.impl&%2.filter_buffer_and_children.? (Poly%lib!betree.PagedBetree_v.BetreeNode. (lib!betree.PagedBetree_v.impl&%2.child.? %%hole%%8 k$)) %%hole%%9) (lib!betree.PagedBetree_v.impl&%2.child.? %%hole%%10 k$))))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) k$)))))
(assert (not true))
(check-sat)
(exit)
