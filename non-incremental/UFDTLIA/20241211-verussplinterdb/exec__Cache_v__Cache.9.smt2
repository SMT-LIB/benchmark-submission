(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module exec::Cache_v::Cache'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_value. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.values. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.is_injective. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.invert. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!set_lib.axiom_is_empty. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_reserve. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.get_reserve_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_initiate. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_complete. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_access. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_evict. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.get_evict_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_noop. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_writes. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_requests. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_reads. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_responses. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.reserve. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.access. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.access_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.access_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.evict. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.evict_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.evict_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.noop. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.noop_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.noop_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.initialize. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.initialize_enabled. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.next_by. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.next. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.next_strong_by. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.next_strong. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.init_by. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.init. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.invariant. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.inv. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.valid_read. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.valid_write. FuelId)
(declare-const fuel%lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_to. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_data. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_from. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_data. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_to. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_from. FuelId)
(declare-const fuel%lib!exec.Cache_v.impl&%0.arrow_data. FuelId)
(declare-const fuel%lib!exec.Cache_v.impl&%1.get_addr. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.is_empty. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.contains_value. fuel%vstd!map_lib.impl&%0.values. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!map_lib.impl&%0.is_injective. fuel%vstd!map_lib.impl&%0.invert. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!set_lib.axiom_is_empty. fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_0. fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0. fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0. fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0. fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!exec.Cache_v.Cache.impl&%1.is_reserve. fuel%lib!exec.Cache_v.Cache.impl&%1.get_reserve_0. fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_initiate. fuel%lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0. fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_complete. fuel%lib!exec.Cache_v.Cache.impl&%1.is_access. fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate. fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete. fuel%lib!exec.Cache_v.Cache.impl&%1.is_evict. fuel%lib!exec.Cache_v.Cache.impl&%1.get_evict_0. fuel%lib!exec.Cache_v.Cache.impl&%1.is_noop. fuel%lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params. fuel%lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0. fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!exec.Cache_v.Cache.impl&%3.is_initialize. fuel%lib!exec.Cache_v.Cache.impl&%3.get_initialize_0. fuel%lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params. fuel%lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_writes. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_requests. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_reads. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_responses. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests. fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses. fuel%lib!exec.Cache_v.Cache.impl&%5.reserve. fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate. fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete. fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.access. fuel%lib!exec.Cache_v.Cache.impl&%5.access_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.access_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate. fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete. fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.evict. fuel%lib!exec.Cache_v.Cache.impl&%5.evict_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.evict_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.noop. fuel%lib!exec.Cache_v.Cache.impl&%5.noop_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.noop_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.initialize. fuel%lib!exec.Cache_v.Cache.impl&%5.initialize_enabled. fuel%lib!exec.Cache_v.Cache.impl&%5.next_by. fuel%lib!exec.Cache_v.Cache.impl&%5.next. fuel%lib!exec.Cache_v.Cache.impl&%5.next_strong_by. fuel%lib!exec.Cache_v.Cache.impl&%5.next_strong. fuel%lib!exec.Cache_v.Cache.impl&%5.init_by. fuel%lib!exec.Cache_v.Cache.impl&%5.init. fuel%lib!exec.Cache_v.Cache.impl&%5.invariant. fuel%lib!exec.Cache_v.Cache.impl&%5.inv. fuel%lib!exec.Cache_v.Cache.impl&%5.valid_read. fuel%lib!exec.Cache_v.Cache.impl&%5.valid_write. fuel%lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping. fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_to. fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_data. fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_from. fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_data. fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_to. fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_from. fuel%lib!exec.Cache_v.impl&%0.arrow_data. fuel%lib!exec.Cache_v.impl&%1.get_addr. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!set_lib.axiom_is_empty.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. 0)
(declare-sort vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. 0)
(declare-sort vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. 0)
(declare-sort vstd!map.Map<i32./lib!exec.Cache_v.Status.>. 0)
(declare-sort vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!set.Set<i32.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. 0)
(declare-datatypes ((lib!exec.Cache_v.Cache.State. 0) (lib!exec.Cache_v.Cache.Step. 0) (lib!exec.Cache_v.Cache.Config. 0) (lib!exec.Cache_v.Cache.Label. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.AsyncDisk_t.DiskRequest. 0) (lib!spec.AsyncDisk_t.DiskResponse. 0) (lib!exec.Cache_v.Status. 0) (lib!exec.Cache_v.Entry. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!exec.Cache_v.Cache.State./State (lib!exec.Cache_v.Cache.State./State/?entries vstd!map.Map<i32./lib!exec.Cache_v.Entry.>.) (lib!exec.Cache_v.Cache.State./State/?status_map vstd!map.Map<i32./lib!exec.Cache_v.Status.>.) (lib!exec.Cache_v.Cache.State./State/?lookup_map vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>.))) ((lib!exec.Cache_v.Cache.Step./reserve (lib!exec.Cache_v.Cache.Step./reserve/?0 vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (lib!exec.Cache_v.Cache.Step./load_initiate (lib!exec.Cache_v.Cache.Step./load_initiate/?0 vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (lib!exec.Cache_v.Cache.Step./load_complete ) (lib!exec.Cache_v.Cache.Step./access ) (lib!exec.Cache_v.Cache.Step./writeback_initiate ) (lib!exec.Cache_v.Cache.Step./writeback_complete ) (lib!exec.Cache_v.Cache.Step./evict (lib!exec.Cache_v.Cache.Step./evict/?0 vstd!set.Set<i32.>.)) (lib!exec.Cache_v.Cache.Step./noop ) (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/?0 lib!exec.Cache_v.Cache.State.))) ((lib!exec.Cache_v.Cache.Config./initialize (lib!exec.Cache_v.Cache.Config./initialize/?0 Int)) (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/?0 lib!exec.Cache_v.Cache.State.))) ((lib!exec.Cache_v.Cache.Label./Access (lib!exec.Cache_v.Cache.Label./Access/?reads vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.) (lib!exec.Cache_v.Cache.Label./Access/?writes vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)) (lib!exec.Cache_v.Cache.Label./DiskOps (lib!exec.Cache_v.Cache.Label./DiskOps/?requests vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.) (lib!exec.Cache_v.Cache.Label./DiskOps/?responses vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)) (lib!exec.Cache_v.Cache.Label./Internal )) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.AsyncDisk_t.DiskRequest./ReadReq (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/?from lib!spec.AsyncDisk_t.Address.)) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?to lib!spec.AsyncDisk_t.Address.) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?data vstd!seq.Seq<u8.>.))) ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?from lib!spec.AsyncDisk_t.Address.) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?data vstd!seq.Seq<u8.>.)) (lib!spec.AsyncDisk_t.DiskResponse./WriteResp (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/?to lib!spec.AsyncDisk_t.Address.))) ((lib!exec.Cache_v.Status./NotFilled ) (lib!exec.Cache_v.Status./Clean ) (lib!exec.Cache_v.Status./Dirty ) (lib!exec.Cache_v.Status./Writeback )) ((lib!exec.Cache_v.Entry./Empty ) (lib!exec.Cache_v.Entry./Reserved (lib!exec.Cache_v.Entry./Reserved/?addr lib!spec.AsyncDisk_t.Address.)) (lib!exec.Cache_v.Entry./Loading (lib!exec.Cache_v.Entry./Loading/?addr lib!spec.AsyncDisk_t.Address.)) (lib!exec.Cache_v.Entry./Filled (lib!exec.Cache_v.Entry./Filled/?addr lib!spec.AsyncDisk_t.Address.) (lib!exec.Cache_v.Entry./Filled/?data vstd!seq.Seq<u8.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!exec.Cache_v.Cache.State./State/entries (lib!exec.Cache_v.Cache.State.) vstd!map.Map<i32./lib!exec.Cache_v.Entry.>.)
(declare-fun lib!exec.Cache_v.Cache.State./State/status_map (lib!exec.Cache_v.Cache.State.) vstd!map.Map<i32./lib!exec.Cache_v.Status.>.)
(declare-fun lib!exec.Cache_v.Cache.State./State/lookup_map (lib!exec.Cache_v.Cache.State.) vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>.)
(declare-fun lib!exec.Cache_v.Cache.Step./reserve/0 (lib!exec.Cache_v.Cache.Step.) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!exec.Cache_v.Cache.Step./load_initiate/0 (lib!exec.Cache_v.Cache.Step.) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!exec.Cache_v.Cache.Step./evict/0 (lib!exec.Cache_v.Cache.Step.) vstd!set.Set<i32.>.)
(declare-fun lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/0 (lib!exec.Cache_v.Cache.Step.) lib!exec.Cache_v.Cache.State.)
(declare-fun lib!exec.Cache_v.Cache.Config./initialize/0 (lib!exec.Cache_v.Cache.Config.) Int)
(declare-fun lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/0 (lib!exec.Cache_v.Cache.Config.) lib!exec.Cache_v.Cache.State.)
(declare-fun lib!exec.Cache_v.Cache.Label./Access/reads (lib!exec.Cache_v.Cache.Label.) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(declare-fun lib!exec.Cache_v.Cache.Label./Access/writes (lib!exec.Cache_v.Cache.Label.) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(declare-fun lib!exec.Cache_v.Cache.Label./DiskOps/requests (lib!exec.Cache_v.Cache.Label.) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun lib!exec.Cache_v.Cache.Label./DiskOps/responses (lib!exec.Cache_v.Cache.Label.) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (lib!spec.AsyncDisk_t.DiskRequest.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (lib!spec.AsyncDisk_t.DiskRequest.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data (lib!spec.AsyncDisk_t.DiskRequest.) vstd!seq.Seq<u8.>.)
(declare-fun lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (lib!spec.AsyncDisk_t.DiskResponse.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data (lib!spec.AsyncDisk_t.DiskResponse.) vstd!seq.Seq<u8.>.)
(declare-fun lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (lib!spec.AsyncDisk_t.DiskResponse.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!exec.Cache_v.Entry./Reserved/addr (lib!exec.Cache_v.Entry.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!exec.Cache_v.Entry./Loading/addr (lib!exec.Cache_v.Entry.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!exec.Cache_v.Entry./Filled/addr (lib!exec.Cache_v.Entry.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!exec.Cache_v.Entry./Filled/data (lib!exec.Cache_v.Entry.) vstd!seq.Seq<u8.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!exec.Cache_v.Cache.State. Type)
(declare-const TYPE%lib!exec.Cache_v.Cache.Step. Type)
(declare-const TYPE%lib!exec.Cache_v.Cache.Config. Type)
(declare-const TYPE%lib!exec.Cache_v.Cache.Label. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.DiskRequest. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.DiskResponse. Type)
(declare-const TYPE%lib!exec.Cache_v.Status. Type)
(declare-const TYPE%lib!exec.Cache_v.Entry. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. (vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.) Poly)
(declare-fun %Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.) Poly)
(declare-fun %Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.Map<i32./lib!exec.Cache_v.Entry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (Poly) vstd!map.Map<i32./lib!exec.Cache_v.Entry.>.)
(declare-fun Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.Map<i32./lib!exec.Cache_v.Status.>.) Poly)
(declare-fun %Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (Poly) vstd!map.Map<i32./lib!exec.Cache_v.Status.>.)
(declare-fun Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. (vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (Poly) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!set.Set<i32.>. (vstd!set.Set<i32.>.) Poly)
(declare-fun %Poly%vstd!set.Set<i32.>. (Poly) vstd!set.Set<i32.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. (vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. (vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun Poly%lib!exec.Cache_v.Cache.State. (lib!exec.Cache_v.Cache.State.) Poly)
(declare-fun %Poly%lib!exec.Cache_v.Cache.State. (Poly) lib!exec.Cache_v.Cache.State.)
(declare-fun Poly%lib!exec.Cache_v.Cache.Step. (lib!exec.Cache_v.Cache.Step.) Poly)
(declare-fun %Poly%lib!exec.Cache_v.Cache.Step. (Poly) lib!exec.Cache_v.Cache.Step.)
(declare-fun Poly%lib!exec.Cache_v.Cache.Config. (lib!exec.Cache_v.Cache.Config.) Poly)
(declare-fun %Poly%lib!exec.Cache_v.Cache.Config. (Poly) lib!exec.Cache_v.Cache.Config.)
(declare-fun Poly%lib!exec.Cache_v.Cache.Label. (lib!exec.Cache_v.Cache.Label.) Poly)
(declare-fun %Poly%lib!exec.Cache_v.Cache.Label. (Poly) lib!exec.Cache_v.Cache.Label.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.DiskRequest. (Poly) lib!spec.AsyncDisk_t.DiskRequest.)
(declare-fun Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.DiskResponse. (Poly) lib!spec.AsyncDisk_t.DiskResponse.)
(declare-fun Poly%lib!exec.Cache_v.Status. (lib!exec.Cache_v.Status.) Poly)
(declare-fun %Poly%lib!exec.Cache_v.Status. (Poly) lib!exec.Cache_v.Status.)
(declare-fun Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry.) Poly)
(declare-fun %Poly%lib!exec.Cache_v.Entry. (Poly) lib!exec.Cache_v.Entry.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)) (! (= x (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x))) :pattern ((Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) (= x (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)) (! (has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)) (! (= x (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x))) :pattern ((Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) (= x (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)) (! (has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))) )))
(assert (forall ((x vstd!map.Map<i32./lib!exec.Cache_v.Entry.>.)) (! (= x (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. x))) :pattern ((Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.)) (= x (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.))) )))
(assert (forall ((x vstd!map.Map<i32./lib!exec.Cache_v.Entry.>.)) (! (has_type (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.)) :pattern ((has_type (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.))) )))
(assert (forall ((x vstd!map.Map<i32./lib!exec.Cache_v.Status.>.)) (! (= x (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. x))) :pattern ((Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.)) (= x (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.))) )))
(assert (forall ((x vstd!map.Map<i32./lib!exec.Cache_v.Status.>.)) (! (has_type (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.)) :pattern ((has_type (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.))) )))
(assert (forall ((x vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (%Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64))) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64)))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64))) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64)))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32))) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32)))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32))) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!set.Set<i32.>.)) (! (= x (%Poly%vstd!set.Set<i32.>. (Poly%vstd!set.Set<i32.>. x))) :pattern ((Poly%vstd!set.Set<i32.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (SINT 32))) (= x (Poly%vstd!set.Set<i32.>. (%Poly%vstd!set.Set<i32.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (SINT 32)))) )))
(assert (forall ((x vstd!set.Set<i32.>.)) (! (has_type (Poly%vstd!set.Set<i32.>. x) (TYPE%vstd!set.Set. $ (SINT 32))) :pattern ((has_type (Poly%vstd!set.Set<i32.>. x) (TYPE%vstd!set.Set. $ (SINT 32)))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskRequest.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.DiskResponse.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))) )))
(assert (forall ((x lib!exec.Cache_v.Cache.State.)) (! (= x (%Poly%lib!exec.Cache_v.Cache.State. (Poly%lib!exec.Cache_v.Cache.State. x))) :pattern ((Poly%lib!exec.Cache_v.Cache.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Cache.State.) (= x (Poly%lib!exec.Cache_v.Cache.State. (%Poly%lib!exec.Cache_v.Cache.State. x)))) :pattern ((has_type x TYPE%lib!exec.Cache_v.Cache.State.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.State.)) (! (= (lib!exec.Cache_v.Cache.State./State/entries x) (lib!exec.Cache_v.Cache.State./State/?entries x)) :pattern ((lib!exec.Cache_v.Cache.State./State/entries x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.State.)) (! (= (lib!exec.Cache_v.Cache.State./State/status_map x) (lib!exec.Cache_v.Cache.State./State/?status_map x)) :pattern ((lib!exec.Cache_v.Cache.State./State/status_map x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.State.)) (! (= (lib!exec.Cache_v.Cache.State./State/lookup_map x) (lib!exec.Cache_v.Cache.State./State/?lookup_map x)) :pattern ((lib!exec.Cache_v.Cache.State./State/lookup_map x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.State.)) (! (has_type (Poly%lib!exec.Cache_v.Cache.State. x) TYPE%lib!exec.Cache_v.Cache.State.) :pattern ((has_type (Poly%lib!exec.Cache_v.Cache.State. x) TYPE%lib!exec.Cache_v.Cache.State.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Step.)) (! (= x (%Poly%lib!exec.Cache_v.Cache.Step. (Poly%lib!exec.Cache_v.Cache.Step. x))) :pattern ((Poly%lib!exec.Cache_v.Cache.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Cache.Step.) (= x (Poly%lib!exec.Cache_v.Cache.Step. (%Poly%lib!exec.Cache_v.Cache.Step. x)))) :pattern ((has_type x TYPE%lib!exec.Cache_v.Cache.Step.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Step.)) (! (= (lib!exec.Cache_v.Cache.Step./reserve/0 x) (lib!exec.Cache_v.Cache.Step./reserve/?0 x)) :pattern ((lib!exec.Cache_v.Cache.Step./reserve/0 x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Step.)) (! (= (lib!exec.Cache_v.Cache.Step./load_initiate/0 x) (lib!exec.Cache_v.Cache.Step./load_initiate/?0 x)) :pattern ((lib!exec.Cache_v.Cache.Step./load_initiate/0 x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Step.)) (! (= (lib!exec.Cache_v.Cache.Step./evict/0 x) (lib!exec.Cache_v.Cache.Step./evict/?0 x)) :pattern ((lib!exec.Cache_v.Cache.Step./evict/0 x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Step.)) (! (= (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/0 x) (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Step.)) (! (has_type (Poly%lib!exec.Cache_v.Cache.Step. x) TYPE%lib!exec.Cache_v.Cache.Step.) :pattern ((has_type (Poly%lib!exec.Cache_v.Cache.Step. x) TYPE%lib!exec.Cache_v.Cache.Step.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Config.)) (! (= x (%Poly%lib!exec.Cache_v.Cache.Config. (Poly%lib!exec.Cache_v.Cache.Config. x))) :pattern ((Poly%lib!exec.Cache_v.Cache.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Cache.Config.) (= x (Poly%lib!exec.Cache_v.Cache.Config. (%Poly%lib!exec.Cache_v.Cache.Config. x)))) :pattern ((has_type x TYPE%lib!exec.Cache_v.Cache.Config.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!exec.Cache_v.Cache.Config. (lib!exec.Cache_v.Cache.Config./initialize _0!)) TYPE%lib!exec.Cache_v.Cache.Config.)) :pattern ((has_type (Poly%lib!exec.Cache_v.Cache.Config. (lib!exec.Cache_v.Cache.Config./initialize _0!)) TYPE%lib!exec.Cache_v.Cache.Config.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Config.)) (! (= (lib!exec.Cache_v.Cache.Config./initialize/0 x) (lib!exec.Cache_v.Cache.Config./initialize/?0 x)) :pattern ((lib!exec.Cache_v.Cache.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Cache.Config.) (<= 0 (lib!exec.Cache_v.Cache.Config./initialize/0 (%Poly%lib!exec.Cache_v.Cache.Config. x)))) :pattern ((lib!exec.Cache_v.Cache.Config./initialize/0 (%Poly%lib!exec.Cache_v.Cache.Config. x)) (has_type x TYPE%lib!exec.Cache_v.Cache.Config.)) )))
(assert (forall ((_0! lib!exec.Cache_v.Cache.State.)) (! (has_type (Poly%lib!exec.Cache_v.Cache.Config. (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params _0!)) TYPE%lib!exec.Cache_v.Cache.Config.) :pattern ((has_type (Poly%lib!exec.Cache_v.Cache.Config. (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params _0!)) TYPE%lib!exec.Cache_v.Cache.Config.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Config.)) (! (= (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/0 x) (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Label.)) (! (= x (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. x))) :pattern ((Poly%lib!exec.Cache_v.Cache.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Cache.Label.) (= x (Poly%lib!exec.Cache_v.Cache.Label. (%Poly%lib!exec.Cache_v.Cache.Label. x)))) :pattern ((has_type x TYPE%lib!exec.Cache_v.Cache.Label.)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Label.)) (! (= (lib!exec.Cache_v.Cache.Label./Access/reads x) (lib!exec.Cache_v.Cache.Label./Access/?reads x)) :pattern ((lib!exec.Cache_v.Cache.Label./Access/reads x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Label.)) (! (= (lib!exec.Cache_v.Cache.Label./Access/writes x) (lib!exec.Cache_v.Cache.Label./Access/?writes x)) :pattern ((lib!exec.Cache_v.Cache.Label./Access/writes x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Label.)) (! (= (lib!exec.Cache_v.Cache.Label./DiskOps/requests x) (lib!exec.Cache_v.Cache.Label./DiskOps/?requests x)) :pattern ((lib!exec.Cache_v.Cache.Label./DiskOps/requests x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Label.)) (! (= (lib!exec.Cache_v.Cache.Label./DiskOps/responses x) (lib!exec.Cache_v.Cache.Label./DiskOps/?responses x)) :pattern ((lib!exec.Cache_v.Cache.Label./DiskOps/responses x)) )))
(assert (forall ((x lib!exec.Cache_v.Cache.Label.)) (! (has_type (Poly%lib!exec.Cache_v.Cache.Label. x) TYPE%lib!exec.Cache_v.Cache.Label.) :pattern ((has_type (Poly%lib!exec.Cache_v.Cache.Label. x) TYPE%lib!exec.Cache_v.Cache.Label.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.DiskRequest. (Poly%lib!spec.AsyncDisk_t.DiskRequest. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.DiskRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (= x (Poly%lib!spec.AsyncDisk_t.DiskRequest. (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((_from! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _from!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq _from!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq _from!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from x) (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/?from x)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((_to! lib!spec.AsyncDisk_t.Address.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _to!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq _to! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq _to! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to x) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?to x)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data x) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?data x)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data x)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.DiskResponse. (Poly%lib!spec.AsyncDisk_t.DiskResponse. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.DiskResponse. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (= x (Poly%lib!spec.AsyncDisk_t.DiskResponse. (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((_from! lib!spec.AsyncDisk_t.Address.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _from!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp _from! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp _from! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from x) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?from x)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data x) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?data x)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data x)) )))
(assert (forall ((_to! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _to!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp _to!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp _to!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to x) (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/?to x)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!exec.Cache_v.Status.)) (! (= x (%Poly%lib!exec.Cache_v.Status. (Poly%lib!exec.Cache_v.Status. x))) :pattern ((Poly%lib!exec.Cache_v.Status. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Status.) (= x (Poly%lib!exec.Cache_v.Status. (%Poly%lib!exec.Cache_v.Status. x)))) :pattern ((has_type x TYPE%lib!exec.Cache_v.Status.)) )))
(assert (forall ((x lib!exec.Cache_v.Status.)) (! (has_type (Poly%lib!exec.Cache_v.Status. x) TYPE%lib!exec.Cache_v.Status.) :pattern ((has_type (Poly%lib!exec.Cache_v.Status. x) TYPE%lib!exec.Cache_v.Status.)) )))
(assert (forall ((x lib!exec.Cache_v.Entry.)) (! (= x (%Poly%lib!exec.Cache_v.Entry. (Poly%lib!exec.Cache_v.Entry. x))) :pattern ((Poly%lib!exec.Cache_v.Entry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Entry.) (= x (Poly%lib!exec.Cache_v.Entry. (%Poly%lib!exec.Cache_v.Entry. x)))) :pattern ((has_type x TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (has_type (Poly%lib!exec.Cache_v.Entry. lib!exec.Cache_v.Entry./Empty) TYPE%lib!exec.Cache_v.Entry.))
(assert (forall ((_addr! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _addr!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Reserved _addr!)) TYPE%lib!exec.Cache_v.Entry.)) :pattern ((has_type (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Reserved _addr!)) TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (forall ((x lib!exec.Cache_v.Entry.)) (! (= (lib!exec.Cache_v.Entry./Reserved/addr x) (lib!exec.Cache_v.Entry./Reserved/?addr x)) :pattern ((lib!exec.Cache_v.Entry./Reserved/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Entry.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.Entry./Reserved/addr (%Poly%lib!exec.Cache_v.Entry. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!exec.Cache_v.Entry./Reserved/addr (%Poly%lib!exec.Cache_v.Entry. x)) (has_type x TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (forall ((_addr! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _addr!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Loading _addr!)) TYPE%lib!exec.Cache_v.Entry.)) :pattern ((has_type (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Loading _addr!)) TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (forall ((x lib!exec.Cache_v.Entry.)) (! (= (lib!exec.Cache_v.Entry./Loading/addr x) (lib!exec.Cache_v.Entry./Loading/?addr x)) :pattern ((lib!exec.Cache_v.Entry./Loading/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Entry.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.Entry./Loading/addr (%Poly%lib!exec.Cache_v.Entry. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!exec.Cache_v.Entry./Loading/addr (%Poly%lib!exec.Cache_v.Entry. x)) (has_type x TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (forall ((_addr! lib!spec.AsyncDisk_t.Address.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _addr!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Filled _addr! _data!)) TYPE%lib!exec.Cache_v.Entry.)) :pattern ((has_type (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Filled _addr! _data!)) TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (forall ((x lib!exec.Cache_v.Entry.)) (! (= (lib!exec.Cache_v.Entry./Filled/addr x) (lib!exec.Cache_v.Entry./Filled/?addr x)) :pattern ((lib!exec.Cache_v.Entry./Filled/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.Cache_v.Entry.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.Entry./Filled/addr (%Poly%lib!exec.Cache_v.Entry. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!exec.Cache_v.Entry./Filled/addr (%Poly%lib!exec.Cache_v.Entry. x)) (has_type x TYPE%lib!exec.Cache_v.Entry.)) )))
(assert (forall ((x lib!exec.Cache_v.Entry.)) (! (= (lib!exec.Cache_v.Entry./Filled/data x) (lib!exec.Cache_v.Entry./Filled/?data x)) :pattern ((lib!exec.Cache_v.Entry./Filled/data x)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::is_injective")
(declare-fun vstd!map_lib.impl&%0.is_injective.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_value")
(declare-fun vstd!map_lib.impl&%0.contains_value.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::values")
(declare-fun vstd!map_lib.impl&%0.values.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_le")
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::valid_new_slots_mapping")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::invert")
(declare-fun vstd!map_lib.impl&%0.invert.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::reserve")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.reserve.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::is_empty")
(declare-fun vstd!map_lib.impl&%0.is_empty.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::DiskRequest::arrow_from")
(declare-fun lib!spec.AsyncDisk_t.impl&%1.arrow_from.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::load_initiate")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.load_initiate.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::DiskResponse::arrow_from")
(declare-fun lib!spec.AsyncDisk_t.impl&%2.arrow_from.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::restrict")
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Entry::get_addr")
(declare-fun lib!exec.Cache_v.impl&%1.get_addr.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::DiskResponse::arrow_data")
(declare-fun lib!spec.AsyncDisk_t.impl&%2.arrow_data.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::load_complete")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.load_complete.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_reads")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_reads.? (Poly) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Entry::arrow_data")
(declare-fun lib!exec.Cache_v.impl&%0.arrow_data.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::valid_read")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.valid_read.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_writes")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_writes.? (Poly) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::valid_write")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.valid_write.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::access")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.access.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::DiskRequest::arrow_to")
(declare-fun lib!spec.AsyncDisk_t.impl&%1.arrow_to.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::DiskRequest::arrow_data")
(declare-fun lib!spec.AsyncDisk_t.impl&%1.arrow_data.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::writeback_initiate")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.writeback_initiate.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::DiskResponse::arrow_to")
(declare-fun lib!spec.AsyncDisk_t.impl&%2.arrow_to.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::writeback_complete")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.writeback_complete.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::evict")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.evict.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::noop")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.noop.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::next_by")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::next")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::initialize")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::init_by")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.init_by.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::init")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::inv")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::arrow_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%0.arrow_0.? (Poly) lib!exec.Cache_v.Cache.State.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::arrow_reserve_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0.? (Poly) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::arrow_load_initiate_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0.? (Poly) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::arrow_evict_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0.? (Poly) vstd!set.Set<i32.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!exec.Cache_v.Cache.State.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_reserve")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_reserve.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::get_reserve_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.get_reserve_0.? (Poly) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_load_initiate")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_load_initiate.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::get_load_initiate_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0.? (Poly) vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_load_complete")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_load_complete.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_access")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_access.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_writeback_initiate")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_writeback_complete")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_evict")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_evict.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::get_evict_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.get_evict_0.? (Poly) vstd!set.Set<i32.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_noop")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_noop.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::is_dummy_to_use_type_params")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!exec.Cache_v.Cache.State.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Config::arrow_initialize_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!exec.Cache_v.Cache.State.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Config::is_initialize")
(declare-fun lib!exec.Cache_v.Cache.impl&%3.is_initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Config::get_initialize_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Config::is_dummy_to_use_type_params")
(declare-fun lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!exec.Cache_v.Cache.State.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_requests")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_requests.? (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_responses")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_responses.? (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_Access_reads")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads.? (Poly) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_Access_writes")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes.? (Poly) vstd!map.Map<i32./vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_DiskOps_requests")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests.? (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::Label::arrow_DiskOps_responses")
(declare-fun lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses.? (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::reserve_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.reserve_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::reserve_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.reserve_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::load_initiate_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::load_initiate_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::load_complete_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::load_complete_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::access_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.access_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::access_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.access_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::writeback_initiate_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::writeback_initiate_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::writeback_complete_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::writeback_complete_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::evict_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.evict_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::evict_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.evict_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::noop_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.noop_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::noop_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.noop_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::initialize_enabled")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.initialize_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::next_strong_by")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.next_strong_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::next_strong")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.next_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::Cache_v::Cache::State::invariant")
(declare-fun lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(set-info :comment ";; Broadcast vstd::set_lib::axiom_is_empty")
(assert (=> (fuel_bool fuel%vstd!set_lib.axiom_is_empty.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::is_injective")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.is_injective.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.is_injective.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.is_injective.? K&. K& V&. V& self!) (forall ((x$ Poly) (y$ Poly)) (! (=> (and (has_type x$ K&) (has_type y$ K&)) (=> (and (and (not (= x$ y$)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) x$)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) y$)) (not (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! x$) (vstd!map.impl&%0.index.? K&. K& V&. V& self! y$))))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! x$) (vstd!map.impl&%0.index.? K&. K& V&. V& self! y$)) ))) :pattern ((vstd!map_lib.impl&%0.is_injective.? K&. K& V&. V& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_value")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_value.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_value.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_value.? K&. K& V&. V& self! v!) (exists ((i$ Poly)) (! (and (has_type i$ K&) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) i$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! i$) v!))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) i$)) ))) :pattern ((vstd!map_lib.impl&%0.contains_value.? K&. K& V&. V& self! v!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::values")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.values.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) v$) (B (vstd!map_lib.impl&%0.contains_value.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 v$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) v$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.values.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!) (vstd!set.impl&%0.new.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. V&. V&))) :pattern ((vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Recommends lib::exec::Cache_v::Cache::State::valid_new_slots_mapping")
(set-info :comment ";; exec/Cache_v.rs:83:5: 83:97 (#0)")
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::valid_new_slots_mapping")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.))
(define-fun is-lib!exec.Cache_v.Entry./Empty_ ((c lib!exec.Cache_v.Entry.)) Bool ((_ is lib!exec.Cache_v.Entry./Empty) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.) (forall ((self! Poly) (mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? self! mapping!) (and (and (and (vstd!map_lib.impl&%0.is_injective.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. mapping!) (vstd!set.impl&%0.disjoint.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) (vstd!map_lib.impl&%0.values.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. mapping!))) (vstd!set.impl&%0.subset_of.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. mapping!) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!)))))) (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. mapping!) slot$) (is-lib!exec.Cache_v.Entry./Empty_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot$))))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. mapping!) slot$)) )))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? self! mapping!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::invert")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.invert.))
(declare-fun %%choose%%0 (Type Dcr Type Dcr Type Poly Poly Dcr Type Dcr Type Poly Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Dcr) (%%hole%%10 Type) (%%hole%%11 Poly) (%%hole%%12 Poly)) (! (=> (exists ((k$ Poly)) (! (and (has_type k$ %%hole%%0) (vstd!map_lib.impl&%0.contains_pair.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 k$ %%hole%%6)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 k$ %%hole%%12)) )) (exists ((k$ Poly)) (! (and (and (has_type k$ %%hole%%0) (vstd!map_lib.impl&%0.contains_pair.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 k$ %%hole%%6)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)) :pattern ((vstd!map_lib.impl&%0.contains_pair.? %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 k$ %%hole%%12))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12)))))
(declare-fun %%lambda%%3 (Type Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Type) %%Function%%)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) v$) (as_type (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 v$ %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 v$) %%hole%%11)) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) v$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.invert.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.invert.? K&. K& V&. V& self!) (vstd!map.impl&%0.new.? V&. V& K&. K& $ (TYPE%fun%1. V&. V& $ BOOL) $ (TYPE%fun%1. V&. V& K&. K&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& V&. V& self!))) (Poly%fun%1. (mk_fun (%%lambda%%3 K& K&. K& V&. V& self! K&. K& V&. V& self! K&))))) :pattern ((vstd!map_lib.impl&%0.invert.? K&. K& V&. V& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map_lib.impl&%0.invert.? K&. K& V&. V& self!) (TYPE%vstd!map.Map. V&. V& K&. K&))) :pattern ((vstd!map_lib.impl&%0.invert.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::reserve")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.reserve.))
(declare-fun %%lambda%%4 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2) slot$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 slot$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2) slot$)))))
(declare-fun %%lambda%%5 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) slot$) (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Reserved (%Poly%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 slot$))))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) slot$)))))
(define-fun is-lib!exec.Cache_v.Cache.Label./Internal_ ((c lib!exec.Cache_v.Cache.Label.)) Bool ((_ is lib!exec.Cache_v.Cache.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.reserve.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_slots_mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.reserve.? pre! post! lbl! new_slots_mapping!) (let ((update_tmp_status_map$ (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? pre! new_slots_mapping!) (and (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map_lib.impl&%0.invert.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.reserve.? pre! post! lbl! new_slots_mapping!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.is_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.is_empty.? K&. K& V&. V& self!) (vstd!set_lib.impl&%0.is_empty.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!))) :pattern ((vstd!map_lib.impl&%0.is_empty.? K&. K& V&. V& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::DiskRequest::arrow_from")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_from.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_from.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%1.arrow_from.? self!) (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. self!))) :pattern ((lib!spec.AsyncDisk_t.impl&%1.arrow_from.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.impl&%1.arrow_from.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.impl&%1.arrow_from.? self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::load_initiate")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate.))
(declare-fun %%lambda%%6 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (id$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 id$))))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$)))))
(declare-fun %%lambda%%7 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) slot$) (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Loading (%Poly%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 slot$))))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) slot$)))))
(define-fun is-lib!exec.Cache_v.Cache.Label./DiskOps_ ((c lib!exec.Cache_v.Cache.Label.)) Bool ((_ is lib!exec.Cache_v.Cache.Label./DiskOps) c))
(define-fun is-lib!spec.AsyncDisk_t.DiskRequest./ReadReq_ ((c lib!spec.AsyncDisk_t.DiskRequest.)) Bool ((_ is lib!spec.AsyncDisk_t.DiskRequest./ReadReq) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_slots_mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.load_initiate.? pre! post! lbl! new_slots_mapping!) (let ((update_tmp_status_map$ (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))) (and (vstd!map_lib.impl&%0.is_injective.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) (and (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$) (and (and (is-lib!spec.AsyncDisk_t.DiskRequest./ReadReq_ (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) (is-lib!exec.Cache_v.Entry./Empty_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$)) )) (let ((read_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))) (Poly%fun%1. (mk_fun (%%lambda%%6 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))))))) (and (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? pre! new_slots_mapping!) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. read_addrs$) (vstd!map_lib.impl&%0.values.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)) (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map_lib.impl&%0.invert.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))))))))))))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$)))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.load_initiate.? pre! post! lbl! new_slots_mapping!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::DiskResponse::arrow_from")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_from.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_from.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%2.arrow_from.? self!) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. self!))) :pattern ((lib!spec.AsyncDisk_t.impl&%2.arrow_from.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.impl&%2.arrow_from.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.impl&%2.arrow_from.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::restrict")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%8 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%9 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%8 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%9 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) )))
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Entry::get_addr")
(declare-fun req%lib!exec.Cache_v.impl&%1.get_addr. (Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(define-fun is-lib!exec.Cache_v.Entry./Reserved_ ((c lib!exec.Cache_v.Entry.)) Bool ((_ is lib!exec.Cache_v.Entry./Reserved) c))
(define-fun is-lib!exec.Cache_v.Entry./Loading_ ((c lib!exec.Cache_v.Entry.)) Bool ((_ is lib!exec.Cache_v.Entry./Loading) c))
(define-fun is-lib!exec.Cache_v.Entry./Filled_ ((c lib!exec.Cache_v.Entry.)) Bool ((_ is lib!exec.Cache_v.Entry./Filled) c))
(assert (forall ((self! Poly)) (! (= (req%lib!exec.Cache_v.impl&%1.get_addr. self!) (=> %%global_location_label%%4 (or (or (is-lib!exec.Cache_v.Entry./Reserved_ (%Poly%lib!exec.Cache_v.Entry. self!)) (is-lib!exec.Cache_v.Entry./Loading_ (%Poly%lib!exec.Cache_v.Entry. self!))) (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. self!))))) :pattern ((req%lib!exec.Cache_v.impl&%1.get_addr. self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Entry::get_addr")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.impl&%1.get_addr.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.impl&%1.get_addr.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.impl&%1.get_addr.? self!) (ite (is-lib!exec.Cache_v.Entry./Reserved_ (%Poly%lib!exec.Cache_v.Entry. self!)) (let ((addr$ (lib!exec.Cache_v.Entry./Reserved/addr (%Poly%lib!exec.Cache_v.Entry. self!)))) addr$) (ite (is-lib!exec.Cache_v.Entry./Loading_ (%Poly%lib!exec.Cache_v.Entry. self!)) (let ((addr$ (lib!exec.Cache_v.Entry./Loading/addr (%Poly%lib!exec.Cache_v.Entry. self!)))) addr$) (ite (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. self!)) (let ((addr$ (lib!exec.Cache_v.Entry./Filled/addr (%Poly%lib!exec.Cache_v.Entry. self!)))) (let ((data$ (lib!exec.Cache_v.Entry./Filled/data (%Poly%lib!exec.Cache_v.Entry. self!)))) addr$)) (%Poly%lib!spec.AsyncDisk_t.Address. (vstd!pervasive.arbitrary.? $ TYPE%lib!spec.AsyncDisk_t.Address.)))))) :pattern ((lib!exec.Cache_v.impl&%1.get_addr.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.Cache_v.Entry.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!exec.Cache_v.impl&%1.get_addr.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::DiskResponse::arrow_data")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_data.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_data.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%2.arrow_data.? self!) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data (%Poly%lib!spec.AsyncDisk_t.DiskResponse. self!))) :pattern ((lib!spec.AsyncDisk_t.impl&%2.arrow_data.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::load_complete")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete.))
(declare-fun %%lambda%%10 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (id$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 id$))))) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$)))))
(declare-fun %%lambda%%11 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19) slot$) (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Filled (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 slot$)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data (%Poly%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 slot$)))))))))))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19) slot$)))))
(declare-fun %%lambda%%12 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0) slot$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0) slot$)))))
(define-fun is-lib!spec.AsyncDisk_t.DiskResponse./ReadResp_ ((c lib!spec.AsyncDisk_t.DiskResponse.)) Bool ((_ is lib!spec.AsyncDisk_t.DiskResponse./ReadResp) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.load_complete.? pre! post! lbl!) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (and (forall ((resp$ Poly)) (! (=> (has_type resp$ TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$) (and (and (is-lib!spec.AsyncDisk_t.DiskResponse./ReadResp_ (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) (is-lib!exec.Cache_v.Entry./Loading_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$)) )) (let ((read_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. (vstd!map_lib.impl&%0.invert.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))))))) (let ((load_slots$ (%Poly%vstd!set.Set<i32.>. (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. read_map$))))))) (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. load_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%11 $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. read_map$) $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. load_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Clean)))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))))))))))))) (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$)))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.load_complete.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_reads")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_reads.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_reads.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_reads.? self!) (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_reads.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Entry::arrow_data")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.impl&%0.arrow_data.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.impl&%0.arrow_data.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.impl&%0.arrow_data.? self!) (lib!exec.Cache_v.Entry./Filled/data (%Poly%lib!exec.Cache_v.Entry. self!))) :pattern ((lib!exec.Cache_v.impl&%0.arrow_data.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::valid_read")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.valid_read.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.valid_read.) (forall ((self! Poly) (slot! Poly) (data! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.valid_read.? self! slot! data!) (and (and (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!)))) slot!) (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot!)))) (= (%Poly%vstd!seq.Seq<u8.>. data!) (lib!exec.Cache_v.Entry./Filled/data (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot!)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.valid_read.? self! slot! data!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_writes")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_writes.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_writes.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_writes.? self!) (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_writes.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::valid_write")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.valid_write.))
(define-fun is-lib!exec.Cache_v.Status./Writeback_ ((c lib!exec.Cache_v.Status.)) Bool ((_ is lib!exec.Cache_v.Status./Writeback) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.valid_write.) (forall ((self! Poly) (slot! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.valid_write.? self! slot!) (and (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!)))) slot!) (or (is-lib!exec.Cache_v.Entry./Reserved_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot!))) (and (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot!))) (not (is-lib!exec.Cache_v.Status./Writeback_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot!)))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.valid_write.? self! slot!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::access")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.access.))
(declare-fun %%lambda%%13 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) slot$) (Poly%lib!exec.Cache_v.Entry. (lib!exec.Cache_v.Entry./Filled (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 slot$)))) (%Poly%vstd!seq.Seq<u8.>. (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 slot$))))) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) slot$)))))
(define-fun is-lib!exec.Cache_v.Cache.Label./Access_ ((c lib!exec.Cache_v.Cache.Label.)) Bool ((_ is lib!exec.Cache_v.Cache.Label./Access) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.access.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.access.? pre! post! lbl!) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (is-lib!exec.Cache_v.Cache.Label./Access_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$) (lib!exec.Cache_v.Cache.impl&%5.valid_read.? pre! slot$ (vstd!map.impl&%0.index.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) slot$)))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$)) )) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$) (lib!exec.Cache_v.Cache.impl&%5.valid_write.? pre! slot$))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$)) )) (and (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))))))) (Poly%fun%1. (mk_fun (%%lambda%%13 $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))))))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))))))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Dirty)))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))) (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.access.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::DiskRequest::arrow_to")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_to.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_to.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%1.arrow_to.? self!) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. self!))) :pattern ((lib!spec.AsyncDisk_t.impl&%1.arrow_to.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.impl&%1.arrow_to.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.impl&%1.arrow_to.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::DiskRequest::arrow_data")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_data.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%1.arrow_data.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%1.arrow_data.? self!) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data (%Poly%lib!spec.AsyncDisk_t.DiskRequest. self!))) :pattern ((lib!spec.AsyncDisk_t.impl&%1.arrow_data.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::writeback_initiate")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate.))
(declare-fun %%lambda%%14 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (id$ Poly)) (! (= (%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 id$))))) :pattern ((%%apply%%0 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$)))))
(define-fun is-lib!spec.AsyncDisk_t.DiskRequest./WriteReq_ ((c lib!spec.AsyncDisk_t.DiskRequest.)) Bool ((_ is lib!spec.AsyncDisk_t.DiskRequest./WriteReq) c))
(define-fun is-lib!exec.Cache_v.Status./Dirty_ ((c lib!exec.Cache_v.Status.)) Bool ((_ is lib!exec.Cache_v.Status./Dirty) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.writeback_initiate.? pre! post! lbl!) (let ((update_tmp_entries$ (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))) (and (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$) (and (and (and (is-lib!spec.AsyncDisk_t.DiskRequest./WriteReq_ (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) (= (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))) (lib!exec.Cache_v.Entry./Filled (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))))) (is-lib!exec.Cache_v.Status./Dirty_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) )) (let ((write_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))) (Poly%fun%1. (mk_fun (%%lambda%%14 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))))))) (let ((write_slots$ (%Poly%vstd!set.Set<i32.>. (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. write_addrs$)))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. write_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Writeback)))))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$))))))))))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.writeback_initiate.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::DiskResponse::arrow_to")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_to.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%2.arrow_to.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%2.arrow_to.? self!) (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. self!))) :pattern ((lib!spec.AsyncDisk_t.impl&%2.arrow_to.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.impl&%2.arrow_to.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.impl&%2.arrow_to.? self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::writeback_complete")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete.))
(declare-fun %%lambda%%15 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (id$ Poly)) (! (= (%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 id$))))) :pattern ((%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) id$)))))
(define-fun is-lib!spec.AsyncDisk_t.DiskResponse./WriteResp_ ((c lib!spec.AsyncDisk_t.DiskResponse.)) Bool ((_ is lib!spec.AsyncDisk_t.DiskResponse./WriteResp) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.writeback_complete.? pre! post! lbl!) (let ((update_tmp_entries$ (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (and (forall ((resp$ Poly)) (! (=> (has_type resp$ TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$) (and (and (and (is-lib!spec.AsyncDisk_t.DiskResponse./WriteResp_ (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))) (is-lib!exec.Cache_v.Status./Writeback_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) )) (let ((write_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))))))) (let ((write_slots$ (%Poly%vstd!set.Set<i32.>. (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. write_addrs$)))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. write_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Clean)))))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$))))))))))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.writeback_complete.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::remove_keys")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%16 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%16 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%9 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::evict")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.evict.))
(declare-fun %%lambda%%17 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (slot$ Poly)) (! (= (%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) slot$) (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 slot$)))) :pattern ((%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) slot$)))))
(define-fun is-lib!exec.Cache_v.Status./Clean_ ((c lib!exec.Cache_v.Status.)) Bool ((_ is lib!exec.Cache_v.Status./Clean) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.evict.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (evicted_slots! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.evict.? pre! post! lbl! evicted_slots!) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (vstd!set.impl&%0.subset_of.? $ (SINT 32) evicted_slots! (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))))) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) evicted_slots! slot$) (and (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) slot$))) (is-lib!exec.Cache_v.Status./Clean_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) slot$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) evicted_slots! slot$)) )) (let ((evicted_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) evicted_slots!))) (Poly%fun%1. (mk_fun (%%lambda%%17 $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))))))))))) (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) evicted_slots!))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Entry. lib!exec.Cache_v.Entry./Empty)))))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) evicted_slots!))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./NotFilled)))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. evicted_addrs$))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.evict.? pre! post! lbl! evicted_slots!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::noop")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.noop.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.noop.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.noop.? pre! post! lbl!) (let ((update_tmp_entries$ (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_status_map$ (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.noop.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::next_by")
(define-fun is-lib!exec.Cache_v.Cache.Step./reserve_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./reserve) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./load_initiate_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./load_initiate) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./load_complete_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./load_complete) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./access_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./access) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./writeback_initiate_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./writeback_initiate) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./writeback_complete_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./writeback_complete) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./evict_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./evict) c))
(define-fun is-lib!exec.Cache_v.Cache.Step./noop_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./noop) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!exec.Cache_v.Cache.Step./reserve_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (let ((new_slots_mapping$ (lib!exec.Cache_v.Cache.Step./reserve/0 (%Poly%lib!exec.Cache_v.Cache.Step. step!)))) (lib!exec.Cache_v.Cache.impl&%5.reserve.? pre! post! label! (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. new_slots_mapping$))) (ite (is-lib!exec.Cache_v.Cache.Step./load_initiate_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (let ((new_slots_mapping$ (lib!exec.Cache_v.Cache.Step./load_initiate/0 (%Poly%lib!exec.Cache_v.Cache.Step. step!)))) (lib!exec.Cache_v.Cache.impl&%5.load_initiate.? pre! post! label! (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. new_slots_mapping$))) (ite (is-lib!exec.Cache_v.Cache.Step./load_complete_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.load_complete.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./access_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.access.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./writeback_initiate_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.writeback_initiate.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./writeback_complete_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.writeback_complete.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./evict_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (let ((evicted_slots$ (lib!exec.Cache_v.Cache.Step./evict/0 (%Poly%lib!exec.Cache_v.Cache.Step. step!)))) (lib!exec.Cache_v.Cache.impl&%5.evict.? pre! post! label! (Poly%vstd!set.Set<i32.>. evicted_slots$))) (and (is-lib!exec.Cache_v.Cache.Step./noop_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.noop.? pre! post! label!)))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::next")
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!exec.Cache_v.Cache.Step.) (lib!exec.Cache_v.Cache.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!exec.Cache_v.Cache.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::initialize")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.initialize.))
(declare-fun %%lambda%%18 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%18 %%hole%%0) i$) (B (< (%I i$) %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%18 %%hole%%0) i$)))))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.initialize.) (forall ((post! Poly) (slots! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.initialize.? post! slots!) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%18 (%I slots!)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Entry. lib!exec.Cache_v.Entry./Empty)))))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%18 (%I slots!)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./NotFilled)))))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.initialize.? post! slots!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::init_by")
(define-fun is-lib!exec.Cache_v.Cache.Config./initialize_ ((c lib!exec.Cache_v.Cache.Config.)) Bool ((_ is lib!exec.Cache_v.Cache.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.init_by.? post! step!) (and (is-lib!exec.Cache_v.Cache.Config./initialize_ (%Poly%lib!exec.Cache_v.Cache.Config. step!)) (let ((slots$ (lib!exec.Cache_v.Cache.Config./initialize/0 (%Poly%lib!exec.Cache_v.Cache.Config. step!)))) (lib!exec.Cache_v.Cache.impl&%5.initialize.? post! (I slots$))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.init_by.? post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::init")
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.init.) (forall ((post! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!exec.Cache_v.Cache.Config.) (lib!exec.Cache_v.Cache.impl&%5.init_by.? post! step$)) :pattern ((lib!exec.Cache_v.Cache.impl&%5.init_by.? post! step$)) ))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.init.? post!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::inv")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.inv.))
(define-fun is-lib!exec.Cache_v.Status./NotFilled_ ((c lib!exec.Cache_v.Status.)) Bool ((_ is lib!exec.Cache_v.Status./NotFilled) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.inv.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.inv.? self!) (and (and (and (and (ext_eq false (TYPE%vstd!set.Set. $ (SINT 32)) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))))) (vstd!set.impl&%0.subset_of.? $ (SINT 32) (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!)))))) (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (and (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!)))) slot$) (not (is-lib!exec.Cache_v.Entry./Empty_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot$))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot$)))) (= (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot$)))) slot$)))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!)))) slot$)) ))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) addr$) (and (not (is-lib!exec.Cache_v.Entry./Empty_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!))) addr$))))) (= (lib!exec.Cache_v.impl&%1.get_addr.? (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!))) addr$))) (%Poly%lib!spec.AsyncDisk_t.Address. addr$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) addr$)) ))) (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) slot$) (= (is-lib!exec.Cache_v.Status./NotFilled_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot$))) (not (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. self!))) slot$))))))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. self!)))) slot$)) )))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.inv.? self!)) ))))
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::lemma_msg_inv")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. (lib!exec.Cache_v.Cache.State.) Bool)
(assert (forall ((s! lib!exec.Cache_v.Cache.State.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. s!) (lib!exec.Cache_v.Cache.impl&%5.inv.? (Poly%lib!exec.Cache_v.Cache.State. s!))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. s!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. (lib!exec.Cache_v.Cache.State.) Bool)
(assert (forall ((s! lib!exec.Cache_v.Cache.State.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. s!) (lib!exec.Cache_v.Cache.impl&%5.inv.? (Poly%lib!exec.Cache_v.Cache.State. s!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. s!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::arrow_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%0.arrow_0.? self!) (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%0.arrow_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::arrow_reserve_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0.? self!) (lib!exec.Cache_v.Cache.Step./reserve/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%0.arrow_reserve_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::arrow_load_initiate_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0.? self!) (lib!exec.Cache_v.Cache.Step./load_initiate/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%0.arrow_load_initiate_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::arrow_evict_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0.? self!) (lib!exec.Cache_v.Cache.Step./evict/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%0.arrow_evict_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_reserve")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_reserve.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_reserve.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_reserve.? self!) (is-lib!exec.Cache_v.Cache.Step./reserve_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_reserve.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::get_reserve_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.get_reserve_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.get_reserve_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.get_reserve_0.? self!) (lib!exec.Cache_v.Cache.Step./reserve/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.get_reserve_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_load_initiate")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_initiate.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_initiate.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_load_initiate.? self!) (is-lib!exec.Cache_v.Cache.Step./load_initiate_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_load_initiate.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::get_load_initiate_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0.? self!) (lib!exec.Cache_v.Cache.Step./load_initiate/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.get_load_initiate_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_load_complete")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_complete.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_load_complete.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_load_complete.? self!) (is-lib!exec.Cache_v.Cache.Step./load_complete_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_load_complete.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_access")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_access.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_access.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_access.? self!) (is-lib!exec.Cache_v.Cache.Step./access_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_access.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_writeback_initiate")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate.? self!) (is-lib!exec.Cache_v.Cache.Step./writeback_initiate_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_writeback_initiate.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_writeback_complete")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete.? self!) (is-lib!exec.Cache_v.Cache.Step./writeback_complete_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_writeback_complete.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_evict")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_evict.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_evict.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_evict.? self!) (is-lib!exec.Cache_v.Cache.Step./evict_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_evict.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::get_evict_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.get_evict_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.get_evict_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.get_evict_0.? self!) (lib!exec.Cache_v.Cache.Step./evict/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.get_evict_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_noop")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_noop.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_noop.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_noop.? self!) (is-lib!exec.Cache_v.Cache.Step./noop_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_noop.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params_ ((c lib!exec.Cache_v.Cache.Step.)) Bool ((_ is lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params_ (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!exec.Cache_v.Cache.Step./dummy_to_use_type_params/0 (%Poly%lib!exec.Cache_v.Cache.Step. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%1.get_dummy_to_use_type_params_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.? self!) (lib!exec.Cache_v.Cache.Config./initialize/0 (%Poly%lib!exec.Cache_v.Cache.Config. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.Cache_v.Cache.Config.) (<= 0 (lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.? self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%2.arrow_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/0 (%Poly%lib!exec.Cache_v.Cache.Config. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%3.is_initialize.? self!) (is-lib!exec.Cache_v.Cache.Config./initialize_ (%Poly%lib!exec.Cache_v.Cache.Config. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%3.is_initialize.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.? self!) (lib!exec.Cache_v.Cache.Config./initialize/0 (%Poly%lib!exec.Cache_v.Cache.Config. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.Cache_v.Cache.Config.) (<= 0 (lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.? self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%3.get_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params_ ((c lib!exec.Cache_v.Cache.Config.)) Bool ((_ is lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params_ (%Poly%lib!exec.Cache_v.Cache.Config. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%3.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!exec.Cache_v.Cache.Config./dummy_to_use_type_params/0 (%Poly%lib!exec.Cache_v.Cache.Config. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%3.get_dummy_to_use_type_params_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_requests")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_requests.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_requests.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_requests.? self!) (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_requests.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_responses")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_responses.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_responses.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_responses.? self!) (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_responses.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_Access_reads")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads.? self!) (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_Access_reads.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_Access_writes")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes.? self!) (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_Access_writes.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_DiskOps_requests")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests.? self!) (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_requests.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::Label::arrow_DiskOps_responses")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses.? self!) (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. self!))) :pattern ((lib!exec.Cache_v.Cache.impl&%4.arrow_DiskOps_responses.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::reserve_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_slots_mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.reserve_strong.? pre! post! lbl! new_slots_mapping!) (let ((update_tmp_status_map$ (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? pre! new_slots_mapping!) (and (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)))) (Poly%fun%1. (mk_fun (%%lambda%%5 $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map_lib.impl&%0.invert.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.reserve_strong.? pre! post! lbl! new_slots_mapping!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::reserve_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.reserve_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_slots_mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.reserve_enabled.? pre! lbl! new_slots_mapping!) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? pre! new_slots_mapping!))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.reserve_enabled.? pre! lbl! new_slots_mapping!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::load_initiate_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_slots_mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.? pre! post! lbl! new_slots_mapping!) (let ((update_tmp_status_map$ (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))) (and (vstd!map_lib.impl&%0.is_injective.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) (and (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$) (and (and (is-lib!spec.AsyncDisk_t.DiskRequest./ReadReq_ (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) (is-lib!exec.Cache_v.Entry./Empty_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$)) )) (let ((read_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))) (Poly%fun%1. (mk_fun (%%lambda%%6 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))))))) (and (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? pre! new_slots_mapping!) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. read_addrs$) (vstd!map_lib.impl&%0.values.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)) (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map_lib.impl&%0.invert.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))))))))))))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$)))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.? pre! post! lbl! new_slots_mapping!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::load_initiate_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_slots_mapping! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled.? pre! lbl! new_slots_mapping!) (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))) (and (vstd!map_lib.impl&%0.is_injective.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) (and (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$) (and (and (is-lib!spec.AsyncDisk_t.DiskRequest./ReadReq_ (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) (is-lib!exec.Cache_v.Entry./Empty_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$)) )) (let ((read_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))) (Poly%fun%1. (mk_fun (%%lambda%%6 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))))))) (and (lib!exec.Cache_v.Cache.impl&%5.valid_new_slots_mapping.? pre! new_slots_mapping!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. read_addrs$) (vstd!map_lib.impl&%0.values.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. new_slots_mapping!)))))))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.load_initiate_enabled.? pre! lbl! new_slots_mapping!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::load_complete_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.? pre! post! lbl!) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (and (forall ((resp$ Poly)) (! (=> (has_type resp$ TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$) (and (and (is-lib!spec.AsyncDisk_t.DiskResponse./ReadResp_ (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) (is-lib!exec.Cache_v.Entry./Loading_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$)) )) (let ((read_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. (vstd!map_lib.impl&%0.invert.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))))))) (let ((load_slots$ (%Poly%vstd!set.Set<i32.>. (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. read_map$))))))) (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. load_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%11 $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (UINT 64) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./u64.>. read_map$) $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. load_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Clean)))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))))))))))))) (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$)))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::load_complete_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled.? pre! lbl!) (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (forall ((resp$ Poly)) (! (=> (has_type resp$ TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$) (and (and (is-lib!spec.AsyncDisk_t.DiskResponse./ReadResp_ (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) (is-lib!exec.Cache_v.Entry./Loading_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$)) )))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.load_complete_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::access_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.access_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.access_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.access_strong.? pre! post! lbl!) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (is-lib!exec.Cache_v.Cache.Label./Access_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$) (lib!exec.Cache_v.Cache.impl&%5.valid_read.? pre! slot$ (vstd!map.impl&%0.index.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) slot$)))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$)) )) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$) (lib!exec.Cache_v.Cache.impl&%5.valid_write.? pre! slot$))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$)) )) (and (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))))))) (Poly%fun%1. (mk_fun (%%lambda%%13 $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))))))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))))))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Dirty)))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))) (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.access_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::access_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.access_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.access_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.access_enabled.? pre! lbl!) (and (is-lib!exec.Cache_v.Cache.Label./Access_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$) (lib!exec.Cache_v.Cache.impl&%5.valid_read.? pre! slot$ (vstd!map.impl&%0.index.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) slot$)))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/reads (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$)) )) (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$) (lib!exec.Cache_v.Cache.impl&%5.valid_write.? pre! slot$))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<i32./vstd!seq.Seq<u8.>.>. (lib!exec.Cache_v.Cache.Label./Access/writes (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)))) slot$)) ))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.access_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::writeback_initiate_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.? pre! post! lbl!) (let ((update_tmp_entries$ (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))) (and (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$) (and (and (and (is-lib!spec.AsyncDisk_t.DiskRequest./WriteReq_ (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) (= (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))) (lib!exec.Cache_v.Entry./Filled (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))))) (is-lib!exec.Cache_v.Status./Dirty_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) )) (let ((write_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))) (Poly%fun%1. (mk_fun (%%lambda%%14 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))))))))) (let ((write_slots$ (%Poly%vstd!set.Set<i32.>. (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. write_addrs$)))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. write_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Writeback)))))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$))))))))))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::writeback_initiate_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled.? pre! lbl!) (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))) (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$)) req$) (and (and (and (is-lib!spec.AsyncDisk_t.DiskRequest./WriteReq_ (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) (= (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))) (lib!exec.Cache_v.Entry./Filled (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))))) (is-lib!exec.Cache_v.Status./Dirty_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. req$))))) )))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::writeback_complete_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.? pre! post! lbl!) (let ((update_tmp_entries$ (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (and (forall ((resp$ Poly)) (! (=> (has_type resp$ TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$) (and (and (and (is-lib!spec.AsyncDisk_t.DiskResponse./WriteResp_ (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))) (is-lib!exec.Cache_v.Status./Writeback_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) )) (let ((write_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (UINT 64) $ BOOL) $ (TYPE%fun%1. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))) (Poly%fun%1. (mk_fun (%%lambda%%15 $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$))))))))) (let ((write_slots$ (%Poly%vstd!set.Set<i32.>. (vstd!map_lib.impl&%0.values.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. write_addrs$)))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) (Poly%vstd!set.Set<i32.>. write_slots$)))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./Clean)))))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$))))))))))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::writeback_complete_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled.? pre! lbl!) (let ((tmp_for_match_0$ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) (and (and (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!exec.Cache_v.Cache.Label./DiskOps_ tmp_for_match_0$) (let ((requests$ (lib!exec.Cache_v.Cache.Label./DiskOps/requests (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (let ((responses$ (lib!exec.Cache_v.Cache.Label./DiskOps/responses (%Poly%lib!exec.Cache_v.Cache.Label. (Poly%lib!exec.Cache_v.Cache.Label. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$) (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.) $ (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))))) (let ((requests$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((responses$ (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. requests$))) (and (not (vstd!set_lib.impl&%0.is_empty.? $ (UINT 64) (vstd!map.impl&%0.dom.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)))) (forall ((resp$ Poly)) (! (=> (has_type resp$ TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (vstd!map_lib.impl&%0.values.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. responses$)) resp$) (and (and (and (is-lib!spec.AsyncDisk_t.DiskResponse./WriteResp_ (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) (vstd!set.impl&%0.contains.? $ (SINT 32) (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))) (is-lib!exec.Cache_v.Status./Writeback_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. resp$))))) )))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.writeback_complete_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::evict_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.evict_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.evict_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (evicted_slots! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.evict_strong.? pre! post! lbl! evicted_slots!) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (vstd!set.impl&%0.subset_of.? $ (SINT 32) evicted_slots! (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))))) (and (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) evicted_slots! slot$) (and (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) slot$))) (is-lib!exec.Cache_v.Status./Clean_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) slot$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) evicted_slots! slot$)) )) (let ((evicted_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) evicted_slots!))) (Poly%fun%1. (mk_fun (%%lambda%%17 $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))))))))))) (let ((updated_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) evicted_slots!))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Entry. lib!exec.Cache_v.Entry./Empty)))))))) (let ((updated_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map.impl&%0.new.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. $ (TYPE%fun%1. $ (SINT 32) $ BOOL) $ (TYPE%fun%1. $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status.) (Poly%fun%1. (mk_fun (%%lambda%%4 $ (SINT 32) evicted_slots!))) (Poly%fun%1. (mk_fun (%%lambda%%12 (Poly%lib!exec.Cache_v.Status. lib!exec.Cache_v.Status./NotFilled)))))))) (let ((update_tmp_entries$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. updated_entries$))))) (let ((update_tmp_status_map$ (%Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. updated_status_map$))))) (let ((update_tmp_lookup_map$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (SINT 32) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./i32.>. (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. evicted_addrs$))))) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$))))))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.evict_strong.? pre! post! lbl! evicted_slots!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::evict_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.evict_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.evict_enabled.) (forall ((pre! Poly) (lbl! Poly) (evicted_slots! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.evict_enabled.? pre! lbl! evicted_slots!) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (vstd!set.impl&%0.subset_of.? $ (SINT 32) evicted_slots! (vstd!map.impl&%0.dom.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))))) (forall ((slot$ Poly)) (! (=> (has_type slot$ (SINT 32)) (=> (vstd!set.impl&%0.contains.? $ (SINT 32) evicted_slots! slot$) (and (is-lib!exec.Cache_v.Entry./Filled_ (%Poly%lib!exec.Cache_v.Entry. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Entry. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Entry.>. (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!))) slot$))) (is-lib!exec.Cache_v.Status./Clean_ (%Poly%lib!exec.Cache_v.Status. (vstd!map.impl&%0.index.? $ (SINT 32) $ TYPE%lib!exec.Cache_v.Status. (Poly%vstd!map.Map<i32./lib!exec.Cache_v.Status.>. (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!))) slot$)))))) :pattern ((vstd!set.impl&%0.contains.? $ (SINT 32) evicted_slots! slot$)) ))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.evict_enabled.? pre! lbl! evicted_slots!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::noop_strong")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.noop_strong.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.noop_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.noop_strong.? pre! post! lbl!) (let ((update_tmp_entries$ (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_status_map$ (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (let ((update_tmp_lookup_map$ (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. pre!)))) (and (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!)) (and (= (lib!exec.Cache_v.Cache.State./State/lookup_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_lookup_map$) (and (= (lib!exec.Cache_v.Cache.State./State/status_map (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_status_map$) (= (lib!exec.Cache_v.Cache.State./State/entries (%Poly%lib!exec.Cache_v.Cache.State. post!)) update_tmp_entries$)))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.noop_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::noop_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.noop_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.noop_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.noop_enabled.? pre! lbl!) (is-lib!exec.Cache_v.Cache.Label./Internal_ (%Poly%lib!exec.Cache_v.Cache.Label. lbl!))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.noop_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.initialize_enabled.) (forall ((slots! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.initialize_enabled.? slots!) true) :pattern ((lib!exec.Cache_v.Cache.impl&%5.initialize_enabled.? slots!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.next_strong_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.next_strong_by.? pre! post! label! step!) (ite (is-lib!exec.Cache_v.Cache.Step./reserve_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (let ((new_slots_mapping$ (lib!exec.Cache_v.Cache.Step./reserve/0 (%Poly%lib!exec.Cache_v.Cache.Step. step!)))) (lib!exec.Cache_v.Cache.impl&%5.reserve_strong.? pre! post! label! (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. new_slots_mapping$))) (ite (is-lib!exec.Cache_v.Cache.Step./load_initiate_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (let ((new_slots_mapping$ (lib!exec.Cache_v.Cache.Step./load_initiate/0 (%Poly%lib!exec.Cache_v.Cache.Step. step!)))) (lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.? pre! post! label! (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. new_slots_mapping$))) (ite (is-lib!exec.Cache_v.Cache.Step./load_complete_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./access_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.access_strong.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./writeback_initiate_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./writeback_complete_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.? pre! post! label!) (ite (is-lib!exec.Cache_v.Cache.Step./evict_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (let ((evicted_slots$ (lib!exec.Cache_v.Cache.Step./evict/0 (%Poly%lib!exec.Cache_v.Cache.Step. step!)))) (lib!exec.Cache_v.Cache.impl&%5.evict_strong.? pre! post! label! (Poly%vstd!set.Set<i32.>. evicted_slots$))) (and (is-lib!exec.Cache_v.Cache.Step./noop_ (%Poly%lib!exec.Cache_v.Cache.Step. step!)) (lib!exec.Cache_v.Cache.impl&%5.noop_strong.? pre! post! label!)))))))))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.next_strong_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::next_strong")
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.next_strong.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.next_strong.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!exec.Cache_v.Cache.Step.) (lib!exec.Cache_v.Cache.impl&%5.next_strong_by.? pre! post! label! step$)) :pattern ((lib!exec.Cache_v.Cache.impl&%5.next_strong_by.? pre! post! label! step$)) ))) :pattern ((lib!exec.Cache_v.Cache.impl&%5.next_strong.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::Cache_v::Cache::State::invariant")
(assert (fuel_bool_default fuel%lib!exec.Cache_v.Cache.impl&%5.invariant.))
(assert (=> (fuel_bool fuel%lib!exec.Cache_v.Cache.impl&%5.invariant.) (forall ((self! Poly)) (! (= (lib!exec.Cache_v.Cache.impl&%5.invariant.? self!) (lib!exec.Cache_v.Cache.impl&%5.inv.? self!)) :pattern ((lib!exec.Cache_v.Cache.impl&%5.invariant.? self!)) ))))
(set-info :comment ";; Function-Specs lib::exec::Cache_v::injective_map_property")
(declare-fun req%lib!exec.Cache_v.injective_map_property. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (= (req%lib!exec.Cache_v.injective_map_property. K&. K& V&. V& map!) (=> %%global_location_label%%5 (vstd!map_lib.impl&%0.is_injective.? K&. K& V&. V& map!))) :pattern ((req%lib!exec.Cache_v.injective_map_property. K&. K& V&. V& map!)) )))
(declare-fun ens%lib!exec.Cache_v.injective_map_property. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (= (ens%lib!exec.Cache_v.injective_map_property. K&. K& V&. V& map!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) (vstd!map_lib.impl&%0.values.? V&. V& K&. K& (vstd!map_lib.impl&%0.invert.? K&. K& V&. V& map!))) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) k$) (= (vstd!map.impl&%0.index.? V&. V& K&. K& (vstd!map_lib.impl&%0.invert.? K&. K& V&. V& map!) (vstd!map.impl&%0.index.? K&. K& V&. V& map! k$)) k$))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& map!) k$)) )))) :pattern ((ens%lib!exec.Cache_v.injective_map_property. K&. K& V&. V& map!)) )))
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::reserve_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.reserve_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label. vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.) (new_slots_mapping! vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.reserve_inductive. pre! post! lbl! new_slots_mapping!) (=> %%global_location_label%%6 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.reserve_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!) (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. new_slots_mapping!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.reserve_inductive. pre! post! lbl! new_slots_mapping!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.reserve_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label. vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.) (new_slots_mapping! vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.reserve_inductive. pre! post! lbl! new_slots_mapping!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.reserve_inductive. pre! post! lbl! new_slots_mapping!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::reserve_inductive")
(set-info :comment ";; exec/Cache_v.rs:284:5: 284:99 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::load_initiate_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.load_initiate_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label. vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.) (new_slots_mapping! vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.load_initiate_inductive. pre! post! lbl! new_slots_mapping!) (=> %%global_location_label%%7 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.load_initiate_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!) (Poly%vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>. new_slots_mapping!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.load_initiate_inductive. pre! post! lbl! new_slots_mapping!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.load_initiate_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label. vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.) (new_slots_mapping! vstd!map.Map<i32./lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.load_initiate_inductive. pre! post! lbl! new_slots_mapping!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.load_initiate_inductive. pre! post! lbl! new_slots_mapping!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::load_initiate_inductive")
(set-info :comment ";; exec/Cache_v.rs:290:5: 290:105 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::load_complete_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.load_complete_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.load_complete_inductive. pre! post! lbl!) (=> %%global_location_label%%8 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.load_complete_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.load_complete_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.load_complete_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.load_complete_inductive. pre! post! lbl!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.load_complete_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::load_complete_inductive")
(set-info :comment ";; exec/Cache_v.rs:295:5: 295:66 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::access_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.access_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.access_inductive. pre! post! lbl!) (=> %%global_location_label%%9 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.access_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.access_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.access_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.access_inductive. pre! post! lbl!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.access_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::access_inductive")
(set-info :comment ";; exec/Cache_v.rs:298:5: 298:59 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::writeback_initiate_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_inductive. pre! post! lbl!) (=> %%global_location_label%%10 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_inductive. pre! post! lbl!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.writeback_initiate_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::writeback_initiate_inductive")
(set-info :comment ";; exec/Cache_v.rs:301:5: 301:71 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::writeback_complete_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_inductive. pre! post! lbl!) (=> %%global_location_label%%11 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.writeback_complete_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_inductive. pre! post! lbl!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.writeback_complete_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::writeback_complete_inductive")
(set-info :comment ";; exec/Cache_v.rs:304:5: 304:71 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::evict_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.evict_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label. vstd!set.Set<i32.>.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.) (evicted_slots! vstd!set.Set<i32.>.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.evict_inductive. pre! post! lbl! evicted_slots!) (=> %%global_location_label%%12 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.evict_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!) (Poly%vstd!set.Set<i32.>. evicted_slots!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.evict_inductive. pre! post! lbl! evicted_slots!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.evict_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label. vstd!set.Set<i32.>.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.) (evicted_slots! vstd!set.Set<i32.>.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.evict_inductive. pre! post! lbl! evicted_slots!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.evict_inductive. pre! post! lbl! evicted_slots!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::evict_inductive")
(set-info :comment ";; exec/Cache_v.rs:307:5: 307:84 (#0)")
(set-info :comment ";; Function-Specs lib::exec::Cache_v::Cache::State::noop_inductive")
(declare-fun req%lib!exec.Cache_v.Cache.impl&%5.noop_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (req%lib!exec.Cache_v.Cache.impl&%5.noop_inductive. pre! post! lbl!) (=> %%global_location_label%%13 (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.noop_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!))))) :pattern ((req%lib!exec.Cache_v.Cache.impl&%5.noop_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!exec.Cache_v.Cache.impl&%5.noop_inductive. (lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.State. lib!exec.Cache_v.Cache.Label.) Bool)
(assert (forall ((pre! lib!exec.Cache_v.Cache.State.) (post! lib!exec.Cache_v.Cache.State.) (lbl! lib!exec.Cache_v.Cache.Label.)) (! (= (ens%lib!exec.Cache_v.Cache.impl&%5.noop_inductive. pre! post! lbl!) (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!))) :pattern ((ens%lib!exec.Cache_v.Cache.impl&%5.noop_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::exec::Cache_v::Cache::State::noop_inductive")
(set-info :comment ";; exec/Cache_v.rs:321:5: 321:57 (#0)")
(declare-const pre! lib!exec.Cache_v.Cache.State.)
(declare-const post! lib!exec.Cache_v.Cache.State.)
(declare-const lbl! lib!exec.Cache_v.Cache.Label.)
(assert fuel_defaults)
(assert (and (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. pre!)) (lib!exec.Cache_v.Cache.impl&%5.noop_strong.? (Poly%lib!exec.Cache_v.Cache.State. pre!) (Poly%lib!exec.Cache_v.Cache.State. post!) (Poly%lib!exec.Cache_v.Cache.Label. lbl!))))
(set-info :comment ";; could not show invariant `inv` on the `post` state")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%1 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. post!)) (=> (ens%lib!exec.Cache_v.Cache.impl&%5.lemma_msg_inv. post!) (=> %%location_label%%1 (lib!exec.Cache_v.Cache.impl&%5.invariant.? (Poly%lib!exec.Cache_v.Cache.State. post!)))))))
(check-sat)
(exit)
