(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module journal::LinkedJournal_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map.check_argument_is_map. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!math.max. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.has_link. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.contains_lsn. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.the_ranking. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.decodable. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.build_tight. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.iptr. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.next. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_tight. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.lsn_has_entry_at. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.lsn_has_entry. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.lsns_have_entries. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.decodable. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.can_crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.append_record. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.build_tight. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.mkfs. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.lsns_have_entries. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.marshal_ranking. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%3.bounded_discard. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map.check_argument_is_map. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.spec_le. fuel%vstd!math.max. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. fuel%lib!journal.LinkedJournal_v.impl&%0.wf. fuel%lib!journal.LinkedJournal_v.impl&%0.has_link. fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior. fuel%lib!journal.LinkedJournal_v.impl&%0.contains_lsn. fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf. fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer. fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers. fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link. fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds. fuel%lib!journal.LinkedJournal_v.impl&%1.wf. fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic. fuel%lib!journal.LinkedJournal_v.impl&%1.the_ranking. fuel%lib!journal.LinkedJournal_v.impl&%1.decodable. fuel%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start. fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end. fuel%lib!journal.LinkedJournal_v.impl&%1.discard_old. fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk. fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn. fuel%lib!journal.LinkedJournal_v.impl&%1.build_tight. fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop. fuel%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. fuel%lib!journal.LinkedJournal_v.impl&%1.iptr. fuel%lib!journal.LinkedJournal_v.impl&%1.next. fuel%lib!journal.LinkedJournal_v.impl&%1.is_tight. fuel%lib!journal.LinkedJournal_v.impl&%1.lsn_has_entry_at. fuel%lib!journal.LinkedJournal_v.impl&%1.lsn_has_entry. fuel%lib!journal.LinkedJournal_v.impl&%1.lsns_have_entries. fuel%lib!journal.LinkedJournal_v.impl&%2.wf. fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start. fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end. fuel%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. fuel%lib!journal.LinkedJournal_v.impl&%2.discard_old. fuel%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. fuel%lib!journal.LinkedJournal_v.impl&%2.decodable. fuel%lib!journal.LinkedJournal_v.impl&%2.can_crop. fuel%lib!journal.LinkedJournal_v.impl&%2.crop. fuel%lib!journal.LinkedJournal_v.impl&%2.append_record. fuel%lib!journal.LinkedJournal_v.impl&%2.build_tight. fuel%lib!journal.LinkedJournal_v.impl&%2.mkfs. fuel%lib!journal.LinkedJournal_v.impl&%2.lsns_have_entries. fuel%lib!journal.LinkedJournal_v.impl&%2.marshal_ranking. fuel%lib!journal.LinkedJournal_v.impl&%3.bounded_discard. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!journal.LinkedJournal_v.JournalRecord. 0) (lib!journal.LinkedJournal_v.DiskView. 0) (lib!journal.LinkedJournal_v.TruncatedJournal. 0) (lib!journal.PagedJournal_v.JournalRecord. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?message_seq lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?prior_rec core!option.Option.))) ((lib!journal.LinkedJournal_v.DiskView./DiskView (lib!journal.LinkedJournal_v.DiskView./DiskView/?boundary_lsn Int) (lib!journal.LinkedJournal_v.DiskView./DiskView/?entries vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.))) ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?freshest_rec core!option.Option.) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?disk_view lib!journal.LinkedJournal_v.DiskView.))) ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?message_seq lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?prior_rec core!option.Option.))) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (lib!journal.LinkedJournal_v.JournalRecord.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (lib!journal.LinkedJournal_v.JournalRecord.) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (lib!journal.LinkedJournal_v.DiskView.) Int)
(declare-fun lib!journal.LinkedJournal_v.DiskView./DiskView/entries (lib!journal.LinkedJournal_v.DiskView.) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)
(declare-fun lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (lib!journal.LinkedJournal_v.TruncatedJournal.) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (lib!journal.LinkedJournal_v.TruncatedJournal.) lib!journal.LinkedJournal_v.DiskView.)
(declare-fun lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (lib!journal.PagedJournal_v.JournalRecord.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (lib!journal.PagedJournal_v.JournalRecord.) core!option.Option.)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.JournalRecord. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.DiskView. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.TruncatedJournal. Type)
(declare-const TYPE%lib!journal.PagedJournal_v.JournalRecord. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.JournalRecord. (Poly) lib!journal.LinkedJournal_v.JournalRecord.)
(declare-fun Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.DiskView.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.DiskView. (Poly) lib!journal.LinkedJournal_v.DiskView.)
(declare-fun Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.TruncatedJournal.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord.) Poly)
(declare-fun %Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly) lib!journal.PagedJournal_v.JournalRecord.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.JournalRecord.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (Poly%lib!journal.LinkedJournal_v.JournalRecord. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.JournalRecord. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (= x (Poly%lib!journal.LinkedJournal_v.JournalRecord. (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((_message_seq! lib!abstract_system.MsgHistory_v.MsgHistory.) (_prior_rec! core!option.Option.)) (! (=> (and (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _message_seq!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%core!option.Option. _prior_rec!) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.JournalRecord.)) (! (= (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq x) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?message_seq x)) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.JournalRecord.)) (! (= (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec x) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?prior_rec x)) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x))) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.DiskView.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.DiskView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.) (= x (Poly%lib!journal.LinkedJournal_v.DiskView. (%Poly%lib!journal.LinkedJournal_v.DiskView. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.)) )))
(assert (forall ((_boundary_lsn! Int) (_entries! vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)) (! (=> (<= 0 _boundary_lsn!) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.DiskView./DiskView _boundary_lsn! _entries!)) TYPE%lib!journal.LinkedJournal_v.DiskView.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.DiskView./DiskView _boundary_lsn! _entries!)) TYPE%lib!journal.LinkedJournal_v.DiskView.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.DiskView.)) (! (= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn x) (lib!journal.LinkedJournal_v.DiskView./DiskView/?boundary_lsn x)) :pattern ((lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.) (<= 0 (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. x)))) :pattern ((lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.DiskView.)) (! (= (lib!journal.LinkedJournal_v.DiskView./DiskView/entries x) (lib!journal.LinkedJournal_v.DiskView./DiskView/?entries x)) :pattern ((lib!journal.LinkedJournal_v.DiskView./DiskView/entries x)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type y TYPE%lib!journal.LinkedJournal_v.DiskView.) (= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. x)) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. y))) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. x))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. y))))) (ext_eq deep TYPE%lib!journal.LinkedJournal_v.DiskView. x y)) :pattern ((ext_eq deep TYPE%lib!journal.LinkedJournal_v.DiskView. x y)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (= x (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((_freshest_rec! core!option.Option.) (_disk_view! lib!journal.LinkedJournal_v.DiskView.)) (! (=> (and (has_type (Poly%core!option.Option. _freshest_rec!) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. _disk_view!) TYPE%lib!journal.LinkedJournal_v.DiskView.)) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal _freshest_rec! _disk_view!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal _freshest_rec! _disk_view!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec x) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?freshest_rec x)) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view x) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?disk_view x)) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) TYPE%lib!journal.LinkedJournal_v.DiskView.)) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type y TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (ext_eq deep (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. y)))) (ext_eq deep TYPE%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. y))))) (ext_eq deep TYPE%lib!journal.LinkedJournal_v.TruncatedJournal. x y)) :pattern ((ext_eq deep TYPE%lib!journal.LinkedJournal_v.TruncatedJournal. x y)) )))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (= x (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. x))) :pattern ((Poly%lib!journal.PagedJournal_v.JournalRecord. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.) (= x (Poly%lib!journal.PagedJournal_v.JournalRecord. (%Poly%lib!journal.PagedJournal_v.JournalRecord. x)))) :pattern ((has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(assert (forall ((_message_seq! lib!abstract_system.MsgHistory_v.MsgHistory.) (_prior_rec! core!option.Option.)) (! (=> (and (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _message_seq!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%core!option.Option. _prior_rec!) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) (has_type (Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.PagedJournal_v.JournalRecord.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (= (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq x) (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?message_seq x)) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (= (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x) (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?prior_rec x)) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. x))) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(define-fun is-lib!journal.PagedJournal_v.JournalRecord./JournalRecord_ ((c lib!journal.PagedJournal_v.JournalRecord.)) Bool ((_ is lib!journal.PagedJournal_v.JournalRecord./JournalRecord) c))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (=> (is-lib!journal.PagedJournal_v.JournalRecord./JournalRecord_ x) (height_lt (height (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x))) (height (Poly%lib!journal.PagedJournal_v.JournalRecord. x)))) :pattern ((height (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x)))) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_concat")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::entries_wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.entries_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_nondangling_pointer")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::cropped_prior")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::nondangling_pointers")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::has_link")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.has_link.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::blocks_each_have_link")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::block_in_bounds")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::seq_start")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.seq_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::seq_start")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::seq_end")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.seq_end.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::acyclic")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::decodable")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::decodable")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.decodable.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::next")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.next.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::can_crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly Poly Poly) Bool)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? (Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? (Poly Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::can_crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.can_crop.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.crop.? (Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::can_discard_to")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::discard_old")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.discard_old.? (Poly Poly) lib!journal.LinkedJournal_v.DiskView.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::discard_old")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.discard_old.? (Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::the_ranking")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.the_ranking.? (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::the_rank_of")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.the_rank_of.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::build_tight")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.build_tight.? (Poly Poly) lib!journal.LinkedJournal_v.DiskView.)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? (Poly Poly Fuel) lib!journal.LinkedJournal_v.DiskView.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::build_tight")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.build_tight.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::spec_le")
(declare-fun vstd!map_lib.impl&%0.spec_le.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_sub_disk")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::valid_discard_old")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::bounded_discard")
(declare-fun lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::append_record")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.append_record.? (Poly Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl vstd::math::max")
(declare-fun vstd!math.max.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::contains_lsn")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.contains_lsn.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::mkfs")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.mkfs.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl vstd::map::check_argument_is_map")
(declare-fun vstd!map.check_argument_is_map.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::iptr")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.iptr.? (Poly Poly) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%iptr.? (Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_sub_disk_with_newer_lsn")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_tight")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_tight.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::lsn_has_entry_at")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.lsn_has_entry_at.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::lsn_has_entry")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.lsn_has_entry.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::lsns_have_entries")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.lsns_have_entries.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::lsns_have_entries")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.lsns_have_entries.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::marshal_ranking")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.marshal_ranking.? (Poly Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_concat")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? other! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!) (=> %%global_location_label%%3 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.))
(declare-fun %%lambda%%0 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%0 (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I lsn!) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::JournalRecord::wf")
(set-info :comment ";; journal/LinkedJournal_v.rs:36:5: 36:47 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::JournalRecord::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%0.wf.? self!) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)))) (not (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::entries_wf")
(set-info :comment ";; journal/LinkedJournal_v.rs:69:5: 69:55 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::entries_wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%0.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::is_nondangling_pointer")
(set-info :comment ";; journal/LinkedJournal_v.rs:73:5: 73:81 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::is_nondangling_pointer")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::JournalRecord::cropped_prior")
(set-info :comment ";; journal/LinkedJournal_v.rs:45:5: 45:80 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::JournalRecord::cropped_prior")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!) (ite (< (%I boundary_lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)))))) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)) core!option.Option./None)) :pattern ((lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) ))))
(assert (forall ((self! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::nondangling_pointers")
(set-info :comment ";; journal/LinkedJournal_v.rs:77:5: 77:65 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::nondangling_pointers")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. (Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (addr! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. self! addr!) (and (=> %%global_location_label%%4 (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%5 (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. self! addr!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(set-info :comment ";; journal/LinkedJournal_v.rs:82:5: 82:81 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? self! addr!) (let ((head$ (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr!)))) (let ((next_ptr$ (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (Poly%lib!journal.LinkedJournal_v.JournalRecord. head$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) (=> (is-core!option.Option./Some_ next_ptr$) (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_ptr$))))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (Poly%lib!journal.LinkedJournal_v.JournalRecord. head$))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? self! addr!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. (Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. self!) (and (=> %%global_location_label%%7 (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%8 (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(set-info :comment ";; journal/LinkedJournal_v.rs:93:5: 93:62 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? self! addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::JournalRecord::has_link")
(set-info :comment ";; journal/LinkedJournal_v.rs:41:5: 41:72 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::JournalRecord::has_link")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%0.has_link.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%0.has_link.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%0.has_link.? self! boundary_lsn!) (=> (< (%I boundary_lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)))))) (is-core!option.Option./Some_ (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)))) :pattern ((lib!journal.LinkedJournal_v.impl&%0.has_link.? self! boundary_lsn!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::blocks_each_have_link")
(set-info :comment ";; journal/LinkedJournal_v.rs:102:5: 102:66 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::blocks_each_have_link")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%0.has_link.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::wf")
(set-info :comment ";; journal/LinkedJournal_v.rs:114:5: 114:47 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.wf.? self!) (and (and (and (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)) (lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? self!)) (lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::block_in_bounds")
(set-info :comment ";; journal/LinkedJournal_v.rs:108:5: 108:74 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::block_in_bounds")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! ptr!) (and (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (< (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!)))))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! ptr!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::TruncatedJournal::wf")
(set-info :comment ";; journal/LinkedJournal_v.rs:601:5: 601:47 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.wf.? self!) (and (and (lib!journal.LinkedJournal_v.impl&%1.wf.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::seq_start")
(set-info :comment ";; journal/LinkedJournal_v.rs:166:5: 166:53 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::seq_start")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (<= 0 (lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::TruncatedJournal::seq_start")
(set-info :comment ";; journal/LinkedJournal_v.rs:607:5: 607:53 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::seq_start")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!) (lib!journal.LinkedJournal_v.impl&%1.seq_start.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::seq_end")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.seq_end. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (root! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.seq_end. self! root!) (=> %%global_location_label%%9 (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! root!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.seq_end. self! root!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::seq_end")
(set-info :comment ";; journal/LinkedJournal_v.rs:170:5: 170:66 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::seq_end")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end.) (forall ((self! Poly) (root! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. root!)) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. root!)))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!)) ))))
(assert (forall ((self! Poly) (root! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (<= 0 (lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.seq_end. (Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.seq_end. self!) (=> %%global_location_label%%10 (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.seq_end. self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(set-info :comment ";; journal/LinkedJournal_v.rs:611:5: 611:51 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!) (lib!journal.LinkedJournal_v.impl&%1.seq_end.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. (Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (ranking! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. self! ranking!) (=> %%global_location_label%%11 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. self! ranking!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(set-info :comment ";; journal/LinkedJournal_v.rs:122:5: 122:76 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking.) (forall ((self! Poly) (ranking! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking!) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!)) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (is-core!option.Option./Some_ (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) (< (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))))))))) (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! addr$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) )))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::acyclic")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.acyclic. (Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.acyclic. self!) (=> %%global_location_label%%12 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.acyclic. self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::acyclic")
(set-info :comment ";; journal/LinkedJournal_v.rs:132:5: 132:52 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::acyclic")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!) (exists ((ranking$ Poly)) (! (and (has_type ranking$ (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking$)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::TruncatedJournal::decodable")
(set-info :comment ";; journal/LinkedJournal_v.rs:651:5: 651:54 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::decodable")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.decodable.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.decodable.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.decodable.? self!) (and (lib!journal.LinkedJournal_v.impl&%2.wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.decodable.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::decodable")
(set-info :comment ";; journal/LinkedJournal_v.rs:147:5: 147:68 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::decodable")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.decodable.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.decodable.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! ptr!) (and (lib!journal.LinkedJournal_v.impl&%1.wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.decodable.? self! ptr!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::next")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.next. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (ptr! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.next. self! ptr!) (and (=> %%global_location_label%%13 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!)) (=> %%global_location_label%%14 (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!))))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.next. self! ptr!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::next")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.next.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.next.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!) (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!)) ))))
(assert (forall ((self! Poly) (ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type ptr! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!)) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::can_crop")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.can_crop. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.can_crop. self! root! depth!) (and (=> %%global_location_label%%15 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (=> %%global_location_label%%16 (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! root!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.can_crop. self! root! depth!)) )))
(set-info :comment ";; Spec-Termination lib::journal::LinkedJournal_v::DiskView::can_crop")
(set-info :comment ";; journal/LinkedJournal_v.rs:249:5: 249:80 (#0)")
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::can_crop")
(set-info :comment ";; journal/LinkedJournal_v.rs:249:5: 249:80 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::can_crop")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop.))
(declare-const fuel_nat%lib!journal.LinkedJournal_v.impl&%1.can_crop. Fuel)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! fuel%) (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! zero)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! fuel%)) )))
(assert (forall ((self! Poly) (root! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (= (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! (succ fuel%)) (=> (< 0 (%I depth!)) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. root!)) (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! root!)) (I (nClip (Sub (%I depth!) 1))) fuel%))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop.) (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (= (lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!) (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! (succ fuel_nat%lib!journal.LinkedJournal_v.impl&%1.can_crop.)))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. self! root! depth!) (and (=> %%global_location_label%%17 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (=> %%global_location_label%%18 (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! root!)) (=> %%global_location_label%%19 (lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. self! root! depth!)) )))
(set-info :comment ";; Spec-Termination lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(set-info :comment ";; journal/LinkedJournal_v.rs:261:5: 261:99 (#0)")
(set-info :comment ";; Function-Recommends lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(set-info :comment ";; journal/LinkedJournal_v.rs:261:5: 261:99 (#0)")
(declare-const %return! core!option.Option.)
(declare-const self! Poly)
(declare-const root! Poly)
(declare-const depth! Poly)
(declare-const tmp%1 Bool)
(declare-const tmp%2 core!option.Option.)
(declare-const tmp%3 core!option.Option.)
(declare-const tmp%4 Poly)
(declare-const tmp%5 Poly)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.))
(assert (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)))
(assert (has_type depth! NAT))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%2 Bool)
(assert (not (=> (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!) (=> (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! root!) (and (=> %%location_label%%0 (req%lib!journal.LinkedJournal_v.impl&%1.can_crop. self! root! depth!)) (=> (= tmp%1 (lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!)) (=> (lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!) (or (and (=> (= (%I depth!) 0) (=> (= tmp%5 root!) %%switch_label%%0)) (=> (not (= (%I depth!) 0)) (and (=> %%location_label%%1 (req%lib!journal.LinkedJournal_v.impl&%1.next. self! root!)) (=> (= tmp%2 (lib!journal.LinkedJournal_v.impl&%1.next.? self! root!)) (=> (= tmp%4 (I (nClip (Sub (%I depth!) 1)))) (and (=> %%location_label%%2 (req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. self! (Poly%core!option.Option. tmp%2) tmp%4)) (=> (= tmp%3 (lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? self! (Poly%core!option.Option. tmp%2) (I (nClip (Sub (%I depth!) 1))))) (=> (= tmp%5 (Poly%core!option.Option. tmp%3)) %%switch_label%%0)))))))) (not %%switch_label%%0)))))))))
(check-sat)
(exit)
