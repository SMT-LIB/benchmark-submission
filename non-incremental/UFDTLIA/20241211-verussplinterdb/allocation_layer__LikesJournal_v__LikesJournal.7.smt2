(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module allocation_layer::LikesJournal_v::LikesJournal'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_value. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.values. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!math.max. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.insert. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_empty. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_singleton. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_singleton_different. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_add. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_ext_equal. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.to_multiset. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at. FuelId)
(declare-const fuel%lib!allocation_layer.Likes_v.no_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.singleton_index. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%1.buildable. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%2.tj_at. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.map_to_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.max. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr. FuelId)
(declare-const fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.has_link. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.the_ranking. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.decodable. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.build_tight. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%1.next. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.decodable. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.can_crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.crop. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.append_record. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%2.build_tight. FuelId)
(declare-const fuel%lib!journal.LinkedJournal_v.impl&%3.bounded_discard. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.contains_value. fuel%vstd!map_lib.impl&%0.values. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.spec_le. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!math.max. fuel%vstd!multiset.impl&%0.insert. fuel%vstd!multiset.axiom_multiset_empty. fuel%vstd!multiset.axiom_multiset_singleton. fuel%vstd!multiset.axiom_multiset_singleton_different. fuel%vstd!multiset.axiom_multiset_add. fuel%vstd!multiset.axiom_multiset_ext_equal. fuel%vstd!multiset.axiom_multiset_ext_equal_deep. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.choose. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_choose_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set.axiom_set_choose_len. fuel%vstd!set_lib.impl&%0.to_multiset. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr. fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes. fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at. fuel%lib!allocation_layer.Likes_v.no_likes. fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to. fuel%lib!allocation_layer.LikesJournal_v.singleton_index. fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record. fuel%lib!allocation_layer.LikesJournal_v.impl&%1.buildable. fuel%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index. fuel%lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn. fuel%lib!allocation_layer.LikesJournal_v.impl&%2.tj_at. fuel%lib!allocation_layer.LikesJournal_v.map_to_likes. fuel%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index. fuel%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond. fuel%lib!allocation_layer.LikesJournal_v.max. fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid. fuel%lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr. fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid. fuel%lib!journal.LinkedJournal_v.impl&%0.wf. fuel%lib!journal.LinkedJournal_v.impl&%0.has_link. fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior. fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf. fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer. fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers. fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link. fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds. fuel%lib!journal.LinkedJournal_v.impl&%1.wf. fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic. fuel%lib!journal.LinkedJournal_v.impl&%1.the_ranking. fuel%lib!journal.LinkedJournal_v.impl&%1.decodable. fuel%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start. fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end. fuel%lib!journal.LinkedJournal_v.impl&%1.discard_old. fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk. fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn. fuel%lib!journal.LinkedJournal_v.impl&%1.build_tight. fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop. fuel%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. fuel%lib!journal.LinkedJournal_v.impl&%1.next. fuel%lib!journal.LinkedJournal_v.impl&%2.wf. fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start. fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end. fuel%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. fuel%lib!journal.LinkedJournal_v.impl&%2.discard_old. fuel%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. fuel%lib!journal.LinkedJournal_v.impl&%2.decodable. fuel%lib!journal.LinkedJournal_v.impl&%2.can_crop. fuel%lib!journal.LinkedJournal_v.impl&%2.crop. fuel%lib!journal.LinkedJournal_v.impl&%2.append_record. fuel%lib!journal.LinkedJournal_v.impl&%2.build_tight. fuel%lib!journal.LinkedJournal_v.impl&%3.bounded_discard. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (and (fuel_bool_default fuel%vstd!multiset.axiom_multiset_empty.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_singleton.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_singleton_different.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_add.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_ext_equal.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. 0)
(declare-sort vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!journal.LinkedJournal_v.LinkedJournal.State. 0) (lib!journal.LinkedJournal_v.LinkedJournal.Step. 0) (lib!journal.LinkedJournal_v.LinkedJournal.Label. 0) (lib!allocation_layer.LikesJournal_v.LikesJournal.State. 0) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step. 0) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config. 0) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!journal.LinkedJournal_v.JournalRecord. 0) (lib!journal.LinkedJournal_v.DiskView. 0) (lib!journal.LinkedJournal_v.TruncatedJournal. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!journal.LinkedJournal_v.LinkedJournal.State./State (lib!journal.LinkedJournal_v.LinkedJournal.State./State/?truncated_journal lib!journal.LinkedJournal_v.TruncatedJournal.) (lib!journal.LinkedJournal_v.LinkedJournal.State./State/?unmarshalled_tail lib!abstract_system.MsgHistory_v.MsgHistory.))) ((lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/?0 Int)) (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/?0 Int)) (lib!journal.LinkedJournal_v.LinkedJournal.Step./query_end_lsn ) (lib!journal.LinkedJournal_v.LinkedJournal.Step./put ) (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/?0 lib!journal.LinkedJournal_v.TruncatedJournal.)) (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/?0 Int) (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/?1 lib!spec.AsyncDisk_t.Address.)) (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_no_op ) (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/?0 lib!journal.LinkedJournal_v.LinkedJournal.State.))) ((lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/?frozen_journal lib!journal.LinkedJournal_v.TruncatedJournal.)) (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/?end_lsn Int)) (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/?start_lsn Int) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/?require_end Int)) (lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal )) ((lib!allocation_layer.LikesJournal_v.LikesJournal.State./State (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/?journal lib!journal.LinkedJournal_v.LinkedJournal.State.) (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/?lsn_addr_index vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.))) ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery ) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/?0 Int)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn ) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/?0 lib!journal.LinkedJournal_v.LinkedJournal.State.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/?0 lib!journal.LinkedJournal_v.LinkedJournal.State.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/?0 Int) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/?1 lib!spec.AsyncDisk_t.Address.) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/?2 lib!journal.LinkedJournal_v.LinkedJournal.State.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op ) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/?0 lib!allocation_layer.LikesJournal_v.LikesJournal.State.))) ((lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/?0 lib!journal.LinkedJournal_v.TruncatedJournal.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/?0 lib!allocation_layer.LikesJournal_v.LikesJournal.State.))) ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/?frozen_journal lib!journal.LinkedJournal_v.TruncatedJournal.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/?end_lsn Int)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/?start_lsn Int) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/?require_end Int)) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal )) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?message_seq lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?prior_rec core!option.Option.))) ((lib!journal.LinkedJournal_v.DiskView./DiskView (lib!journal.LinkedJournal_v.DiskView./DiskView/?boundary_lsn Int) (lib!journal.LinkedJournal_v.DiskView./DiskView/?entries vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.))) ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?freshest_rec core!option.Option.) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?disk_view lib!journal.LinkedJournal_v.DiskView.))) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (lib!journal.LinkedJournal_v.LinkedJournal.State.) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (lib!journal.LinkedJournal_v.LinkedJournal.State.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/0 (lib!journal.LinkedJournal_v.LinkedJournal.Step.) Int)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/0 (lib!journal.LinkedJournal_v.LinkedJournal.Step.) Int)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/0 (lib!journal.LinkedJournal_v.LinkedJournal.Step.) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/0 (lib!journal.LinkedJournal_v.LinkedJournal.Step.) Int)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/1 (lib!journal.LinkedJournal_v.LinkedJournal.Step.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/0 (lib!journal.LinkedJournal_v.LinkedJournal.Step.) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages (lib!journal.LinkedJournal_v.LinkedJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal (lib!journal.LinkedJournal_v.LinkedJournal.Label.) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn (lib!journal.LinkedJournal_v.LinkedJournal.Label.) Int)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (lib!journal.LinkedJournal_v.LinkedJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn (lib!journal.LinkedJournal_v.LinkedJournal.Label.) Int)
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end (lib!journal.LinkedJournal_v.LinkedJournal.Label.) Int)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (lib!allocation_layer.LikesJournal_v.LikesJournal.State.) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (lib!allocation_layer.LikesJournal_v.LikesJournal.State.) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) Int)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) Int)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Int)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Int)
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (lib!journal.LinkedJournal_v.JournalRecord.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (lib!journal.LinkedJournal_v.JournalRecord.) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (lib!journal.LinkedJournal_v.DiskView.) Int)
(declare-fun lib!journal.LinkedJournal_v.DiskView./DiskView/entries (lib!journal.LinkedJournal_v.DiskView.) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)
(declare-fun lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (lib!journal.LinkedJournal_v.TruncatedJournal.) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (lib!journal.LinkedJournal_v.TruncatedJournal.) lib!journal.LinkedJournal_v.DiskView.)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!multiset.Multiset. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label. Type)
(declare-const TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State. Type)
(declare-const TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. Type)
(declare-const TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. Type)
(declare-const TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.JournalRecord. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.DiskView. Type)
(declare-const TYPE%lib!journal.LinkedJournal_v.TruncatedJournal. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)
(declare-fun Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!journal.LinkedJournal_v.LinkedJournal.State.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-fun Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (Poly) lib!journal.LinkedJournal_v.LinkedJournal.Step.)
(declare-fun Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (Poly) lib!journal.LinkedJournal_v.LinkedJournal.Label.)
(declare-fun Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(declare-fun Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)
(declare-fun Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)
(declare-fun Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.JournalRecord. (Poly) lib!journal.LinkedJournal_v.JournalRecord.)
(declare-fun Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.DiskView.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.DiskView. (Poly) lib!journal.LinkedJournal_v.DiskView.)
(declare-fun Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.TruncatedJournal.) Poly)
(declare-fun %Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.))) )))
(assert (forall ((x vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (= x (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) )))
(assert (forall ((_truncated_journal! lib!journal.LinkedJournal_v.TruncatedJournal.) (_unmarshalled_tail! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (and (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. _truncated_journal!) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _unmarshalled_tail!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!journal.LinkedJournal_v.LinkedJournal.State./State _truncated_journal! _unmarshalled_tail!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!journal.LinkedJournal_v.LinkedJournal.State./State _truncated_journal! _unmarshalled_tail!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal x) (lib!journal.LinkedJournal_v.LinkedJournal.State./State/?truncated_journal x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x))) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail x) (lib!journal.LinkedJournal_v.LinkedJournal.State./State/?unmarshalled_tail x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (= x (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/0 x) (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/?0 x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/0 x) (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/?0 x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. lib!journal.LinkedJournal_v.LinkedJournal.Step./query_end_lsn) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.))
(assert (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. lib!journal.LinkedJournal_v.LinkedJournal.Step./put) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.))
(assert (forall ((_0! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. _0!) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/0 x) (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/?0 x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x))) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((_0! Int) (_1! lib!spec.AsyncDisk_t.Address.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!spec.AsyncDisk_t.Address. _1!) TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal _0! _1!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal _0! _1!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/0 x) (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/?0 x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/1 x) (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/?1 x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/1 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/1 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_no_op) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.))
(assert (forall ((_0! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. _0!) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Step.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/0 x) (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x))) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (= x (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery _messages!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery _messages!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages x) (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/?messages x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((_frozen_journal! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. _frozen_journal!) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit _frozen_journal!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit _frozen_journal!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal x) (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/?frozen_journal x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x))) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn _end_lsn!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn _end_lsn!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn x) (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/?end_lsn x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put _messages!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put _messages!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages x) (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/?messages x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((_start_lsn! Int) (_require_end! Int)) (! (=> (and (<= 0 _start_lsn!) (<= 0 _require_end!)) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld _start_lsn! _require_end!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld _start_lsn! _require_end!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn x) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/?start_lsn x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.LinkedJournal.Label.)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end x) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/?require_end x)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) )))
(assert (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (= x (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. x))) :pattern ((Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (= x (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) )))
(assert (forall ((_journal! lib!journal.LinkedJournal_v.LinkedJournal.State.) (_lsn_addr_index! vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. _journal!) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State _journal! _lsn_addr_index!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State _journal! _lsn_addr_index!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal x) (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/?journal x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. x))) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index x) (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/?lsn_addr_index x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index x)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= x (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x))) :pattern ((Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (= x (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.))
(assert (forall ((_0! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. _0!) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x))) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((_0! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. _0!) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x))) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((_0! Int) (_1! lib!spec.AsyncDisk_t.Address.) (_2! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!spec.AsyncDisk_t.Address. _1!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. _2!) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal _0! _1! _2!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal _0! _1! _2!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/?1 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/?2 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x))) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.))
(assert (forall ((_0! lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (=> (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. _0!) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x))) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) (! (= x (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x))) :pattern ((Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (= x (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) )))
(assert (forall ((_0! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. _0!) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x))) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) )))
(assert (forall ((_0! lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (=> (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. _0!) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x))) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= x (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x))) :pattern ((Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (= x (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery _messages!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery _messages!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/?messages x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((_frozen_journal! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (=> (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. _frozen_journal!) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit _frozen_journal!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit _frozen_journal!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/?frozen_journal x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x))) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn _end_lsn!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn _end_lsn!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/?end_lsn x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put _messages!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put _messages!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/?messages x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((_start_lsn! Int) (_require_end! Int)) (! (=> (and (<= 0 _start_lsn!) (<= 0 _require_end!)) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld _start_lsn! _require_end!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld _start_lsn! _require_end!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/?start_lsn x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end x) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/?require_end x)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) )))
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.JournalRecord.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (Poly%lib!journal.LinkedJournal_v.JournalRecord. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.JournalRecord. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (= x (Poly%lib!journal.LinkedJournal_v.JournalRecord. (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((_message_seq! lib!abstract_system.MsgHistory_v.MsgHistory.) (_prior_rec! core!option.Option.)) (! (=> (and (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _message_seq!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%core!option.Option. _prior_rec!) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.JournalRecord.)) (! (= (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq x) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?message_seq x)) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.JournalRecord.)) (! (= (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec x) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/?prior_rec x)) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x))) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.LinkedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.DiskView.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.DiskView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.) (= x (Poly%lib!journal.LinkedJournal_v.DiskView. (%Poly%lib!journal.LinkedJournal_v.DiskView. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.)) )))
(assert (forall ((_boundary_lsn! Int) (_entries! vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>.)) (! (=> (<= 0 _boundary_lsn!) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.DiskView./DiskView _boundary_lsn! _entries!)) TYPE%lib!journal.LinkedJournal_v.DiskView.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.DiskView./DiskView _boundary_lsn! _entries!)) TYPE%lib!journal.LinkedJournal_v.DiskView.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.DiskView.)) (! (= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn x) (lib!journal.LinkedJournal_v.DiskView./DiskView/?boundary_lsn x)) :pattern ((lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.) (<= 0 (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. x)))) :pattern ((lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.DiskView.)) (! (= (lib!journal.LinkedJournal_v.DiskView./DiskView/entries x) (lib!journal.LinkedJournal_v.DiskView./DiskView/?entries x)) :pattern ((lib!journal.LinkedJournal_v.DiskView./DiskView/entries x)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type y TYPE%lib!journal.LinkedJournal_v.DiskView.) (= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. x)) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. y))) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. x))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. y))))) (ext_eq deep TYPE%lib!journal.LinkedJournal_v.DiskView. x y)) :pattern ((ext_eq deep TYPE%lib!journal.LinkedJournal_v.DiskView. x y)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= x (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) :pattern ((Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (= x (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)))) :pattern ((has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((_freshest_rec! core!option.Option.) (_disk_view! lib!journal.LinkedJournal_v.DiskView.)) (! (=> (and (has_type (Poly%core!option.Option. _freshest_rec!) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. _disk_view!) TYPE%lib!journal.LinkedJournal_v.DiskView.)) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal _freshest_rec! _disk_view!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal _freshest_rec! _disk_view!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec x) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?freshest_rec x)) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view x) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/?disk_view x)) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) TYPE%lib!journal.LinkedJournal_v.DiskView.)) :pattern ((lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x)) (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type y TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (ext_eq deep (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. y)))) (ext_eq deep TYPE%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. x))) (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. y))))) (ext_eq deep TYPE%lib!journal.LinkedJournal_v.TruncatedJournal. x y)) :pattern ((ext_eq deep TYPE%lib!journal.LinkedJournal_v.TruncatedJournal. x y)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::count")
(declare-fun vstd!multiset.impl&%0.count.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::empty")
(declare-fun vstd!multiset.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::singleton")
(declare-fun vstd!multiset.impl&%0.singleton.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::add")
(declare-fun vstd!multiset.impl&%0.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::insert")
(declare-fun vstd!multiset.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_value")
(declare-fun vstd!map_lib.impl&%0.contains_value.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::values")
(declare-fun vstd!map_lib.impl&%0.values.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::restrict")
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_concat")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::maybe_discard_old")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::concat")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::empty_history_at")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::entries_wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.entries_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_nondangling_pointer")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::cropped_prior")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::nondangling_pointers")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::JournalRecord::has_link")
(declare-fun lib!journal.LinkedJournal_v.impl&%0.has_link.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::blocks_each_have_link")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::block_in_bounds")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::wf")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::seq_start")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.seq_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::seq_start")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::seq_end")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.seq_end.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::wf")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::acyclic")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::decodable")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::lbl_wf")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::decodable")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.decodable.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::next")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.next.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::can_crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly Poly Poly) Bool)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? (Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? (Poly Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_ReadForRecovery_messages")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::read_for_recovery")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::can_crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.can_crop.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::crop")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.crop.? (Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_frozen_journal")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::can_discard_to")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::discard_old")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.discard_old.? (Poly Poly) lib!journal.LinkedJournal_v.DiskView.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::discard_old")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.discard_old.? (Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::the_ranking")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.the_ranking.? (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::the_rank_of")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.the_rank_of.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::build_tight")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.build_tight.? (Poly Poly) lib!journal.LinkedJournal_v.DiskView.)
(declare-fun lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? (Poly Poly Fuel) lib!journal.LinkedJournal_v.DiskView.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::build_tight")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.build_tight.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::spec_le")
(declare-fun vstd!map_lib.impl&%0.spec_le.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_sub_disk")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::valid_discard_old")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::freeze_for_commit")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_end_lsn")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::seq_end")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::query_end_lsn")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_Put_messages")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::put")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_start_lsn")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_require_end")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::bounded_discard")
(declare-fun lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::discard_old")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::unused_addr")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::append_record")
(declare-fun lib!journal.LinkedJournal_v.impl&%2.append_record.? (Poly Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::internal_journal_marshal")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::internal_no_op")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::next_by")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::next")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::math::max")
(declare-fun vstd!math.max.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::buildable")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%1.buildable.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::tj_at")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.? (Poly Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::discard_old_cond")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::lbl_i")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.Label.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_frozen_journal")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::put")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_start_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_require_end")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::lsn_addr_index_discard_up_to")
(declare-fun lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? (Poly Poly) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::singleton_index")
(declare-fun lib!allocation_layer.LikesJournal_v.singleton_index.? (Poly Poly Poly) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::lsn_addr_index_append_record")
(declare-fun lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.? (Poly Poly Poly) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_journal_marshal")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_no_op")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::next_by")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::next")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::build_lsn_addr_index")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? (Poly Poly) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? (Poly Poly Fuel) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::build_lsn_addr_index")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly) vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::initialize")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::init_by")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::init")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::Likes_v::no_likes")
(declare-fun lib!allocation_layer.Likes_v.no_likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::to_multiset")
(declare-fun vstd!set_lib.impl&%0.to_multiset.? (Dcr Type Poly) Poly)
(declare-fun vstd!set_lib.impl&%0.rec%to_multiset.? (Dcr Type Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::LinkedJournal::State::inv")
(declare-fun lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::wf")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::inv")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.? (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_1")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_2")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_freeze_for_commit_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_put_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_discard_old_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_internal_journal_marshal_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_internal_journal_marshal_1")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_internal_journal_marshal_2")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_read_for_recovery")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_freeze_for_commit")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_freeze_for_commit_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_query_end_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_put")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_put_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_discard_old")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_discard_old_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_internal_journal_marshal")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_internal_journal_marshal_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_internal_journal_marshal_1")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_internal_journal_marshal_2")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.? (Poly) lib!journal.LinkedJournal_v.LinkedJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_internal_no_op")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_dummy_to_use_type_params")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Config::arrow_initialize_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Config::is_initialize")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Config::get_initialize_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Config::is_dummy_to_use_type_params")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_end_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_ReadForRecovery_messages")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_FreezeForCommit_frozen_journal")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.? (Poly) lib!journal.LinkedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_QueryEndLsn_end_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_Put_messages")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_DiscardOld_start_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_DiscardOld_require_end")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::put_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::put_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_journal_marshal_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_journal_marshal_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_no_op_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_no_op_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::initialize_enabled")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::next_strong_by")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::next_strong")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::invariant")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::map_to_likes")
(declare-fun lib!allocation_layer.LikesJournal_v.map_to_likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? (Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::transitive_likes")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::LikesJournal::State::imperative_likes")
(declare-fun lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesJournal_v::max")
(declare-fun lib!allocation_layer.LikesJournal_v.max.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::cropped_msg_seq_contains_lsn")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::index_keys_map_to_valid_entries")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::index_domain_valid")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::every_lsn_at_addr_indexed_to_addr")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::TruncatedJournal::index_range_valid")
(declare-fun lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::LinkedJournal_v::DiskView::is_sub_disk_with_newer_lsn")
(declare-fun lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.? (Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::count")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type value! V&)) (<= 0 (vstd!multiset.impl&%0.count.? V&. V& self! value!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! value!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::empty")
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (vstd!multiset.impl&%0.empty.? V&. V&) (TYPE%vstd!multiset.Multiset. V&. V&)) :pattern ((vstd!multiset.impl&%0.empty.? V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (has_type (vstd!multiset.impl&%0.singleton.? V&. V& v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::add")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.add.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.add.? V&. V& self! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_empty")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_empty.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_singleton.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton_different")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_singleton_different.) (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (=> (and (has_type v! V&) (has_type w! V&)) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_add")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_add.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_ext_equal.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_ext_equal_deep.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.insert.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (vstd!multiset.impl&%0.add.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_len.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_value")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_value.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_value.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_value.? K&. K& V&. V& self! v!) (exists ((i$ Poly)) (! (and (has_type i$ K&) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) i$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! i$) v!))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) i$)) ))) :pattern ((vstd!map_lib.impl&%0.contains_value.? K&. K& V&. V& self! v!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::values")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.values.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) v$) (B (vstd!map_lib.impl&%0.contains_value.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 v$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) v$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.values.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!) (vstd!set.impl&%0.new.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. V&. V&))) :pattern ((vstd!map_lib.impl&%0.values.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::restrict")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_concat")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? other! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!) (=> %%global_location_label%%3 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.))
(declare-fun %%lambda%%5 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%5 (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) (Poly%fun%1. (mk_fun (%%lambda%%4 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I lsn!) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::maybe_discard_old")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. self! lsn!) (and (=> %%global_location_label%%4 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (=> %%global_location_label%%5 (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::maybe_discard_old")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!) (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::concat")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.concat. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (other! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!) (=> %%global_location_label%%6 (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::concat")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) ))))
(assert (forall ((self! Poly) (other! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type other! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!) (=> %%global_location_label%%7 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%5 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I lsn!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::empty_history_at")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.) (forall ((lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (%I lsn!) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!)) ))))
(assert (forall ((lsn! Poly)) (! (=> (has_type lsn! NAT) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::JournalRecord::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%0.wf.? self!) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)))) (not (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::entries_wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.entries_wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%0.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::is_nondangling_pointer")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::JournalRecord::cropped_prior")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%0.cropped_prior.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!) (ite (< (%I boundary_lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)))))) (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)) core!option.Option./None)) :pattern ((lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) ))))
(assert (forall ((self! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::nondangling_pointers")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (addr! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. self! addr!) (and (=> %%global_location_label%%8 (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%9 (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat. self! addr!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::this_block_can_concat")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? self! addr!) (let ((head$ (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr!)))) (let ((next_ptr$ (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (Poly%lib!journal.LinkedJournal_v.JournalRecord. head$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) (=> (is-core!option.Option./Some_ next_ptr$) (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_ptr$))))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (Poly%lib!journal.LinkedJournal_v.JournalRecord. head$))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? self! addr!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. (Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. self!) (and (=> %%global_location_label%%11 (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%12 (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::blocks_can_concat")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%1.this_block_can_concat.? self! addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::JournalRecord::has_link")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%0.has_link.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%0.has_link.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%0.has_link.? self! boundary_lsn!) (=> (< (%I boundary_lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. self!)))))) (is-core!option.Option./Some_ (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)))) :pattern ((lib!journal.LinkedJournal_v.impl&%0.has_link.? self! boundary_lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::blocks_each_have_link")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (lib!journal.LinkedJournal_v.impl&%0.has_link.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.wf.? self!) (and (and (and (lib!journal.LinkedJournal_v.impl&%1.entries_wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.nondangling_pointers.? self!)) (lib!journal.LinkedJournal_v.impl&%1.blocks_can_concat.? self!)) (lib!journal.LinkedJournal_v.impl&%1.blocks_each_have_link.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::block_in_bounds")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! ptr!) (and (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (< (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!)))))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! ptr!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.wf.? self!) (and (and (lib!journal.LinkedJournal_v.impl&%1.wf.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::seq_start")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.seq_start.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (<= 0 (lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_start.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::seq_start")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.seq_start.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!) (lib!journal.LinkedJournal_v.impl&%1.seq_start.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::seq_end")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.seq_end. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (root! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.seq_end. self! root!) (=> %%global_location_label%%13 (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! root!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.seq_end. self! root!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::seq_end")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.seq_end.) (forall ((self! Poly) (root! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. root!)) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. root!)))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!)) ))))
(assert (forall ((self! Poly) (root! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (<= 0 (lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.seq_end.? self! root!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.seq_end. (Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.seq_end. self!) (=> %%global_location_label%%14 (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.seq_end. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::seq_end")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.seq_end.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!) (lib!journal.LinkedJournal_v.impl&%1.seq_end.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? self!) (and (and (and (lib!journal.LinkedJournal_v.impl&%2.wf.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!))))) (<= (lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))) (lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))))) (= (lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. (Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (ranking! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. self! ranking!) (=> %%global_location_label%%15 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.valid_ranking. self! ranking!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::valid_ranking")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.valid_ranking.) (forall ((self! Poly) (ranking! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking!) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!)) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$) (is-core!option.Option./Some_ (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) (< (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) addr$) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))))))))) (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! addr$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) addr$)) )))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::acyclic")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.acyclic. (Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.acyclic. self!) (=> %%global_location_label%%16 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.acyclic. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::acyclic")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.acyclic.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!) (exists ((ranking$ Poly)) (! (and (has_type ranking$ (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking$)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? self! ranking$)) ))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::decodable")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.decodable.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.decodable.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.decodable.? self!) (and (lib!journal.LinkedJournal_v.impl&%2.wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.decodable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::lbl_wf")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Label.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Label.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit) c))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.) (forall ((lbl! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? lbl!) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (let ((messages$ (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. messages$))) (=> (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (let ((frozen_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))) (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. frozen_journal$)))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::decodable")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.decodable.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.decodable.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! ptr!) (and (lib!journal.LinkedJournal_v.impl&%1.wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.is_nondangling_pointer.? self! ptr!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.decodable.? self! ptr!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::next")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.next. (Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly) (ptr! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.next. self! ptr!) (and (=> %%global_location_label%%17 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!)) (=> %%global_location_label%%18 (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!))))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.next. self! ptr!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::next")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.next.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.next.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!) (lib!journal.LinkedJournal_v.impl&%0.cropped_prior.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!)) ))))
(assert (forall ((self! Poly) (ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type ptr! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!)) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.next.? self! ptr!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::can_crop")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.can_crop. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.can_crop. self! root! depth!) (and (=> %%global_location_label%%19 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (=> %%global_location_label%%20 (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! root!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.can_crop. self! root! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::can_crop")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop.))
(declare-const fuel_nat%lib!journal.LinkedJournal_v.impl&%1.can_crop. Fuel)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! fuel%) (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! zero)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! fuel%)) )))
(assert (forall ((self! Poly) (root! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (= (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! (succ fuel%)) (=> (< 0 (%I depth!)) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. root!)) (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! root!)) (I (nClip (Sub (%I depth!) 1))) fuel%))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.can_crop.) (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (= (lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!) (lib!journal.LinkedJournal_v.impl&%1.rec%can_crop.? self! root! depth! (succ fuel_nat%lib!journal.LinkedJournal_v.impl&%1.can_crop.)))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. self! root! depth!) (and (=> %%global_location_label%%21 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (=> %%global_location_label%%22 (lib!journal.LinkedJournal_v.impl&%1.block_in_bounds.? self! root!)) (=> %%global_location_label%%23 (lib!journal.LinkedJournal_v.impl&%1.can_crop.? self! root! depth!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. self! root! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::pointer_after_crop")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.))
(declare-const fuel_nat%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop. Fuel)
(assert (forall ((self! Poly) (root! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! root! depth! fuel%) (lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! root! depth! zero)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! root! depth! fuel%)) )))
(assert (forall ((self! Poly) (root! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (= (lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! root! depth! (succ fuel%)) (ite (= (%I depth!) 0) (%Poly%core!option.Option. root!) (lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! root!)) (I (nClip (Sub (%I depth!) 1))) fuel%)))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! root! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.) (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (= (lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? self! root! depth!) (lib!journal.LinkedJournal_v.impl&%1.rec%pointer_after_crop.? self! root! depth! (succ fuel_nat%lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.)))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? self! root! depth!)) ))))
(assert (forall ((self! Poly) (root! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type depth! NAT)) (has_type (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? self! root! depth!)) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? self! root! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_ReadForRecovery_messages")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::read_for_recovery")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery.? pre! post! lbl! depth!) (let ((update_tmp_truncated_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? lbl!) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (let ((dv$ (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))))))) (and (lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. dv$) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))))) depth!) (let ((ptr$ (lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. dv$) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))))) depth!))) (and (is-core!option.Option./Some_ ptr$) (= (lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. dv$)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ptr$))))))) (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. dv$))))) (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!))))))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$)))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery.? pre! post! lbl! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::can_crop")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.can_crop.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.can_crop.) (forall ((self! Poly) (depth! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.can_crop.? self! depth!) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? self!) (lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) depth!))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.can_crop.? self! depth!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::crop")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.crop. (Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! Poly) (depth! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.crop. self! depth!) (=> %%global_location_label%%24 (lib!journal.LinkedJournal_v.impl&%2.can_crop.? self! depth!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.crop. self! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::crop")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.crop.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.crop.) (forall ((self! Poly) (depth! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.crop.? self! depth!) (let ((ptr$ (lib!journal.LinkedJournal_v.impl&%1.pointer_after_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) depth!))) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (%Poly%core!option.Option. (Poly%core!option.Option. ptr$)) (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.crop.? self! depth!)) ))))
(assert (forall ((self! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type depth! NAT)) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.impl&%2.crop.? self! depth!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.impl&%2.crop.? self! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_frozen_journal")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.? self!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_frozen_journal.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::can_discard_to")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. (Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. self! lsn!) (=> %%global_location_label%%25 (lib!journal.LinkedJournal_v.impl&%2.wf.? self!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.can_discard_to. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::can_discard_to")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? self! lsn!) (and (<= (lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!) (%I lsn!)) (<= (%I lsn!) (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!)))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::discard_old")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! Poly) (new_boundary! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.discard_old. self! new_boundary!) (=> %%global_location_label%%26 (<= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)) (%I new_boundary!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.discard_old. self! new_boundary!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::discard_old")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.discard_old.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.discard_old.) (forall ((self! Poly) (new_boundary! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.discard_old.? self! new_boundary!) (lib!journal.LinkedJournal_v.DiskView./DiskView (%I new_boundary!) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.discard_old.? self! new_boundary!)) ))))
(assert (forall ((self! Poly) (new_boundary! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type new_boundary! NAT)) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.impl&%1.discard_old.? self! new_boundary!)) TYPE%lib!journal.LinkedJournal_v.DiskView.)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.discard_old.? self! new_boundary!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::discard_old")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.discard_old. self! lsn!) (and (=> %%global_location_label%%27 (lib!journal.LinkedJournal_v.impl&%2.wf.? self!)) (=> %%global_location_label%%28 (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? self! lsn!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.discard_old. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::discard_old")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.discard_old.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.discard_old.? self! lsn!) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (%Poly%core!option.Option. (Poly%core!option.Option. (ite (= (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!) (%I lsn!)) core!option.Option./None (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.impl&%1.discard_old.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) lsn!))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type lsn! NAT)) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.impl&%2.discard_old.? self! lsn!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.impl&%2.discard_old.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::the_ranking")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.the_ranking. (Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.the_ranking. self!) (and (=> %%global_location_label%%29 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!)) (=> %%global_location_label%%30 (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.the_ranking. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::the_ranking")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.the_ranking.))
(declare-fun %%choose%%1 (Type Poly Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Poly) (%%hole%%2 Poly)) (! (=> (exists ((ranking$ Poly)) (! (and (has_type ranking$ %%hole%%0) (lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? %%hole%%1 ranking$)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? %%hole%%2 ranking$)) )) (exists ((ranking$ Poly)) (! (and (and (has_type ranking$ %%hole%%0) (lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? %%hole%%1 ranking$)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2) ranking$)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.valid_ranking.? %%hole%%2 ranking$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2)))))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.the_ranking.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.the_ranking.? self!) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (as_type (%%choose%%1 (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT) self! self!) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.the_ranking.? self!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::the_rank_of")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. (Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! Poly) (ptr! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. self! ptr!) (=> %%global_location_label%%31 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! ptr!))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.the_rank_of. self! ptr!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::the_rank_of")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.the_rank_of.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.the_rank_of.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.the_rank_of.? self! ptr!) (ite (and (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!)) (nClip (Add (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!journal.LinkedJournal_v.impl&%1.the_ranking.? self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!)))) 1)) 0)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.the_rank_of.? self! ptr!)) ))))
(assert (forall ((self! Poly) (ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type ptr! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (<= 0 (lib!journal.LinkedJournal_v.impl&%1.the_rank_of.? self! ptr!))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.the_rank_of.? self! ptr!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::build_tight")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%1.build_tight. (Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! Poly) (root! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%1.build_tight. self! root!) (and (=> %%global_location_label%%32 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (=> %%global_location_label%%33 (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%1.build_tight. self! root!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::build_tight")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.build_tight.))
(declare-const fuel_nat%lib!journal.LinkedJournal_v.impl&%1.build_tight. Fuel)
(assert (forall ((self! Poly) (root! Poly) (fuel% Fuel)) (! (= (lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! root! fuel%) (lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! root! zero)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! root! fuel%)) )))
(assert (forall ((self! Poly) (root! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (= (lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! root! (succ fuel%)) (ite (not (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!)) (lib!journal.LinkedJournal_v.DiskView./DiskView (%I (I 0)) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.))) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. root!)) (lib!journal.LinkedJournal_v.DiskView./DiskView (%I (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord.))) (let ((addr$ (%Poly%lib!spec.AsyncDisk_t.Address. (core!option.Option./Some/0 (%Poly%core!option.Option. root!))))) (let ((tail$ (lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! root!)) fuel%))) (lib!journal.LinkedJournal_v.DiskView./DiskView (%I (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. tail$)))) (Poly%lib!spec.AsyncDisk_t.Address. addr$) (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (Poly%lib!spec.AsyncDisk_t.Address. addr$))))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! root! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.build_tight.) (forall ((self! Poly) (root! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!)) (= (lib!journal.LinkedJournal_v.impl&%1.build_tight.? self! root!) (lib!journal.LinkedJournal_v.impl&%1.rec%build_tight.? self! root! (succ fuel_nat%lib!journal.LinkedJournal_v.impl&%1.build_tight.)))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.build_tight.? self! root!)) ))))
(assert (forall ((self! Poly) (root! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.impl&%1.build_tight.? self! root!)) TYPE%lib!journal.LinkedJournal_v.DiskView.)) :pattern ((lib!journal.LinkedJournal_v.impl&%1.build_tight.? self! root!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::build_tight")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.build_tight. (Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.build_tight. self!) (=> %%global_location_label%%34 (lib!journal.LinkedJournal_v.impl&%1.decodable.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.build_tight. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::build_tight")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.build_tight.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.build_tight.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.build_tight.? self!) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.impl&%1.build_tight.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.build_tight.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.impl&%2.build_tight.? self!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.impl&%2.build_tight.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) ))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.spec_le.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!) (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) :pattern ((vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::is_sub_disk")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.) (forall ((self! Poly) (bigger! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.? self! bigger!) (and (= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. bigger!)) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. bigger!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.? self! bigger!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::valid_discard_old")
(declare-fun req%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! Poly) (lsn! Poly) (new! Poly)) (! (= (req%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. self! lsn! new!) (and (=> %%global_location_label%%35 (lib!journal.LinkedJournal_v.impl&%2.wf.? self!)) (=> %%global_location_label%%36 (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? self! lsn!)))) :pattern ((req%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old. self! lsn! new!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::valid_discard_old")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.) (forall ((self! Poly) (lsn! Poly) (new! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.? self! lsn! new!) (let ((post_discard$ (lib!journal.LinkedJournal_v.impl&%2.discard_old.? self! lsn!))) (let ((post_tight$ (lib!journal.LinkedJournal_v.impl&%2.build_tight.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_discard$)))) (and (and (and (lib!journal.LinkedJournal_v.impl&%2.wf.? new!) (= (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!)) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_discard$))))) (lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!))) (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_discard$)))))) (lib!journal.LinkedJournal_v.impl&%1.is_sub_disk.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_tight$)))) (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!)))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.? self! lsn! new!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::freeze_for_commit")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit.? pre! post! lbl! depth!) (let ((update_tmp_truncated_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? lbl!) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (let ((dv$ (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))))))) (and (lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. dv$) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))))) depth!) (let ((cropped_tj$ (lib!journal.LinkedJournal_v.impl&%2.crop.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) depth!))) (let ((label_fj$ (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))) (let ((new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. label_fj$)))) (and (<= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. dv$))) new_bdy$) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)) (lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. label_fj$))))))))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$)))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit.? pre! post! lbl! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_end_lsn")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_end_lsn.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::LinkedJournal::State::seq_end")
(declare-fun req%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end. (Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end. self!) (=> %%global_location_label%%37 (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? self!))) :pattern ((req%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::seq_end")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? self!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::query_end_lsn")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn.))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Label.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn) c))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn.? pre! post! lbl!) (let ((update_tmp_truncated_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? lbl!) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? pre!)) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_Put_messages")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_Put_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::put")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put.))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Label./Put_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Label.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Label./Put) c))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put.? pre! post! lbl!) (let ((update_tmp_truncated_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./Put_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!))))) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? pre!)) (let ((update_tmp_unmarshalled_tail$ (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put/messages (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_start_lsn")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.? self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_start_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::Label::arrow_require_end")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.) (<= 0 (lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.? self!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%4.arrow_require_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::bounded_discard")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%3.bounded_discard.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%3.bounded_discard.) (forall ((self! Poly) (new_bdy! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? self! new_bdy!) (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I new_bdy!)) (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! new_bdy!) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) :pattern ((lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? self! new_bdy!)) ))))
(assert (forall ((self! Poly) (new_bdy! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type new_bdy! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? self! new_bdy!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? self! new_bdy!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::discard_old")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old.))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Label.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld) c))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_tj! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old.? pre! post! lbl! new_tj!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.lbl_wf.? lbl!) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (let ((start_lsn$ (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))) (let ((require_end$ (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)))) (and (= require_end$ (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? pre!)) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) (I start_lsn$)) (and (lib!journal.LinkedJournal_v.impl&%2.valid_discard_old.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) (I start_lsn$) new_tj!) (let ((update_tmp_truncated_journal$ (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new_tj!))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) (I start_lsn$)))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$))))))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old.? pre! post! lbl! new_tj!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::unused_addr")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr.? self! addr!) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))))))))) addr!))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr.? self! addr!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::append_record")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%2.append_record.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%2.append_record.) (forall ((self! Poly) (addr! Poly) (msgs! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%2.append_record.? self! addr! msgs!) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some addr!))) (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (let ((tmp%%$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) addr! (Poly%lib!journal.LinkedJournal_v.JournalRecord. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))))))) (let ((tmp%%$1 (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (lib!journal.LinkedJournal_v.DiskView./DiskView (%I (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. tmp%%$1))))) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. tmp%%$))))))))) :pattern ((lib!journal.LinkedJournal_v.impl&%2.append_record.? self! addr! msgs!)) ))))
(assert (forall ((self! Poly) (addr! Poly) (msgs! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.) (has_type addr! TYPE%lib!spec.AsyncDisk_t.Address.) (has_type msgs! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.impl&%2.append_record.? self! addr! msgs!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.LinkedJournal_v.impl&%2.append_record.? self! addr! msgs!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::internal_journal_marshal")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal.))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Label.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (cut! Poly) (addr! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal.? pre! post! lbl! cut! addr!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.unused_addr.? pre! addr!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (and (< (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))))) (%I cut!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) cut!) (let ((marshalled_msgs$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) cut!))) (let ((update_tmp_truncated_journal$ (lib!journal.LinkedJournal_v.impl&%2.append_record.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) addr! (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. marshalled_msgs$)))) (let ((update_tmp_unmarshalled_tail$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!))) cut!))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$))))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal.? pre! post! lbl! cut! addr!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::internal_no_op")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op.? pre! post! lbl!) (let ((update_tmp_truncated_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. pre!)))) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? pre!) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. lbl!)) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. post!)) update_tmp_truncated_journal$))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::next_by")
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./query_end_lsn_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./query_end_lsn) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./put_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./put) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal) c))
(define-fun is-lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_no_op_ ((c lib!journal.LinkedJournal_v.LinkedJournal.Step.)) Bool ((_ is lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_no_op) c))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (let ((depth$ (lib!journal.LinkedJournal_v.LinkedJournal.Step./read_for_recovery/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)))) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.read_for_recovery.? pre! post! label! (I depth$))) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (let ((depth$ (lib!journal.LinkedJournal_v.LinkedJournal.Step./freeze_for_commit/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)))) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.freeze_for_commit.? pre! post! label! (I depth$))) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./query_end_lsn_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.query_end_lsn.? pre! post! label!) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./put_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.put.? pre! post! label!) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (let ((new_tj$ (lib!journal.LinkedJournal_v.LinkedJournal.Step./discard_old/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)))) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.discard_old.? pre! post! label! (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new_tj$))) (ite (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (let ((cut$ (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/0 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)))) (let ((addr$ (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal/1 (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)))) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_journal_marshal.? pre! post! label! (I cut$) (Poly%lib!spec.AsyncDisk_t.Address. addr$)))) (and (is-lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_no_op_ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. step!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.internal_no_op.? pre! post! label!))))))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::next")
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Step.) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms vstd::math::max")
(assert (fuel_bool_default fuel%vstd!math.max.))
(assert (=> (fuel_bool fuel%vstd!math.max.) (forall ((x! Poly) (y! Poly)) (! (= (vstd!math.max.? x! y!) (%I (ite (>= (%I x!) (%I y!)) x! y!))) :pattern ((vstd!math.max.? x! y!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::buildable")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%1.buildable.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%1.buildable.) (forall ((self! Poly) (root! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%1.buildable.? self! root!) (and (and (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!)) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. root!)) (< (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. root!)))))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%1.buildable.? self! root!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::tj_at")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.) (forall ((self! Poly) (root! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.? self! root!) (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal (%Poly%core!option.Option. root!) (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.? self! root!)) ))))
(assert (forall ((self! Poly) (root! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.? self! root!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.? self! root!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::discard_old_cond")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((self! Poly) (start_lsn! Poly) (keep_addrs! Poly) (new! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond. self! start_lsn! keep_addrs! new!) (=> %%global_location_label%%38 (lib!journal.LinkedJournal_v.impl&%2.wf.? self!))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond. self! start_lsn! keep_addrs! new!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::discard_old_cond")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.) (forall ((self! Poly) (start_lsn! Poly) (keep_addrs! Poly) (new! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? self! start_lsn! keep_addrs! new!) (and (and (and (and (lib!journal.LinkedJournal_v.impl&%2.wf.? new!) (= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!))))) (%I start_lsn!))) (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!)))))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. keep_addrs! addr$) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!))))))) addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. keep_addrs! addr$)) ))) (= (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!)) (ite (= (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!) (%I start_lsn!)) core!option.Option./None (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? self! start_lsn! keep_addrs! new!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::lbl_i")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.) (forall ((lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((messages$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (lib!journal.LinkedJournal_v.LinkedJournal.Label./ReadForRecovery (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. messages$)))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((frozen_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (lib!journal.LinkedJournal_v.LinkedJournal.Label./FreezeForCommit (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. frozen_journal$)))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((end_lsn$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (lib!journal.LinkedJournal_v.LinkedJournal.Label./QueryEndLsn (%I (I end_lsn$)))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((messages$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (lib!journal.LinkedJournal_v.LinkedJournal.Label./Put (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. messages$)))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((start_lsn$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((require_end$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (lib!journal.LinkedJournal_v.LinkedJournal.Label./DiscardOld (%I (I start_lsn$)) (%I (I require_end$))))) lib!journal.LinkedJournal_v.LinkedJournal.Label./Internal)))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!)) ))))
(assert (forall ((lbl! Poly)) (! (=> (has_type lbl! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.Label.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_frozen_journal")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.? self!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_frozen_journal.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit.? pre! post! lbl! depth!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (let ((fj$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((tj$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))))) (let ((new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$)))) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$)) (and (lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))) depth!) (and (<= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))))) new_bdy$) (let ((cropped_tj$ (lib!journal.LinkedJournal_v.impl&%2.crop.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$) depth!))) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)) (let ((post_discard$ (lib!journal.LinkedJournal_v.impl&%2.discard_old.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)))) (let ((frozen_lsns$ (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.new.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_discard$))))))))) (let ((frozen_index$ (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.restrict.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%vstd!set.Set<nat.>. frozen_lsns$))))) (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$) (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. frozen_index$)) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$))))))))))))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit.? pre! post! lbl! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::put")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put.? pre! post! lbl! new_journal!) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) new_journal! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))) (let ((update_tmp_journal$ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put.? pre! post! lbl! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_start_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_start_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_require_end")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_require_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::lsn_addr_index_discard_up_to")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.))
(declare-fun %%lambda%%6 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (<= %%hole%%3 (%I k$))))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) k$)))))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.) (forall ((lsn_addr_index! Poly) (bdy! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? lsn_addr_index! bdy!) (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%6 $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!) (%I bdy!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!)))))) :pattern ((lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? lsn_addr_index! bdy!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.? pre! post! lbl! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((start_lsn$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((require_end$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (and (= require_end$ (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$)) (let ((lsn_addr_index_post$ (lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (I start_lsn$)))) (let ((keep_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index_post$))))) (and (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. keep_addrs$) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!)))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!)) (lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$))) (let ((update_tmp_journal$ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))) (let ((update_tmp_lsn_addr_index$ lsn_addr_index_post$)) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$)))))))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.? pre! post! lbl! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::singleton_index")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.singleton_index.))
(declare-fun %%lambda%%7 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (x$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0) x$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0) x$)))))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.singleton_index.) (forall ((start! Poly) (end! Poly) (value! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.singleton_index.? start! end! value!) (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%fun%1. (mk_fun (%%lambda%%5 (%I start!) (%I end!)))) (Poly%fun%1. (mk_fun (%%lambda%%7 value!)))))) :pattern ((lib!allocation_layer.LikesJournal_v.singleton_index.? start! end! value!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::lsn_addr_index_append_record")
(declare-fun req%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((lsn_addr_index! Poly) (msgs! Poly) (addr! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record. lsn_addr_index! msgs! addr!) (and (=> %%global_location_label%%39 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? msgs!)) (=> %%global_location_label%%40 (< (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!)))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record. lsn_addr_index! msgs! addr!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::lsn_addr_index_append_record")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.) (forall ((lsn_addr_index! Poly) (msgs! Poly) (addr! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.? lsn_addr_index! msgs! addr!) (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (let ((update$ (lib!allocation_layer.LikesJournal_v.singleton_index.? (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!))) (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!))) addr!))) (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index! (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. update$))))) :pattern ((lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.? lsn_addr_index! msgs! addr!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_journal_marshal")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal.))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (cut! Poly) (addr! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal.? pre! post! lbl! cut! addr! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) new_journal! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!)) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal (%I cut!) (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))) (let ((update_tmp_journal$ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) cut!)) addr!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal.? pre! post! lbl! cut! addr! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_no_op")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::next_by")
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal) c))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery.? pre! post! label!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((depth$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit.? pre! post! label! (I depth$))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn.? pre! post! label!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((new_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put.? pre! post! label! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal$))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((new_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.? pre! post! label! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal$))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((cut$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (let ((addr$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (let ((new_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal.? pre! post! label! (I cut$) (Poly%lib!spec.AsyncDisk_t.Address. addr$) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal$))))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op.? pre! post! label!))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::next")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::build_lsn_addr_index")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((self! Poly) (root! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index. self! root!) (and (=> %%global_location_label%%41 (lib!allocation_layer.LikesJournal_v.impl&%1.buildable.? self! root!)) (=> %%global_location_label%%42 (and (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index. self! root!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::build_lsn_addr_index")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.))
(declare-const fuel_nat%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index. Fuel)
(assert (forall ((self! Poly) (root! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! root! fuel%) (lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! root! zero)) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! root! fuel%)) )))
(assert (forall ((self! Poly) (root! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (and (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!))) (= (lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! root! (succ fuel%)) (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (ite (is-core!option.Option./None_ (%Poly%core!option.Option. root!)) (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.) (let ((curr_msgs$ (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. root!))))))) (let ((start_lsn$ (nClip (vstd!math.max.? (I (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. curr_msgs$)))))))) (let ((update$ (lib!allocation_layer.LikesJournal_v.singleton_index.? (I start_lsn$) (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. curr_msgs$)))) (core!option.Option./Some/0 (%Poly%core!option.Option. root!))))) (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! (Poly%core!option.Option. (lib!journal.LinkedJournal_v.impl&%1.next.? self! root!)) fuel%)) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. update$))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! root! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.) (forall ((self! Poly) (root! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.LinkedJournal_v.DiskView.) (has_type root! (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (and (lib!journal.LinkedJournal_v.impl&%1.decodable.? self! root!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? self!))) (= (lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? self! root!) (lib!allocation_layer.LikesJournal_v.impl&%1.rec%build_lsn_addr_index.? self! root! (succ fuel_nat%lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.)))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? self! root!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::build_lsn_addr_index")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index. (Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index. self!) (=> %%global_location_label%%43 (lib!journal.LinkedJournal_v.impl&%2.decodable.? self!))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::build_lsn_addr_index")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? self!) (lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::initialize")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize.) (forall ((post! Poly) (ijournal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize.? post! ijournal!) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? ijournal!) (let ((update_tmp_journal$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. ijournal!) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? (I (lib!journal.LinkedJournal_v.impl&%2.seq_end.? ijournal!)))))))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? ijournal!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize.? post! ijournal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::init_by")
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by.? post! step!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. step!)) (let ((ijournal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize.? post! (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. ijournal$))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by.? post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::init")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init.) (forall ((post! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by.? post! step$)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init_by.? post! step$)) ))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.init.? post!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::Likes_v::no_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.Likes_v.no_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.Likes_v.no_likes.) (forall ((no%param Poly)) (! (= (lib!allocation_layer.Likes_v.no_likes.? no%param) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!allocation_layer.Likes_v.no_likes.? no%param)) ))))
(set-info :comment ";; Function-Specs vstd::set_lib::impl&%0::to_multiset")
(declare-fun req%vstd!set_lib.impl&%0.to_multiset. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!set_lib.impl&%0.to_multiset. A&. A& self!) (=> %%global_location_label%%44 (vstd!set.impl&%0.finite.? A&. A& self!))) :pattern ((req%vstd!set_lib.impl&%0.to_multiset. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::to_multiset")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.to_multiset.))
(declare-const fuel_nat%vstd!set_lib.impl&%0.to_multiset. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (fuel% Fuel)) (! (= (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! fuel%) (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! zero)) :pattern ((vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& self!)) (= (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! (succ fuel%)) (ite (= (vstd!set.impl&%0.len.? A&. A& self!) 0) (vstd!multiset.impl&%0.empty.? A&. A&) (vstd!multiset.impl&%0.add.? A&. A& (vstd!multiset.impl&%0.insert.? A&. A& (vstd!multiset.impl&%0.empty.? A&. A&) (vstd!set.impl&%0.choose.? A&. A& self!)) (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& (vstd!set.impl&%0.remove.? A&. A& self! (vstd!set.impl&%0.choose.? A&. A& self!)) fuel%))))) :pattern ((vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.to_multiset.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& self!)) (= (vstd!set_lib.impl&%0.to_multiset.? A&. A& self!) (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! (succ fuel_nat%vstd!set_lib.impl&%0.to_multiset.)))) :pattern ((vstd!set_lib.impl&%0.to_multiset.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set_lib.impl&%0.to_multiset.? A&. A& self!) (TYPE%vstd!multiset.Multiset. A&. A&))) :pattern ((vstd!set_lib.impl&%0.to_multiset.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::LinkedJournal::State::inv")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv.) (forall ((self! Poly)) (! (= (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv.? self!) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? self!) (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. self!)))))) :pattern ((lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.inv.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::allocation_layer::LikesJournal_v::LikesJournal::State::wf")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:648:5: 648:47 (#0)")
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::wf")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.? self!) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.wf.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. self!))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::inv")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? self!) (let ((tj$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. self!))))))) (and (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.? self!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))))) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. self!)) (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? self!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::lemma_msg_inv")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. (lib!allocation_layer.LikesJournal_v.LikesJournal.State.) Bool)
(assert (forall ((s! lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. s!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. s!))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. s!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. (lib!allocation_layer.LikesJournal_v.LikesJournal.State.) Bool)
(assert (forall ((s! lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. s!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. s!))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. s!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.? self!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_freeze_for_commit_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_freeze_for_commit_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_put_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_put_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_discard_old_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_discard_old_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_internal_journal_marshal_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_internal_journal_marshal_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_internal_journal_marshal_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_internal_journal_marshal_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_read_for_recovery")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_read_for_recovery.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_freeze_for_commit")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_freeze_for_commit.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_freeze_for_commit_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_freeze_for_commit_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_query_end_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_query_end_lsn.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_put")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_put.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_put_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_put_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_discard_old")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_discard_old.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_discard_old_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_discard_old_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_internal_journal_marshal")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_journal_marshal.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_internal_journal_marshal_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_internal_journal_marshal_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_internal_journal_marshal_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.? self!)) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_internal_journal_marshal_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_internal_no_op")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_internal_no_op.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Step.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%1.get_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.? self!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_initialize.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./initialize/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.? self!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params_ ((c lib!allocation_layer.LikesJournal_v.LikesJournal.Config.)) Bool ((_ is lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Config. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Config.) (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%3.get_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_end_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_end_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_ReadForRecovery_messages")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_FreezeForCommit_frozen_journal")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.? self!)) TYPE%lib!journal.LinkedJournal_v.TruncatedJournal.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_FreezeForCommit_frozen_journal.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_QueryEndLsn_end_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_QueryEndLsn_end_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_Put_messages")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put/messages (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_Put_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_DiscardOld_start_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_start_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::Label::arrow_DiscardOld_require_end")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (<= 0 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.? self!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%4.arrow_DiscardOld_require_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled.? pre! lbl!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./ReadForRecovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.? pre! post! lbl! depth!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (let ((fj$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((tj$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))))) (let ((new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$)))) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$)) (and (lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))) depth!) (and (<= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))))) new_bdy$) (let ((cropped_tj$ (lib!journal.LinkedJournal_v.impl&%2.crop.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$) depth!))) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)) (let ((post_discard$ (lib!journal.LinkedJournal_v.impl&%2.discard_old.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)))) (let ((frozen_lsns$ (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.new.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_discard$))))))))) (let ((frozen_index$ (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.restrict.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%vstd!set.Set<nat.>. frozen_lsns$))))) (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$) (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. frozen_index$)) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$))))))))))))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.? pre! post! lbl! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled.) (forall ((pre! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled.? pre! lbl! depth!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((fj$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((tj$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))))) (let ((new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_start.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$)))) (and (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$)) (and (lib!journal.LinkedJournal_v.impl&%1.can_crop.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))) (Poly%core!option.Option. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))) depth!) (and (<= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$)))))) new_bdy$) (let ((cropped_tj$ (lib!journal.LinkedJournal_v.impl&%2.crop.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$) depth!))) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)) (let ((post_discard$ (lib!journal.LinkedJournal_v.impl&%2.discard_old.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$)))) (let ((frozen_lsns$ (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.new.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 new_bdy$ (lib!journal.LinkedJournal_v.impl&%2.seq_end.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. post_discard$))))))))) (let ((frozen_index$ (%Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.restrict.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%vstd!set.Set<nat.>. frozen_lsns$))))) (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. cropped_tj$) (I new_bdy$) (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. frozen_index$)) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. fj$))))))))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_enabled.? pre! lbl! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled.? pre! lbl!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./QueryEndLsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::put_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.? pre! post! lbl! new_journal!) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) new_journal! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))) (let ((update_tmp_journal$ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.? pre! post! lbl! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::put_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled.? pre! lbl! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) new_journal! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_enabled.? pre! lbl! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.? pre! post! lbl! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((start_lsn$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((require_end$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (and (= require_end$ (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$)) (let ((lsn_addr_index_post$ (lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (I start_lsn$)))) (let ((keep_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index_post$))))) (and (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. keep_addrs$) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!)))) (and (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!)) (lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$))) (let ((update_tmp_journal$ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))) (let ((update_tmp_lsn_addr_index$ lsn_addr_index_post$)) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$)))))))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.? pre! post! lbl! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled.? pre! lbl! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (let ((start_lsn$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (let ((require_end$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/require_end (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (and (= require_end$ (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.seq_end.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))) (and (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$)) (let ((lsn_addr_index_post$ (lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (I start_lsn$)))) (let ((keep_addrs$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index_post$))))) (and (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. keep_addrs$) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!)))) (= (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!)) (lib!journal.LinkedJournal_v.impl&%3.bounded_discard.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) (I start_lsn$)))))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_enabled.? pre! lbl! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_journal_marshal_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (cut! Poly) (addr! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong.? pre! post! lbl! cut! addr! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) new_journal! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!)) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal (%I cut!) (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))) (let ((update_tmp_journal$ (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.lsn_addr_index_append_record.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))))) cut!)) addr!))) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong.? pre! post! lbl! cut! addr! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_journal_marshal_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled.) (forall ((pre! Poly) (lbl! Poly) (cut! Poly) (addr! Poly) (new_journal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled.? pre! lbl! cut! addr! new_journal!) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (lib!journal.LinkedJournal_v.LinkedJournal.impl&%5.next_by.? (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) new_journal! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Label. (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lbl_i.? lbl!)) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.Step. (lib!journal.LinkedJournal_v.LinkedJournal.Step./internal_journal_marshal (%I cut!) (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_enabled.? pre! lbl! cut! addr! new_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_no_op_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (let ((update_tmp_lsn_addr_index$ (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)) (and (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_lsn_addr_index$) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::internal_no_op_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled.? pre! lbl!) (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Label./Internal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled.) (forall ((ijournal! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled.? ijournal!) (lib!journal.LinkedJournal_v.impl&%2.decodable.? ijournal!)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.initialize_enabled.? ijournal!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by.? pre! post! label! step!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./read_for_recovery_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.? pre! post! label!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((depth$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./freeze_for_commit/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.? pre! post! label! (I depth$))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./query_end_lsn_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.? pre! post! label!) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((new_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./put/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.? pre! post! label! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal$))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((new_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./discard_old/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.? pre! post! label! (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal$))) (ite (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (let ((cut$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/0 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (let ((addr$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/1 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (let ((new_journal$ (lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_journal_marshal/2 (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)))) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_journal_marshal_strong.? pre! post! label! (I cut$) (Poly%lib!spec.AsyncDisk_t.Address. addr$) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal$))))) (and (is-lib!allocation_layer.LikesJournal_v.LikesJournal.Step./internal_no_op_ (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Step. step!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.internal_no_op_strong.? pre! post! label!))))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::next_strong")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Step.) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by.? pre! post! label! step$)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong_by.? pre! post! label! step$)) ))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.next_strong.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::invariant")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? self!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? self!)) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? self!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::map_to_likes")
(declare-fun req%lib!allocation_layer.LikesJournal_v.map_to_likes. (Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((lsn_addr_map! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.map_to_likes. lsn_addr_map!) (=> %%global_location_label%%45 (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map!)))) :pattern ((req%lib!allocation_layer.LikesJournal_v.map_to_likes. lsn_addr_map!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::map_to_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.map_to_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesJournal_v.map_to_likes. Fuel)
(assert (forall ((lsn_addr_map! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? lsn_addr_map! fuel%) (lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? lsn_addr_map! zero)) :pattern ((lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? lsn_addr_map! fuel%)) )))
(assert (forall ((lsn_addr_map! Poly) (fuel% Fuel)) (! (=> (and (has_type lsn_addr_map! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.)) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map!))) (= (lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? lsn_addr_map! (succ fuel%)) (ite (= (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map!)) 0) (lib!allocation_layer.Likes_v.no_likes.? (I 0)) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((k$ (%I (vstd!set.impl&%0.choose.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map!))))) (let ((sub_likes$ (lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map! (I k$)) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map! (I k$)))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. sub_likes$)))))))) :pattern ((lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? lsn_addr_map! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.map_to_likes.) (forall ((lsn_addr_map! Poly)) (! (=> (and (has_type lsn_addr_map! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address.)) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_map!))) (= (lib!allocation_layer.LikesJournal_v.map_to_likes.? lsn_addr_map!) (lib!allocation_layer.LikesJournal_v.rec%map_to_likes.? lsn_addr_map! (succ fuel_nat%lib!allocation_layer.LikesJournal_v.map_to_likes.)))) :pattern ((lib!allocation_layer.LikesJournal_v.map_to_likes.? lsn_addr_map!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::transitive_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes.? self!) (let ((tj$ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. self!))))))) (ite (not (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$))) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!pervasive.arbitrary.? $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (lib!allocation_layer.LikesJournal_v.map_to_likes.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. tj$))))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.transitive_likes.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::LikesJournal::State::imperative_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes.? self!) (lib!allocation_layer.LikesJournal_v.map_to_likes.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. self!))))) :pattern ((lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.imperative_likes.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesJournal_v::max")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.max.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.max.) (forall ((a! Poly) (b! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.max.? a! b!) (%I (ite (< (%I a!) (%I b!)) b! a!))) :pattern ((lib!allocation_layer.LikesJournal_v.max.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::cropped_msg_seq_contains_lsn")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.) (forall ((boundary! Poly) (message_seq! Poly) (lsn! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.? boundary! message_seq! lsn!) (and (<= (lib!allocation_layer.LikesJournal_v.max.? boundary! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. message_seq!)))) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. message_seq!))))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.? boundary! message_seq! lsn!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::index_keys_map_to_valid_entries")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries. (Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((self! Poly) (lsn_addr_index! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries. self! lsn_addr_index!) (=> %%global_location_label%%46 (lib!journal.LinkedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries. self! lsn_addr_index!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::index_domain_valid")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid. (Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((self! Poly) (lsn_addr_index! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid. self! lsn_addr_index!) (=> %%global_location_label%%47 (lib!journal.LinkedJournal_v.impl&%2.wf.? self!))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid. self! lsn_addr_index!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::index_domain_valid")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.) (forall ((self! Poly) (lsn_addr_index! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.? self! lsn_addr_index!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!) lsn$) (and (<= (lib!journal.LinkedJournal_v.impl&%2.seq_start.? self!) (%I lsn$)) (< (%I lsn$) (lib!journal.LinkedJournal_v.impl&%2.seq_end.? self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!) lsn$)) ))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.? self! lsn_addr_index!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::every_lsn_at_addr_indexed_to_addr")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.) (forall ((self! Poly) (lsn_addr_index! Poly) (addr! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.? self! lsn_addr_index! addr!) (let ((msgs$ (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) addr!))))) (let ((boundary_lsn$ (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))))))) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (=> (lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.? (I boundary_lsn$) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs$) lsn$) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!) lsn$) (= (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index! lsn$) addr!)))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%2.cropped_msg_seq_contains_lsn.? (I boundary_lsn$) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs$) lsn$)) ))))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.? self! lsn_addr_index! addr!)) ))))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::index_range_valid")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid. (Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! Poly) (lsn_addr_index! Poly)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid. self! lsn_addr_index!) (and (=> %%global_location_label%%48 (lib!journal.LinkedJournal_v.impl&%2.wf.? self!)) (=> %%global_location_label%%49 (lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.? self! lsn_addr_index!)) (=> %%global_location_label%%50 (lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) lsn_addr_index!)))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid. self! lsn_addr_index!)) )))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::TruncatedJournal::index_range_valid")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid.) (forall ((self! Poly) (lsn_addr_index! Poly)) (! (= (lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid.? self! lsn_addr_index!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!) addr$) (lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.? self! lsn_addr_index! addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. lsn_addr_index!) addr$)) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%5.every_lsn_at_addr_indexed_to_addr.? self! lsn_addr_index! addr$)) ))) :pattern ((lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid.? self! lsn_addr_index!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::LinkedJournal_v::DiskView::is_sub_disk_with_newer_lsn")
(assert (fuel_bool_default fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.))
(assert (=> (fuel_bool fuel%lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.) (forall ((self! Poly) (bigger! Poly)) (! (= (lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.? self! bigger!) (and (<= (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. bigger!)) (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. bigger!)))))) :pattern ((lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.? self! bigger!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::build_lsn_addr_index_domain_valid")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%2.build_lsn_addr_index_domain_valid. (lib!journal.LinkedJournal_v.DiskView. core!option.Option.) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.DiskView.) (root! core!option.Option.)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%2.build_lsn_addr_index_domain_valid. self! root!) (and (=> %%global_location_label%%51 (lib!journal.LinkedJournal_v.impl&%1.decodable.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%core!option.Option. root!))) (=> %%global_location_label%%52 (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (=> %%global_location_label%%53 (is-core!option.Option./Some_ root!)) (=> %%global_location_label%%54 (< (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. root!))))))))))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%2.build_lsn_addr_index_domain_valid. self! root!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.impl&%2.build_lsn_addr_index_domain_valid. (lib!journal.LinkedJournal_v.DiskView. core!option.Option.) Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.DiskView.) (root! core!option.Option.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.impl&%2.build_lsn_addr_index_domain_valid. self! root!) (and (lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!allocation_layer.LikesJournal_v.impl&%2.tj_at.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%core!option.Option. root!))) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%core!option.Option. root!)))) (lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%core!option.Option. root!)))))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.impl&%2.build_lsn_addr_index_domain_valid. self! root!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::discard_old_preserves_acyclicity")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. (lib!journal.LinkedJournal_v.TruncatedJournal. Int vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. lib!journal.LinkedJournal_v.TruncatedJournal.) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.TruncatedJournal.) (start_lsn! Int) (keep_addrs! vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) (new! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. self! start_lsn! keep_addrs! new!) (and (=> %%global_location_label%%55 (lib!journal.LinkedJournal_v.impl&%2.wf.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!))) (=> %%global_location_label%%56 (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) (=> %%global_location_label%%57 (lib!journal.LinkedJournal_v.impl&%2.can_discard_to.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!) (I start_lsn!))) (=> %%global_location_label%%58 (lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_cond.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!) (I start_lsn!) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. keep_addrs!) (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. self! start_lsn! keep_addrs! new!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. (lib!journal.LinkedJournal_v.TruncatedJournal. Int vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. lib!journal.LinkedJournal_v.TruncatedJournal.) Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.TruncatedJournal.) (start_lsn! Int) (keep_addrs! vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) (new! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. self! start_lsn! keep_addrs! new!) (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. new!)))))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. self! start_lsn! keep_addrs! new!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery_inductive")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_inductive. pre! post! lbl!) (=> %%global_location_label%%59 (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_strong.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_inductive. pre! post! lbl!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.read_for_recovery_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesJournal_v::LikesJournal::State::read_for_recovery_inductive")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:764:5: 764:70 (#0)")
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit_inductive")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label. Int) Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (depth! Int)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_inductive. pre! post! lbl! depth!) (=> %%global_location_label%%60 (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_strong.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!) (I depth!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_inductive. pre! post! lbl! depth!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label. Int) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (depth! Int)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_inductive. pre! post! lbl! depth!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.freeze_for_commit_inductive. pre! post! lbl! depth!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesJournal_v::LikesJournal::State::freeze_for_commit_inductive")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:768:5: 768:82 (#0)")
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn_inductive")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_inductive. pre! post! lbl!) (=> %%global_location_label%%61 (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_strong.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_inductive. pre! post! lbl!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_inductive. pre! post! lbl!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.query_end_lsn_inductive. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesJournal_v::LikesJournal::State::query_end_lsn_inductive")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:772:5: 772:66 (#0)")
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::put_inductive")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lib!journal.LinkedJournal_v.LinkedJournal.State.) Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (new_journal! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_inductive. pre! post! lbl! new_journal!) (=> %%global_location_label%%62 (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_strong.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_inductive. pre! post! lbl! new_journal!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lib!journal.LinkedJournal_v.LinkedJournal.State.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (new_journal! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_inductive. pre! post! lbl! new_journal!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.put_inductive. pre! post! lbl! new_journal!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesJournal_v::LikesJournal::State::put_inductive")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:776:5: 776:108 (#0)")
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::TruncatedJournal::build_lsn_addr_index_ensures")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index_ensures. (lib!journal.LinkedJournal_v.TruncatedJournal.) Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index_ensures. self!) (=> %%global_location_label%%63 (lib!journal.LinkedJournal_v.impl&%2.decodable.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index_ensures. self!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index_ensures. (lib!journal.LinkedJournal_v.TruncatedJournal.) Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.TruncatedJournal.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index_ensures. self!) (and (lib!allocation_layer.LikesJournal_v.impl&%5.index_domain_valid.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (lib!allocation_layer.LikesJournal_v.impl&%2.index_keys_map_to_valid_entries.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))) (lib!allocation_layer.LikesJournal_v.impl&%5.index_range_valid.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. self!)))))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index_ensures. self!)) )))
(set-info :comment ";; Function-Specs lib::journal::LinkedJournal_v::DiskView::sub_disk_with_newer_lsn_repr_index")
(declare-fun req%lib!allocation_layer.LikesJournal_v.impl&%2.sub_disk_with_newer_lsn_repr_index. (lib!journal.LinkedJournal_v.DiskView. lib!journal.LinkedJournal_v.DiskView. core!option.Option.) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.DiskView.) (big! lib!journal.LinkedJournal_v.DiskView.) (ptr! core!option.Option.)) (! (= (req%lib!allocation_layer.LikesJournal_v.impl&%2.sub_disk_with_newer_lsn_repr_index. self! big! ptr!) (and (=> %%global_location_label%%64 (lib!journal.LinkedJournal_v.impl&%1.decodable.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%core!option.Option. ptr!))) (=> %%global_location_label%%65 (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (=> %%global_location_label%%66 (lib!journal.LinkedJournal_v.impl&%1.decodable.? (Poly%lib!journal.LinkedJournal_v.DiskView. big!) (Poly%core!option.Option. ptr!))) (=> %%global_location_label%%67 (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. big!))) (=> %%global_location_label%%68 (=> (is-core!option.Option./Some_ ptr!) (< (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. self!))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ptr!)))))))))))) (=> %%global_location_label%%69 (=> (is-core!option.Option./Some_ ptr!) (< (lib!journal.LinkedJournal_v.DiskView./DiskView/boundary_lsn (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. big!))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.LinkedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.LinkedJournal_v.JournalRecord. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!journal.LinkedJournal_v.JournalRecord. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!journal.LinkedJournal_v.JournalRecord.>. (lib!journal.LinkedJournal_v.DiskView./DiskView/entries (%Poly%lib!journal.LinkedJournal_v.DiskView. (Poly%lib!journal.LinkedJournal_v.DiskView. big!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ptr!)))))))))))) (=> %%global_location_label%%70 (lib!journal.LinkedJournal_v.impl&%1.is_sub_disk_with_newer_lsn.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%lib!journal.LinkedJournal_v.DiskView. big!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.impl&%2.sub_disk_with_newer_lsn_repr_index. self! big! ptr!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.impl&%2.sub_disk_with_newer_lsn_repr_index. (lib!journal.LinkedJournal_v.DiskView. lib!journal.LinkedJournal_v.DiskView. core!option.Option.) Bool)
(assert (forall ((self! lib!journal.LinkedJournal_v.DiskView.) (big! lib!journal.LinkedJournal_v.DiskView.) (ptr! core!option.Option.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.impl&%2.sub_disk_with_newer_lsn_repr_index. self! big! ptr!) (vstd!map_lib.impl&%0.submap_of.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.DiskView. self!) (Poly%core!option.Option. ptr!))) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.impl&%1.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.DiskView. big!) (Poly%core!option.Option. ptr!))))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.impl&%2.sub_disk_with_newer_lsn_repr_index. self! big! ptr!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::lsn_addr_index_discard_up_to_ensures")
(declare-fun ens%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to_ensures. (vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. Int) Bool)
(assert (forall ((lsn_addr_index! vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>.) (bdy! Int)) (! (= (ens%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to_ensures. lsn_addr_index! bdy!) (let ((out$ (lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to.? (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index!) (I bdy!)))) (and (and (vstd!map_lib.impl&%0.submap_of.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. out$) (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index!)) (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. out$)) k$) (<= bdy! (%I k$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. out$)) k$)) ))) (forall ((k$ Poly)) (! (=> (has_type k$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index!)) k$) (<= bdy! (%I k$))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. out$)) k$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. lsn_addr_index!)) k$)) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. out$)) k$)) ))))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.lsn_addr_index_discard_up_to_ensures. lsn_addr_index! bdy!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_maintains_repr_index")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. pre! post! lbl!) (and (=> %%global_location_label%%71 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.inv.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))) (=> %%global_location_label%%72 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)))))) (=> %%global_location_label%%73 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.wf.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) (=> %%global_location_label%%74 (lib!journal.LinkedJournal_v.impl&%1.acyclic.? (Poly%lib!journal.LinkedJournal_v.DiskView. (lib!journal.LinkedJournal_v.TruncatedJournal./TruncatedJournal/disk_view (%Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)))))))))))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. pre! post! lbl!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. pre! post! lbl!) (= (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) (lib!allocation_layer.LikesJournal_v.impl&%3.build_lsn_addr_index.? (Poly%lib!journal.LinkedJournal_v.TruncatedJournal. (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)))))))))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. pre! post! lbl!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_maintains_repr_index")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:802:5: 802:85 (#0)")
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_inductive")
(declare-fun req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lib!journal.LinkedJournal_v.LinkedJournal.State.) Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (new_journal! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_inductive. pre! post! lbl! new_journal!) (=> %%global_location_label%%75 (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))))) :pattern ((req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_inductive. pre! post! lbl! new_journal!)) )))
(declare-fun ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_inductive. (lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.State. lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lib!journal.LinkedJournal_v.LinkedJournal.State.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.) (lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.) (new_journal! lib!journal.LinkedJournal_v.LinkedJournal.State.)) (! (= (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_inductive. pre! post! lbl! new_journal!) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))) :pattern ((ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_inductive. pre! post! lbl! new_journal!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesJournal_v::LikesJournal::State::discard_old_inductive")
(set-info :comment ";; allocation_layer/LikesJournal_v.rs:833:5: 833:116 (#0)")
(declare-const pre! lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(declare-const post! lib!allocation_layer.LikesJournal_v.LikesJournal.State.)
(declare-const lbl! lib!allocation_layer.LikesJournal_v.LikesJournal.Label.)
(declare-const new_journal! lib!journal.LinkedJournal_v.LinkedJournal.State.)
(declare-const tmp%1 vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-const tj@ lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-const post_tj@ lib!journal.LinkedJournal_v.TruncatedJournal.)
(declare-const start_lsn@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.))
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.State.))
(assert (has_type (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!) TYPE%lib!allocation_layer.LikesJournal_v.LikesJournal.Label.))
(assert (has_type (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!) TYPE%lib!journal.LinkedJournal_v.LinkedJournal.State.))
(assert (and (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!)) (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_strong.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!) (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!) (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. new_journal!))))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; could not show invariant `inv` on the `post` state")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%3 Bool)
(assert (not (=> (= tj@ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. pre!))))))) (=> (= post_tj@ (lib!journal.LinkedJournal_v.LinkedJournal.State./State/truncated_journal (%Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (Poly%lib!journal.LinkedJournal_v.LinkedJournal.State. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/journal (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))))))) (=> (= start_lsn@ (lib!allocation_layer.LikesJournal_v.LikesJournal.Label./DiscardOld/start_lsn (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.Label. lbl!)))) (=> (= tmp%1 (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map_lib.impl&%0.values.? $ NAT $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!map.Map<nat./lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesJournal_v.LikesJournal.State./State/lsn_addr_index (%Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!))))))) (and (=> %%location_label%%0 (req%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. tj@ start_lsn@ tmp%1 post_tj@)) (=> (ens%lib!allocation_layer.LikesJournal_v.impl&%3.discard_old_preserves_acyclicity. tj@ start_lsn@ tmp%1 post_tj@) (and (=> %%location_label%%1 (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. pre! post! lbl!)) (=> (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.discard_old_maintains_repr_index. pre! post! lbl!) (and (=> %%location_label%%2 (req%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. post!)) (=> (ens%lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.lemma_msg_inv. post!) (=> %%location_label%%3 (lib!allocation_layer.LikesJournal_v.LikesJournal.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesJournal_v.LikesJournal.State. post!)))))))))))))))
(check-sat)
(exit)
