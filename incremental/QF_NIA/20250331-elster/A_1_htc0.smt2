(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-info :source  | 
Generated by: Johannes Bauer
Generated on: 2025-03-24
Generator: mgm A12 Test Data Generator
Application: ELSTER
Target solver: Z3, Yices2, CVC5
Script is based on the ELSTER form: capital gains tax registration (A / KapEStInvStG)
Characteristic of the form: easy
In this script, all terms of the form (* x1 x2 x3 ...) are in the form (* x1 c2 c3 ...),
all terms of the form (div x y) are in the form (div x c) and the symbol mod is exclusively used in the form (mod x c),
where x, y, and x1, x2, x3 ... are free constants and c, c2, c3 ... are terms in the form n or (-n) for some numeral n.
The script starts with the base constraints, which define a valid data set for the corresponding form. After the first (push 1), control constraints follow.
The goal of the control constraints in this script is to check if several characteristics for data sets with high test coverage are sat.
number variables: 270, number constraints: 252
"https://www.elster.de/eportal/start?locale=en_US"
"https://www.mgm-tp.com/q12-tdg.html"
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun B1-F () Bool)
(declare-fun B2-F () Bool)
(declare-fun I3-i () Int)
(declare-fun I4-i () Int)
(declare-fun B5-F () Bool)
(declare-fun I5-i () Int)
(declare-fun B6-F () Bool)
(declare-fun B7-F () Bool)
(declare-fun B8-F () Bool)
(declare-fun B9-F () Bool)
(declare-fun B10-F () Bool)
(declare-fun I10-y () Int)
(declare-fun B11-F () Bool)
(declare-fun I11 () Int)
(declare-fun B12-F () Bool)
(declare-fun B13-F () Bool)
(declare-fun B14-F () Bool)
(declare-fun I14 () Int)
(declare-fun B15-F () Bool)
(declare-fun I15-y () Int)
(declare-fun I15-m () Int)
(declare-fun I15-d () Int)
(declare-fun B16-F () Bool)
(declare-fun I16-y () Int)
(declare-fun I16-m () Int)
(declare-fun I16-d () Int)
(declare-fun B17-F () Bool)
(declare-fun B18-F () Bool)
(declare-fun B19-F () Bool)
(declare-fun I19 () Int)
(declare-fun B20-F () Bool)
(declare-fun I20 () Int)
(declare-fun B21-F () Bool)
(declare-fun I21 () Int)
(declare-fun B22-F () Bool)
(declare-fun B23-F () Bool)
(declare-fun B24-F () Bool)
(declare-fun I24 () Int)
(declare-fun B25-F () Bool)
(declare-fun I25 () Int)
(declare-fun B26-F () Bool)
(declare-fun I26 () Int)
(declare-fun B27-F () Bool)
(declare-fun B28-F () Bool)
(declare-fun B29-F () Bool)
(declare-fun I29 () Int)
(declare-fun B30-F () Bool)
(declare-fun I30 () Int)
(declare-fun B31-F () Bool)
(declare-fun I31 () Int)
(declare-fun B32-F () Bool)
(declare-fun B33-F () Bool)
(declare-fun I33-s-y () Int)
(declare-fun I33-s-m () Int)
(declare-fun I33-s-d () Int)
(declare-fun I33-e-y () Int)
(declare-fun I33-e-m () Int)
(declare-fun I33-e-d () Int)
(declare-fun B34-F () Bool)
(declare-fun I34-y () Int)
(declare-fun I34-m () Int)
(declare-fun I34-d () Int)
(declare-fun B35-F () Bool)
(declare-fun I35-y () Int)
(declare-fun I35-m () Int)
(declare-fun I35-d () Int)
(declare-fun B36-F () Bool)
(declare-fun B37-F () Bool)
(declare-fun B38-F () Bool)
(declare-fun I38 () Int)
(declare-fun B39-F () Bool)
(declare-fun I39 () Int)
(declare-fun B40-F () Bool)
(declare-fun I40 () Int)
(declare-fun B41-F () Bool)
(declare-fun B42-F () Bool)
(declare-fun B43-F () Bool)
(declare-fun I43 () Int)
(declare-fun B44-F () Bool)
(declare-fun I44 () Int)
(declare-fun B45-F () Bool)
(declare-fun I45 () Int)
(declare-fun B46-F () Bool)
(declare-fun B47-F () Bool)
(declare-fun B48-F () Bool)
(declare-fun I48 () Int)
(declare-fun B49-F () Bool)
(declare-fun I49 () Int)
(declare-fun B50-F () Bool)
(declare-fun I50 () Int)
(declare-fun B51-F () Bool)
(declare-fun B52-F () Bool)
(declare-fun I52-s-y () Int)
(declare-fun I52-s-m () Int)
(declare-fun I52-s-d () Int)
(declare-fun I52-e-y () Int)
(declare-fun I52-e-m () Int)
(declare-fun I52-e-d () Int)
(declare-fun B53-F () Bool)
(declare-fun I53-y () Int)
(declare-fun I53-m () Int)
(declare-fun I53-d () Int)
(declare-fun B54-F () Bool)
(declare-fun I54-y () Int)
(declare-fun I54-m () Int)
(declare-fun I54-d () Int)
(declare-fun B55-F () Bool)
(declare-fun B56-F () Bool)
(declare-fun B57-F () Bool)
(declare-fun I57 () Int)
(declare-fun B58-F () Bool)
(declare-fun I58 () Int)
(declare-fun B59-F () Bool)
(declare-fun I59 () Int)
(declare-fun B60-F () Bool)
(declare-fun B61-F () Bool)
(declare-fun B62-F () Bool)
(declare-fun I62 () Int)
(declare-fun B63-F () Bool)
(declare-fun I63 () Int)
(declare-fun B64-F () Bool)
(declare-fun I64 () Int)
(declare-fun B65-F () Bool)
(declare-fun B66-F () Bool)
(declare-fun B67-F () Bool)
(declare-fun I67 () Int)
(declare-fun B68-F () Bool)
(declare-fun I68 () Int)
(declare-fun B69-F () Bool)
(declare-fun I69 () Int)
(declare-fun B70-F () Bool)
(declare-fun B71-F () Bool)
(declare-fun I71 () Int)
(declare-fun B72-F () Bool)
(declare-fun I72-y () Int)
(declare-fun I72-m () Int)
(declare-fun I72-d () Int)
(declare-fun B73-F () Bool)
(declare-fun I73-y () Int)
(declare-fun I73-m () Int)
(declare-fun I73-d () Int)
(declare-fun B74-F () Bool)
(declare-fun I74-y () Int)
(declare-fun I74-m () Int)
(declare-fun I74-d () Int)
(declare-fun B75-F () Bool)
(declare-fun B76-F () Bool)
(declare-fun B77-F () Bool)
(declare-fun I77 () Int)
(declare-fun B78-F () Bool)
(declare-fun I78 () Int)
(declare-fun B79-F () Bool)
(declare-fun I79 () Int)
(declare-fun B80-F () Bool)
(declare-fun B81-F () Bool)
(declare-fun B82-F () Bool)
(declare-fun I82 () Int)
(declare-fun B83-F () Bool)
(declare-fun I83 () Int)
(declare-fun B84-F () Bool)
(declare-fun I84 () Int)
(declare-fun B85-F () Bool)
(declare-fun B86-F () Bool)
(declare-fun B87-F () Bool)
(declare-fun I87 () Int)
(declare-fun B88-F () Bool)
(declare-fun I88 () Int)
(declare-fun B89-F () Bool)
(declare-fun I89 () Int)
(declare-fun B90-F () Bool)
(declare-fun B91-F () Bool)
(declare-fun I91-y () Int)
(declare-fun I91-m () Int)
(declare-fun I91-d () Int)
(declare-fun B92-F () Bool)
(declare-fun B93-F () Bool)
(declare-fun B94-F () Bool)
(declare-fun B95-F () Bool)
(declare-fun I95 () Int)
(declare-fun B96-F () Bool)
(declare-fun I96 () Int)
(declare-fun B97-F () Bool)
(declare-fun I97 () Int)
(declare-fun B98-F () Bool)
(declare-fun B99-F () Bool)
(declare-fun B100-F () Bool)
(declare-fun I100 () Int)
(declare-fun B101-F () Bool)
(declare-fun I101 () Int)
(declare-fun B102-F () Bool)
(declare-fun I102 () Int)
(declare-fun B103-F () Bool)
(declare-fun B104-F () Bool)
(declare-fun B105-F () Bool)
(declare-fun I105 () Int)
(declare-fun B106-F () Bool)
(declare-fun I106 () Int)
(declare-fun B107-F () Bool)
(declare-fun I107 () Int)
(declare-fun B108-F () Bool)
(declare-fun B109-F () Bool)
(declare-fun I109 () Int)
(declare-fun B110-F () Bool)
(declare-fun I110 () Int)
(declare-fun B111-F () Bool)
(declare-fun I111 () Int)
(declare-fun B112-F () Bool)
(declare-fun B113-F () Bool)
(declare-fun I113 () Int)
(declare-fun B114-F () Bool)
(declare-fun I114 () Int)
(declare-fun B115-F () Bool)
(declare-fun B116-F () Bool)
(declare-fun I116-y () Int)
(declare-fun I116-m () Int)
(declare-fun I116-d () Int)
(declare-fun B117-F () Bool)
(declare-fun B118-F () Bool)
(declare-fun I118 () Int)
(declare-fun B119-F () Bool)
(declare-fun I119 () Int)
(declare-fun B120-F () Bool)
(declare-fun B121-F () Bool)
(declare-fun B122-F () Bool)
(declare-fun I122 () Int)
(declare-fun B123-F () Bool)
(declare-fun I123 () Int)
(declare-fun B124-F () Bool)
(declare-fun I124 () Int)
(declare-fun B125-F () Bool)
(declare-fun I125 () Int)
(declare-fun B126-F () Bool)
(declare-fun I126 () Int)
(declare-fun B127-F () Bool)
(declare-fun I127 () Int)
(declare-fun B128-F () Bool)
(declare-fun I128 () Int)
(declare-fun B129-F () Bool)
(declare-fun I129 () Int)
(declare-fun B130-F () Bool)
(declare-fun I130 () Int)
(declare-fun B131-F () Bool)
(declare-fun I131 () Int)
(declare-fun B132-F () Bool)
(declare-fun I132 () Int)
(declare-fun B133-F () Bool)
(declare-fun I133 () Int)
(declare-fun B134-F () Bool)
(declare-fun I134 () Int)
(declare-fun B135-F () Bool)
(declare-fun I135 () Int)
(declare-fun B136-F () Bool)
(declare-fun I136 () Int)
(declare-fun B137-F () Bool)
(declare-fun I137 () Int)
(declare-fun B138-F () Bool)
(declare-fun I138 () Int)
(declare-fun B139-F () Bool)
(declare-fun I140 () Int)
(declare-fun B141-F () Bool)
(declare-fun B142-F () Bool)
(declare-fun B143-F () Bool)
(declare-fun B144-F () Bool)
(declare-fun B145-F () Bool)
(declare-fun B146-F () Bool)
(declare-fun B147-F () Bool)
(declare-fun B148-F () Bool)
(declare-fun B149-F () Bool)
(declare-fun B150-F () Bool)
(declare-fun B151-F () Bool)
(assert true)
(assert true)
(assert true)
(assert true)
(assert (= B115-F (or B116-F B117-F)))
(assert (= B117-F (or B118-F B119-F)))
(assert true)
(assert (= B141-F (or B142-F B143-F)))
(assert (= B9-F (or B10-F B11-F B12-F B13-F B32-F B51-F B70-F B90-F B112-F)))
(assert (= B112-F (or B113-F B114-F)))
(assert (= B13-F (or B14-F B15-F B16-F B17-F B22-F B27-F)))
(assert (= B17-F (or B18-F B19-F B20-F B21-F)))
(assert (= B22-F (or B23-F B24-F B25-F B26-F)))
(assert (= B27-F (or B28-F B29-F B30-F B31-F)))
(assert (= B70-F (or B71-F B72-F B73-F B74-F B75-F B80-F B85-F)))
(assert (= B75-F (or B76-F B77-F B78-F B79-F)))
(assert (= B80-F (or B81-F B82-F B83-F B84-F)))
(assert (= B85-F (or B86-F B87-F B88-F B89-F)))
(assert (= B90-F (or B91-F B92-F B93-F B98-F B103-F B108-F)))
(assert (= B93-F (or B94-F B95-F B96-F B97-F)))
(assert (= B98-F (or B99-F B100-F B101-F B102-F)))
(assert (= B103-F (or B104-F B105-F B106-F B107-F)))
(assert (= B108-F (or B109-F B110-F B111-F)))
(assert (= B32-F (or B33-F B34-F B35-F B36-F B41-F B46-F)))
(assert (= B36-F (or B37-F B38-F B39-F B40-F)))
(assert (= B41-F (or B42-F B43-F B44-F B45-F)))
(assert (= B46-F (or B47-F B48-F B49-F B50-F)))
(assert (= B51-F (or B52-F B53-F B54-F B55-F B60-F B65-F)))
(assert (= B55-F (or B56-F B57-F B58-F B59-F)))
(assert (= B60-F (or B61-F B62-F B63-F B64-F)))
(assert (= B65-F (or B66-F B67-F B68-F B69-F)))
(assert true)
(assert (= B144-F (or B145-F B146-F)))
(assert (= B146-F (or B147-F B148-F B149-F B150-F)))
(assert (= B120-F (or B121-F B139-F)))
(assert (= B121-F (or B122-F B123-F B124-F B125-F B126-F B127-F B128-F B129-F B130-F B131-F B132-F B133-F B134-F B135-F B136-F B137-F B138-F)))
(assert true)
(assert (ite B118-F (and (<= I118 999999999999) (>= I118 0)) (= I118 0)))
(assert (ite B119-F (and (<= I119 999999999999) (>= I119 0)) (= I119 0)))
(assert (ite B113-F (and (<= I113 999999999999) (>= I113 (- 999999999999))) (= I113 0)))
(assert (ite B114-F (and (<= I114 99999999999999) (>= I114 (- 99999999999999))) (= I114 0)))
(assert (ite B19-F (and (<= I19 999999999999) (>= I19 (- 999999999999))) (= I19 0)))
(assert (ite B20-F (and (<= I20 999999999999) (>= I20 (- 999999999999))) (= I20 0)))
(assert (ite B21-F (and (<= I21 99999999999999) (>= I21 (- 99999999999999))) (= I21 0)))
(assert (ite B24-F (and (<= I24 999999999999) (>= I24 (- 999999999999))) (= I24 0)))
(assert (ite B25-F (and (<= I25 999999999999) (>= I25 (- 999999999999))) (= I25 0)))
(assert (ite B26-F (and (<= I26 99999999999999) (>= I26 (- 99999999999999))) (= I26 0)))
(assert (ite B29-F (and (<= I29 999999999999) (>= I29 (- 999999999999))) (= I29 0)))
(assert (ite B30-F (and (<= I30 999999999999) (>= I30 (- 999999999999))) (= I30 0)))
(assert (ite B31-F (and (<= I31 99999999999999) (>= I31 (- 99999999999999))) (= I31 0)))
(assert (ite B77-F (and (<= I77 999999999999) (>= I77 (- 999999999999))) (= I77 0)))
(assert (ite B78-F (and (<= I78 999999999999) (>= I78 (- 999999999999))) (= I78 0)))
(assert (ite B79-F (and (<= I79 99999999999999) (>= I79 (- 99999999999999))) (= I79 0)))
(assert (ite B82-F (and (<= I82 999999999999) (>= I82 (- 999999999999))) (= I82 0)))
(assert (ite B83-F (and (<= I83 999999999999) (>= I83 (- 999999999999))) (= I83 0)))
(assert (ite B84-F (and (<= I84 99999999999999) (>= I84 (- 99999999999999))) (= I84 0)))
(assert (ite B87-F (and (<= I87 999999999999) (>= I87 (- 999999999999))) (= I87 0)))
(assert (ite B88-F (and (<= I88 999999999999) (>= I88 (- 999999999999))) (= I88 0)))
(assert (ite B89-F (and (<= I89 99999999999999) (>= I89 (- 99999999999999))) (= I89 0)))
(assert (ite B95-F (and (<= I95 999999999999) (>= I95 0)) (= I95 0)))
(assert (ite B96-F (and (<= I96 999999999999) (>= I96 0)) (= I96 0)))
(assert (ite B97-F (and (<= I97 99999999999999) (>= I97 0)) (= I97 0)))
(assert (ite B100-F (and (<= I100 999999999999) (>= I100 0)) (= I100 0)))
(assert (ite B101-F (and (<= I101 999999999999) (>= I101 0)) (= I101 0)))
(assert (ite B102-F (and (<= I102 99999999999999) (>= I102 0)) (= I102 0)))
(assert (ite B105-F (and (<= I105 999999999999) (>= I105 0)) (= I105 0)))
(assert (ite B106-F (and (<= I106 999999999999) (>= I106 0)) (= I106 0)))
(assert (ite B107-F (and (<= I107 99999999999999) (>= I107 0)) (= I107 0)))
(assert (ite B109-F (and (<= I109 999999999999) (>= I109 (- 999999999999))) (= I109 0)))
(assert (ite B110-F (and (<= I110 999999999999) (>= I110 (- 999999999999))) (= I110 0)))
(assert (ite B111-F (and (<= I111 99999999999999) (>= I111 (- 99999999999999))) (= I111 0)))
(assert (ite B38-F (and (<= I38 999999999999) (>= I38 (- 999999999999))) (= I38 0)))
(assert (ite B39-F (and (<= I39 999999999999) (>= I39 (- 999999999999))) (= I39 0)))
(assert (ite B40-F (and (<= I40 99999999999999) (>= I40 (- 99999999999999))) (= I40 0)))
(assert (ite B43-F (and (<= I43 999999999999) (>= I43 (- 999999999999))) (= I43 0)))
(assert (ite B44-F (and (<= I44 999999999999) (>= I44 (- 999999999999))) (= I44 0)))
(assert (ite B45-F (and (<= I45 99999999999999) (>= I45 (- 99999999999999))) (= I45 0)))
(assert (ite B48-F (and (<= I48 999999999999) (>= I48 (- 999999999999))) (= I48 0)))
(assert (ite B49-F (and (<= I49 999999999999) (>= I49 (- 999999999999))) (= I49 0)))
(assert (ite B50-F (and (<= I50 99999999999999) (>= I50 (- 99999999999999))) (= I50 0)))
(assert (ite B57-F (and (<= I57 999999999999) (>= I57 (- 999999999999))) (= I57 0)))
(assert (ite B58-F (and (<= I58 999999999999) (>= I58 (- 999999999999))) (= I58 0)))
(assert (ite B59-F (and (<= I59 99999999999999) (>= I59 (- 99999999999999))) (= I59 0)))
(assert (ite B62-F (and (<= I62 999999999999) (>= I62 (- 999999999999))) (= I62 0)))
(assert (ite B63-F (and (<= I63 999999999999) (>= I63 (- 999999999999))) (= I63 0)))
(assert (ite B64-F (and (<= I64 99999999999999) (>= I64 (- 99999999999999))) (= I64 0)))
(assert (ite B67-F (and (<= I67 999999999999) (>= I67 (- 999999999999))) (= I67 0)))
(assert (ite B68-F (and (<= I68 999999999999) (>= I68 (- 999999999999))) (= I68 0)))
(assert (ite B69-F (and (<= I69 99999999999999) (>= I69 (- 99999999999999))) (= I69 0)))
(assert (ite B125-F (and (<= I125 99999999999999) (>= I125 (- 9999999999999))) (= I125 0)))
(assert (ite B124-F (and (<= I124 99999999999999) (>= I124 (- 9999999999999))) (= I124 0)))
(assert (ite B122-F (and (<= I122 99999999999999) (>= I122 (- 9999999999999))) (= I122 0)))
(assert (ite B123-F (and (<= I123 99999999999999) (>= I123 (- 9999999999999))) (= I123 0)))
(assert (ite B126-F (and (<= I126 99999999999999) (>= I126 (- 9999999999999))) (= I126 0)))
(assert (ite B128-F (and (<= I128 99999999999999) (>= I128 (- 9999999999999))) (= I128 0)))
(assert (ite B127-F (and (<= I127 99999999999999) (>= I127 (- 9999999999999))) (= I127 0)))
(assert (ite B129-F (and (<= I129 99999999999999) (>= I129 (- 9999999999999))) (= I129 0)))
(assert (ite B130-F (and (<= I130 99999999999999) (>= I130 (- 9999999999999))) (= I130 0)))
(assert (ite B131-F (and (<= I131 99999999999999) (>= I131 (- 9999999999999))) (= I131 0)))
(assert (ite B132-F (and (<= I132 99999999999999) (>= I132 (- 9999999999999))) (= I132 0)))
(assert (ite B136-F (and (<= I136 99999999999999) (>= I136 (- 9999999999999))) (= I136 0)))
(assert (ite B133-F (and (<= I133 99999999999999) (>= I133 (- 9999999999999))) (= I133 0)))
(assert (ite B134-F (and (<= I134 99999999999999) (>= I134 (- 9999999999999))) (= I134 0)))
(assert (ite B135-F (and (<= I135 99999999999999) (>= I135 (- 9999999999999))) (= I135 0)))
(assert (ite B137-F (and (<= I137 99999999999999) (>= I137 (- 9999999999999))) (= I137 0)))
(assert (ite B138-F (and (<= I138 99999999999999) (>= I138 (- 9999999999999))) (= I138 0)))
(assert (ite B139-F (and (<= I140 99999999999999) (>= I140 (- 9999999999999))) (= I140 0)))
(assert (and (ite B116-F (and (> I116-y 1900) (< I116-y 2100)) (= I116-y 0)) (ite B116-F (and (> I116-m 0) (<= I116-m 12)) (= I116-m 0)) (ite B116-F (and (> I116-d 0) (<= I116-d (ite (or (= I116-m 0) (= I116-m 1) (= I116-m 3) (= I116-m 5) (= I116-m 7) (= I116-m 8) (= I116-m 10) (= I116-m 12)) 31 (ite (or (= I116-m 4) (= I116-m 6) (= I116-m 9) (= I116-m 11)) 30 (ite (= (mod I116-y 4) 0) 29 28))))) (= I116-d 0))))
(assert (ite B10-F (and (> I10-y 1900) (< I10-y 2100)) (= I10-y 0)))
(assert (and (ite B16-F (and (> I16-y 1900) (< I16-y 2100)) (= I16-y 0)) (ite B16-F (and (> I16-m 0) (<= I16-m 12)) (= I16-m 0)) (ite B16-F (and (> I16-d 0) (<= I16-d (ite (or (= I16-m 0) (= I16-m 1) (= I16-m 3) (= I16-m 5) (= I16-m 7) (= I16-m 8) (= I16-m 10) (= I16-m 12)) 31 (ite (or (= I16-m 4) (= I16-m 6) (= I16-m 9) (= I16-m 11)) 30 (ite (= (mod I16-y 4) 0) 29 28))))) (= I16-d 0))))
(assert (and (ite B15-F (and (> I15-y 1900) (< I15-y 2100)) (= I15-y 0)) (ite B15-F (and (> I15-m 0) (<= I15-m 12)) (= I15-m 0)) (ite B15-F (and (> I15-d 0) (<= I15-d (ite (or (= I15-m 0) (= I15-m 1) (= I15-m 3) (= I15-m 5) (= I15-m 7) (= I15-m 8) (= I15-m 10) (= I15-m 12)) 31 (ite (or (= I15-m 4) (= I15-m 6) (= I15-m 9) (= I15-m 11)) 30 (ite (= (mod I15-y 4) 0) 29 28))))) (= I15-d 0))))
(assert (and (ite B73-F (and (> I73-y 1900) (< I73-y 2100)) (= I73-y 0)) (ite B73-F (and (> I73-m 0) (<= I73-m 12)) (= I73-m 0)) (ite B73-F (and (> I73-d 0) (<= I73-d (ite (or (= I73-m 0) (= I73-m 1) (= I73-m 3) (= I73-m 5) (= I73-m 7) (= I73-m 8) (= I73-m 10) (= I73-m 12)) 31 (ite (or (= I73-m 4) (= I73-m 6) (= I73-m 9) (= I73-m 11)) 30 (ite (= (mod I73-y 4) 0) 29 28))))) (= I73-d 0))))
(assert (and (ite B72-F (and (> I72-y 1900) (< I72-y 2100)) (= I72-y 0)) (ite B72-F (and (> I72-m 0) (<= I72-m 12)) (= I72-m 0)) (ite B72-F (and (> I72-d 0) (<= I72-d (ite (or (= I72-m 0) (= I72-m 1) (= I72-m 3) (= I72-m 5) (= I72-m 7) (= I72-m 8) (= I72-m 10) (= I72-m 12)) 31 (ite (or (= I72-m 4) (= I72-m 6) (= I72-m 9) (= I72-m 11)) 30 (ite (= (mod I72-y 4) 0) 29 28))))) (= I72-d 0))))
(assert (and (ite B74-F (and (> I74-y 1900) (< I74-y 2100)) (= I74-y 0)) (ite B74-F (and (> I74-m 0) (<= I74-m 12)) (= I74-m 0)) (ite B74-F (and (> I74-d 0) (<= I74-d (ite (or (= I74-m 0) (= I74-m 1) (= I74-m 3) (= I74-m 5) (= I74-m 7) (= I74-m 8) (= I74-m 10) (= I74-m 12)) 31 (ite (or (= I74-m 4) (= I74-m 6) (= I74-m 9) (= I74-m 11)) 30 (ite (= (mod I74-y 4) 0) 29 28))))) (= I74-d 0))))
(assert (and (ite B91-F (and (> I91-y 1900) (< I91-y 2100)) (= I91-y 0)) (ite B91-F (and (> I91-m 0) (<= I91-m 12)) (= I91-m 0)) (ite B91-F (and (> I91-d 0) (<= I91-d (ite (or (= I91-m 0) (= I91-m 1) (= I91-m 3) (= I91-m 5) (= I91-m 7) (= I91-m 8) (= I91-m 10) (= I91-m 12)) 31 (ite (or (= I91-m 4) (= I91-m 6) (= I91-m 9) (= I91-m 11)) 30 (ite (= (mod I91-y 4) 0) 29 28))))) (= I91-d 0))))
(assert (and (ite B35-F (and (> I35-y 1900) (< I35-y 2100)) (= I35-y 0)) (ite B35-F (and (> I35-m 0) (<= I35-m 12)) (= I35-m 0)) (ite B35-F (and (> I35-d 0) (<= I35-d (ite (or (= I35-m 0) (= I35-m 1) (= I35-m 3) (= I35-m 5) (= I35-m 7) (= I35-m 8) (= I35-m 10) (= I35-m 12)) 31 (ite (or (= I35-m 4) (= I35-m 6) (= I35-m 9) (= I35-m 11)) 30 (ite (= (mod I35-y 4) 0) 29 28))))) (= I35-d 0))))
(assert (and (ite B34-F (and (> I34-y 1900) (< I34-y 2100)) (= I34-y 0)) (ite B34-F (and (> I34-m 0) (<= I34-m 12)) (= I34-m 0)) (ite B34-F (and (> I34-d 0) (<= I34-d (ite (or (= I34-m 0) (= I34-m 1) (= I34-m 3) (= I34-m 5) (= I34-m 7) (= I34-m 8) (= I34-m 10) (= I34-m 12)) 31 (ite (or (= I34-m 4) (= I34-m 6) (= I34-m 9) (= I34-m 11)) 30 (ite (= (mod I34-y 4) 0) 29 28))))) (= I34-d 0))))
(assert (or (< I33-s-y I33-e-y) (and (= I33-s-y I33-e-y) (< I33-s-m I33-e-m)) (and (= I33-s-y I33-e-y) (= I33-s-m I33-e-m) (<= I33-s-d I33-e-d))))
(assert (=> B33-F (and (>= I33-e-d 1) (<= I33-e-d (ite (or (= I33-e-m 0) (= I33-e-m 1) (= I33-e-m 3) (= I33-e-m 5) (= I33-e-m 7) (= I33-e-m 8) (= I33-e-m 10) (= I33-e-m 12)) 31 (ite (or (= I33-e-m 4) (= I33-e-m 6) (= I33-e-m 9) (= I33-e-m 11)) 30 (ite (= (mod I33-e-y 4) 0) 29 28)))))))
(assert (=> B33-F (and (>= I33-e-m 1) (<= I33-e-m 12))))
(assert (=> B33-F (and (>= I33-e-y 1901) (<= I33-e-y 2099))))
(assert (=> B33-F (and (>= I33-s-d 1) (<= I33-s-d (ite (or (= I33-s-m 0) (= I33-s-m 1) (= I33-s-m 3) (= I33-s-m 5) (= I33-s-m 7) (= I33-s-m 8) (= I33-s-m 10) (= I33-s-m 12)) 31 (ite (or (= I33-s-m 4) (= I33-s-m 6) (= I33-s-m 9) (= I33-s-m 11)) 30 (ite (= (mod I33-s-y 4) 0) 29 28)))))))
(assert (=> B33-F (and (>= I33-s-m 1) (<= I33-s-m 12))))
(assert (=> B33-F (and (>= I33-s-y 1901) (<= I33-s-y 2099))))
(assert (and (ite B54-F (and (> I54-y 1900) (< I54-y 2100)) (= I54-y 0)) (ite B54-F (and (> I54-m 0) (<= I54-m 12)) (= I54-m 0)) (ite B54-F (and (> I54-d 0) (<= I54-d (ite (or (= I54-m 0) (= I54-m 1) (= I54-m 3) (= I54-m 5) (= I54-m 7) (= I54-m 8) (= I54-m 10) (= I54-m 12)) 31 (ite (or (= I54-m 4) (= I54-m 6) (= I54-m 9) (= I54-m 11)) 30 (ite (= (mod I54-y 4) 0) 29 28))))) (= I54-d 0))))
(assert (and (ite B53-F (and (> I53-y 1900) (< I53-y 2100)) (= I53-y 0)) (ite B53-F (and (> I53-m 0) (<= I53-m 12)) (= I53-m 0)) (ite B53-F (and (> I53-d 0) (<= I53-d (ite (or (= I53-m 0) (= I53-m 1) (= I53-m 3) (= I53-m 5) (= I53-m 7) (= I53-m 8) (= I53-m 10) (= I53-m 12)) 31 (ite (or (= I53-m 4) (= I53-m 6) (= I53-m 9) (= I53-m 11)) 30 (ite (= (mod I53-y 4) 0) 29 28))))) (= I53-d 0))))
(assert (or (< I52-s-y I52-e-y) (and (= I52-s-y I52-e-y) (< I52-s-m I52-e-m)) (and (= I52-s-y I52-e-y) (= I52-s-m I52-e-m) (<= I52-s-d I52-e-d))))
(assert (=> B52-F (and (>= I52-e-d 1) (<= I52-e-d (ite (or (= I52-e-m 0) (= I52-e-m 1) (= I52-e-m 3) (= I52-e-m 5) (= I52-e-m 7) (= I52-e-m 8) (= I52-e-m 10) (= I52-e-m 12)) 31 (ite (or (= I52-e-m 4) (= I52-e-m 6) (= I52-e-m 9) (= I52-e-m 11)) 30 (ite (= (mod I52-e-y 4) 0) 29 28)))))))
(assert (=> B52-F (and (>= I52-e-m 1) (<= I52-e-m 12))))
(assert (=> B52-F (and (>= I52-e-y 1901) (<= I52-e-y 2099))))
(assert (=> B52-F (and (>= I52-s-d 1) (<= I52-s-d (ite (or (= I52-s-m 0) (= I52-s-m 1) (= I52-s-m 3) (= I52-s-m 5) (= I52-s-m 7) (= I52-s-m 8) (= I52-s-m 10) (= I52-s-m 12)) 31 (ite (or (= I52-s-m 4) (= I52-s-m 6) (= I52-s-m 9) (= I52-s-m 11)) 30 (ite (= (mod I52-s-y 4) 0) 29 28)))))))
(assert (=> B52-F (and (>= I52-s-m 1) (<= I52-s-m 12))))
(assert (=> B52-F (and (>= I52-s-y 1901) (<= I52-s-y 2099))))
(assert (=> B14-F (and (> I14 1900) (< I14 2100))))
(assert (=> B14-F (and (> I14 1900) (< I14 2100))))
(assert (or (= I4-i 1) (= I4-i 2)))
(assert (or (= I3-i 1) (= I3-i 2) (= I3-i 3) (= I3-i 4) (= I3-i 5) (= I3-i 6) (= I3-i 7) (= I3-i 8) (= I3-i 9) (= I3-i 10) (= I3-i 11) (= I3-i 12) (= I3-i 13) (= I3-i 14) (= I3-i 15)))
(assert (=> B5-F (or (= I5-i 1) (= I5-i 2) (= I5-i 3) (= I5-i 4) (= I5-i 5) (= I5-i 6) (= I5-i 7) (= I5-i 8) (= I5-i 9) (= I5-i 10) (= I5-i 11) (= I5-i 12) (= I5-i 13) (= I5-i 14) (= I5-i 15))))
(assert (=> B11-F (or (= I11 1) (= I11 2) (= I11 3) (= I11 4) (= I11 5) (= I11 6) (= I11 7) (= I11 8) (= I11 9) (= I11 10) (= I11 11) (= I11 12))))
(assert (=> B14-F (and (>= I14 0) (<= I14 9999))))
(assert (=> B71-F (and (>= I71 0) (<= I71 9999))))
(assert (= (or B20-F B25-F B30-F B39-F B44-F B49-F B58-F B63-F B68-F B78-F B83-F B88-F B96-F B101-F B106-F B110-F) B113-F))
(assert (= (or B21-F B26-F B31-F B40-F B45-F B50-F B59-F B64-F B69-F B79-F B84-F B89-F B97-F B102-F B107-F B111-F) B114-F))
(assert (= (or B125-F B124-F B126-F B122-F B123-F B127-F B128-F B129-F B130-F B131-F B138-F B132-F B135-F B136-F B133-F B134-F B137-F B113-F) B139-F))
(assert (not (and B119-F B118-F (distinct I118 0) (distinct I119 (div (* I118 15) 100)))))
(assert (not (and B116-F (or (< I116-y 2025) (> I116-y 2025)))))
(assert (not (and (or B143-F B142-F) (not (and B143-F B142-F)))))
(assert (not (and (or B20-F B25-F B30-F B39-F B44-F B49-F B58-F B63-F B68-F B78-F B83-F B88-F B96-F B101-F B106-F B110-F) (not B113-F))))
(assert (not (and (or B21-F B26-F B31-F B40-F B45-F B50-F B59-F B64-F B69-F B79-F B84-F B89-F B97-F B102-F B107-F B111-F) (not B114-F))))
(assert (not (and B113-F (not B122-F) (not B123-F) (not B124-F) (not B125-F) (not B126-F) (not B127-F) (not B128-F) (not B129-F) (not B130-F) (not B131-F) (not B132-F) (not B133-F) (not B134-F) (not B135-F) (not B136-F) (not B137-F) (not B138-F) (not B139-F))))
(assert (not (and B113-F (or B20-F B25-F B30-F B39-F B44-F B49-F B58-F B63-F B68-F B78-F B83-F B88-F B96-F B101-F B106-F B110-F) (distinct I113 (+ I20 I25 I30 I39 I44 I49 I58 I63 I68 I78 I83 I88 I96 I101 I106 I110)))))
(assert (not (and B114-F (or B21-F B26-F B31-F B40-F B45-F B50-F B59-F B64-F B69-F B79-F B84-F B89-F B97-F B102-F B107-F B111-F) (distinct I114 (+ I21 I26 I31 I40 I45 I50 I59 I64 I69 I79 I84 I89 I97 I102 I107 I111)))))
(assert (not (and B10-F (or (< I10-y 2025) (> I10-y 2025)))))
(assert (not (and B16-F B15-F (or (> I16-y I15-y) (and (= I16-y I15-y) (> I16-m I15-m)) (and (= I16-y I15-y) (= I16-m I15-m) (> I16-d I15-d))))))
(assert (not (and B15-F (or (distinct I15-y (ite B10-F I10-y 0)) (distinct I15-m (ite B11-F I11 0))))))
(assert (not (and B14-F B16-F (>= (ite (and (>= I14 1) (<= I14 9999)) (+ (- I16-y I14) (ite (or (< I14 I16-y) (and (= I14 I16-y) (< 5 I16-m)) (and (= I14 I16-y) (= 5 I16-m) (< 1 I16-d)) (and (= I14 I16-y) (= 5 I16-m) (= 1 I16-d))) (ite (or (< 5 I16-m) (and (= 5 I16-m) (<= 1 I16-d))) 0 (- 1)) (ite (or (> 5 I16-m) (and (= 5 I16-m) (>= 1 I16-d))) 0 1))) 0) 1))))
(assert (not (and B15-F (< I15-y (ite B14-F I14 0)))))
(assert (not (and (not (and B16-F B15-F B14-F)) (or B17-F B22-F B27-F))))
(assert (not (and (or B14-F B15-F B16-F) (not B17-F) (not B22-F) (not B27-F))))
(assert (not (and B14-F (> I14 2025))))
(assert (not (and (or B19-F B24-F B29-F) (or (and (distinct I19 0) (= I20 0)) (and (distinct I24 0) (= I25 0)) (and (distinct I29 0) (= I30 0))))))
(assert (not (and B20-F B21-F (> (ite (>= (- I21 (div (* I20 55) 10)) 0) (- I21 (div (* I20 55) 10)) (- (- I21 (div (* I20 55) 10)))) 100))))
(assert (not (and (or B18-F B19-F B20-F B21-F) (not (and B18-F B19-F B20-F B21-F)))))
(assert (not (and (or B20-F B25-F B30-F) (or (> (* I20 100) (+ (* I19 15) 100)) (> (* I25 100) (+ (* I24 15) 100)) (> (* I30 100) (+ (* I29 15) 100))))))
(assert (not (and B25-F B26-F (> (ite (>= (- I26 (div (* I25 55) 10)) 0) (- I26 (div (* I25 55) 10)) (- (- I26 (div (* I25 55) 10)))) 100))))
(assert (not (and (or B23-F B24-F B25-F B26-F) (not (and B23-F B24-F B25-F B26-F)))))
(assert (not (and B30-F B31-F (> (ite (>= (- I31 (div (* I30 55) 10)) 0) (- I31 (div (* I30 55) 10)) (- (- I31 (div (* I30 55) 10)))) 100))))
(assert (not (and (or B28-F B29-F B30-F B31-F) (not (and B28-F B29-F B30-F B31-F)))))
(assert (not (and B73-F (not B74-F))))
(assert (not (and B73-F B72-F (or (< I73-y I72-y) (and (= I73-y I72-y) (< I73-m I72-m)) (and (= I73-y I72-y) (= I73-m I72-m) (< I73-d I72-d)) (and (= I73-y I72-y) (= I73-m I72-m) (= I73-d I72-d))))))
(assert (not (and B73-F (< I73-y (ite B71-F I71 0)))))
(assert (not (and B73-F B74-F (or (< I73-y I74-y) (and (= I73-y I74-y) (< I73-m I74-m)) (and (= I73-y I74-y) (= I73-m I74-m) (< I73-d I74-d))))))
(assert (not (and B73-F (or (< I73-y (ite B10-F I10-y 0)) (and (= I73-y (ite B10-F I10-y 0)) (< I73-m (ite B11-F I11 0)))))))
(assert (not (and B74-F (< I74-y 2023))))
(assert (not (and (not (and B71-F B72-F)) (or B75-F B80-F B85-F))))
(assert (not (and B72-F (distinct I72-y (ite B71-F I71 0)))))
(assert (not (and (or B71-F B72-F B74-F) (not B75-F) (not B80-F) (not B85-F))))
(assert (not (and B72-F (or (> I72-y (ite B10-F I10-y 0)) (and (= I72-y (ite B10-F I10-y 0)) (> I72-m (ite B11-F I11 0)))))))
(assert (not (and B71-F (> I71 2025))))
(assert (not (and B71-F (or (and B72-F (or (< I72-y 2022) (and (= I72-y 2022) (< I72-m 10)) (and (= I72-y 2022) (= I72-m 10) (< I72-d 1))) (< I71 2025)) (and B72-F (or (> I72-y 2022) (and (= I72-y 2022) (> I72-m 10)) (and (= I72-y 2022) (= I72-m 10) (> I72-d 1)) (and (= I72-y 2022) (= I72-m 10) (= I72-d 1))) (or (and (< I71 2025) (= I71 2024) (>= (ite B11-F I11 0) 5) (<= (ite B11-F I11 0) 12)) (and (< I71 2025) (distinct I71 2024))))))))
(assert (not (and B72-F (or (and (= I72-y (ite B10-F I10-y 0)) (< I72-m (- (ite B11-F I11 0) 4))) (and (distinct I72-y (ite B10-F I10-y 0)) (< I72-y (- (ite B10-F I10-y 0) 1))) (and (distinct I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8) (< I72-m (- (+ (ite B11-F I11 0) 12) 4))) (and (distinct I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8))))))
(assert (not (and (or B77-F B82-F B87-F) (or (and (distinct I77 0) (= I78 0)) (and (distinct I82 0) (= I83 0)) (and (distinct I87 0) (= I88 0))))))
(assert (not (and B78-F B79-F (> (ite (>= (- I79 (div (* I78 55) 10)) 0) (- I79 (div (* I78 55) 10)) (- (- I79 (div (* I78 55) 10)))) 100))))
(assert (not (and (or B76-F B77-F B78-F B79-F) (not (and B76-F B77-F B78-F B79-F)))))
(assert (not (and (or B78-F B83-F B88-F) (or (> (* I78 100) (+ (* I77 15) 100)) (> (* I83 100) (+ (* I82 15) 100)) (> (* I88 100) (+ (* I87 15) 100))))))
(assert (not (and B83-F B84-F (> (ite (>= (- I84 (div (* I83 55) 10)) 0) (- I84 (div (* I83 55) 10)) (- (- I84 (div (* I83 55) 10)))) 100))))
(assert (not (and (or B81-F B82-F B83-F B84-F) (not (and B81-F B82-F B83-F B84-F)))))
(assert (not (and B88-F B89-F (> (ite (>= (- I89 (div (* I88 55) 10)) 0) (- I89 (div (* I88 55) 10)) (- (- I89 (div (* I88 55) 10)))) 100))))
(assert (not (and (or B86-F B87-F B88-F B89-F) (not (and B86-F B87-F B88-F B89-F)))))
(assert (not (and (not (and B92-F B91-F)) (or B93-F B98-F B103-F))))
(assert (not (and (or B92-F B91-F) (not B93-F) (not B98-F) (not B103-F))))
(assert (not (and (or B95-F B100-F B105-F) (or (and (distinct I95 0) (= I96 0)) (and (distinct I100 0) (= I101 0)) (and (distinct I105 0) (= I106 0))))))
(assert (not (and B96-F B97-F (> (ite (>= (- I97 (div (* I96 55) 10)) 0) (- I97 (div (* I96 55) 10)) (- (- I97 (div (* I96 55) 10)))) 100))))
(assert (not (and (or B94-F B95-F B96-F B97-F) (not (and B94-F B95-F B96-F B97-F)))))
(assert (not (and (or B96-F B101-F B106-F) (or (> (* I96 100) (+ (* I95 15) 100)) (> (* I101 100) (+ (* I100 15) 100)) (> (* I106 100) (+ (* I105 15) 100))))))
(assert (not (and B101-F B102-F (> (ite (>= (- I102 (div (* I101 55) 10)) 0) (- I102 (div (* I101 55) 10)) (- (- I102 (div (* I101 55) 10)))) 100))))
(assert (not (and (or B99-F B100-F B101-F B102-F) (not (and B99-F B100-F B101-F B102-F)))))
(assert (not (and B106-F B107-F (> (ite (>= (- I107 (div (* I106 55) 10)) 0) (- I107 (div (* I106 55) 10)) (- (- I107 (div (* I106 55) 10)))) 100))))
(assert (not (and (or B104-F B105-F B106-F B107-F) (not (and B104-F B105-F B106-F B107-F)))))
(assert (not (and B109-F (distinct I109 0) (= I110 0))))
(assert (not (and B110-F B111-F (> (ite (>= (- I111 (div (* I110 55) 10)) 0) (- I111 (div (* I110 55) 10)) (- (- I111 (div (* I110 55) 10)))) 100))))
(assert (not (and B110-F (> (* I110 100) (+ (* I109 15) 100)))))
(assert (not (and B91-F (or (> I91-y (ite B10-F I10-y 0)) (and (> I91-m (ite B11-F I11 0)) (= I91-y (ite B10-F I10-y 0)))))))
(assert (not (and B35-F B34-F (or (> I35-y I34-y) (and (= I35-y I34-y) (> I35-m I34-m)) (and (= I35-y I34-y) (= I35-m I34-m) (> I35-d I34-d))))))
(assert (not (and B34-F (or (distinct I34-y (ite B10-F I10-y 0)) (distinct I34-m (ite B11-F I11 0))))))
(assert (not (and B34-F (< I34-y 2025))))
(assert (not (and (not (and B35-F B34-F B33-F)) (or B36-F B41-F B46-F))))
(assert (not (and (or B35-F B34-F B33-F) (not B36-F) (not B41-F) (not B46-F))))
(assert (not (and (or B38-F B43-F B48-F) (or (and (distinct I38 0) (= I39 0)) (and (distinct I43 0) (= I44 0)) (and (distinct I48 0) (= I49 0))))))
(assert (not (and B39-F B40-F (> (ite (>= (- I40 (div (* I39 55) 10)) 0) (- I40 (div (* I39 55) 10)) (- (- I40 (div (* I39 55) 10)))) 100))))
(assert (not (and (or B37-F B38-F B39-F B40-F) (not (and B37-F B38-F B39-F B40-F)))))
(assert (not (and (or B39-F B44-F B49-F) (or (> (* I39 100) (+ (* I38 15) 100)) (> (* I44 100) (+ (* I43 15) 100)) (> (* I49 100) (+ (* I48 15) 100))))))
(assert (not (and B44-F B45-F (> (ite (>= (- I45 (div (* I44 55) 10)) 0) (- I45 (div (* I44 55) 10)) (- (- I45 (div (* I44 55) 10)))) 100))))
(assert (not (and (or B42-F B43-F B44-F B45-F) (not (and B42-F B43-F B44-F B45-F)))))
(assert (not (and B49-F B50-F (> (ite (>= (- I50 (div (* I49 55) 10)) 0) (- I50 (div (* I49 55) 10)) (- (- I50 (div (* I49 55) 10)))) 100))))
(assert (not (and (or B47-F B48-F B49-F B50-F) (not (and B47-F B48-F B49-F B50-F)))))
(assert (not (and B33-F B34-F (or (> I33-e-y I34-y) (and (= I33-e-y I34-y) (> I33-e-m I34-m)) (and (= I33-e-y I34-y) (= I33-e-m I34-m) (> I33-e-d I34-d))))))
(assert (not (and B33-F (not B34-F))))
(assert (not (and B33-F (or (< I33-s-y (- I33-e-y 1)) (and (= I33-s-y (- I33-e-y 1)) (< I33-s-m I33-e-m)) (and (= I33-s-y (- I33-e-y 1)) (= I33-s-m I33-e-m) (< I33-s-d (+ I33-e-d 1)))))))
(assert (not (and B54-F B53-F (or (> I54-y I53-y) (and (= I54-y I53-y) (> I54-m I53-m)) (and (= I54-y I53-y) (= I54-m I53-m) (> I54-d I53-d))))))
(assert (not (and B53-F (or (distinct I53-y (ite B10-F I10-y 0)) (distinct I53-m (ite B11-F I11 0))))))
(assert (not (and B53-F (< I53-y 2025))))
(assert (not (and (not (and B54-F B53-F B52-F)) (or B55-F B60-F B65-F))))
(assert (not (and (or B54-F B53-F B52-F) (not B55-F) (not B60-F) (not B65-F))))
(assert (not (and (or B57-F B62-F B67-F) (or (and (distinct I57 0) (= I58 0)) (and (distinct I62 0) (= I63 0)) (and (distinct I67 0) (= I68 0))))))
(assert (not (and B58-F B59-F (> (ite (>= (- I59 (div (* I58 55) 10)) 0) (- I59 (div (* I58 55) 10)) (- (- I59 (div (* I58 55) 10)))) 100))))
(assert (not (and (or B56-F B57-F B58-F B59-F) (not (and B56-F B57-F B58-F B59-F)))))
(assert (not (and (or B58-F B63-F B68-F) (or (> (* I58 100) (+ (* I57 15) 100)) (> (* I63 100) (+ (* I62 15) 100)) (> (* I68 100) (+ (* I67 15) 100))))))
(assert (not (and B63-F B64-F (> (ite (>= (- I64 (div (* I63 55) 10)) 0) (- I64 (div (* I63 55) 10)) (- (- I64 (div (* I63 55) 10)))) 100))))
(assert (not (and (or B61-F B62-F B63-F B64-F) (not (and B61-F B62-F B63-F B64-F)))))
(assert (not (and B68-F B69-F (> (ite (>= (- I69 (div (* I68 55) 10)) 0) (- I69 (div (* I68 55) 10)) (- (- I69 (div (* I68 55) 10)))) 100))))
(assert (not (and (or B66-F B67-F B68-F B69-F) (not (and B66-F B67-F B68-F B69-F)))))
(assert (not (and B52-F B53-F (or (> I52-e-y I53-y) (and (= I52-e-y I53-y) (> I52-e-m I53-m)) (and (= I52-e-y I53-y) (= I52-e-m I53-m) (> I52-e-d I53-d))))))
(assert (not (and B52-F (not B53-F))))
(assert (not (and B52-F (or (< I52-s-y (- I52-e-y 1)) (and (= I52-s-y (- I52-e-y 1)) (< I52-s-m I52-e-m)) (and (= I52-s-y (- I52-e-y 1)) (= I52-s-m I52-e-m) (< I52-s-d (+ I52-e-d 1)))))))
(assert (not (or (and (not B1-F) (not B2-F)) (and B1-F B2-F))))
(assert (not (and (or B1-F B10-F B11-F) (not B13-F) (not B32-F) (not B51-F) (not B70-F) (not B90-F))))
(assert (not (and B1-F B116-F)))
(assert (not (and B1-F (not (and B10-F B11-F)))))
(assert (not (and B1-F B10-F B11-F (or (< 2025 I10-y) (and (= 2025 I10-y) (<= 3 I11))))))
(assert (not (and B1-F B10-F B11-F (or (< 2026 I10-y) (and (= 2026 I10-y) (<= 3 I11))))))
(assert (not (and B2-F (or B10-F B11-F B12-F B14-F B15-F B16-F B18-F B19-F B20-F B21-F B23-F B24-F B25-F B26-F B28-F B29-F B30-F B31-F B33-F B34-F B35-F B37-F B38-F B39-F B40-F B42-F B43-F B44-F B45-F B47-F B48-F B49-F B50-F B52-F B53-F B54-F B56-F B57-F B58-F B59-F B61-F B62-F B63-F B64-F B66-F B67-F B68-F B69-F B71-F B72-F B73-F B74-F B76-F B77-F B78-F B79-F B81-F B82-F B83-F B84-F B86-F B87-F B88-F B89-F B91-F B92-F B94-F B95-F B96-F B97-F B99-F B100-F B101-F B102-F B104-F B105-F B106-F B107-F B109-F B110-F B111-F B113-F B114-F))))
(assert (not (and B2-F (not (and B116-F B118-F B119-F)))))
(assert (not (and B145-F (not (and B147-F B148-F)))))
(assert (not (and (not B145-F) (or B147-F B148-F))))
(assert (not (and B5-F (= I4-i 1))))
(assert (not (and B5-F (= I5-i I3-i))))
(assert (not (and B115-F (not B2-F))))
(assert (not (and (or B125-F B124-F B126-F B122-F B123-F B127-F B128-F B129-F B130-F B131-F B138-F B132-F B135-F B136-F B133-F B134-F B137-F) (not B139-F))))
(assert (not (and B139-F (or B125-F B124-F B126-F B122-F B123-F B127-F B128-F B129-F B130-F B131-F B138-F B132-F B135-F B136-F B133-F B134-F B137-F) (distinct I140 (+ I125 I124 I126 I122 I123 I127 I128 I129 I130 I131 I138 I132 I135 I136 I133 I134 I137)))))
(assert (not (and B139-F (not B125-F) (not B124-F) (not B126-F) (not B122-F) (not B123-F) (not B127-F) (not B128-F) (not B129-F) (not B130-F) (not B131-F) (not B138-F) (not B132-F) (not B135-F) (not B136-F) (not B133-F) (not B134-F) (not B137-F))))
(assert (not (and B139-F B113-F (distinct I140 (* I113 100)))))
(push 1)
(assert (not (and B143-F B142-F)))
(set-info :status sat)
(check-sat)
(push 1)
(assert B2-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (not B2-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B2-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B2-F) (or B10-F B11-F B12-F B14-F B15-F B16-F B18-F B19-F B20-F B21-F B23-F B24-F B25-F B26-F B28-F B29-F B30-F B31-F B33-F B34-F B35-F B37-F B38-F B39-F B40-F B42-F B43-F B44-F B45-F B47-F B48-F B49-F B50-F B52-F B53-F B54-F B56-F B57-F B58-F B59-F B61-F B62-F B63-F B64-F B66-F B67-F B68-F B69-F B71-F B72-F B73-F B74-F B76-F B77-F B78-F B79-F B81-F B82-F B83-F B84-F B86-F B87-F B88-F B89-F B91-F B92-F B94-F B95-F B96-F B97-F B99-F B100-F B101-F B102-F B104-F B105-F B106-F B107-F B109-F B110-F B111-F B113-F B114-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B2-F (not B10-F) (not B11-F) (not B12-F) (not B14-F) (not B15-F) (not B16-F) (not B18-F) (not B19-F) (not B20-F) (not B21-F) (not B23-F) (not B24-F) (not B25-F) (not B26-F) (not B28-F) (not B29-F) (not B30-F) (not B31-F) (not B33-F) (not B34-F) (not B35-F) (not B37-F) (not B38-F) (not B39-F) (not B40-F) (not B42-F) (not B43-F) (not B44-F) (not B45-F) (not B47-F) (not B48-F) (not B49-F) (not B50-F) (not B52-F) (not B53-F) (not B54-F) (not B56-F) (not B57-F) (not B58-F) (not B59-F) (not B61-F) (not B62-F) (not B63-F) (not B64-F) (not B66-F) (not B67-F) (not B68-F) (not B69-F) (not B71-F) (not B72-F) (not B73-F) (not B74-F) (not B76-F) (not B77-F) (not B78-F) (not B79-F) (not B81-F) (not B82-F) (not B83-F) (not B84-F) (not B86-F) (not B87-F) (not B88-F) (not B89-F) (not B91-F) (not B92-F) (not B94-F) (not B95-F) (not B96-F) (not B97-F) (not B99-F) (not B100-F) (not B101-F) (not B102-F) (not B104-F) (not B105-F) (not B106-F) (not B107-F) (not B109-F) (not B110-F) (not B111-F) (not B113-F) (not B114-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B2-F) (or (not B116-F) (not B118-F) (not B119-F))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B2-F B116-F B118-F B119-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B115-F) (not B2-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B115-F B2-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B5-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (not B5-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B5-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B5-F) (= I4-i 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B5-F (distinct I4-i 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B5-F) (= I5-i I3-i)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B5-F (distinct I5-i I3-i)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B5-F (= I5-i 14)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B5-F (= I5-i 7)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B14-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B14-F) B13-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B14-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B14-F) (not B15-F) (not B16-F) (not B17-F) (not B22-F) (not B27-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B14-F B15-F B16-F) (or B17-F B22-F B27-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B14-F (<= I14 2025)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B14-F (<= I14 0)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B14-F (= I14 2968)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B14-F (= I14 9999)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B19-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B19-F) B17-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B19-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B19-F) (not B24-F) (not B29-F) (or (and (distinct I19 0) (= I20 0)) (and (distinct I24 0) (= I25 0)) (and (distinct I29 0) (= I30 0)))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B19-F B24-F B29-F) (= I19 0) (= I20 0) (or (= I24 0) (distinct I25 0)) (or (= I29 0) (distinct I30 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B19-F B24-F B29-F) (distinct I19 0) (distinct I20 0) (or (= I24 0) (distinct I25 0)) (or (= I29 0) (distinct I30 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B19-F B24-F B29-F) (or (= I19 0) (distinct I20 0)) (= I24 0) (= I25 0) (or (= I29 0) (distinct I30 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B19-F B24-F B29-F) (or (= I19 0) (distinct I20 0)) (distinct I24 0) (distinct I25 0) (or (= I29 0) (distinct I30 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B19-F B24-F B29-F) (or (= I19 0) (distinct I20 0)) (or (= I24 0) (distinct I25 0)) (= I29 0) (= I30 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B19-F B24-F B29-F) (or (= I19 0) (distinct I20 0)) (or (= I24 0) (distinct I25 0)) (distinct I29 0) (distinct I30 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I19 999999999999))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I19 694607640672))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I19 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B19-F (= I19 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I19 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I19 (- 9059)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I19 (- 999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B30-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B30-F) B27-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B30-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I30 999999999999))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= I30 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I30 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B30-F (= I30 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I30 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I30 (- 13)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I30 (- 999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B35-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B35-F) B32-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B35-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B35-F) B34-F (or (> I35-y I34-y) (and (= I35-y I34-y) (> I35-m I34-m)) (and (= I35-y I34-y) (= I35-m I34-m) (> I35-d I34-d)))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B35-F (not B34-F) (or (> I35-y I34-y) (and (= I35-y I34-y) (> I35-m I34-m)) (and (= I35-y I34-y) (= I35-m I34-m) (> I35-d I34-d)))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B35-F B34-F (<= I35-y I34-y) (or (distinct I35-y I34-y) (<= I35-m I34-m)) (or (distinct I35-y I34-y) (distinct I35-m I34-m) (<= I35-d I34-d))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B35-F B34-F B33-F (or B36-F B41-F B46-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or (not B35-F) (not B34-F) (not B33-F)) (not B36-F) (not B41-F) (not B46-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (= I35-y 2025) (= I35-m 3) (= I35-d 24)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B41-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B41-F) B32-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B41-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B44-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B44-F) B41-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B44-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I44 999999999999))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= I44 49531594606))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I44 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B44-F (= I44 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I44 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I44 (- 4049368505)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I44 (- 999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B65-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B65-F) B51-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B65-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B72-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B72-F) B70-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B72-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B72-F) (distinct 0 (ite B71-F I71 0))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (= I72-y (ite B71-F I71 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B72-F) (or (> 0 (ite B10-F I10-y 0)) (and (= 0 (ite B10-F I10-y 0)) (> 0 (ite B11-F I11 0))))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (<= I72-y (ite B10-F I10-y 0)) (distinct I72-y (ite B10-F I10-y 0)) (> I72-m (ite B11-F I11 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (<= I72-y (ite B10-F I10-y 0)) (= I72-y (ite B10-F I10-y 0)) (<= I72-m (ite B11-F I11 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B72-F) (or (and (= 0 (ite B10-F I10-y 0)) (< 0 (- (ite B11-F I11 0) 4))) (and (distinct 0 (ite B10-F I10-y 0)) (< 0 (- (ite B10-F I10-y 0) 1))) (and (distinct 0 (ite B10-F I10-y 0)) (= 0 (- (ite B10-F I10-y 0) 1))))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (distinct I72-y (ite B10-F I10-y 0)) (< I72-m (- (ite B11-F I11 0) 4)) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (distinct I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (distinct I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (= I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4)) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (= I72-y (ite B10-F I10-y 0)) (< I72-y (- (ite B10-F I10-y 0) 1)) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (distinct I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1)) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (= I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8) (< I72-m (- (+ (ite B11-F I11 0) 12) 4)) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (distinct I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8) (< I72-m (- (+ (ite B11-F I11 0) 12) 4)) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (distinct I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (< I72-m (- (+ (ite B11-F I11 0) 12) 4)) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (distinct I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4)) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (> I72-m 8))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B72-F (or (distinct I72-y (ite B10-F I10-y 0)) (>= I72-m (- (ite B11-F I11 0) 4))) (or (= I72-y (ite B10-F I10-y 0)) (>= I72-y (- (ite B10-F I10-y 0) 1))) (or (= I72-y (ite B10-F I10-y 0)) (distinct I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8) (>= I72-m (- (+ (ite B11-F I11 0) 12) 4))) (= I72-y (ite B10-F I10-y 0)) (= I72-y (- (ite B10-F I10-y 0) 1)) (<= I72-m 8)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and (= I72-y 2025) (= I72-m 3) (= I72-d 24)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B84-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B84-F) B80-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B84-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or (not B83-F) (not B84-F)) (> (ite (>= (- I84 (div (* I83 55) 10)) 0) (- I84 (div (* I83 55) 10)) (- (- I84 (div (* I83 55) 10)))) 100)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B83-F B84-F (<= (ite (>= (- I84 (div (* I83 55) 10)) 0) (- I84 (div (* I83 55) 10)) (- (- I84 (div (* I83 55) 10)))) 100)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I84 99999999999999))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= I84 73330052354))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I84 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B84-F (= I84 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I84 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I84 (- 5511)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I84 (- 99999999999999)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B90-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B90-F) B9-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B90-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B91-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B91-F) B90-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B91-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B92-F) (not B91-F) (not B93-F) (not B98-F) (not B103-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or B92-F B91-F) (or B93-F B98-F B103-F)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B91-F) (or (> 0 (ite B10-F I10-y 0)) (and (> 0 (ite B11-F I11 0)) (= 0 (ite B10-F I10-y 0))))))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B91-F (<= I91-y (ite B10-F I10-y 0)) (<= I91-m (ite B11-F I11 0)) (= I91-y (ite B10-F I10-y 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B91-F (<= I91-y (ite B10-F I10-y 0)) (> I91-m (ite B11-F I11 0)) (distinct I91-y (ite B10-F I10-y 0))))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (= I91-y 2025) (= I91-m 3) (= I91-d 24)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B93-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B93-F) B90-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B93-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B99-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B99-F) B98-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B99-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B102-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B102-F) B98-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B102-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or (not B101-F) (not B102-F)) (> (ite (>= (- I102 (div (* I101 55) 10)) 0) (- I102 (div (* I101 55) 10)) (- (- I102 (div (* I101 55) 10)))) 100)))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (and B101-F B102-F (<= (ite (>= (- I102 (div (* I101 55) 10)) 0) (- I102 (div (* I101 55) 10)) (- (- I102 (div (* I101 55) 10)))) 100)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I102 99999999999999))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert (= I102 462081289))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I102 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B102-F (= I102 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B102-F (= I102 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B111-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B111-F) B108-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B111-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (or (not B110-F) (not B111-F)) (> (ite (>= (- I111 (div (* I110 55) 10)) 0) (- I111 (div (* I110 55) 10)) (- (- I111 (div (* I110 55) 10)))) 100)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B110-F B111-F (<= (ite (>= (- I111 (div (* I110 55) 10)) 0) (- I111 (div (* I110 55) 10)) (- (- I111 (div (* I110 55) 10)))) 100)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I111 99999999999999))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I111 16874))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I111 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B111-F (= I111 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I111 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I111 (- 40585383750578)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I111 (- 99999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B120-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (not B120-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B120-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B122-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B122-F) B121-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B122-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I122 99999999999999))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I122 23410003603078))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I122 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B122-F (= I122 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I122 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I122 (- 53)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I122 (- 9999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B126-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B126-F) B121-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B126-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I126 99999999999999))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I126 781))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I126 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B126-F (= I126 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I126 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I126 (- 54646)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I126 (- 9999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B132-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B132-F) B121-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B132-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I132 99999999999999))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I132 8765366))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I132 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B132-F (= I132 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I132 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I132 (- 1048109489184)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I132 (- 9999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B138-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B138-F) B121-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B138-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I138 99999999999999))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I138 8647582577304))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I138 1))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and B138-F (= I138 0)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I138 (- 1)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I138 (- 40416802409)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (= I138 (- 9999999999999)))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B146-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B146-F) B144-F))
(set-info :status unsat)
(check-sat)
(pop 1)
(push 1)
(assert B146-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B149-F)
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert (and (not B149-F) B146-F))
(set-info :status sat)
(check-sat)
(pop 1)
(push 1)
(assert B149-F)
(set-info :status sat)
(check-sat)
(pop 1)
(exit)

