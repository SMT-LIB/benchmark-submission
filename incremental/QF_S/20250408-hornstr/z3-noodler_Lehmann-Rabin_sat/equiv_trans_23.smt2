(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "c") (str.to_re "b"))
                               (str.to_re "H"))
                     (str.to_re "a"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "c") (str.to_re "b"))
                               (str.to_re "H"))
                     (str.to_re "a"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun Y () String)
(declare-fun reg0 () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "H") (str.to_re "c"))
                               (str.to_re "d"))
                     (str.to_re "a"))))
(let ((a!2 (str.in_re reg0 (re.* (re.union a!1 (str.to_re "b"))))))
  (or (and true
           (= X (str.++ "a"))
           (= Y (str.++ "H"))
           a!2
           (= X varin)
           isin
           (= Y varout)
           isout)))))
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "c") (str.to_re "b"))
                               (str.to_re "H"))
                     (str.to_re "d"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1))))))
  (str.in_re varin a!2))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "c") (str.to_re "b"))
                               (str.to_re "H"))
                     (str.to_re "d")))
      (a!4 (re.union (re.union (re.union (str.to_re "c") (str.to_re "b"))
                               (str.to_re "H"))
                     (str.to_re "a"))))
(let ((a!2 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "a") (str.to_re "E")))))
      (a!5 (re.* (re.union (re.union a!4 (str.to_re "d")) (str.to_re "E")))))
(let ((a!3 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "a") (str.to_re "E")) a!2)))
      (a!6 (re.++ (re.union (re.union a!4 (str.to_re "d")) (str.to_re "E")) a!5)))
(let ((a!7 (re.++ a!3 (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (str.in_re varout a!7))))))
(set-info :status unknown)
(check-sat)
(set-info :status unknown)
(check-sat)
(exit)
