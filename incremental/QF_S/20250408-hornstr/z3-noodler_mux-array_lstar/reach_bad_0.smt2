(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "C") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "F"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
  (str.in_re X a!2))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "D") (str.to_re "C"))
                               (str.to_re "B"))
                     (str.to_re "A")))
      (a!4 (re.union (re.union (re.union (str.to_re "F") (str.to_re "D"))
                               (str.to_re "C"))
                     (str.to_re "B"))))
(let ((a!2 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "F") (str.to_re "E")))))
      (a!5 (re.* (re.union (re.union a!4 (str.to_re "E")) (str.to_re "A")))))
(let ((a!3 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "F") (str.to_re "E")) a!2)))
      (a!6 (re.++ (re.union (re.union a!4 (str.to_re "E")) (str.to_re "A")) a!5)))
(let ((a!7 (re.++ (re.++ a!3 a!3) (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (and (str.in_re X a!7) true))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "C") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "F"))))
  (str.in_re X (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "C") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "F"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D"))
                  (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "C") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "F"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D"))
                  (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "C") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "F"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D"))
                  (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
(let ((a!4 (re.++ a!3 (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEBA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFBA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EECA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEDA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFDA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEAB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFAB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEBB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFBB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EECB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFCB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEDB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFDB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEBC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFBC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EECC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEDC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFDC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEAD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFAD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEBD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFBD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EECD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFCD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEDD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFDD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EABE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EACE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EADE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EABF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EACF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EADF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FABE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FACE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FADE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCFE"))
(assert (distinct X "FCFE"))
(exit)
