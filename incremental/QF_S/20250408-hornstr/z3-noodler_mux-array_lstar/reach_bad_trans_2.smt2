(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "C") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "F"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "E")) (str.to_re "D")))))
  (str.in_re X a!2))))
(declare-fun reg1 () String)
(declare-fun Y () String)
(declare-fun reg0 () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "A"))
                               (str.to_re "C"))
                     (str.to_re "D"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "E")) (str.to_re "F")))))
  (and true
       (= X (str.++ reg1))
       (= Y (str.++ reg1))
       (str.in_re reg0 a!2)
       (str.in_re reg1 a!2)))))
(push 1)
(assert (= Y "BEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BEF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "CEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFC"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "BFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFD"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFC"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "DEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "CFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFD"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "AEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFB"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFA"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFA"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEB"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "BFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BFE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "CEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "DFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "AFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FED"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEB"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "AFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEA"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "DFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "AEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "BEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "ECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEC"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEA"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "DEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EED"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEC"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "ECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFB"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "CFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "FE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "EE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)
