(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "9"))
                     (str.to_re "1"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "8")) (str.to_re "c"))
                     (str.to_re "6"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "2")) (str.to_re "3"))
                     (str.to_re "7"))))
(let ((a!4 (re.* (re.union (re.union a!3 (str.to_re "4")) (str.to_re "5")))))
  (str.in_re varout a!4))))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "9"))
                     (str.to_re "1"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "8")) (str.to_re "c"))
                     (str.to_re "6"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "2")) (str.to_re "3"))
                     (str.to_re "7"))))
(let ((a!4 (re.* (re.union (re.union a!3 (str.to_re "4")) (str.to_re "5")))))
  (str.in_re varin a!4))))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "9") (str.to_re "1"))
                               (str.to_re "3"))
                     (str.to_re "b"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "8")) (str.to_re "5"))
                     (str.to_re "a")))
      (a!6 (re.union (re.union (re.union a!1 (str.to_re "8")) (str.to_re "5"))
                     (str.to_re "c"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "7")) (str.to_re "4"))
                     (str.to_re "2")))
      (a!7 (re.union (re.union (re.union a!6 (str.to_re "a")) (str.to_re "7"))
                     (str.to_re "6"))))
(let ((a!4 (re.++ a!3
                  (re.++ (re.* a!3) (re.union (str.to_re "c") (str.to_re "6")))))
      (a!8 (re.* (re.union (re.union a!7 (str.to_re "4")) (str.to_re "2")))))
(let ((a!5 (re.++ (re.* a!3)
                  (re.union (re.union (str.to_re "c") (str.to_re "6")) a!4)))
      (a!9 (re.++ (re.union (re.union a!7 (str.to_re "4")) (str.to_re "2")) a!8)))
(let ((a!10 (re.++ (re.++ a!5 a!5) (re.++ a!8 (re.union (str.to_re "") a!9)))))
  (or (and (str.in_re X a!10) true (= X varin) isin (not isout))))))))))
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "9"))
                     (str.to_re "1"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "8")) (str.to_re "c"))
                     (str.to_re "6"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "2")) (str.to_re "3"))
                     (str.to_re "7"))))
(let ((a!4 (re.* (re.union (re.union a!3 (str.to_re "4")) (str.to_re "5")))))
(let ((a!5 (re.++ (re.union (re.union a!3 (str.to_re "4")) (str.to_re "5")) a!4)))
  (str.in_re varin (re.++ a!4 (re.union (str.to_re "") a!5)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "8"))
                     (str.to_re "c")))
      (a!7 (re.union (re.union (re.union (str.to_re "a") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "6")))
      (a!8 (re.union (re.union (re.union (str.to_re "b") (str.to_re "8"))
                               (str.to_re "c"))
                     (str.to_re "2"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "6")) (str.to_re "3"))
                     (str.to_re "7")))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "3")) (str.to_re "7"))
                     (str.to_re "4"))))
(let ((a!3 (re.* (re.union (re.union a!2 (str.to_re "4")) (str.to_re "5")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "a") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!5 (re.++ (re.union (re.union a!2 (str.to_re "4")) (str.to_re "5")) a!4)))
(let ((a!6 (re.union (re.union (re.union (str.to_re "a") (str.to_re "1"))
                               (str.to_re "2"))
                     a!5)))
(let ((a!10 (re.union a!7
                      (re.++ (re.union a!9 (str.to_re "5")) (re.++ a!3 a!6)))))
(let ((a!11 (re.++ (re.* a!10)
                   (re.union (str.to_re "") (re.++ a!10 (re.* a!10))))))
  (str.in_re varin (re.++ (re.++ a!3 a!6) a!11)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "8")))
      (a!4 (re.union (re.union (re.union (str.to_re "a") (str.to_re "c"))
                               (str.to_re "6"))
                     (str.to_re "2")))
      (a!8 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "1"))
                     (str.to_re "6")))
      (a!10 (re.union (re.union (re.union (str.to_re "9") (str.to_re "8"))
                                (str.to_re "c"))
                      (str.to_re "3"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "2")) (str.to_re "7"))
                     (str.to_re "5"))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!2))
      (a!5 (re.++ a!2 (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4")))))
(let ((a!6 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!5))
      (a!12 (re.++ (re.union a!10 (str.to_re "4"))
                   (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!7 (re.union (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))
                     a!6)))
(let ((a!11 (re.union a!9
                      (re.++ (re.union a!10 (str.to_re "4")) (re.++ a!2 a!7)))))
(let ((a!13 (re.union a!12 (re.++ a!11 (re.++ (re.* a!11) a!12)))))
(let ((a!14 (re.union (re.++ a!2 (re.union (str.to_re "") a!3))
                      (re.++ (re.++ a!2 a!7) (re.++ (re.* a!11) a!13)))))
  (str.in_re varin a!14))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "8")))
      (a!4 (re.union (re.union (re.union (str.to_re "a") (str.to_re "c"))
                               (str.to_re "6"))
                     (str.to_re "2")))
      (a!8 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "1"))
                     (str.to_re "6")))
      (a!10 (re.union (re.union (re.union (str.to_re "9") (str.to_re "8"))
                                (str.to_re "c"))
                      (str.to_re "4"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "2")) (str.to_re "3"))
                     (str.to_re "7"))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!2))
      (a!5 (re.++ a!2 (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4")))))
(let ((a!6 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!5))
      (a!12 (re.++ a!10 (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!7 (re.union (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))
                     a!6)))
(let ((a!11 (re.union (re.union a!9 (str.to_re "5"))
                      (re.++ a!10 (re.++ a!2 a!7)))))
(let ((a!13 (re.union a!12 (re.++ a!11 (re.++ (re.* a!11) a!12)))))
(let ((a!14 (re.union (re.++ a!2 (re.union (str.to_re "") a!3))
                      (re.++ (re.++ a!2 a!7) (re.++ (re.* a!11) a!13)))))
  (str.in_re varin a!14))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "8")))
      (a!4 (re.union (re.union (re.union (str.to_re "a") (str.to_re "c"))
                               (str.to_re "6"))
                     (str.to_re "2")))
      (a!8 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "1"))
                     (str.to_re "6"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "2")) (str.to_re "3"))
                     (str.to_re "7"))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!2))
      (a!5 (re.++ a!2 (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4")))))
(let ((a!6 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!5))
      (a!12 (re.++ (re.union (re.union (str.to_re "9") (str.to_re "8"))
                             (str.to_re "c"))
                   (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!7 (re.union (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))
                     a!6)))
(let ((a!10 (re.++ (re.union (re.union (str.to_re "9") (str.to_re "8"))
                             (str.to_re "c"))
                   (re.++ a!2 a!7))))
(let ((a!11 (re.union (re.union (re.union a!9 (str.to_re "4")) (str.to_re "5"))
                      a!10)))
(let ((a!13 (re.union a!12 (re.++ a!11 (re.++ (re.* a!11) a!12)))))
(let ((a!14 (re.union (re.++ a!2 (re.union (str.to_re "") a!3))
                      (re.++ (re.++ a!2 a!7) (re.++ (re.* a!11) a!13)))))
  (str.in_re varin a!14)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "8")))
      (a!4 (re.union (re.union (re.union (str.to_re "a") (str.to_re "c"))
                               (str.to_re "6"))
                     (str.to_re "2")))
      (a!8 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "1"))
                     (str.to_re "8"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "6")) (str.to_re "2"))
                     (str.to_re "3"))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!2))
      (a!5 (re.++ a!2 (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))))
      (a!10 (re.union (re.union (re.union a!9 (str.to_re "7")) (str.to_re "4"))
                      (str.to_re "5"))))
(let ((a!6 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!5))
      (a!12 (re.++ (re.union (str.to_re "9") (str.to_re "c"))
                   (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!7 (re.union (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))
                     a!6)))
(let ((a!11 (re.union a!10
                      (re.++ (re.union (str.to_re "9") (str.to_re "c"))
                             (re.++ a!2 a!7)))))
(let ((a!13 (re.union a!12 (re.++ a!11 (re.++ (re.* a!11) a!12)))))
(let ((a!14 (re.union (re.++ a!2 (re.union (str.to_re "") a!3))
                      (re.++ (re.++ a!2 a!7) (re.++ (re.* a!11) a!13)))))
  (str.in_re varin a!14))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "8")))
      (a!4 (re.union (re.union (re.union (str.to_re "a") (str.to_re "c"))
                               (str.to_re "6"))
                     (str.to_re "2")))
      (a!8 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "9"))
                     (str.to_re "1"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "8")) (str.to_re "6"))
                     (str.to_re "2"))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!2))
      (a!5 (re.++ a!2 (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))))
      (a!10 (re.union (re.union (re.union a!9 (str.to_re "3")) (str.to_re "7"))
                      (str.to_re "4"))))
(let ((a!6 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!5))
      (a!12 (re.++ (str.to_re "c") (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!7 (re.union (re.union (re.union a!4 (str.to_re "3")) (str.to_re "4"))
                     a!6)))
(let ((a!11 (re.union (re.union a!10 (str.to_re "5"))
                      (re.++ (str.to_re "c") (re.++ a!2 a!7)))))
(let ((a!13 (re.union a!12 (re.++ a!11 (re.++ (re.* a!11) a!12)))))
(let ((a!14 (re.union (re.++ a!2 (re.union (str.to_re "") a!3))
                      (re.++ (re.++ a!2 a!7) (re.++ (re.* a!11) a!13)))))
  (str.in_re varin a!14))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "9"))
                               (str.to_re "1"))
                     (str.to_re "8"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "7")) (str.to_re "5")) a!2)))
  (str.in_re varin (re.++ a!2 (re.union (str.to_re "") a!3)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)
