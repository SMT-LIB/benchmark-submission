(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "b") (str.to_re "n"))
                           (str.to_re "r")))))
  (str.in_re X a!1)))
(declare-fun A () String)
(declare-fun B () String)
(declare-fun Y () String)
(assert (and true
     (= X (str.++ A "rb" B))
     (= Y (str.++ A "br" B))
     (str.in_re A (re.* (str.to_re "n")))
     (str.in_re B (re.* (str.to_re "n")))))
(push 1)
(assert (= Y "bnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbrn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nrbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbrnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnrbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbrnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnrbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)
