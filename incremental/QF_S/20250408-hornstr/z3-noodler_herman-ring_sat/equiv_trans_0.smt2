(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (str.in_re varout (re.* (re.union (str.to_re "N") (str.to_re "T")))))
(declare-fun varin () String)
(assert (str.in_re varin (re.* (re.union (str.to_re "N") (str.to_re "T")))))
(declare-fun X () String)
(declare-fun reg0 () String)
(declare-fun reg1 () String)
(declare-fun Y () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (str.in_re reg0 (re.* (re.union (str.to_re "N") (str.to_re "T")))))
      (a!2 (str.in_re reg1 (re.* (re.union (str.to_re "N") (str.to_re "T"))))))
  (or (and true
           (= X (str.++ "" reg0 "T" reg1))
           (= Y (str.++ "" reg0 "T" reg1))
           a!1
           a!2
           (= X varin)
           isin
           (= Y varout)
           isout))))
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "N")
                  (re.++ (re.* (str.to_re "N")) (str.to_re "T"))))
      (a!2 (re.++ (re.union (str.to_re "N") (str.to_re "T"))
                  (re.* (re.union (str.to_re "N") (str.to_re "T"))))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T")))
                  (re.union (str.to_re "") a!2))))
(let ((a!4 (re.++ (re.++ (re.* (str.to_re "N")) (re.union (str.to_re "T") a!1))
                  a!3)))
  (str.in_re varin a!4)))))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "N") (re.* (str.to_re "N"))))))
  (str.in_re varout (re.++ (re.* (str.to_re "N")) a!1))))
(set-info :status unknown)
(check-sat)
(pop 1)
(set-info :status unknown)
(check-sat)
(exit)
