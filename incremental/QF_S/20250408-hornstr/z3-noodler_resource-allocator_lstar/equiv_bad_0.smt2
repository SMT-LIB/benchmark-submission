(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "c") (str.to_re "i"))
                           (str.to_re "r")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "c") (str.to_re "i"))
                           (str.to_re "r")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r")))
                  (str.to_re "c")))
      (a!5 (re.* (re.union (re.union (str.to_re "i") (str.to_re "c"))
                           (str.to_re "r")))))
(let ((a!2 (re.union (str.to_re "c")
                     (re.++ (re.union (str.to_re "i") (str.to_re "r")) a!1)))
      (a!6 (re.++ (re.union (re.union (str.to_re "i") (str.to_re "c"))
                            (str.to_re "r"))
                  a!5)))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r"))) a!2)))
(let ((a!4 (re.++ (re.++ (re.union (str.to_re "i") (str.to_re "c")) a!3) a!3)))
(let ((a!7 (re.++ a!4 (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (or (and (str.in_re X a!7) true (= X varin) isin (not isout)))))))))
(push 1)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "c") (str.to_re "i"))
                           (str.to_re "r")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "c") (str.to_re "i"))
                            (str.to_re "r"))
                  a!1)))
  (str.in_re varin (re.++ a!1 (re.union (str.to_re "") a!2))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "r") (re.* (str.to_re "r")))))
      (a!2 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r"))
                         (re.union (str.to_re "c") (str.to_re "i")))))
      (a!4 (re.* (re.union (re.union (str.to_re "c") (str.to_re "i"))
                           (str.to_re "r")))))
(let ((a!3 (re.++ (re.* (str.to_re "r"))
                  (re.union (re.union (str.to_re "c") (str.to_re "i")) a!2)))
      (a!5 (re.++ (re.union (re.union (str.to_re "c") (str.to_re "i"))
                            (str.to_re "r"))
                  a!4)))
(let ((a!6 (re.++ a!3 (re.++ a!4 (re.union (str.to_re "") a!5)))))
(let ((a!7 (re.union (re.++ (re.* (str.to_re "r")) a!1) a!6)))
  (str.in_re varin a!7))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "r") (re.* (str.to_re "r")))))
      (a!2 (re.++ (str.to_re "r")
                  (re.++ (re.* (str.to_re "r"))
                         (re.union (str.to_re "c") (str.to_re "i")))))
      (a!4 (re.++ (re.union (str.to_re "i") (str.to_re "r"))
                  (re.* (re.union (str.to_re "i") (str.to_re "r")))))
      (a!7 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r")))
                  (str.to_re "c"))))
(let ((a!3 (re.++ (re.* (str.to_re "r"))
                  (re.union (re.union (str.to_re "c") (str.to_re "i")) a!2)))
      (a!5 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r")))
                  (re.union (str.to_re "") a!4)))
      (a!8 (re.union (str.to_re "c")
                     (re.++ (re.union (str.to_re "i") (str.to_re "r")) a!7))))
(let ((a!6 (re.union (re.++ (re.* (str.to_re "r")) a!1) (re.++ a!3 a!5)))
      (a!9 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r"))) a!8)))
  (str.in_re varin (re.union a!6 (re.++ (re.++ a!3 a!9) a!5)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)
