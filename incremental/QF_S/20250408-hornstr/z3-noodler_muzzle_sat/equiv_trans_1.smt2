(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "I") (str.to_re "U"))
                           (str.to_re "M")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "I") (str.to_re "U"))
                           (str.to_re "M")))))
  (str.in_re varin a!1)))
(declare-fun Y () String)
(declare-fun A () String)
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (or (and true
         (= Y (str.++ "M" A))
         (= X (str.++ "M" A A))
         (= Y varin)
         isin
         (= X varout)
         isout)))
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!2)))
(let ((a!4 (re.union (re.union (str.to_re "I") (str.to_re "U"))
                     (re.++ (str.to_re "M") a!3))))
(let ((a!5 (re.++ (re.* a!4) (re.union (str.to_re "") (re.++ a!4 (re.* a!4))))))
  (str.in_re varin (re.++ a!3 a!5))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "I") (str.to_re "U"))
                     (re.++ (str.to_re "M") a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "M") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "M") a!2) a!7))))
  (str.in_re varout (re.union a!2 (re.++ a!5 a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!2)))
(let ((a!4 (re.union (re.union (str.to_re "U") (str.to_re "M"))
                     (re.++ (str.to_re "I") a!3))))
(let ((a!5 (re.++ (re.* a!4) (re.union (str.to_re "") (re.++ a!4 (re.* a!4))))))
  (str.in_re varin (re.++ a!3 a!5))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "U") (str.to_re "M"))
                     (re.++ (str.to_re "I") a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "I") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "I") a!2) a!7))))
  (str.in_re varout (re.union a!2 (re.++ a!5 a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I")))
      (a!4 (re.* (re.union (re.union (str.to_re "I") (str.to_re "U"))
                           (str.to_re "M")))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!1)))
      (a!5 (re.++ (re.union (re.union (str.to_re "I") (str.to_re "U"))
                            (str.to_re "M"))
                  a!4)))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!2)))
(let ((a!6 (re.++ a!3 (re.++ a!4 (re.union (str.to_re "") a!5)))))
  (str.in_re varin a!6))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M"))))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!1))))
  (str.in_re varout a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "M")
                  (re.++ (re.* (str.to_re "M")) (str.to_re "I"))))
      (a!2 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M")))))
      (a!5 (re.++ (str.to_re "M")
                  (re.++ (re.* (str.to_re "M")) (str.to_re "U"))))
      (a!6 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!2)))
      (a!7 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!6)))
      (a!11 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "U") a!5))))
      (a!12 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "I") a!1)))))
(let ((a!4 (re.++ (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "I") a!1))
                  a!3))
      (a!8 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!7)))
(let ((a!9 (re.++ (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "I") a!1))
                  a!8))
      (a!13 (re.union (re.union (str.to_re "U") a!11)
                      (re.++ (re.union (str.to_re "M") a!12) a!8))))
(let ((a!10 (re.union (re.++ (re.* (str.to_re "M"))
                             (re.union (str.to_re "U") a!5))
                      a!9))
      (a!14 (re.++ (re.* a!13) (re.++ (re.union (str.to_re "M") a!12) a!3))))
(let ((a!15 (re.union (re.++ (re.union (str.to_re "M") a!12) a!3)
                      (re.++ a!13 a!14))))
(let ((a!16 (re.union a!4 (re.++ a!10 (re.++ (re.* a!13) a!15)))))
  (str.in_re varin a!16)))))))))
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "M") (re.* (str.to_re "M")))))
      (a!2 (re.++ (str.to_re "M")
                  (re.++ (re.* (str.to_re "M")) (str.to_re "U"))))
      (a!3 (re.++ (str.to_re "M")
                  (re.++ (re.* (str.to_re "M")) (str.to_re "I"))))
      (a!4 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!5 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!4)))
      (a!9 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "U") a!2))))
      (a!10 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "I") a!3))))
      (a!12 (re.++ (str.to_re "I") (re.++ (re.* (str.to_re "M")) a!1))))
(let ((a!6 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!5)))
(let ((a!7 (re.++ (re.++ (re.* (str.to_re "M")) (re.union (str.to_re "I") a!3))
                  a!6))
      (a!11 (re.union (re.union (str.to_re "U") a!9)
                      (re.++ (re.union (str.to_re "M") a!10) a!6))))
(let ((a!8 (re.union (re.++ (re.* (str.to_re "M"))
                            (re.union (str.to_re "U") a!2))
                     a!7))
      (a!13 (re.++ a!11 (re.++ (re.* a!11) (re.union (str.to_re "") a!12)))))
(let ((a!14 (re.++ (re.* a!11) (re.union (re.union (str.to_re "") a!12) a!13))))
(let ((a!15 (re.union (re.++ (re.* (str.to_re "M")) a!1) (re.++ a!8 a!14))))
  (str.in_re varout a!15)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I")))
      (a!4 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M"))))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!1)))
      (a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!4))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!2)))
(let ((a!6 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!3)) a!3))
      (a!7 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!3)) a!5)))
(let ((a!8 (re.++ (re.* (re.union (str.to_re "U") a!6)) a!7)))
(let ((a!9 (re.union a!7 (re.++ (re.union (str.to_re "U") a!6) a!8))))
(let ((a!10 (re.++ (re.* (re.union (str.to_re "U") a!6)) a!9)))
  (str.in_re varin (re.union (re.++ a!3 a!5) (re.++ (re.++ a!3 a!3) a!10)))))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!4)))
(let ((a!6 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!5)) a!5)))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "U") a!6))
                  (re.union (str.to_re "") (re.++ (str.to_re "I") a!2)))))
(let ((a!8 (re.union (re.union (str.to_re "") (re.++ (str.to_re "I") a!2))
                     (re.++ (re.union (str.to_re "U") a!6) a!7))))
(let ((a!9 (re.++ (re.* (re.union (str.to_re "U") a!6)) a!8)))
  (str.in_re varout (re.union a!2 (re.++ (re.++ a!5 a!5) a!9)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I")))
      (a!4 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M"))))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!1)))
      (a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!4))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!2)))
(let ((a!6 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!3)) a!3))
      (a!7 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!3)) a!5)))
(let ((a!8 (re.++ (re.* (re.union (str.to_re "U") a!6))
                  (re.union (str.to_re "") a!7))))
(let ((a!9 (re.union (re.union (str.to_re "") a!7)
                     (re.++ (re.union (str.to_re "U") a!6) a!8))))
(let ((a!10 (re.++ (re.* (re.union (str.to_re "U") a!6)) a!9)))
  (str.in_re varin (re.union (re.++ a!3 a!5) (re.++ (re.++ a!3 a!3) a!10)))))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!4)))
(let ((a!6 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!5)) a!5)))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "U") a!6))
                  (re.++ (str.to_re "I") a!2))))
(let ((a!8 (re.union (re.++ (str.to_re "I") a!2)
                     (re.++ (re.union (str.to_re "U") a!6) a!7))))
(let ((a!9 (re.++ (re.* (re.union (str.to_re "U") a!6)) a!8)))
  (str.in_re varout (re.union a!2 (re.++ (re.++ a!5 a!5) a!9)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I")))
      (a!4 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M"))))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!1)))
      (a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!4))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!2)))
(let ((a!6 (re.union (re.union (str.to_re "U") (str.to_re "M"))
                     (re.++ (re.++ (str.to_re "I") a!3) a!3)))
      (a!7 (re.union (str.to_re "") (re.++ (re.++ (str.to_re "I") a!3) a!5))))
(let ((a!8 (re.union a!7 (re.++ a!6 (re.++ (re.* a!6) a!7)))))
(let ((a!9 (re.union (re.++ a!3 a!5)
                     (re.++ (re.++ a!3 a!3) (re.++ (re.* a!6) a!8)))))
  (str.in_re varin a!9))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "U") (str.to_re "M"))
                  (re.* (re.union (str.to_re "U") (str.to_re "M")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (str.to_re "I"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "U") (str.to_re "M")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "U") (str.to_re "M"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "U") (str.to_re "M"))
                     (re.++ (re.++ (str.to_re "I") a!5) a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "I") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "I") a!2) a!7))))
  (str.in_re varout (re.union a!2 (re.++ (re.++ a!5 a!5) a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)
