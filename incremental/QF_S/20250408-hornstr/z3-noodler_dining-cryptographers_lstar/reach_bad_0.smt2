(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "k"))
                               (str.to_re "0"))
                     (str.to_re "f"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "h")) (str.to_re "c"))
                     (str.to_re "i"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "g")) (str.to_re "e"))
                     (str.to_re "l"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "j")) (str.to_re "a"))
                     (str.to_re "d"))))
  (str.in_re X (re.* (re.union a!4 (str.to_re "b")))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "d") (str.to_re "b"))
                  (re.* (re.union (str.to_re "d") (str.to_re "b")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                  (re.union (str.to_re "f") (str.to_re "h"))))
      (a!6 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                  (re.union (str.to_re "c") (str.to_re "a"))))
      (a!13 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                   (re.union (str.to_re "g") (str.to_re "e")))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                     (re.++ (re.union (str.to_re "d") (str.to_re "b")) a!3)))
      (a!7 (re.union (re.union (str.to_re "c") (str.to_re "a"))
                     (re.++ (re.union (str.to_re "d") (str.to_re "b")) a!6)))
      (a!14 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                      (re.++ (re.union (str.to_re "d") (str.to_re "b")) a!13))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b"))) a!4))
      (a!8 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b"))) a!7))
      (a!15 (re.++ (re.* (re.union (str.to_re "d") (str.to_re "b"))) a!14)))
(let ((a!9 (re.union (re.union (str.to_re "d") (str.to_re "b"))
                     (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!8)))
      (a!10 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                      (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!5)))
      (a!16 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                      (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!15)))
      (a!23 (re.union (re.++ (str.to_re "1") a!15)
                      (re.++ (re.++ (str.to_re "1") a!8) a!5))))
(let ((a!11 (re.union a!10 (re.++ a!9 (re.++ (re.* a!9) a!10))))
      (a!17 (re.union a!16 (re.++ a!9 (re.++ (re.* a!9) a!16))))
      (a!19 (re.++ (re.* a!9)
                   (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!2)))
      (a!24 (re.union a!23 (re.++ (re.++ (str.to_re "1") a!5) a!8)))
      (a!27 (re.union (re.++ a!10 a!2)
                      (re.++ a!9 (re.++ (re.* a!9) (re.++ a!10 a!2)))))
      (a!30 (re.++ a!9 (re.++ (re.* a!9) (re.union a!16 (re.++ a!10 a!8))))))
(let ((a!12 (re.union (re.++ (str.to_re "0") a!5)
                      (re.++ (re.++ (str.to_re "0") a!8)
                             (re.++ (re.* a!9) a!11))))
      (a!18 (re.union (re.++ (str.to_re "0") a!15)
                      (re.++ (re.++ (str.to_re "0") a!8)
                             (re.++ (re.* a!9) a!17))))
      (a!20 (re.union (re.++ (re.union (str.to_re "c") (str.to_re "a")) a!2)
                      (re.++ a!9 a!19)))
      (a!28 (re.++ (re.++ (re.++ (str.to_re "1") a!8) a!8)
                   (re.++ (re.* a!9) a!27)))
      (a!29 (re.union (re.++ (re.++ (str.to_re "1") a!8) a!15) (re.++ a!24 a!8)))
      (a!31 (re.++ (re.* a!9) (re.union (re.union a!16 (re.++ a!10 a!8)) a!30))))
(let ((a!21 (re.union (re.union (re.++ (str.to_re "1") a!2) (re.++ a!12 a!2))
                      (re.++ (re.union a!18 (re.++ a!12 a!8))
                             (re.++ (re.* a!9) a!20))))
      (a!26 (re.++ (re.++ (re.++ (str.to_re "0") a!8) a!8)
                   (re.++ (re.* a!9) a!20)))
      (a!32 (re.++ (re.++ (re.++ (str.to_re "1") a!8) a!8) a!31)))
(let ((a!22 (re.union a!21 (re.++ (re.++ (str.to_re "0") a!8) a!2))))
(let ((a!25 (re.union (re.union a!22 (re.++ a!24 a!2))
                      (re.++ (re.++ (str.to_re "1") a!8)
                             (re.++ (re.* a!9) a!20)))))
(let ((a!33 (re.union (re.union (re.union a!25 a!26) a!28)
                      (re.++ (re.union a!29 a!32) (re.++ (re.* a!9) a!20)))))
  (and (str.in_re X a!33) true))))))))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "k"))
                               (str.to_re "0"))
                     (str.to_re "f"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "h")) (str.to_re "c"))
                     (str.to_re "i"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "g")) (str.to_re "e"))
                     (str.to_re "l"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "j")) (str.to_re "a"))
                     (str.to_re "d"))))
  (str.in_re X (re.union a!4 (str.to_re "b"))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "k"))
                               (str.to_re "0"))
                     (str.to_re "f"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "h")) (str.to_re "c"))
                     (str.to_re "i"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "g")) (str.to_re "e"))
                     (str.to_re "l"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "j")) (str.to_re "a"))
                     (str.to_re "d"))))
  (str.in_re X
             (re.++ (re.union a!4 (str.to_re "b"))
                    (re.union a!4 (str.to_re "b")))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0a"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0c"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0f"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0h"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1e"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1g"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1b"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1d"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "k"))
                               (str.to_re "0"))
                     (str.to_re "f"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "h")) (str.to_re "c"))
                     (str.to_re "i"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "g")) (str.to_re "e"))
                     (str.to_re "l"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "j")) (str.to_re "a"))
                     (str.to_re "d"))))
(let ((a!5 (re.++ (re.++ (re.union a!4 (str.to_re "b"))
                         (re.union a!4 (str.to_re "b")))
                  (re.union a!4 (str.to_re "b")))))
(let ((a!6 (re.++ (re.++ a!5 (re.union a!4 (str.to_re "b")))
                  (re.union a!4 (str.to_re "b")))))
  (str.in_re X a!6))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aaab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0baaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0caab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0daaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bcaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dcaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0baca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0daca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bcca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dcca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0baac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0daac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bcac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dcac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bacc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dacc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aaba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0caba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aacb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cacb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0accb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cccb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aada"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cada"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aabc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cabc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aadc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cadc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aaad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0caad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aacd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cacd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0accd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cccd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aeaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ceaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0agaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cgaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aeca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ceca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0agca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cgca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aeac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ceac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0agac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cgac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aecc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cecc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0agcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cgcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0faab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0haab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fbaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hbaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fcab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hcab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fdaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hdaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fbca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hbca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fdca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hdca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fbac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hbac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fdac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hdac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fbcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hbcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fdcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hdcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0faba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0haba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fcba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hcba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0facb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hacb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fccb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hccb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fada"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hada"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fcda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hcda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fabc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0habc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fcbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hcbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fadc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hadc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fcdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hcdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0faad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0haad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fcad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hcad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0facd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hacd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0fccd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0hccd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bfaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dfaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bhaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dhaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bfca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dfca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bhca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dhca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bfac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dfac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bhac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dhac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bfcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dfcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bhcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dhcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bafa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dafa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bcfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dcfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0baha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0daha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bcha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dcha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bafc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dafc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bcfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dcfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bahc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dahc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bchc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dchc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0afcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cfcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ahcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0chcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0abhc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cbhc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0adhc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cdhc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aaea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0caea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aaga"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0caga"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acga"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccga"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aaec"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0caec"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acec"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccec"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0aagc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0cagc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0acgc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ccgc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eaaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gaaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eddc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gddc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ebcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gbcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0edcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gdcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eabb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gabb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecbb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcbb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eadb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gadb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecdb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcdb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eabd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gabd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecbd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcbd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eadd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gadd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecdd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcdd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eaca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gaca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eaac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gaac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ecac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gcac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eacc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gacc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0eccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0gccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bbea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dbea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bdea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ddea"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0beab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0deab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bgab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dgab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0beba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0deba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bgba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dgba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0becb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0decb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bgcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dgcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0beda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0deda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bgda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dgda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bebc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0debc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bgbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dgbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bedc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dedc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bgdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dgdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0bead"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0dead"))
(set-info :status unknown)
(check-sat)
(set-info :status unknown)
(check-sat)
(exit)
