(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Oliver Markgraf, Hongjian Jiang, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-08
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "L") (str.to_re "R"))
                           (str.to_re "T")))))
  (str.in_re X a!1)))
(assert (let ((a!1 (re.++ (re.* (re.++ (str.to_re "R") (str.to_re "R")))
                  (str.to_re "R")))
      (a!4 (re.++ (re.* (re.++ (str.to_re "R") (str.to_re "R")))
                  (re.++ (str.to_re "R") (str.to_re "L")))))
(let ((a!2 (re.union (str.to_re "R")
                     (re.++ (re.++ (str.to_re "R") (str.to_re "R")) a!1)))
      (a!5 (re.union (re.++ (str.to_re "R") (str.to_re "L"))
                     (re.++ (re.++ (str.to_re "R") (str.to_re "R")) a!4))))
(let ((a!3 (re.++ (re.* (re.++ (str.to_re "R") (str.to_re "R"))) a!2))
      (a!6 (re.++ (re.* (re.++ (str.to_re "R") (str.to_re "R"))) a!5)))
(let ((a!7 (re.union (re.++ (str.to_re "L") (str.to_re "L"))
                     (re.++ (re.++ (str.to_re "L") (str.to_re "R")) a!6)))
      (a!8 (re.union (str.to_re "L")
                     (re.++ (re.++ (str.to_re "L") (str.to_re "R")) a!3))))
(let ((a!9 (re.union a!8 (re.++ a!7 (re.++ (re.* a!7) a!8)))))
(let ((a!10 (re.++ (re.union (str.to_re "L") (re.++ (str.to_re "R") a!6))
                   (re.++ (re.* a!7) a!9))))
(let ((a!11 (re.union (re.union (str.to_re "") (re.++ (str.to_re "R") a!3))
                      a!10)))
  (and (str.in_re X a!11) true)))))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(assert (distinct X ""))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.union (re.union (str.to_re "L") (str.to_re "T")) (str.to_re "R"))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "L") (str.to_re "T"))
                            (str.to_re "R"))
                  (re.union (re.union (str.to_re "L") (str.to_re "T"))
                            (str.to_re "R")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(assert (distinct X "RR"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "LL"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "L") (str.to_re "T"))
                            (str.to_re "R"))
                  (re.union (re.union (str.to_re "L") (str.to_re "T"))
                            (str.to_re "R")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "L") (str.to_re "T"))
                            (str.to_re "R")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(exit)
