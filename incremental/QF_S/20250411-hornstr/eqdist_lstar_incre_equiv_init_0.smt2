(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "rn") (re.* (str.to_re "nn")))
                  (str.to_re "b"))))
  (and (str.in_re X a!1) (not isin) (= X varout) isout)))
(push 1)
(assert (str.in_re varout re.none))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re varout re.none))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "r") (str.to_re "n")))
                  (str.to_re "b"))))
(let ((a!2 (re.union (str.to_re "b")
                     (re.++ (re.union (str.to_re "r") (str.to_re "n")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "r") (str.to_re "n"))) a!2)))
(let ((a!4 (re.* (re.++ (re.union (str.to_re "r") (str.to_re "b")) a!3)))
      (a!11 (re.++ (re.union (re.union (str.to_re "r") (str.to_re "n"))
                             (str.to_re "b"))
                   a!3)))
(let ((a!5 (re.++ (re.++ (re.union (str.to_re "r") (str.to_re "b")) a!3)
                  (re.++ a!4 (str.to_re "n")))))
(let ((a!6 (re.++ a!3 (re.++ a!4 (re.union (str.to_re "n") a!5))))
      (a!7 (re.++ (re.++ (str.to_re "b") a!3)
                  (re.++ a!4 (re.union (str.to_re "n") a!5))))
      (a!12 (re.++ a!11 (re.++ a!4 (re.union (str.to_re "n") a!5)))))
(let ((a!8 (re.++ (re.* (re.union (str.to_re "n") a!7)) (str.to_re "r"))))
(let ((a!9 (re.union (str.to_re "r") (re.++ (re.union (str.to_re "n") a!7) a!8))))
(let ((a!10 (re.++ (re.* (re.union (str.to_re "n") a!7)) a!9)))
(let ((a!13 (re.union (str.to_re "")
                      (re.++ (re.++ a!12 a!10) (re.* (re.++ a!12 a!10))))))
(let ((a!14 (re.++ (re.++ a!6 a!10) (re.++ (re.* (re.++ a!12 a!10)) a!13))))
  (str.in_re varout a!14)))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout (re.union a!2 (re.++ a!3 (str.to_re "n")))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout (re.union a!2 (re.++ a!3 (str.to_re "n")))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
  (str.in_re varout (re.union a!2 (re.++ a!3 (str.to_re "n")))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout a!5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout a!5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r")))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout a!5)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b"))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout (re.union a!5 a!8))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b"))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout (re.union a!5 a!8))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b"))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout (re.union a!5 a!8))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout (re.union (re.union a!5 a!8) (re.++ a!10 a!11)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout (re.union (re.union a!5 a!8) (re.++ a!10 a!11)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
  (str.in_re varout (re.union (re.union a!5 a!8) (re.++ a!10 a!11)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout a!13))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout a!13))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout a!13))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b"))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout (re.union a!13 a!16)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b"))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout (re.union a!13 a!16)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b"))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout (re.union a!13 a!16)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b")))
      (a!17 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "n")))
      (a!19 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!18 (re.++ (re.++ a!17 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout (re.union (re.union a!13 a!16) (re.++ a!18 a!19))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b")))
      (a!17 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "n")))
      (a!19 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!18 (re.++ (re.++ a!17 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout (re.union (re.union a!13 a!16) (re.++ a!18 a!19))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b")))
      (a!17 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "n")))
      (a!19 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!18 (re.++ (re.++ a!17 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
  (str.in_re varout (re.union (re.union a!13 a!16) (re.++ a!18 a!19))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "n")
                  (re.++ (re.* (str.to_re "n")) (str.to_re "r"))))
      (a!6 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "b")))
      (a!9 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "n"))
                  (str.to_re "n")))
      (a!11 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n")
                          (re.++ (str.to_re "n") (str.to_re "n"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "b") (str.to_re "n"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!3 (re.++ (re.++ (str.to_re "n") (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!4 (re.++ (re.++ (re.++ (str.to_re "n") (str.to_re "n"))
                         (str.to_re "b"))
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!7 (re.++ a!6
                  (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!10 (re.++ (re.++ a!9 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!12 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!14 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "b")))
      (a!17 (re.++ (re.++ (re.++ a!9 (str.to_re "n")) (str.to_re "n"))
                   (str.to_re "n")))
      (a!19 (re.++ (str.to_re "n")
                   (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
(let ((a!5 (re.union (re.union a!2 (re.++ a!3 (str.to_re "n")))
                     (re.++ a!4 (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!8 (re.++ a!7
                  (re.++ (str.to_re "n")
                         (re.++ (str.to_re "n") (str.to_re "n")))))
      (a!15 (re.++ a!14
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!18 (re.++ (re.++ a!17 (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1))))
      (a!20 (re.++ (re.++ (re.++ a!17 (str.to_re "n")) (str.to_re "b"))
                   (re.++ (re.* (str.to_re "n")) (re.union (str.to_re "r") a!1)))))
(let ((a!13 (re.union (re.union (re.union a!5 a!8) (re.++ a!10 a!11))
                      (re.++ a!12 (re.++ (str.to_re "n") a!11))))
      (a!16 (re.++ a!15 (re.++ (str.to_re "n") (re.++ (str.to_re "n") a!11)))))
(let ((a!21 (re.union (re.union (re.union a!13 a!16) (re.++ a!18 a!19))
                      (re.++ a!20 (re.++ (str.to_re "n") a!19)))))
  (str.in_re varout a!21)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
