(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "e"))
                               (str.to_re "i"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "j"))
                     (str.to_re "a"))))
  (str.in_re X (re.* (re.union a!4 (str.to_re "b")))))))))
(assert (let ((a!1 (re.++ (re.union (str.to_re "b") (str.to_re "d"))
                  (re.* (re.union (str.to_re "b") (str.to_re "d")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                  (re.union (str.to_re "g") (str.to_re "e"))))
      (a!7 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                  (re.union (str.to_re "a") (str.to_re "c"))))
      (a!14 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                   (re.union (str.to_re "f") (str.to_re "h")))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                     (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!3)))
      (a!8 (re.union (re.union (str.to_re "a") (str.to_re "c"))
                     (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!7)))
      (a!15 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                      (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!14))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!4))
      (a!9 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!8))
      (a!10 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                   (re.++ (re.union (str.to_re "f") (str.to_re "h")) a!2)))
      (a!16 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!15))
      (a!17 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                   (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!2))))
(let ((a!6 (re.union (re.++ (str.to_re "1") a!2)
                     (re.++ (re.++ (str.to_re "1") a!5) a!2)))
      (a!11 (re.union (re.++ (re.union (str.to_re "f") (str.to_re "h")) a!2)
                      (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!10)))
      (a!18 (re.union (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!2)
                      (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!17)))
      (a!21 (re.union (re.union (str.to_re "b") (str.to_re "d"))
                      (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!9)))
      (a!25 (re.union (re.++ (str.to_re "0") a!16)
                      (re.++ (re.++ (str.to_re "0") a!5) a!9)))
      (a!26 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                      (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!16)))
      (a!27 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                      (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!5)))
      (a!33 (re.union (re.union (str.to_re "g") (str.to_re "e"))
                      (re.++ (re.union (str.to_re "f") (str.to_re "h")) a!9)))
      (a!38 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d")))
                   (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!9)))
      (a!44 (re.union (re.union (str.to_re "f") (str.to_re "h"))
                      (re.++ (re.union (str.to_re "g") (str.to_re "e")) a!9))))
(let ((a!12 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!11))
      (a!19 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!18))
      (a!22 (re.++ (re.* a!21)
                   (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!2)))
      (a!28 (re.++ a!21 (re.++ (re.* a!21) (re.union a!26 (re.++ a!27 a!9)))))
      (a!31 (re.++ (re.* a!21)
                   (re.union (str.to_re "") (re.++ a!21 (re.* a!21)))))
      (a!34 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!33))
      (a!39 (re.union (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!9)
                      (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!38))))
(let ((a!13 (re.union a!6 (re.++ (re.++ (str.to_re "1") a!9) a!12)))
      (a!23 (re.union (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!2)
                      (re.++ a!21 a!22)))
      (a!29 (re.++ (re.* a!21) (re.union (re.union a!26 (re.++ a!27 a!9)) a!28)))
      (a!35 (re.union a!33
                      (re.++ (re.union (str.to_re "b") (str.to_re "d")) a!34)))
      (a!40 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!39))
      (a!43 (re.union (re.++ (re.union (str.to_re "g") (str.to_re "e")) a!2)
                      (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!12))))
(let ((a!20 (re.union a!13 (re.++ (re.++ (str.to_re "1") a!16) a!19)))
      (a!30 (re.union a!25 (re.++ (re.++ (str.to_re "0") a!9) a!29)))
      (a!36 (re.++ (re.* (re.union (str.to_re "b") (str.to_re "d"))) a!35))
      (a!49 (re.++ (re.++ (re.++ (str.to_re "0") a!9) a!9)
                   (re.++ (re.* a!21) a!23))))
(let ((a!24 (re.union a!20
                      (re.++ (re.++ (str.to_re "1") a!9)
                             (re.++ (re.* a!21) a!23))))
      (a!37 (re.union (re.++ (re.++ (str.to_re "1") a!5) a!9)
                      (re.++ (re.++ (str.to_re "1") a!9) a!36)))
      (a!45 (re.union a!44
                      (re.++ (re.union (str.to_re "a") (str.to_re "c")) a!36))))
(let ((a!32 (re.union (re.union a!24 (re.++ a!30 a!31))
                      (re.++ (re.++ (str.to_re "0") a!9) a!2)))
      (a!41 (re.union a!37 (re.++ (re.++ (str.to_re "1") a!16) a!40)))
      (a!46 (re.union a!43 (re.++ a!45 (re.++ (re.* a!21) a!23)))))
(let ((a!42 (re.union a!32 (re.++ a!41 (re.++ (re.* a!21) a!23))))
      (a!47 (re.union a!46 (re.++ a!21 (re.++ (re.* a!21) a!46)))))
(let ((a!48 (re.++ (re.++ (re.++ (str.to_re "1") a!9) a!9)
                   (re.++ (re.* a!21) a!47))))
  (and (str.in_re X (re.union (re.union a!42 a!48) a!49)) true)))))))))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "i"))
                               (str.to_re "h"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "e"))
                     (str.to_re "a"))))
  (str.in_re X (re.union a!4 (str.to_re "b"))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "i"))
                               (str.to_re "h"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "e"))
                     (str.to_re "a"))))
  (str.in_re X
             (re.++ (re.union a!4 (str.to_re "b"))
                    (re.union a!4 (str.to_re "b")))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1e"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1g"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1b"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1d"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0f"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0h"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0a"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0c"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "i"))
                               (str.to_re "h"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "e"))
                     (str.to_re "a"))))
(let ((a!5 (re.++ (re.++ (re.union a!4 (str.to_re "b"))
                         (re.union a!4 (str.to_re "b")))
                  (re.union a!4 (str.to_re "b")))))
(let ((a!6 (re.++ (re.++ a!5 (re.union a!4 (str.to_re "b")))
                  (re.union a!4 (str.to_re "b")))))
  (str.in_re X a!6))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aaaf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1baae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1caaf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1daae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1bcae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1dcae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1bace"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1dace"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1bcce"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1dcce"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1baag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1daag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1bcag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1dcag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1bacg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1dacg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1bccg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1dccg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1abae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cbae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acaf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccaf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1adae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cdae"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1abce"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cbce"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1adce"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cdce"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1abag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cbag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1adag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cdag"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1abcg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cbcg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1adcg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cdcg"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aabe"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cabe"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acbe"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccbe"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aacf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cacf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1accf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cccf"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aade"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cade"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acde"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccde"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aaeb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1caeb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aceb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cceb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aafa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cafa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccfa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aagb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cagb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acgb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccgb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aaha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1caha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccha"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aafc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cafc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1ccfc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aahc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cahc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1achc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cchc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aaed"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1caed"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aced"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cced"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1aagd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1cagd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1acgd"))
(get-model)
(check-sat)
(exit)
