(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun Y () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re Y a!1)))
(declare-fun X () String)
(declare-fun A () String)
(declare-fun B () String)
(declare-fun C () String)
(assert (and true
     (= X (str.++ A "nb" B "rn" C))
     (= Y (str.++ A "bn" B "nr" C))
     (str.in_re A (re.* (str.to_re "n")))
     (str.in_re B (re.* (str.to_re "n")))
     (str.in_re C (re.* (str.to_re "n")))))
(push 1)
(assert (= X "rnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnrnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnrnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnrnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnrnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnrnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnrnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnnnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnrnnnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnrnnnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnrnnnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnnrnbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnnnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnnnnnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnrnnnnnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnrnnnnnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnrnnnnnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnnrnnnbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnnnrnbnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "rnnnnnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nrnnnnnnnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnrnnnnnnnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnrnnnnnnnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnrnnnnnnnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnrnnnnnnnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnrnnnnnnnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnnrnnnnnbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnnnrnnnbnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "nnnnnnnnnrnbnnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
