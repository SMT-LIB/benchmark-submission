(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "F") (str.to_re "B"))
                               (str.to_re "D"))
                     (str.to_re "A"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "E")) (str.to_re "C")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "F") (str.to_re "B"))
                               (str.to_re "D"))
                     (str.to_re "A"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "E")) (str.to_re "C")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun reg1 () String)
(declare-fun Y () String)
(declare-fun reg0 () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "A"))
                               (str.to_re "C"))
                     (str.to_re "D"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "E")) (str.to_re "F")))))
  (and true
       (= X reg1)
       (= Y reg1)
       (str.in_re reg0 a!2)
       (str.in_re reg1 a!2)
       (= X varin)
       isin
       (= Y varout)
       isout))))
(push 1)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "B") (str.to_re "D"))
                           (str.to_re "A")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "B") (str.to_re "D"))
                            (str.to_re "A"))
                  a!1)))
  (str.in_re varin (re.++ a!1 (re.union (str.to_re "") a!2))))))
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "B") (str.to_re "D"))
                           (str.to_re "A"))))
      (a!5 (re.union (re.union (re.union (str.to_re "F") (str.to_re "B"))
                               (str.to_re "D"))
                     (str.to_re "A"))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "F") (str.to_re "E"))
                            (str.to_re "C"))))
      (a!6 (re.* (re.union (re.union a!5 (str.to_re "E")) (str.to_re "C")))))
(let ((a!3 (re.++ (re.union (re.union (str.to_re "B") (str.to_re "D"))
                            (str.to_re "A"))
                  a!2))
      (a!7 (re.++ (re.union (re.union a!5 (str.to_re "E")) (str.to_re "C")) a!6)))
(let ((a!4 (re.union (re.union (re.union (str.to_re "F") (str.to_re "E"))
                               (str.to_re "C"))
                     a!3)))
(let ((a!8 (re.++ (re.++ a!1 a!4) (re.++ a!6 (re.union (str.to_re "") a!7)))))
  (str.in_re varout a!8)))))))
(set-info :status unknown)
(check-sat)
