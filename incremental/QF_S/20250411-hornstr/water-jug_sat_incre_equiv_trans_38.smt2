(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "Z") (str.to_re "b"))
                               (str.to_re "f"))
                     (str.to_re "e"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "c")) (str.to_re "a"))
                     (str.to_re "d"))))
  (str.in_re varout (re.* a!2)))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "Z") (str.to_re "b"))
                               (str.to_re "f"))
                     (str.to_re "e"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "c")) (str.to_re "a"))
                     (str.to_re "d"))))
  (str.in_re varin (re.* a!2)))))
(declare-fun X () String)
(declare-fun reg0 () String)
(declare-fun Y () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "d") (str.to_re "c"))
                               (str.to_re "f"))
                     (str.to_re "f"))))
  (and true
       (= X reg0)
       (= Y reg0)
       (str.in_re reg0 (re.* a!1))
       (= X varin)
       isin
       (= Y varout)
       isout)))
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "f"))
                               (str.to_re "e"))
                     (str.to_re "c")))
      (a!4 (re.union (re.union (re.union (str.to_re "Z") (str.to_re "f"))
                               (str.to_re "c"))
                     (str.to_re "a"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "a")) (str.to_re "d")))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "a")) (str.to_re "d"))
                  (re.++ a!2 (str.to_re "Z")))))
(let ((a!5 (re.++ (re.union a!4 (str.to_re "d"))
                  (re.++ a!2 (re.union (str.to_re "Z") a!3)))))
(let ((a!6 (re.* (re.union (re.union (str.to_re "b") (str.to_re "e")) a!5))))
(let ((a!7 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "e")) a!5) a!6)))
(let ((a!8 (re.++ (re.++ a!2 (re.union (str.to_re "Z") a!3))
                  (re.++ a!6 (re.union (str.to_re "") a!7)))))
  (str.in_re varin a!8)))))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "f"))
                               (str.to_re "e"))
                     (str.to_re "c")))
      (a!5 (re.union (re.union (re.union (str.to_re "Z") (str.to_re "f"))
                               (str.to_re "c"))
                     (str.to_re "a"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "a")) (str.to_re "d")))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "a")) (str.to_re "d")) a!2))
      (a!4 (re.++ (re.union (re.union a!1 (str.to_re "a")) (str.to_re "d"))
                  (re.++ a!2 (str.to_re "Z")))))
(let ((a!6 (re.++ (re.union a!5 (str.to_re "d"))
                  (re.++ a!2 (re.union (str.to_re "Z") a!4))))
      (a!8 (re.++ (re.union a!5 (str.to_re "d"))
                  (re.++ a!2 (re.union (str.to_re "") a!3)))))
(let ((a!7 (re.* (re.union (re.union (str.to_re "b") (str.to_re "e")) a!6))))
(let ((a!9 (re.++ (re.union (re.union (str.to_re "b") (str.to_re "e")) a!6)
                  (re.++ a!7 a!8))))
(let ((a!10 (re.++ (re.++ a!2 (re.union (str.to_re "Z") a!4))
                   (re.++ a!7 (re.union a!8 a!9)))))
(let ((a!11 (re.union (re.++ a!2 (re.union (str.to_re "") a!3)) a!10)))
  (str.in_re varout a!11))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
