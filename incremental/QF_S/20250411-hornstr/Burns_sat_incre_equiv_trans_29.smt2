(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "5"))
                               (str.to_re "7"))
                     (str.to_re "8"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "6")) (str.to_re "3"))
                     (str.to_re "a"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "9")) (str.to_re "2"))
                     (str.to_re "c"))))
(let ((a!4 (re.* (re.union (re.union a!3 (str.to_re "4")) (str.to_re "b")))))
  (str.in_re varout a!4))))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "5"))
                               (str.to_re "7"))
                     (str.to_re "8"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "6")) (str.to_re "3"))
                     (str.to_re "a"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "9")) (str.to_re "2"))
                     (str.to_re "c"))))
(let ((a!4 (re.* (re.union (re.union a!3 (str.to_re "4")) (str.to_re "b")))))
  (str.in_re varin a!4))))))
(declare-fun X () String)
(declare-fun reg1 () String)
(declare-fun Y () String)
(declare-fun reg0 () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "7") (str.to_re "8"))
                               (str.to_re "9"))
                     (str.to_re "a")))
      (a!4 (re.union (re.union (re.union (str.to_re "1") (str.to_re "2"))
                               (str.to_re "3"))
                     (str.to_re "4"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "b")) (str.to_re "1"))
                     (str.to_re "2")))
      (a!5 (str.in_re reg1 (re.* (re.union a!4 (str.to_re "5"))))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "3")) (str.to_re "4"))
                     (str.to_re "5"))))
  (and true
       (= X reg1)
       (= Y reg1)
       (str.in_re reg0 (re.* a!3))
       a!5
       (= X varin)
       isin
       (= Y varout)
       isout)))))
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "7"))
                               (str.to_re "8"))
                     (str.to_re "3"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "4")) (str.to_re "b")))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "4")) (str.to_re "b")) a!2)))
  (str.in_re varin (re.++ a!2 (re.union (str.to_re "") a!3)))))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "1") (str.to_re "7"))
                               (str.to_re "8"))
                     (str.to_re "3")))
      (a!3 (re.union (re.union (re.union (str.to_re "5") (str.to_re "6"))
                               (str.to_re "a"))
                     (str.to_re "9")))
      (a!7 (re.union (re.union (re.union (str.to_re "1") (str.to_re "5"))
                               (str.to_re "7"))
                     (str.to_re "8"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "4")) (str.to_re "b"))))
      (a!8 (re.union (re.union (re.union a!7 (str.to_re "6")) (str.to_re "3"))
                     (str.to_re "a"))))
(let ((a!4 (re.++ a!2 (re.union (re.union a!3 (str.to_re "2")) (str.to_re "c"))))
      (a!9 (re.union (re.union (re.union a!8 (str.to_re "9")) (str.to_re "2"))
                     (str.to_re "c"))))
(let ((a!5 (re.++ (re.union (re.union a!1 (str.to_re "4")) (str.to_re "b")) a!4))
      (a!10 (re.* (re.union (re.union a!9 (str.to_re "4")) (str.to_re "b")))))
(let ((a!6 (re.union (re.union (re.union a!3 (str.to_re "2")) (str.to_re "c"))
                     a!5))
      (a!11 (re.++ (re.union (re.union a!9 (str.to_re "4")) (str.to_re "b"))
                   a!10)))
(let ((a!12 (re.++ (re.++ a!2 a!6) (re.++ a!10 (re.union (str.to_re "") a!11)))))
  (str.in_re varout a!12))))))))
(set-info :status unknown)
(check-sat)
