(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "0") (str.to_re "1"))
                           (str.to_re "2")))))
  (str.in_re X a!1)))
(assert (let ((a!1 (re.* (re.union (str.to_re "0")
                           (re.++ (str.to_re "1") (str.to_re "1")))))
      (a!4 (re.union (str.to_re "")
                     (re.++ (str.to_re "1") (re.* (str.to_re "1")))))
      (a!6 (re.union (str.to_re "")
                     (re.++ (str.to_re "0") (re.* (str.to_re "0"))))))
(let ((a!2 (re.++ (re.union (str.to_re "0")
                            (re.++ (str.to_re "1") (str.to_re "1")))
                  (re.++ a!1 (str.to_re "2")))))
(let ((a!3 (re.++ (str.to_re "1") (re.++ a!1 (re.union (str.to_re "2") a!2)))))
(let ((a!5 (re.++ a!3 (re.++ (re.* (str.to_re "1")) a!4))))
(let ((a!7 (re.++ a!5 (re.++ (re.* (str.to_re "0")) a!6))))
  (str.in_re X (re.union a!5 a!7))))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.union (re.union (str.to_re "0") (str.to_re "1")) (str.to_re "2"))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2"))
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "102"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "120"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "121"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2"))
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(assert (distinct X "12"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2"))
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1002"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1112"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1200"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1210"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1211"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1020"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1021"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2"))
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "0") (str.to_re "1"))
                            (str.to_re "2")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10002"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "11102"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "12000"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "12100"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "12110"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "12111"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "11120"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "11121"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10112"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10200"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10210"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10211"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10020"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "10021"))
(set-info :status unknown)
(check-sat)
(pop 1)
