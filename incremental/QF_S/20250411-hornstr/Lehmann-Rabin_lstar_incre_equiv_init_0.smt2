(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.++ (re.++ (str.to_re "H")
                         (re.union (str.to_re "b") (str.to_re "H")))
                  (re.union (str.to_re "c") (str.to_re "H"))))
      (a!2 (re.union (str.to_re "")
                     (re.++ (str.to_re "H") (re.* (str.to_re "H"))))))
(let ((a!3 (re.++ a!1 (re.++ (re.* (str.to_re "H")) a!2))))
  (and (str.in_re X a!3) (not isin) (= X varout) isout))))
(push 1)
(assert (str.in_re varout re.none))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.* (re.union a!1 (str.to_re "d"))) (str.to_re "E")))
      (a!8 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!3 (re.union (str.to_re "E") (re.++ (re.union a!1 (str.to_re "d")) a!2)))
      (a!9 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")) a!8)))
(let ((a!4 (re.++ (re.* (re.union a!1 (str.to_re "d"))) a!3)))
(let ((a!5 (re.* (re.++ (re.union a!1 (str.to_re "d")) a!4))))
(let ((a!6 (re.++ (re.++ (re.union a!1 (str.to_re "d")) a!4)
                  (re.++ a!5 (str.to_re "E")))))
(let ((a!7 (re.++ a!4 (re.++ a!5 (re.union (str.to_re "E") a!6)))))
(let ((a!10 (re.++ a!7 (re.++ a!8 (re.union (str.to_re "") a!9)))))
  (str.in_re varout a!10))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
