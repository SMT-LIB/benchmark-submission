(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re X a!1)))
(declare-fun A () String)
(declare-fun B () String)
(declare-fun Y () String)
(assert (and true
     (= X (str.++ A "rb" B))
     (= Y (str.++ A "br" B))
     (str.in_re A (re.* (str.to_re "n")))
     (str.in_re B (re.* (str.to_re "n")))))
(push 1)
(assert (= Y "bnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbrn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nrbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbrnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnrbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbrnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnrbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbrnnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnnrbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnrbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbrnnnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnnnrbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnrbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnrnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbrnnnnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnnnnrbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnrbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnrnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnrnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnbrnnnnnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnnnnnrbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnrbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnrnnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnrnnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnrnnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrnnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnnnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnbnrnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnnnnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnbnnrnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnbrnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnnnnnnrbnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnrbnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnrnnbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnrnnnnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnrnnnnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnrnnnnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrnnnnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnnnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnnnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnnnnnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnbnnnrnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnbnrnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnnnnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnnnnnnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnbnnnnrnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnbnnrnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnnbrnnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnnnnnnnrbnnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnnrbnnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnrnnbnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnrnnnnbnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnrnnnnnnbnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnrnnnnnnnnbnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnrnnnnnnnnnnbnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnrnnnnnnnnnnnnbnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnrnnnnnnnnnnnnnnbnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nrnnnnnnnnnnnnnnnnbn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "rnnnnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "bnnnnnnnnnnnnnnnnnnnr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nbnnnnnnnnnnnnnnnnnrn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnbnnnnnnnnnnnnnnnrnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnbnnnnnnnnnnnnnrnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnbnnnnnnnnnnnrnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnbnnnnnnnnnrnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnbnnnnnnnrnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnbnnnnnrnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnbnnnrnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "nnnnnnnnnbnrnnnnnnnnn"))
(set-info :status unknown)
(check-sat)
(pop 1)
