(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun Y () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "2") (str.to_re "0"))
                           (str.to_re "1")))))
  (str.in_re Y a!1)))
(declare-fun A () String)
(declare-fun B () String)
(declare-fun X () String)
(assert (and true
     (= Y (str.++ A "10" B))
     (= X (str.++ A "01" B))
     (str.in_re A (re.* (str.to_re "0")))
     (str.in_re B (re.* (str.to_re "0")))))
(push 1)
(assert (= X "00"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "01"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "10"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "10"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "100"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "010"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "100"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "001"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "010"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "1000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0100"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "1000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0010"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "0100"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0001"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "0010"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "00000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "10000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "00001"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "00010"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "00100"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "01000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "00010"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "00100"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "01000"))
(set-info :status unknown)
(check-sat)
(assert (distinct Y "10000"))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
