(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!2))))
(assert (let ((a!1 (re.++ (re.++ (str.to_re "H")
                         (re.union (str.to_re "b") (str.to_re "H")))
                  (re.union (str.to_re "c") (str.to_re "H"))))
      (a!2 (re.union (str.to_re "")
                     (re.++ (str.to_re "H") (re.* (str.to_re "H"))))))
(let ((a!3 (re.++ a!1 (re.++ (re.* (str.to_re "H")) a!2))))
  (str.in_re X a!3))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
  (str.in_re X (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E"))
                  (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HHH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HbH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HHc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "Hbc"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E"))
                  (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E"))
                  (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!4 (re.++ a!3 (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HHHH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HbHH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HHcH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HbcH"))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
