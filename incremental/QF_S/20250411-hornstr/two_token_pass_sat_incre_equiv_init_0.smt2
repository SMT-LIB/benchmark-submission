(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (str.in_re X (re.++ (str.to_re "20") (re.* (str.to_re "0"))))))
  (and a!1 (not isin) (= X varout) isout)))
(push 1)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2"))
                  a!1)))
  (str.in_re varout (re.++ a!1 (re.union (str.to_re "") a!2))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re varout re.none))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (str.to_re "1") (str.to_re "0"))
                  (re.* (re.union (str.to_re "1") (str.to_re "0")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0")))
                  (str.to_re "2"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "2")
                     (re.++ (re.union (str.to_re "1") (str.to_re "0")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "1") (str.to_re "0"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "1") (str.to_re "0"))
                     (re.++ (str.to_re "2") a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "2") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "2") a!2) a!7))))
  (str.in_re varout (re.union a!2 (re.++ a!5 a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (str.to_re "1") (str.to_re "2"))
                  (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2")))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "0") a!1))
                  (re.union (str.to_re "1") (str.to_re "2")))))
(let ((a!3 (re.union (re.union (str.to_re "1") (str.to_re "2"))
                     (re.++ (re.union (str.to_re "0") a!1) a!2))))
(let ((a!4 (re.++ (re.* (re.union (str.to_re "0") a!1)) a!3)))
(let ((a!5 (re.++ (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2"))
                  a!4)))
  (str.in_re varout (re.union (str.to_re "") a!5))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "2")))
                  (str.to_re "1"))))
(let ((a!2 (re.union (str.to_re "1")
                     (re.++ (re.union (str.to_re "0") (str.to_re "2")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "2"))) a!2)))
(let ((a!4 (re.union (str.to_re "0")
                     (re.++ (re.union (str.to_re "1") (str.to_re "2")) a!3))))
(let ((a!5 (re.++ (re.* a!4) (re.union (str.to_re "") (re.++ a!4 (re.* a!4))))))
  (str.in_re varout (re.++ a!3 a!5))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "2") (re.* (str.to_re "2")))))
      (a!2 (re.++ (str.to_re "2")
                  (re.++ (re.* (str.to_re "2"))
                         (re.union (str.to_re "1") (str.to_re "0"))))))
(let ((a!3 (re.++ (re.* (str.to_re "2"))
                  (re.union (re.union (str.to_re "1") (str.to_re "0")) a!2)))
      (a!6 (re.++ (re.union (str.to_re "1") (str.to_re "0"))
                  (re.++ (re.* (str.to_re "2")) a!1))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2"))))
      (a!5 (re.++ (re.++ (re.union (str.to_re "1") (str.to_re "0")) a!3)
                  (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2")))))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "2") a!5))
                  (re.union (str.to_re "") a!6))))
(let ((a!8 (re.union (re.union (str.to_re "") a!6)
                     (re.++ (re.union (str.to_re "2") a!5) a!7))))
(let ((a!9 (re.++ (re.* (re.union (str.to_re "2") a!5)) a!8)))
(let ((a!10 (re.union (re.++ (re.* (str.to_re "2")) a!1) (re.++ a!4 a!9))))
  (str.in_re varout a!10)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2"))))
      (a!4 (re.union (re.union (str.to_re "1") (str.to_re "0"))
                     (re.++ (str.to_re "2") (str.to_re "2")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2"))
                  a!1)))
(let ((a!3 (re.++ (re.union (str.to_re "1") (str.to_re "0"))
                  (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!5 (re.++ (re.++ (str.to_re "2")
                         (re.union (str.to_re "1") (str.to_re "0")))
                  (re.++ a!1 (re.union (str.to_re "") a!2)))))
(let ((a!6 (re.++ a!4 (re.++ (re.* a!4) (re.union (str.to_re "2") a!5)))))
(let ((a!7 (re.++ (re.* a!4) (re.union (re.union (str.to_re "2") a!5) a!6))))
  (str.in_re varout
             (re.union (re.union (str.to_re "") a!3)
                       (re.++ (str.to_re "2") a!7)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (str.to_re "1") (str.to_re "0"))
                     (re.++ (str.to_re "2")
                            (re.union (str.to_re "1") (str.to_re "2")))))
      (a!7 (re.* (re.union (re.union (str.to_re "1") (str.to_re "0"))
                           (str.to_re "2")))))
(let ((a!2 (re.union (str.to_re "2")
                     (re.++ a!1 (re.++ (re.* a!1) (str.to_re "2")))))
      (a!4 (re.++ a!1
                  (re.++ (re.* a!1) (re.++ (str.to_re "2") (str.to_re "0")))))
      (a!8 (re.++ (re.union (re.union (str.to_re "1") (str.to_re "0"))
                            (str.to_re "2"))
                  a!7)))
(let ((a!3 (re.union (str.to_re "")
                     (re.++ (re.union (str.to_re "1") (str.to_re "2"))
                            (re.++ (re.* a!1) a!2))))
      (a!5 (re.++ (re.* a!1)
                  (re.union (re.++ (str.to_re "2") (str.to_re "0")) a!4))))
(let ((a!6 (re.union (str.to_re "0")
                     (re.++ (re.union (str.to_re "1") (str.to_re "2")) a!5))))
(let ((a!9 (re.++ a!6 (re.++ a!7 (re.union (str.to_re "") a!8)))))
  (str.in_re varout (re.union a!3 a!9))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "0") (re.* (str.to_re "0")))))
      (a!2 (re.++ (str.to_re "0")
                  (re.++ (re.* (str.to_re "0")) (str.to_re "1"))))
      (a!3 (re.++ (re.union (str.to_re "0") (str.to_re "2"))
                  (re.* (re.union (str.to_re "0") (str.to_re "2")))))
      (a!7 (re.++ (str.to_re "0")
                  (re.++ (re.* (str.to_re "0")) (str.to_re "2"))))
      (a!8 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "2")))
                  (str.to_re "1"))))
(let ((a!4 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "2")))
                  (re.union (str.to_re "") a!3)))
      (a!9 (re.union (str.to_re "1")
                     (re.++ (re.union (str.to_re "0") (str.to_re "2")) a!8)))
      (a!13 (re.++ (str.to_re "2")
                   (re.++ (re.* (str.to_re "0")) (re.union (str.to_re "2") a!7))))
      (a!14 (re.++ (str.to_re "2")
                   (re.++ (re.* (str.to_re "0")) (re.union (str.to_re "1") a!2))))
      (a!16 (re.++ (str.to_re "2") (re.++ (re.* (str.to_re "0")) a!1))))
(let ((a!5 (re.++ (re.++ (re.* (str.to_re "0")) (re.union (str.to_re "1") a!2))
                  a!4))
      (a!10 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "2"))) a!9)))
(let ((a!6 (re.union (re.++ (re.* (str.to_re "0")) a!1) a!5))
      (a!11 (re.++ (re.++ (re.* (str.to_re "0")) (re.union (str.to_re "1") a!2))
                   a!10))
      (a!15 (re.union (re.union (re.union (str.to_re "1") (str.to_re "0")) a!13)
                      (re.++ a!14 a!10))))
(let ((a!12 (re.union (re.++ (re.* (str.to_re "0"))
                             (re.union (str.to_re "2") a!7))
                      a!11))
      (a!17 (re.++ a!15 (re.++ (re.* a!15) (re.union a!16 (re.++ a!14 a!4))))))
(let ((a!18 (re.++ (re.* a!15) (re.union (re.union a!16 (re.++ a!14 a!4)) a!17))))
  (str.in_re varout (re.union a!6 (re.++ a!12 a!18))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(set-info :status unknown)
(check-sat)
(exit)
