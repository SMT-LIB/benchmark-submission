(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "r") (str.to_re "n"))
                           (str.to_re "b")))))
  (str.in_re X a!1)))
(assert (let ((a!1 (re.++ (re.++ (str.to_re "rn") (re.* (str.to_re "nn")))
                  (str.to_re "b"))))
  (str.in_re X a!1)))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.union (re.union (str.to_re "n") (str.to_re "r")) (str.to_re "b"))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!5)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!6))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!7)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!9)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
  (str.in_re X a!8))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!10))))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!11)))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!12))))))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!13)))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!14))))))))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!15 (re.++ a!14
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!15)))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!15 (re.++ a!14
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!16 (re.++ a!15
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!16))))))))))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!15 (re.++ a!14
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!16 (re.++ a!15
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!17 (re.++ a!16
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!17)))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!15 (re.++ a!14
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!16 (re.++ a!15
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!17 (re.++ a!16
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!18 (re.++ a!17
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!18))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!15 (re.++ a!14
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!16 (re.++ a!15
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!17 (re.++ a!16
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!18 (re.++ a!17
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!19 (re.++ a!18
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!19)))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b"))
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!6 (re.++ a!5
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!7 (re.++ a!6
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!8 (re.++ a!7
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!9 (re.++ a!8
                  (re.union (re.union (str.to_re "n") (str.to_re "r"))
                            (str.to_re "b")))))
(let ((a!10 (re.++ a!9
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!11 (re.++ a!10
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!12 (re.++ a!11
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!13 (re.++ a!12
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!14 (re.++ a!13
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!15 (re.++ a!14
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!16 (re.++ a!15
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!17 (re.++ a!16
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!18 (re.++ a!17
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!19 (re.++ a!18
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
(let ((a!20 (re.++ a!19
                   (re.union (re.union (str.to_re "n") (str.to_re "r"))
                             (str.to_re "b")))))
  (str.in_re X a!20))))))))))))))))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "rnnnnnnnnnnnnnnnnnnnb"))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
