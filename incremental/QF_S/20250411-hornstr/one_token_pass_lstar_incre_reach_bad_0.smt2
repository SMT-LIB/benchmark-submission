(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun X () String)
(assert (str.in_re X (re.* (re.union (str.to_re "t") (str.to_re "n")))))
(assert (let ((a!1 (re.++ (re.++ (re.* (str.to_re "n")) (str.to_re "t"))
                  (re.* (str.to_re "n")))))
  (and (not (str.in_re X a!1)) true)))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(assert (distinct X ""))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X (re.union (str.to_re "t") (str.to_re "n"))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "n"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.++ (re.union (str.to_re "t") (str.to_re "n"))
                  (re.union (str.to_re "t") (str.to_re "n")))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tt"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.++ (re.union (str.to_re "t") (str.to_re "n"))
                         (re.union (str.to_re "t") (str.to_re "n")))
                  (re.union (str.to_re "t") (str.to_re "n")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ntt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ttn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ttt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tnt"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.++ (re.union (str.to_re "t") (str.to_re "n"))
                         (re.union (str.to_re "t") (str.to_re "n")))
                  (re.union (str.to_re "t") (str.to_re "n")))))
  (str.in_re X (re.++ a!1 (re.union (str.to_re "t") (str.to_re "n"))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nttn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nttt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ntnt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nntt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "nnnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ttnn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tttn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ttnt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tttt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tntn"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tntt"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "tnnt"))
(set-info :status unknown)
(check-sat)
(pop 1)
