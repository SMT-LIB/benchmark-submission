(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "e"))
                               (str.to_re "i"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "j"))
                     (str.to_re "a"))))
  (str.in_re X (re.* (re.union a!4 (str.to_re "b")))))))))
(declare-fun Y () String)
(declare-fun reg0 () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "d"))
                     (str.to_re "c"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "f")) (str.to_re "e"))
                     (str.to_re "h"))))
(let ((a!3 (str.in_re reg0 (re.* (re.union a!2 (str.to_re "g"))))))
  (and true (= X "j") (= Y "b") a!3)))))
(push 1)
(assert (= Y "1"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "1g"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "0a"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "1d"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "0h"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "0c"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "1e"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "0f"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= Y "1b"))
(set-info :status unknown)
(check-sat)
(pop 1)
