(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!2))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "H"))
                     (str.to_re "b"))))
(let ((a!2 (re.++ (re.* (re.union a!1 (str.to_re "c"))) (str.to_re "E")))
      (a!5 (re.* (re.union (re.union a!1 (str.to_re "c")) (str.to_re "E")))))
(let ((a!3 (re.union (str.to_re "E") (re.++ (re.union a!1 (str.to_re "c")) a!2)))
      (a!6 (re.++ (re.union (re.union a!1 (str.to_re "c")) (str.to_re "E")) a!5)))
(let ((a!4 (re.++ (re.* (re.union a!1 (str.to_re "c"))) a!3)))
(let ((a!7 (re.++ (re.++ a!4 (str.to_re "E"))
                  (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (and (str.in_re X a!7) true)))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
  (str.in_re X (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E"))
                  (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E"))
                  (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EE"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "H"))
                               (str.to_re "b"))
                     (str.to_re "c"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E"))
                  (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
(let ((a!4 (re.++ a!3 (re.union (re.union a!1 (str.to_re "d")) (str.to_re "E")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEHE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEaE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEbE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEcE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEdE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEHH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEaH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEbH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEcH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEdH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEHa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEaa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEba"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEca"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEda"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEHb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEab"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEbb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEcb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEdb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEHc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEac"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEbc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEdc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEEd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEHd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEad"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEbd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEcd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEdd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dHEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "daEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dbEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dcEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ddEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "dEEd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cHEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "caEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cbEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cdEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cEEd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bHEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "baEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bbEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bcEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bdEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "bEEd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HHEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HaEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HbEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HcEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HdEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "HEEd"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aHEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aaEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "abEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "acEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "adEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEEH"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEEa"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEEb"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEEc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "aEEd"))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
