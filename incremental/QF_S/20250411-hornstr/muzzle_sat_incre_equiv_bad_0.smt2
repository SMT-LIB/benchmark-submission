(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varout a!1)))
(declare-fun varin () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
  (str.in_re varin a!1)))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (and (= X "MU") true (= X varin) isin (not isout)))
(push 1)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
(let ((a!2 (re.++ (re.union (re.union (str.to_re "M") (str.to_re "U"))
                            (str.to_re "I"))
                  a!1)))
  (str.in_re varin (re.++ a!1 (re.union (str.to_re "") a!2))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                  (re.* (re.union (str.to_re "M") (str.to_re "I")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I")))
                  (str.to_re "U"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "M") (str.to_re "U"))
                     (re.++ (str.to_re "I") a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "I") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "I") a!2) a!7))))
  (str.in_re varin (re.union a!2 (re.++ a!5 a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                  (re.* (re.union (str.to_re "M") (str.to_re "I")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I")))
                  (str.to_re "U"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I"))) a!4)))
(let ((a!6 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!5))))
(let ((a!7 (re.++ (re.* a!6)
                  (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!2))))
(let ((a!8 (re.union (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!2)
                     (re.++ a!6 a!7))))
(let ((a!9 (re.union a!2 (re.++ a!5 (re.++ (re.* a!6) a!8)))))
  (str.in_re varin a!9)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                  (re.* (re.union (str.to_re "M") (str.to_re "I")))))
      (a!3 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I")))
                  (str.to_re "U"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I")))
                  (re.union (str.to_re "") a!1)))
      (a!4 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I")) a!3))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "I"))) a!4)))
(let ((a!6 (re.union (re.union (str.to_re "M") (str.to_re "I"))
                     (re.++ (str.to_re "U") a!5))))
(let ((a!7 (re.++ a!6 (re.++ (re.* a!6) (re.++ (str.to_re "U") a!2)))))
(let ((a!8 (re.++ (re.* a!6) (re.union (re.++ (str.to_re "U") a!2) a!7))))
  (str.in_re varin (re.union a!2 (re.++ a!5 a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U")))
                  (str.to_re "I"))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U"))) a!2)))
(let ((a!4 (re.union (re.union (str.to_re "M") (str.to_re "U"))
                     (re.++ (str.to_re "I") a!3))))
(let ((a!5 (re.++ (re.* a!4) (re.union (str.to_re "") (re.++ a!4 (re.* a!4))))))
  (str.in_re varin (re.++ a!3 a!5))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U")))
                  (str.to_re "I")))
      (a!4 (re.* (re.union (re.union (str.to_re "M") (str.to_re "U"))
                           (str.to_re "I")))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!1)))
      (a!5 (re.++ (re.union (re.union (str.to_re "M") (str.to_re "U"))
                            (str.to_re "I"))
                  a!4)))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U"))) a!2)))
(let ((a!6 (re.++ a!3 (re.++ a!4 (re.union (str.to_re "") a!5)))))
  (str.in_re varin a!6))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U")))
                  (str.to_re "I"))))
(let ((a!2 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!1))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U"))) a!2)))
(let ((a!4 (re.union (re.union (str.to_re "U") (str.to_re "I"))
                     (re.++ (str.to_re "M") a!3))))
(let ((a!5 (re.++ (re.* a!4) (re.union (str.to_re "") (re.++ a!4 (re.* a!4))))))
  (str.in_re varin (re.++ a!3 a!5))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.* (re.++ (str.to_re "U")
                        (re.union (str.to_re "M") (str.to_re "U")))))
      (a!2 (re.union (re.union (str.to_re "M") (str.to_re "I"))
                     (re.++ (str.to_re "U") (str.to_re "I")))))
(let ((a!3 (re.++ (re.++ (str.to_re "U")
                         (re.union (str.to_re "M") (str.to_re "U")))
                  (re.++ a!1 a!2)))
      (a!5 (re.union (re.union (str.to_re "M") (str.to_re "U"))
                     (re.++ (str.to_re "I") (re.++ a!1 a!2)))))
(let ((a!4 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                            (re.++ a!1 (re.union a!2 a!3)))))
      (a!6 (re.++ (re.* a!5) (re.union (str.to_re "") (re.++ a!5 (re.* a!5))))))
  (str.in_re varin (re.++ a!4 a!6))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U")) (str.to_re "M"))))
      (a!5 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U")) (str.to_re "I")))))
(let ((a!2 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!1))))
      (a!6 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "I") a!5))))
      (a!11 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "I") a!5))))
      (a!12 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!1)))))
(let ((a!3 (re.++ (re.* a!2) (re.union (str.to_re "") (re.++ a!2 (re.* a!2)))))
      (a!7 (re.++ a!2 (re.++ (re.* a!2) (re.union (str.to_re "I") a!6))))
      (a!13 (re.++ (re.union (str.to_re "U") a!12)
                   (re.++ (re.* a!2) (re.union (str.to_re "I") a!6))))
      (a!15 (re.union (str.to_re "")
                      (re.++ (re.union (str.to_re "U") a!12) (re.* a!2)))))
(let ((a!4 (re.++ (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!1))
                  a!3))
      (a!8 (re.++ (re.* a!2) (re.union (re.union (str.to_re "I") a!6) a!7)))
      (a!14 (re.* (re.union (re.union (str.to_re "M") a!11) a!13))))
(let ((a!9 (re.++ (re.++ (re.* (str.to_re "U")) (re.union (str.to_re "M") a!1))
                  a!8))
      (a!16 (re.++ (re.union (re.union (str.to_re "M") a!11) a!13)
                   (re.++ a!14 a!15))))
(let ((a!10 (re.union (re.++ (re.* (str.to_re "U"))
                             (re.union (str.to_re "I") a!5))
                      a!9)))
(let ((a!17 (re.union a!4 (re.++ a!10 (re.++ a!14 (re.union a!15 a!16))))))
  (str.in_re varin a!17)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                  (re.union (str.to_re "M") (str.to_re "I"))))
      (a!3 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U"))
                            (str.to_re "U"))))
      (a!6 (re.union (re.union (str.to_re "M") (str.to_re "U"))
                     (re.++ (str.to_re "I")
                            (re.union (str.to_re "M") (str.to_re "I"))))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1)))))
      (a!4 (re.union a!3 (re.++ a!1 (re.++ (re.* a!1) a!3))))
      (a!7 (re.union (re.++ (str.to_re "I") (str.to_re "U"))
                     (re.++ a!6 (re.++ (re.* a!1) a!3)))))
(let ((a!5 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                            (re.++ (re.* a!1) a!4))))
      (a!8 (re.++ (re.* a!7) (re.union (str.to_re "") (re.++ a!6 (re.* a!1))))))
(let ((a!9 (re.union (re.union (str.to_re "") (re.++ a!6 (re.* a!1)))
                     (re.++ a!7 a!8))))
(let ((a!10 (re.union (re.++ (re.union (str.to_re "M") (str.to_re "I")) a!2)
                      (re.++ a!5 (re.++ (re.* a!7) a!9)))))
  (str.in_re varin a!10)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.* (re.++ (str.to_re "U")
                        (re.union (str.to_re "M") (str.to_re "I")))))
      (a!4 (re.union (re.union (str.to_re "M") (str.to_re "I"))
                     (re.++ (str.to_re "U") (str.to_re "U"))))
      (a!7 (re.union (re.union (str.to_re "M") (str.to_re "U"))
                     (re.++ (str.to_re "I")
                            (re.union (str.to_re "M") (str.to_re "I"))))))
(let ((a!2 (re.++ (re.++ (str.to_re "U")
                         (re.union (str.to_re "M") (str.to_re "I")))
                  a!1))
      (a!5 (re.++ (re.++ (str.to_re "U")
                         (re.union (str.to_re "M") (str.to_re "I")))
                  (re.++ a!1 a!4)))
      (a!8 (re.union (re.++ (str.to_re "I") (str.to_re "U"))
                     (re.++ a!7 (re.++ a!1 a!4)))))
(let ((a!3 (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                  (re.++ a!1 (re.union (str.to_re "") a!2))))
      (a!6 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                            (re.++ a!1 (re.union a!4 a!5)))))
      (a!9 (re.++ a!8
                  (re.++ (re.* a!8) (re.union (str.to_re "") (re.++ a!7 a!1))))))
(let ((a!10 (re.++ (re.* a!8)
                   (re.union (re.union (str.to_re "") (re.++ a!7 a!1)) a!9))))
  (str.in_re varin (re.union a!3 (re.++ a!6 a!10))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.* (re.++ (str.to_re "U")
                        (re.union (str.to_re "M") (str.to_re "I")))))
      (a!2 (re.union (re.union (str.to_re "M") (str.to_re "I"))
                     (re.++ (str.to_re "U") (str.to_re "U"))))
      (a!5 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                            (str.to_re "U")))))
(let ((a!3 (re.++ (re.++ (str.to_re "U")
                         (re.union (str.to_re "M") (str.to_re "I")))
                  (re.++ a!1 a!2))))
(let ((a!4 (re.union (str.to_re "U")
                     (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                            (re.++ a!1 (re.union a!2 a!3)))))
      (a!6 (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                         (re.union (str.to_re "M") (str.to_re "I")))
                  (re.++ a!1 (re.union a!2 a!3)))))
(let ((a!7 (re.union (str.to_re "")
                     (re.++ (re.union a!5 a!6) (re.* (re.union a!5 a!6))))))
(let ((a!8 (re.++ a!4 (re.++ (re.* (re.union a!5 a!6)) a!7))))
  (str.in_re varin a!8)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U"))
                         (re.union (str.to_re "M") (str.to_re "I"))))))
(let ((a!2 (re.++ (re.* (str.to_re "U"))
                  (re.union (re.union (str.to_re "M") (str.to_re "I")) a!1))))
(let ((a!3 (re.++ (re.* (re.++ (str.to_re "U") a!2))
                  (re.union (str.to_re "M") (str.to_re "I")))))
(let ((a!4 (re.union (re.union (str.to_re "M") (str.to_re "I"))
                     (re.++ (re.++ (str.to_re "U") a!2) a!3))))
(let ((a!5 (re.++ (re.* (re.++ (str.to_re "U") a!2)) a!4)))
(let ((a!6 (re.++ (re.++ (re.union (str.to_re "M") (str.to_re "I")) a!2) a!5)))
(let ((a!7 (re.++ (re.union (str.to_re "U") a!6)
                  (re.* (re.union (str.to_re "U") a!6)))))
(let ((a!8 (re.++ (re.* (re.union (str.to_re "U") a!6))
                  (re.union (str.to_re "") a!7))))
  (str.in_re varin (re.++ (re.++ a!2 a!5) a!8)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "U"))))
      (a!2 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "M")))))
(let ((a!3 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))))
      (a!4 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!9 (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!10 (re.++ (re.union (str.to_re "M") (str.to_re "I"))
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2)))))
(let ((a!5 (re.++ (re.* a!3)
                  (re.union (re.union (str.to_re "M") (str.to_re "I")) a!4))))
(let ((a!6 (re.union (re.union (re.union (str.to_re "M") (str.to_re "I")) a!4)
                     (re.++ a!3 a!5))))
(let ((a!7 (re.++ (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))
                  (re.++ (re.* a!3) a!6)))
      (a!11 (re.union (re.union (str.to_re "U") a!9)
                      (re.++ a!10 (re.++ (re.* a!3) a!6)))))
(let ((a!8 (re.union (re.++ (re.* (str.to_re "I"))
                            (re.union (str.to_re "U") a!1))
                     a!7))
      (a!12 (re.++ (re.* a!11)
                   (re.union (str.to_re "") (re.++ a!11 (re.* a!11))))))
  (str.in_re varin (re.++ a!8 a!12)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "U"))))
      (a!2 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "M")))))
(let ((a!3 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))))
      (a!4 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!9 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!10 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2)))))
(let ((a!5 (re.++ (re.* a!3)
                  (re.union (re.union (str.to_re "M") (str.to_re "I")) a!4))))
(let ((a!6 (re.union (re.union (re.union (str.to_re "M") (str.to_re "I")) a!4)
                     (re.++ a!3 a!5)))
      (a!11 (re.union (re.union (str.to_re "U") a!9)
                      (re.++ (re.union (str.to_re "M") a!10) a!5))))
(let ((a!7 (re.++ (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))
                  (re.++ (re.* a!3) a!6)))
      (a!12 (re.++ (re.* a!11)
                   (re.union (str.to_re "") (re.++ a!11 (re.* a!11))))))
(let ((a!8 (re.union (re.++ (re.* (str.to_re "I"))
                            (re.union (str.to_re "U") a!1))
                     a!7)))
  (str.in_re varin (re.++ a!8 a!12)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "U"))))
      (a!2 (re.++ (str.to_re "I")
                  (re.++ (re.* (str.to_re "I")) (str.to_re "M")))))
(let ((a!3 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))))
      (a!4 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!10 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "U") a!1))))
      (a!11 (re.++ (str.to_re "I")
                   (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2)))))
(let ((a!5 (re.++ (re.* (re.union (str.to_re "M") a!3))
                  (re.union (str.to_re "I") a!4))))
(let ((a!6 (re.union (re.union (str.to_re "I") a!4)
                     (re.++ (re.union (str.to_re "M") a!3) a!5))))
(let ((a!7 (re.++ (re.* (re.union (str.to_re "M") a!3)) a!6)))
(let ((a!8 (re.++ (re.++ (re.* (str.to_re "I")) (re.union (str.to_re "M") a!2))
                  a!7))
      (a!12 (re.union (re.union (str.to_re "U") a!10)
                      (re.++ (re.union (str.to_re "M") a!11) a!7))))
(let ((a!9 (re.union (re.++ (re.* (str.to_re "I"))
                            (re.union (str.to_re "U") a!1))
                     a!8))
      (a!13 (re.++ (re.* a!12)
                   (re.union (str.to_re "") (re.++ a!12 (re.* a!12))))))
  (str.in_re varin (re.++ a!9 a!13))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (str.to_re "")
                     (re.++ (str.to_re "U") (re.* (str.to_re "U")))))
      (a!2 (re.++ (str.to_re "U")
                  (re.++ (re.* (str.to_re "U"))
                         (re.union (str.to_re "M") (str.to_re "I")))))
      (a!4 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U")))
                  (str.to_re "I"))))
(let ((a!3 (re.++ (re.* (str.to_re "U"))
                  (re.union (re.union (str.to_re "M") (str.to_re "I")) a!2)))
      (a!5 (re.union (str.to_re "I")
                     (re.++ (re.union (str.to_re "M") (str.to_re "U")) a!4)))
      (a!8 (re.++ (str.to_re "I") (re.++ (re.* (str.to_re "U")) a!1))))
(let ((a!6 (re.++ (re.* (re.union (str.to_re "M") (str.to_re "U"))) a!5)))
(let ((a!7 (re.++ (re.union (str.to_re "M") (re.++ (str.to_re "I") a!3)) a!6)))
(let ((a!9 (re.++ (re.* (re.union (str.to_re "U") a!7))
                  (re.union (str.to_re "") a!8))))
(let ((a!10 (re.union (re.union (str.to_re "") a!8)
                      (re.++ (re.union (str.to_re "U") a!7) a!9))))
(let ((a!11 (re.++ (re.* (re.union (str.to_re "U") a!7)) a!10)))
(let ((a!12 (re.union (re.++ (re.* (str.to_re "U")) a!1)
                      (re.++ (re.++ a!3 a!6) a!11))))
  (str.in_re varin a!12))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
