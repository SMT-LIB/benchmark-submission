(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "i") (str.to_re "r"))
                           (str.to_re "c")))))
  (str.in_re X a!1)))
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r")))
                  (str.to_re "c")))
      (a!5 (re.* (re.union (re.union (str.to_re "c") (str.to_re "i"))
                           (str.to_re "r")))))
(let ((a!2 (re.union (str.to_re "c")
                     (re.++ (re.union (str.to_re "i") (str.to_re "r")) a!1)))
      (a!6 (re.++ (re.union (re.union (str.to_re "c") (str.to_re "i"))
                            (str.to_re "r"))
                  a!5)))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "i") (str.to_re "r"))) a!2)))
(let ((a!4 (re.++ (re.++ (re.union (str.to_re "c") (str.to_re "i")) a!3) a!3)))
(let ((a!7 (re.++ a!4 (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (and (str.in_re X a!7) true)))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.union (re.union (str.to_re "i") (str.to_re "r")) (str.to_re "c"))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c"))
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icc"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c"))
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c"))
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c"))
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "circc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icrci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icicr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icrcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "icccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccrr"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c"))
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!4 (re.++ a!3
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
(let ((a!5 (re.++ a!4
                  (re.union (re.union (str.to_re "i") (str.to_re "r"))
                            (str.to_re "c")))))
  (str.in_re X a!5)))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciiccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "criccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "circcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciiicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "criicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cirrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciicic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cricic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "circic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrcic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciicrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cricrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "circrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrcrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciicci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cricci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "circci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrcci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciiccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "criccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "circcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crrccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicrci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcrci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicicr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcicr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicrcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcrcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cicccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crcccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ciccrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "crccrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciiic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccriic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccirrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccirci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrrci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciicr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccricr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccircr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrrcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cciccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccicrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccrcrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccciii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrii"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccciri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrri"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccicr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrcr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccciir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrir"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ccccrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccirr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "cccrrr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iccccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiiccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iriccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iirccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrccc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiiicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iriicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irricc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irircc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iirrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiicic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iricic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iircic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrcic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiicrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iricrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iircrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrcrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiicci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iricci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iircci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrcci"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiiccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iriccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iirccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irrccr"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircicc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircrcc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iiciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "irciic"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircric"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircirc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircrrc"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "iicici"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ircici"))
(set-info :status unknown)
(check-sat)
(set-info :status unknown)
(check-sat)
(exit)
