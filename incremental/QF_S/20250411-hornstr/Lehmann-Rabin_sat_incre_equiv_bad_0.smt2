(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun varout () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "b"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "H")) (str.to_re "E")))))
  (str.in_re varout a!2))))
(declare-fun varin () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "b"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "H")) (str.to_re "E")))))
  (str.in_re varin a!2))))
(declare-fun X () String)
(declare-fun isin () Bool)
(declare-fun isout () Bool)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "H"))
                     (str.to_re "b"))))
(let ((a!2 (re.++ (re.* (re.union a!1 (str.to_re "c"))) (str.to_re "E")))
      (a!5 (re.* (re.union (re.union a!1 (str.to_re "c")) (str.to_re "E")))))
(let ((a!3 (re.union (str.to_re "E") (re.++ (re.union a!1 (str.to_re "c")) a!2)))
      (a!6 (re.++ (re.union (re.union a!1 (str.to_re "c")) (str.to_re "E")) a!5)))
(let ((a!4 (re.++ (re.* (re.union a!1 (str.to_re "c"))) a!3)))
(let ((a!7 (re.++ (re.++ a!4 (str.to_re "E"))
                  (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (and (str.in_re X a!7) true (= X varin) isin (not isout))))))))
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "b"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "H")) (str.to_re "E")))))
(let ((a!3 (re.++ (re.union (re.union a!1 (str.to_re "H")) (str.to_re "E")) a!2)))
  (str.in_re varin (re.++ a!2 (re.union (str.to_re "") a!3)))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "c") (str.to_re "b"))
                               (str.to_re "H"))
                     (str.to_re "E"))))
(let ((a!2 (re.++ (re.* (re.union (str.to_re "a") (str.to_re "d"))) a!1)))
(let ((a!3 (re.union a!1 (re.++ (re.union (str.to_re "a") (str.to_re "d")) a!2))))
(let ((a!4 (re.++ (re.* (re.union (str.to_re "a") (str.to_re "d"))) a!3)))
(let ((a!5 (re.++ (re.union (re.union (str.to_re "a") (str.to_re "b"))
                            (str.to_re "E"))
                  a!4)))
(let ((a!6 (re.union (re.union (re.union (str.to_re "d") (str.to_re "c"))
                               (str.to_re "H"))
                     a!5)))
(let ((a!7 (re.++ (re.* a!6) (re.union (str.to_re "") (re.++ a!6 (re.* a!6))))))
  (str.in_re varin (re.++ a!4 a!7))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "b")))
      (a!7 (re.union (re.union (re.union (str.to_re "d") (str.to_re "c"))
                               (str.to_re "H"))
                     (str.to_re "E"))))
(let ((a!2 (re.++ (re.union a!1 (str.to_re "H"))
                  (re.* (re.union a!1 (str.to_re "H")))))
      (a!4 (re.++ (re.* (re.union a!1 (str.to_re "H"))) (str.to_re "E"))))
(let ((a!3 (re.++ (re.* (re.union a!1 (str.to_re "H")))
                  (re.union (str.to_re "") a!2)))
      (a!5 (re.union (str.to_re "E") (re.++ (re.union a!1 (str.to_re "H")) a!4))))
(let ((a!6 (re.++ (re.* (re.union a!1 (str.to_re "H"))) a!5)))
(let ((a!8 (re.union a!7 (re.++ (re.union (str.to_re "a") (str.to_re "b")) a!6))))
(let ((a!9 (re.++ (re.* a!8)
                  (re.++ (re.union (str.to_re "a") (str.to_re "b")) a!3))))
(let ((a!10 (re.union (re.++ (re.union (str.to_re "a") (str.to_re "b")) a!3)
                      (re.++ a!8 a!9))))
(let ((a!11 (re.union a!3 (re.++ a!6 (re.++ (re.* a!8) a!10)))))
  (str.in_re varin a!11))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "b")))
      (a!7 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "H"))))
(let ((a!2 (re.++ (re.union a!1 (str.to_re "H"))
                  (re.* (re.union a!1 (str.to_re "H")))))
      (a!4 (re.++ (re.* (re.union a!1 (str.to_re "H"))) (str.to_re "E"))))
(let ((a!3 (re.++ (re.* (re.union a!1 (str.to_re "H")))
                  (re.union (str.to_re "") a!2)))
      (a!5 (re.union (str.to_re "E") (re.++ (re.union a!1 (str.to_re "H")) a!4))))
(let ((a!6 (re.++ (re.* (re.union a!1 (str.to_re "H"))) a!5)))
(let ((a!8 (re.* (re.union (re.union a!7 (str.to_re "E"))
                           (re.++ (str.to_re "b") a!6)))))
(let ((a!9 (re.++ (re.union (re.union a!7 (str.to_re "E"))
                            (re.++ (str.to_re "b") a!6))
                  (re.++ a!8 (re.++ (str.to_re "b") a!3)))))
(let ((a!10 (re.++ a!8 (re.union (re.++ (str.to_re "b") a!3) a!9))))
  (str.in_re varin (re.union a!3 (re.++ a!6 a!10)))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "c"))
                     (str.to_re "b"))))
(let ((a!2 (re.++ (re.union a!1 (str.to_re "H"))
                  (re.* (re.union a!1 (str.to_re "H"))))))
(let ((a!3 (re.++ (re.* (re.union a!1 (str.to_re "H")))
                  (re.union (str.to_re "") a!2))))
  (str.in_re varin a!3)))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "d") (str.to_re "c"))
                               (str.to_re "H"))
                     (str.to_re "E")))
      (a!5 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "b"))
                     (str.to_re "E"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1)))))
      (a!3 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "a") (str.to_re "b"))))))
(let ((a!4 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "a") (str.to_re "b")) a!3))))
(let ((a!6 (re.union a!5 (re.++ (re.union (str.to_re "c") (str.to_re "H")) a!4))))
(let ((a!7 (re.++ (re.* a!6)
                  (re.++ (re.union (str.to_re "c") (str.to_re "H")) a!2))))
(let ((a!8 (re.union (re.++ (re.union (str.to_re "c") (str.to_re "H")) a!2)
                     (re.++ a!6 a!7))))
(let ((a!9 (re.union a!2 (re.++ a!4 (re.++ (re.* a!6) a!8)))))
  (str.in_re varin a!9)))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "d") (str.to_re "c"))
                               (str.to_re "b"))
                     (str.to_re "H")))
      (a!5 (re.union (re.union (re.union (str.to_re "a") (str.to_re "d"))
                               (str.to_re "b"))
                     (str.to_re "H"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1)))))
      (a!3 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "a") (str.to_re "E"))))))
(let ((a!4 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "a") (str.to_re "E")) a!3))))
(let ((a!6 (re.* (re.union (re.union a!5 (str.to_re "E"))
                           (re.++ (str.to_re "c") a!4)))))
(let ((a!7 (re.++ (re.union (re.union a!5 (str.to_re "E"))
                            (re.++ (str.to_re "c") a!4))
                  (re.++ a!6 (re.++ (str.to_re "c") a!2)))))
(let ((a!8 (re.++ a!6 (re.union (re.++ (str.to_re "c") a!2) a!7))))
  (str.in_re varin (re.union a!2 (re.++ a!4 a!8))))))))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "d") (str.to_re "c"))
                               (str.to_re "b"))
                     (str.to_re "H"))))
(let ((a!2 (re.++ (re.* a!1) (re.union (str.to_re "") (re.++ a!1 (re.* a!1))))))
  (str.in_re varin a!2))))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
