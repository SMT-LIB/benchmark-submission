(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun Y () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "e"))
                               (str.to_re "i"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "j"))
                     (str.to_re "a"))))
  (str.in_re Y (re.* (re.union a!4 (str.to_re "b")))))))))
(declare-fun X () String)
(declare-fun reg0 () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "b") (str.to_re "a"))
                               (str.to_re "d"))
                     (str.to_re "c"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "f")) (str.to_re "e"))
                     (str.to_re "h"))))
(let ((a!3 (str.in_re reg0 (re.* (re.union a!2 (str.to_re "g"))))))
  (and true (= X "i") (= Y "e") a!3)))))
(push 1)
(assert (= X "0"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "1j"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "1l"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "1i"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "1k"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kikj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjkl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkij"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kljk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkik"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjki"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ijkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjik"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjlj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kljj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ijkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kikk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0klkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ljjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ikjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kklk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0lkkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjij"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kijk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkki"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ikkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jlkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjlj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkji"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkkl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkjl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jljj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jijk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ljkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkji"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ijjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jklk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jklj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jijj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkik"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ljjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjji"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjjl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jikk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkij"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjij"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jljk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkkl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ijjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjkl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0lkjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkki"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jikj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0klkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jkjk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0lkjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kijj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjlk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kklj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjjl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ljkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjki"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjji"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jlkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kkjl"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0lkkk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ikkj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0kjlk"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0ikjj"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (= X "0jjik"))
(set-info :status unknown)
(check-sat)
(pop 1)
(set-info :status unknown)
(check-sat)
(exit)
