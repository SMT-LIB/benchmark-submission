(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.* (re.union (re.union (str.to_re "A") (str.to_re "W"))
                           (str.to_re "C")))))
  (str.in_re X a!1)))
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "A") (str.to_re "W")))
                  (str.to_re "C")))
      (a!4 (re.* (re.union (re.union (str.to_re "A") (str.to_re "W"))
                           (str.to_re "C")))))
(let ((a!2 (re.union (str.to_re "C")
                     (re.++ (re.union (str.to_re "A") (str.to_re "W")) a!1)))
      (a!5 (re.++ (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C"))
                  a!4)))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "A") (str.to_re "W"))) a!2)))
(let ((a!6 (re.++ (re.++ a!3 a!3) (re.++ a!4 (re.union (str.to_re "") a!5)))))
  (and (str.in_re X a!6) true))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.union (re.union (str.to_re "A") (str.to_re "W")) (str.to_re "C"))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C"))
                  (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CWC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACC"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C"))
                  (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CC"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C"))
                  (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C")))))
(let ((a!2 (re.++ a!1
                  (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C")))))
(let ((a!3 (re.++ a!2
                  (re.union (re.union (str.to_re "A") (str.to_re "W"))
                            (str.to_re "C")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CWAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCWA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCWC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCAW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCCW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCWW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CACA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CWCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAWC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CWWC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CACC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CWCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CACW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CWCW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WACC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WCAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WWCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WCCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WCWC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WCCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "WCCW"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AACC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AWCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACWC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACCW"))
(set-info :status unknown)
(check-sat)
(pop 1)
(check-sat)
(exit)
