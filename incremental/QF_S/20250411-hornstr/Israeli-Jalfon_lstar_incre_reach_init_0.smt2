(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun X () String)
(assert (str.in_re X (re.* (re.union (str.to_re "T") (str.to_re "N")))))
(assert (let ((a!1 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T")))
                  (str.to_re "T")))
      (a!4 (re.++ (re.union (str.to_re "N") (str.to_re "T"))
                  (re.* (re.union (str.to_re "N") (str.to_re "T"))))))
(let ((a!2 (re.union (str.to_re "T")
                     (re.++ (re.union (str.to_re "N") (str.to_re "T")) a!1)))
      (a!5 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T")))
                  (re.union (str.to_re "") a!4))))
(let ((a!3 (re.++ (re.* (re.union (str.to_re "N") (str.to_re "T"))) a!2)))
  (str.in_re X (re.++ (re.++ a!3 a!3) a!5))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X (re.union (str.to_re "T") (str.to_re "N"))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.++ (re.union (str.to_re "T") (str.to_re "N"))
                         (re.union (str.to_re "T") (str.to_re "N")))
                  (re.union (str.to_re "T") (str.to_re "N")))))
  (str.in_re X a!1)))
(set-info :status unknown)
(check-sat)
(assert (distinct X "NTT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TNT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TTN"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TTT"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (str.in_re X
           (re.++ (re.union (str.to_re "T") (str.to_re "N"))
                  (re.union (str.to_re "T") (str.to_re "N")))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TT"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.++ (re.++ (re.union (str.to_re "T") (str.to_re "N"))
                         (re.union (str.to_re "T") (str.to_re "N")))
                  (re.union (str.to_re "T") (str.to_re "N")))))
  (str.in_re X (re.++ a!1 (re.union (str.to_re "T") (str.to_re "N"))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "NNTT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "NTNT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "NTTN"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "NTTT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TNNT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TTNN"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TTTN"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TTNT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TTTT"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TNTN"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "TNTT"))
(set-info :status unknown)
(check-sat)
(pop 1)
