(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "E"))
                               (str.to_re "F"))
                     (str.to_re "A"))))
(let ((a!2 (re.* (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
  (str.in_re X a!2))))
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "D") (str.to_re "B"))
                               (str.to_re "A"))
                     (str.to_re "C")))
      (a!4 (re.union (re.union (re.union (str.to_re "D") (str.to_re "B"))
                               (str.to_re "F"))
                     (str.to_re "A"))))
(let ((a!2 (re.++ a!1
                  (re.++ (re.* a!1) (re.union (str.to_re "F") (str.to_re "E")))))
      (a!5 (re.* (re.union (re.union a!4 (str.to_re "C")) (str.to_re "E")))))
(let ((a!3 (re.++ (re.* a!1)
                  (re.union (re.union (str.to_re "F") (str.to_re "E")) a!2)))
      (a!6 (re.++ (re.union (re.union a!4 (str.to_re "C")) (str.to_re "E")) a!5)))
(let ((a!7 (re.++ (re.++ a!3 a!3) (re.++ a!5 (re.union (str.to_re "") a!6)))))
  (and (str.in_re X a!7) true))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "F"))
                               (str.to_re "E"))
                     (str.to_re "A"))))
  (str.in_re X (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "F"))
                               (str.to_re "E"))
                     (str.to_re "A"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D"))
                  (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
  (str.in_re X a!3)))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "BFF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "F"))
                               (str.to_re "E"))
                     (str.to_re "A"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D"))
                  (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
  (str.in_re X a!2))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "EF"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "B") (str.to_re "F"))
                               (str.to_re "E"))
                     (str.to_re "A"))))
(let ((a!2 (re.++ (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D"))
                  (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
(let ((a!3 (re.++ a!2 (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
(let ((a!4 (re.++ a!3 (re.union (re.union a!1 (str.to_re "C")) (str.to_re "D")))))
  (str.in_re X a!4))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DEDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DFDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DAFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DBFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DCFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "DDFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CBEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CDEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CEDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CFDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CBFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CDFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CBEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CDEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CAFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CBFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CCFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "CDFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AAEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ABEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ADEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFBE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AECE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFCE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFDE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFED"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFFD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFEE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFAF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFBF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AECF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFCF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AEDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AFDF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AAFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ABFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ADFE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AAEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ABEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ADEF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "AAFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ABFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ACFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "ADFF"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FAAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FBAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FCAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FDAE"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFA"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFB"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEDC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFDC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFEC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFFC"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEAD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFAD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FEBD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFBD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FECD"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "FFCD"))
(set-info :status unknown)
(check-sat)
(set-info :status unknown)
(check-sat)
(exit)
