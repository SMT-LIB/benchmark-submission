(set-info :smt-lib-version 2.6)
(set-logic QF_S)
(set-info :source |
Generated by: Hongjian Jiang, Oliver Markgraf, Daniel Stan, Anthony W. Lin, Philipp Ruemmer
Generated on: 2025-04-11
Application: Using String Solvers to solve RMC problems encoded as CHC over Strings
Target solver: cvc5, OSTRICH, Z3, Z3alpha, Z3-noodler
Time limit: 60.0
Benchmarks are extracted by running HornStr https://arg-git.informatik.uni-kl.de/pub/string-chc-lib on all benchmarks
provided in the repository and gathering the string queries sent to the string solvers.
|)
(declare-fun X () String)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "e"))
                               (str.to_re "i"))
                     (str.to_re "h"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "j"))
                     (str.to_re "a"))))
  (str.in_re X (re.* (re.union a!4 (str.to_re "b")))))))))
(assert (let ((a!1 (re.union (str.to_re "0")
                     (re.++ (str.to_re "1")
                            (re.union (str.to_re "i") (str.to_re "l")))))
      (a!3 (re.++ (re.union (str.to_re "j") (str.to_re "k"))
                  (re.union (str.to_re "i") (str.to_re "l"))))
      (a!4 (re.++ (re.union (str.to_re "j") (str.to_re "k"))
                  (re.union (str.to_re "j") (str.to_re "k")))))
(let ((a!2 (re.union a!1
                     (re.++ (str.to_re "1")
                            (re.union (str.to_re "j") (str.to_re "k")))))
      (a!5 (re.union (re.++ (str.to_re "1")
                            (re.union (str.to_re "j") (str.to_re "k")))
                     (re.++ (str.to_re "0") a!4)))
      (a!6 (re.union a!3 (re.++ a!4 (re.++ (re.* a!4) a!3))))
      (a!16 (re.++ (re.* a!4)
                   (re.++ a!3 (re.union (str.to_re "j") (str.to_re "k")))))
      (a!19 (re.++ (re.++ (re.union (str.to_re "j") (str.to_re "k")) a!3)
                   (re.union (str.to_re "j") (str.to_re "k"))))
      (a!23 (re.++ a!4
                   (re.++ (re.* a!4) (re.union (str.to_re "j") (str.to_re "k"))))))
(let ((a!7 (re.union (re.union a!2 (re.++ (str.to_re "0") a!3))
                     (re.++ a!5 (re.++ (re.* a!4) a!6))))
      (a!8 (re.++ (re.++ (re.union (str.to_re "j") (str.to_re "k")) a!4)
                  (re.++ (re.* a!4) a!6)))
      (a!12 (re.++ (re.++ (str.to_re "0")
                          (re.union (str.to_re "j") (str.to_re "k")))
                   (re.++ (re.* a!4) a!6)))
      (a!15 (re.++ (re.union a!2 (re.++ (str.to_re "0") a!3))
                   (re.union (str.to_re "j") (str.to_re "k"))))
      (a!17 (re.union (re.++ a!3 (re.union (str.to_re "j") (str.to_re "k")))
                      (re.++ a!4 a!16)))
      (a!24 (re.++ (re.* a!4)
                   (re.union (re.union (str.to_re "j") (str.to_re "k")) a!23))))
(let ((a!9 (re.union (re.++ (re.union (str.to_re "j") (str.to_re "k")) a!3) a!8))
      (a!13 (re.union (re.++ (str.to_re "0")
                             (re.union (str.to_re "i") (str.to_re "l")))
                      a!12))
      (a!18 (re.union a!15 (re.++ a!5 (re.++ (re.* a!4) a!17))))
      (a!20 (re.++ (re.++ (re.union (str.to_re "j") (str.to_re "k")) a!4)
                   (re.++ (re.* a!4) a!17))))
(let ((a!10 (re.union a!9 (re.++ a!4 (re.++ (re.* a!4) a!9))))
      (a!21 (re.union (re.union a!19 a!20)
                      (re.++ a!4 (re.++ (re.* a!4) (re.union a!19 a!20))))))
(let ((a!11 (re.++ (re.++ (str.to_re "0")
                          (re.union (str.to_re "j") (str.to_re "k")))
                   (re.++ (re.* a!4) a!10)))
      (a!22 (re.++ (re.++ (str.to_re "0")
                          (re.union (str.to_re "j") (str.to_re "k")))
                   (re.++ (re.* a!4) a!21))))
(let ((a!14 (re.union (re.union a!7 a!11)
                      (re.++ a!13 (re.union (str.to_re "j") (str.to_re "k"))))))
(let ((a!25 (re.union a!14
                      (re.++ (re.union (re.union a!18 a!22) (re.++ a!13 a!4))
                             a!24))))
  (str.in_re X a!25))))))))))
(push 1)
(assert (str.in_re X (str.to_re "")))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "i"))
                               (str.to_re "h"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "e"))
                     (str.to_re "a"))))
  (str.in_re X (re.union a!4 (str.to_re "b"))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "i"))
                               (str.to_re "h"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "e"))
                     (str.to_re "a"))))
  (str.in_re X
             (re.++ (re.union a!4 (str.to_re "b"))
                    (re.union a!4 (str.to_re "b")))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1j"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1k"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1i"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "1l"))
(set-info :status unknown)
(check-sat)
(pop 1)
(push 1)
(assert (let ((a!1 (re.union (re.union (re.union (str.to_re "0") (str.to_re "i"))
                               (str.to_re "h"))
                     (str.to_re "j"))))
(let ((a!2 (re.union (re.union (re.union a!1 (str.to_re "1")) (str.to_re "g"))
                     (str.to_re "f"))))
(let ((a!3 (re.union (re.union (re.union a!2 (str.to_re "c")) (str.to_re "l"))
                     (str.to_re "k"))))
(let ((a!4 (re.union (re.union (re.union a!3 (str.to_re "d")) (str.to_re "e"))
                     (str.to_re "a"))))
(let ((a!5 (re.++ (re.++ (re.union a!4 (str.to_re "b"))
                         (re.union a!4 (str.to_re "b")))
                  (re.union a!4 (str.to_re "b")))))
(let ((a!6 (re.++ (re.++ a!5 (re.union a!4 (str.to_re "b")))
                  (re.union a!4 (str.to_re "b")))))
  (str.in_re X a!6))))))))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ijjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ljjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ikjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0lkjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ijkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ljkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ikkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0lkkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ijjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ljjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ikjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0lkjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ijkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ljkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0ikkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0lkkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jijj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kijj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jljj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kljj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jikj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kikj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jlkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0klkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jijk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kijk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jljk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kljk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jikk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kikk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jlkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0klkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkjj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkkj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkjk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkkk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjji"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjji"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkji"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkji"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjki"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjki"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkki"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkki"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjjl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjjl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkjl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkjl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjkl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjkl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkkl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkkl"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjij"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjij"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkij"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkij"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjlj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjlj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jklj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kklj"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjik"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjik"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jkik"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kkik"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jjlk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kjlk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0jklk"))
(set-info :status unknown)
(check-sat)
(assert (distinct X "0kklk"))
(set-info :status unknown)
(check-sat)
(pop 1)
